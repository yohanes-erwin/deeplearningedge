
stm32f446_hal_nand_validation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e6c4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010ec  0800e894  0800e894  0001e894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f980  0800f980  000205e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800f980  0800f980  0001f980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f988  0800f988  000205e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f988  0800f988  0001f988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f98c  0800f98c  0001f98c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005e0  20000000  0800f990  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004fc  200005e0  0800ff70  000205e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c04  20000adc  0800ff70  00020adc  2**0
                  ALLOC
 11 .ARM.attributes 00000034  00000000  00000000  000205e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016d26  00000000  00000000  00020614  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000035fc  00000000  00000000  0003733a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e08  00000000  00000000  0003a938  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cd0  00000000  00000000  0003b740  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025d78  00000000  00000000  0003c410  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000df22  00000000  00000000  00062188  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d7d41  00000000  00000000  000700aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      00002e23  00000000  00000000  00147deb  2**0
                  CONTENTS, READONLY
 20 .iar.rtmodel  00000318  00000000  00000000  0014ac0e  2**0
                  CONTENTS, READONLY
 21 .iar_vfe_header 00000030  00000000  00000000  0014af28  2**2
                  CONTENTS, READONLY
 22 .debug_frame  00008320  00000000  00000000  0014af58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200005e0 	.word	0x200005e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e87c 	.word	0x0800e87c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200005e4 	.word	0x200005e4
 800020c:	0800e87c 	.word	0x0800e87c

08000210 <ai_inspector_default_config>:
 8000210:	b470      	push	{r4, r5, r6}
 8000212:	b084      	sub	sp, #16
 8000214:	4669      	mov	r1, sp
 8000216:	2200      	movs	r2, #0
 8000218:	2300      	movs	r3, #0
 800021a:	2400      	movs	r4, #0
 800021c:	2500      	movs	r5, #0
 800021e:	e881 003c 	stmia.w	r1, {r2, r3, r4, r5}
 8000222:	2100      	movs	r1, #0
 8000224:	f041 0101 	orr.w	r1, r1, #1
 8000228:	f88d 1000 	strb.w	r1, [sp]
 800022c:	466a      	mov	r2, sp
 800022e:	e892 0078 	ldmia.w	r2, {r3, r4, r5, r6}
 8000232:	e880 0078 	stmia.w	r0, {r3, r4, r5, r6}
 8000236:	b004      	add	sp, #16
 8000238:	bc70      	pop	{r4, r5, r6}
 800023a:	4770      	bx	lr

0800023c <ai_inspector_create>:
 800023c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800023e:	0004      	movs	r4, r0
 8000240:	b081      	sub	sp, #4
 8000242:	bf08      	it	eq
 8000244:	2000      	moveq	r0, #0
 8000246:	d026      	beq.n	8000296 <ai_inspector_create+0x5a>
 8000248:	4814      	ldr	r0, [pc, #80]	; (800029c <.text_6>)
 800024a:	2200      	movs	r2, #0
 800024c:	2300      	movs	r3, #0
 800024e:	2500      	movs	r5, #0
 8000250:	c02c      	stmia	r0!, {r2, r3, r5}
 8000252:	c02c      	stmia	r0!, {r2, r3, r5}
 8000254:	c02c      	stmia	r0!, {r2, r3, r5}
 8000256:	3824      	subs	r0, #36	; 0x24
 8000258:	2601      	movs	r6, #1
 800025a:	f100 0218 	add.w	r2, r0, #24
 800025e:	f100 0318 	add.w	r3, r0, #24
 8000262:	7286      	strb	r6, [r0, #10]
 8000264:	8406      	strh	r6, [r0, #32]
 8000266:	6182      	str	r2, [r0, #24]
 8000268:	61c3      	str	r3, [r0, #28]
 800026a:	b131      	cbz	r1, 800027a <ai_inspector_create+0x3e>
 800026c:	780a      	ldrb	r2, [r1, #0]
 800026e:	784b      	ldrb	r3, [r1, #1]
 8000270:	788d      	ldrb	r5, [r1, #2]
 8000272:	684e      	ldr	r6, [r1, #4]
 8000274:	688f      	ldr	r7, [r1, #8]
 8000276:	68c9      	ldr	r1, [r1, #12]
 8000278:	e003      	b.n	8000282 <ai_inspector_create+0x46>
 800027a:	2201      	movs	r2, #1
 800027c:	2300      	movs	r3, #0
 800027e:	2600      	movs	r6, #0
 8000280:	2700      	movs	r7, #0
 8000282:	7202      	strb	r2, [r0, #8]
 8000284:	7243      	strb	r3, [r0, #9]
 8000286:	6141      	str	r1, [r0, #20]
 8000288:	7285      	strb	r5, [r0, #10]
 800028a:	60c6      	str	r6, [r0, #12]
 800028c:	6107      	str	r7, [r0, #16]
 800028e:	f000 fb7d 	bl	800098c <ai_platform_context_release>
 8000292:	6020      	str	r0, [r4, #0]
 8000294:	2001      	movs	r0, #1
 8000296:	b001      	add	sp, #4
 8000298:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800029c <.text_6>:
 800029c:	200005fc 	.word	0x200005fc

080002a0 <ai_inspector_destroy>:
 80002a0:	b570      	push	{r4, r5, r6, lr}
 80002a2:	f000 fb55 	bl	8000950 <ai_platform_context_acquire>
 80002a6:	0004      	movs	r4, r0
 80002a8:	d101      	bne.n	80002ae <ai_inspector_destroy+0xe>
 80002aa:	2000      	movs	r0, #0
 80002ac:	bd70      	pop	{r4, r5, r6, pc}
 80002ae:	69a0      	ldr	r0, [r4, #24]
 80002b0:	f1a0 0534 	sub.w	r5, r0, #52	; 0x34
 80002b4:	f104 0218 	add.w	r2, r4, #24
 80002b8:	6b69      	ldr	r1, [r5, #52]	; 0x34
 80002ba:	4290      	cmp	r0, r2
 80002bc:	f1a1 0634 	sub.w	r6, r1, #52	; 0x34
 80002c0:	d015      	beq.n	80002ee <ai_inspector_destroy+0x4e>
 80002c2:	6828      	ldr	r0, [r5, #0]
 80002c4:	f001 f9ca 	bl	800165c <ai_network_inspect_destroy>
 80002c8:	6b69      	ldr	r1, [r5, #52]	; 0x34
 80002ca:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 80002cc:	6048      	str	r0, [r1, #4]
 80002ce:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 80002d0:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80002d2:	6008      	str	r0, [r1, #0]
 80002d4:	4628      	mov	r0, r5
 80002d6:	f000 fd6a 	bl	8000dae <core_mem_free>
 80002da:	6b70      	ldr	r0, [r6, #52]	; 0x34
 80002dc:	f104 0218 	add.w	r2, r4, #24
 80002e0:	4635      	mov	r5, r6
 80002e2:	f105 0134 	add.w	r1, r5, #52	; 0x34
 80002e6:	4291      	cmp	r1, r2
 80002e8:	f1a0 0634 	sub.w	r6, r0, #52	; 0x34
 80002ec:	d1e9      	bne.n	80002c2 <ai_inspector_destroy+0x22>
 80002ee:	2001      	movs	r0, #1
 80002f0:	bd70      	pop	{r4, r5, r6, pc}

080002f2 <ai_inspector_bind_network>:
 80002f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002f4:	b081      	sub	sp, #4
 80002f6:	460c      	mov	r4, r1
 80002f8:	f000 fb2a 	bl	8000950 <ai_platform_context_acquire>
 80002fc:	0005      	movs	r5, r0
 80002fe:	bf18      	it	ne
 8000300:	2c00      	cmpne	r4, #0
 8000302:	d033      	beq.n	800036c <ai_inspector_bind_network+0x7a>
 8000304:	6820      	ldr	r0, [r4, #0]
 8000306:	b388      	cbz	r0, 800036c <ai_inspector_bind_network+0x7a>
 8000308:	203c      	movs	r0, #60	; 0x3c
 800030a:	f000 fd43 	bl	8000d94 <core_mem_alloc>
 800030e:	0006      	movs	r6, r0
 8000310:	d02c      	beq.n	800036c <ai_inspector_bind_network+0x7a>
 8000312:	8c28      	ldrh	r0, [r5, #32]
 8000314:	1c41      	adds	r1, r0, #1
 8000316:	8429      	strh	r1, [r5, #32]
 8000318:	8630      	strh	r0, [r6, #48]	; 0x30
 800031a:	f105 0118 	add.w	r1, r5, #24
 800031e:	e8b4 508d 	ldmia.w	r4!, {r0, r2, r3, r7, ip, lr}
 8000322:	e8a6 508d 	stmia.w	r6!, {r0, r2, r3, r7, ip, lr}
 8000326:	e8b4 508d 	ldmia.w	r4!, {r0, r2, r3, r7, ip, lr}
 800032a:	e8a6 508d 	stmia.w	r6!, {r0, r2, r3, r7, ip, lr}
 800032e:	3e30      	subs	r6, #48	; 0x30
 8000330:	f106 0434 	add.w	r4, r6, #52	; 0x34
 8000334:	6024      	str	r4, [r4, #0]
 8000336:	63b4      	str	r4, [r6, #56]	; 0x38
 8000338:	69a8      	ldr	r0, [r5, #24]
 800033a:	6020      	str	r0, [r4, #0]
 800033c:	6061      	str	r1, [r4, #4]
 800033e:	6044      	str	r4, [r0, #4]
 8000340:	61ac      	str	r4, [r5, #24]
 8000342:	f105 0108 	add.w	r1, r5, #8
 8000346:	6830      	ldr	r0, [r6, #0]
 8000348:	f001 f926 	bl	8001598 <ai_network_inspect_init>
 800034c:	b110      	cbz	r0, 8000354 <ai_inspector_bind_network+0x62>
 800034e:	8e30      	ldrh	r0, [r6, #48]	; 0x30
 8000350:	b001      	add	sp, #4
 8000352:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000354:	6821      	ldr	r1, [r4, #0]
 8000356:	6bb0      	ldr	r0, [r6, #56]	; 0x38
 8000358:	6048      	str	r0, [r1, #4]
 800035a:	6bb0      	ldr	r0, [r6, #56]	; 0x38
 800035c:	6822      	ldr	r2, [r4, #0]
 800035e:	6002      	str	r2, [r0, #0]
 8000360:	4630      	mov	r0, r6
 8000362:	f000 fd24 	bl	8000dae <core_mem_free>
 8000366:	8c28      	ldrh	r0, [r5, #32]
 8000368:	1e41      	subs	r1, r0, #1
 800036a:	8429      	strh	r1, [r5, #32]
 800036c:	2000      	movs	r0, #0
 800036e:	b001      	add	sp, #4
 8000370:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000374 <ai_inspector_unbind_network>:
 8000374:	b530      	push	{r4, r5, lr}
 8000376:	b081      	sub	sp, #4
 8000378:	460d      	mov	r5, r1
 800037a:	f000 fae9 	bl	8000950 <ai_platform_context_acquire>
 800037e:	b368      	cbz	r0, 80003dc <ai_inspector_unbind_network+0x68>
 8000380:	0029      	movs	r1, r5
 8000382:	d02b      	beq.n	80003dc <ai_inspector_unbind_network+0x68>
 8000384:	f850 1f18 	ldr.w	r1, [r0, #24]!
 8000388:	f1a1 0434 	sub.w	r4, r1, #52	; 0x34
 800038c:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8000390:	4282      	cmp	r2, r0
 8000392:	d023      	beq.n	80003dc <ai_inspector_unbind_network+0x68>
 8000394:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 8000396:	42a9      	cmp	r1, r5
 8000398:	d023      	beq.n	80003e2 <ai_inspector_unbind_network+0x6e>
 800039a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800039c:	f1a2 0434 	sub.w	r4, r2, #52	; 0x34
 80003a0:	f104 0134 	add.w	r1, r4, #52	; 0x34
 80003a4:	4281      	cmp	r1, r0
 80003a6:	d019      	beq.n	80003dc <ai_inspector_unbind_network+0x68>
 80003a8:	8e22      	ldrh	r2, [r4, #48]	; 0x30
 80003aa:	42aa      	cmp	r2, r5
 80003ac:	d019      	beq.n	80003e2 <ai_inspector_unbind_network+0x6e>
 80003ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80003b0:	f1a1 0434 	sub.w	r4, r1, #52	; 0x34
 80003b4:	f104 0234 	add.w	r2, r4, #52	; 0x34
 80003b8:	4282      	cmp	r2, r0
 80003ba:	d00f      	beq.n	80003dc <ai_inspector_unbind_network+0x68>
 80003bc:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 80003be:	42a9      	cmp	r1, r5
 80003c0:	d00f      	beq.n	80003e2 <ai_inspector_unbind_network+0x6e>
 80003c2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80003c4:	f1a2 0434 	sub.w	r4, r2, #52	; 0x34
 80003c8:	f104 0134 	add.w	r1, r4, #52	; 0x34
 80003cc:	4281      	cmp	r1, r0
 80003ce:	d005      	beq.n	80003dc <ai_inspector_unbind_network+0x68>
 80003d0:	8e22      	ldrh	r2, [r4, #48]	; 0x30
 80003d2:	42aa      	cmp	r2, r5
 80003d4:	bf18      	it	ne
 80003d6:	6b61      	ldrne	r1, [r4, #52]	; 0x34
 80003d8:	d1d6      	bne.n	8000388 <ai_inspector_unbind_network+0x14>
 80003da:	e002      	b.n	80003e2 <ai_inspector_unbind_network+0x6e>
 80003dc:	2000      	movs	r0, #0
 80003de:	b001      	add	sp, #4
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	2c00      	cmp	r4, #0
 80003e4:	d0fa      	beq.n	80003dc <ai_inspector_unbind_network+0x68>
 80003e6:	6820      	ldr	r0, [r4, #0]
 80003e8:	f001 f938 	bl	800165c <ai_network_inspect_destroy>
 80003ec:	2800      	cmp	r0, #0
 80003ee:	d0f6      	beq.n	80003de <ai_inspector_unbind_network+0x6a>
 80003f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80003f2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80003f4:	6048      	str	r0, [r1, #4]
 80003f6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80003f8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80003fa:	6008      	str	r0, [r1, #0]
 80003fc:	4620      	mov	r0, r4
 80003fe:	f000 fcd6 	bl	8000dae <core_mem_free>
 8000402:	2001      	movs	r0, #1
 8000404:	b001      	add	sp, #4
 8000406:	bd30      	pop	{r4, r5, pc}

08000408 <ai_inspector_get_report>:
 8000408:	b530      	push	{r4, r5, lr}
 800040a:	b081      	sub	sp, #4
 800040c:	460d      	mov	r5, r1
 800040e:	4614      	mov	r4, r2
 8000410:	f000 fa9e 	bl	8000950 <ai_platform_context_acquire>
 8000414:	2800      	cmp	r0, #0
 8000416:	bf18      	it	ne
 8000418:	2c00      	cmpne	r4, #0
 800041a:	d028      	beq.n	800046e <ai_inspector_get_report+0x66>
 800041c:	f100 0118 	add.w	r1, r0, #24
 8000420:	6808      	ldr	r0, [r1, #0]
 8000422:	3834      	subs	r0, #52	; 0x34
 8000424:	f100 0234 	add.w	r2, r0, #52	; 0x34
 8000428:	428a      	cmp	r2, r1
 800042a:	d020      	beq.n	800046e <ai_inspector_get_report+0x66>
 800042c:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 800042e:	42ab      	cmp	r3, r5
 8000430:	d020      	beq.n	8000474 <ai_inspector_get_report+0x6c>
 8000432:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8000434:	3834      	subs	r0, #52	; 0x34
 8000436:	f100 0234 	add.w	r2, r0, #52	; 0x34
 800043a:	428a      	cmp	r2, r1
 800043c:	d017      	beq.n	800046e <ai_inspector_get_report+0x66>
 800043e:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8000440:	42ab      	cmp	r3, r5
 8000442:	d017      	beq.n	8000474 <ai_inspector_get_report+0x6c>
 8000444:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8000446:	3834      	subs	r0, #52	; 0x34
 8000448:	f100 0234 	add.w	r2, r0, #52	; 0x34
 800044c:	428a      	cmp	r2, r1
 800044e:	d00e      	beq.n	800046e <ai_inspector_get_report+0x66>
 8000450:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8000452:	42ab      	cmp	r3, r5
 8000454:	d00e      	beq.n	8000474 <ai_inspector_get_report+0x6c>
 8000456:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8000458:	3834      	subs	r0, #52	; 0x34
 800045a:	f100 0234 	add.w	r2, r0, #52	; 0x34
 800045e:	428a      	cmp	r2, r1
 8000460:	d005      	beq.n	800046e <ai_inspector_get_report+0x66>
 8000462:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8000464:	42ab      	cmp	r3, r5
 8000466:	bf18      	it	ne
 8000468:	6b40      	ldrne	r0, [r0, #52]	; 0x34
 800046a:	d1da      	bne.n	8000422 <ai_inspector_get_report+0x1a>
 800046c:	e002      	b.n	8000474 <ai_inspector_get_report+0x6c>
 800046e:	2000      	movs	r0, #0
 8000470:	b001      	add	sp, #4
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	2800      	cmp	r0, #0
 8000476:	d0fa      	beq.n	800046e <ai_inspector_get_report+0x66>
 8000478:	6800      	ldr	r0, [r0, #0]
 800047a:	4621      	mov	r1, r4
 800047c:	b001      	add	sp, #4
 800047e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000482:	f001 b8d3 	b.w	800162c <ai_network_inspect_get_report>

08000486 <ai_inspector_run>:
 8000486:	b570      	push	{r4, r5, r6, lr}
 8000488:	460e      	mov	r6, r1
 800048a:	4614      	mov	r4, r2
 800048c:	461d      	mov	r5, r3
 800048e:	f000 fa5f 	bl	8000950 <ai_platform_context_acquire>
 8000492:	2800      	cmp	r0, #0
 8000494:	bf18      	it	ne
 8000496:	2c00      	cmpne	r4, #0
 8000498:	d028      	beq.n	80004ec <ai_inspector_run+0x66>
 800049a:	f100 0118 	add.w	r1, r0, #24
 800049e:	6808      	ldr	r0, [r1, #0]
 80004a0:	3834      	subs	r0, #52	; 0x34
 80004a2:	f100 0234 	add.w	r2, r0, #52	; 0x34
 80004a6:	428a      	cmp	r2, r1
 80004a8:	d020      	beq.n	80004ec <ai_inspector_run+0x66>
 80004aa:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 80004ac:	42b3      	cmp	r3, r6
 80004ae:	d01f      	beq.n	80004f0 <ai_inspector_run+0x6a>
 80004b0:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80004b2:	3834      	subs	r0, #52	; 0x34
 80004b4:	f100 0234 	add.w	r2, r0, #52	; 0x34
 80004b8:	428a      	cmp	r2, r1
 80004ba:	d017      	beq.n	80004ec <ai_inspector_run+0x66>
 80004bc:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 80004be:	42b3      	cmp	r3, r6
 80004c0:	d016      	beq.n	80004f0 <ai_inspector_run+0x6a>
 80004c2:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80004c4:	3834      	subs	r0, #52	; 0x34
 80004c6:	f100 0234 	add.w	r2, r0, #52	; 0x34
 80004ca:	428a      	cmp	r2, r1
 80004cc:	d00e      	beq.n	80004ec <ai_inspector_run+0x66>
 80004ce:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 80004d0:	42b3      	cmp	r3, r6
 80004d2:	d00d      	beq.n	80004f0 <ai_inspector_run+0x6a>
 80004d4:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80004d6:	3834      	subs	r0, #52	; 0x34
 80004d8:	f100 0234 	add.w	r2, r0, #52	; 0x34
 80004dc:	428a      	cmp	r2, r1
 80004de:	d005      	beq.n	80004ec <ai_inspector_run+0x66>
 80004e0:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 80004e2:	42b3      	cmp	r3, r6
 80004e4:	bf18      	it	ne
 80004e6:	6b40      	ldrne	r0, [r0, #52]	; 0x34
 80004e8:	d1da      	bne.n	80004a0 <ai_inspector_run+0x1a>
 80004ea:	e001      	b.n	80004f0 <ai_inspector_run+0x6a>
 80004ec:	2000      	movs	r0, #0
 80004ee:	bd70      	pop	{r4, r5, r6, pc}
 80004f0:	2800      	cmp	r0, #0
 80004f2:	d0fb      	beq.n	80004ec <ai_inspector_run+0x66>
 80004f4:	6800      	ldr	r0, [r0, #0]
 80004f6:	462a      	mov	r2, r5
 80004f8:	4621      	mov	r1, r4
 80004fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80004fe:	f000 bbe0 	b.w	8000cc2 <ai_platform_network_process>
	...

08000504 <_ai_platform_get_io_buffers>:
 8000504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000508:	b081      	sub	sp, #4
 800050a:	468b      	mov	fp, r1
 800050c:	6801      	ldr	r1, [r0, #0]
 800050e:	680f      	ldr	r7, [r1, #0]
 8000510:	8901      	ldrh	r1, [r0, #8]
 8000512:	2600      	movs	r6, #0
 8000514:	46b0      	mov	r8, r6
 8000516:	f04f 0904 	mov.w	r9, #4
 800051a:	46b2      	mov	sl, r6
 800051c:	b339      	cbz	r1, 800056e <_ai_platform_get_io_buffers+0x6a>
 800051e:	4604      	mov	r4, r0
 8000520:	6860      	ldr	r0, [r4, #4]
 8000522:	683a      	ldr	r2, [r7, #0]
 8000524:	6841      	ldr	r1, [r0, #4]
 8000526:	6810      	ldr	r0, [r2, #0]
 8000528:	eb01 050a 	add.w	r5, r1, sl
 800052c:	f003 ff94 	bl	8004458 <ai_array_to_buffer_fmt>
 8000530:	6028      	str	r0, [r5, #0]
 8000532:	2101      	movs	r1, #1
 8000534:	80a9      	strh	r1, [r5, #4]
 8000536:	1c76      	adds	r6, r6, #1
 8000538:	6938      	ldr	r0, [r7, #16]
 800053a:	80e8      	strh	r0, [r5, #6]
 800053c:	f108 0801 	add.w	r8, r8, #1
 8000540:	68f9      	ldr	r1, [r7, #12]
 8000542:	8129      	strh	r1, [r5, #8]
 8000544:	f10a 0a14 	add.w	sl, sl, #20
 8000548:	68b8      	ldr	r0, [r7, #8]
 800054a:	60e8      	str	r0, [r5, #12]
 800054c:	6839      	ldr	r1, [r7, #0]
 800054e:	6888      	ldr	r0, [r1, #8]
 8000550:	6128      	str	r0, [r5, #16]
 8000552:	6820      	ldr	r0, [r4, #0]
 8000554:	f850 7009 	ldr.w	r7, [r0, r9]
 8000558:	8920      	ldrh	r0, [r4, #8]
 800055a:	4580      	cmp	r8, r0
 800055c:	f109 0904 	add.w	r9, r9, #4
 8000560:	d3de      	bcc.n	8000520 <_ai_platform_get_io_buffers+0x1c>
 8000562:	b2b0      	uxth	r0, r6
 8000564:	b118      	cbz	r0, 800056e <_ai_platform_get_io_buffers+0x6a>
 8000566:	6860      	ldr	r0, [r4, #4]
 8000568:	6841      	ldr	r1, [r0, #4]
 800056a:	f8cb 1000 	str.w	r1, [fp]
 800056e:	b2b0      	uxth	r0, r6
 8000570:	b001      	add	sp, #4
 8000572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000576 <_platform_network_state_setup>:
 8000576:	b430      	push	{r4, r5}
 8000578:	6914      	ldr	r4, [r2, #16]
 800057a:	6a13      	ldr	r3, [r2, #32]
 800057c:	435c      	muls	r4, r3
 800057e:	6084      	str	r4, [r0, #8]
 8000580:	888d      	ldrh	r5, [r1, #4]
 8000582:	436c      	muls	r4, r5
 8000584:	60c4      	str	r4, [r0, #12]
 8000586:	6909      	ldr	r1, [r1, #16]
 8000588:	68c3      	ldr	r3, [r0, #12]
 800058a:	6041      	str	r1, [r0, #4]
 800058c:	4419      	add	r1, r3
 800058e:	6001      	str	r1, [r0, #0]
 8000590:	6812      	ldr	r2, [r2, #0]
 8000592:	6814      	ldr	r4, [r2, #0]
 8000594:	00a1      	lsls	r1, r4, #2
 8000596:	d407      	bmi.n	80005a8 <_platform_network_state_setup+0x32>
 8000598:	6894      	ldr	r4, [r2, #8]
 800059a:	68d1      	ldr	r1, [r2, #12]
 800059c:	6843      	ldr	r3, [r0, #4]
 800059e:	1a64      	subs	r4, r4, r1
 80005a0:	1919      	adds	r1, r3, r4
 80005a2:	6091      	str	r1, [r2, #8]
 80005a4:	6840      	ldr	r0, [r0, #4]
 80005a6:	60d0      	str	r0, [r2, #12]
 80005a8:	bc30      	pop	{r4, r5}
 80005aa:	4770      	bx	lr

080005ac <_platform_network_state_update_input>:
 80005ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80005b0:	4605      	mov	r5, r0
 80005b2:	2600      	movs	r6, #0
 80005b4:	6828      	ldr	r0, [r5, #0]
 80005b6:	6801      	ldr	r1, [r0, #0]
 80005b8:	8928      	ldrh	r0, [r5, #8]
 80005ba:	2704      	movs	r7, #4
 80005bc:	46b0      	mov	r8, r6
 80005be:	b338      	cbz	r0, 8000610 <_platform_network_state_update_input+0x64>
 80005c0:	6868      	ldr	r0, [r5, #4]
 80005c2:	6802      	ldr	r2, [r0, #0]
 80005c4:	eb02 0408 	add.w	r4, r2, r8
 80005c8:	680a      	ldr	r2, [r1, #0]
 80005ca:	6813      	ldr	r3, [r2, #0]
 80005cc:	6890      	ldr	r0, [r2, #8]
 80005ce:	6861      	ldr	r1, [r4, #4]
 80005d0:	009b      	lsls	r3, r3, #2
 80005d2:	d503      	bpl.n	80005dc <_platform_network_state_update_input+0x30>
 80005d4:	68a2      	ldr	r2, [r4, #8]
 80005d6:	f00c f823 	bl	800c620 <__aeabi_memcpy>
 80005da:	e005      	b.n	80005e8 <_platform_network_state_update_input+0x3c>
 80005dc:	68d3      	ldr	r3, [r2, #12]
 80005de:	1ac0      	subs	r0, r0, r3
 80005e0:	180b      	adds	r3, r1, r0
 80005e2:	6093      	str	r3, [r2, #8]
 80005e4:	6860      	ldr	r0, [r4, #4]
 80005e6:	60d0      	str	r0, [r2, #12]
 80005e8:	6860      	ldr	r0, [r4, #4]
 80005ea:	68a1      	ldr	r1, [r4, #8]
 80005ec:	4408      	add	r0, r1
 80005ee:	6821      	ldr	r1, [r4, #0]
 80005f0:	6060      	str	r0, [r4, #4]
 80005f2:	4288      	cmp	r0, r1
 80005f4:	d302      	bcc.n	80005fc <_platform_network_state_update_input+0x50>
 80005f6:	68e0      	ldr	r0, [r4, #12]
 80005f8:	4240      	negs	r0, r0
 80005fa:	4408      	add	r0, r1
 80005fc:	6060      	str	r0, [r4, #4]
 80005fe:	1c76      	adds	r6, r6, #1
 8000600:	6828      	ldr	r0, [r5, #0]
 8000602:	59c1      	ldr	r1, [r0, r7]
 8000604:	8928      	ldrh	r0, [r5, #8]
 8000606:	1d3f      	adds	r7, r7, #4
 8000608:	4286      	cmp	r6, r0
 800060a:	f108 0810 	add.w	r8, r8, #16
 800060e:	d3d7      	bcc.n	80005c0 <_platform_network_state_update_input+0x14>
 8000610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000614 <_platform_network_state_update_output>:
 8000614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000618:	4605      	mov	r5, r0
 800061a:	2600      	movs	r6, #0
 800061c:	6828      	ldr	r0, [r5, #0]
 800061e:	6801      	ldr	r1, [r0, #0]
 8000620:	8928      	ldrh	r0, [r5, #8]
 8000622:	2704      	movs	r7, #4
 8000624:	46b0      	mov	r8, r6
 8000626:	b388      	cbz	r0, 800068c <_platform_network_state_update_output+0x78>
 8000628:	6868      	ldr	r0, [r5, #4]
 800062a:	6809      	ldr	r1, [r1, #0]
 800062c:	6802      	ldr	r2, [r0, #0]
 800062e:	680b      	ldr	r3, [r1, #0]
 8000630:	eb02 0408 	add.w	r4, r2, r8
 8000634:	009b      	lsls	r3, r3, #2
 8000636:	6860      	ldr	r0, [r4, #4]
 8000638:	68a2      	ldr	r2, [r4, #8]
 800063a:	d50e      	bpl.n	800065a <_platform_network_state_update_output+0x46>
 800063c:	6889      	ldr	r1, [r1, #8]
 800063e:	f00b ffef 	bl	800c620 <__aeabi_memcpy>
 8000642:	6862      	ldr	r2, [r4, #4]
 8000644:	68a0      	ldr	r0, [r4, #8]
 8000646:	6821      	ldr	r1, [r4, #0]
 8000648:	4410      	add	r0, r2
 800064a:	4288      	cmp	r0, r1
 800064c:	6060      	str	r0, [r4, #4]
 800064e:	d302      	bcc.n	8000656 <_platform_network_state_update_output+0x42>
 8000650:	68e0      	ldr	r0, [r4, #12]
 8000652:	4240      	negs	r0, r0
 8000654:	4408      	add	r0, r1
 8000656:	6060      	str	r0, [r4, #4]
 8000658:	e00f      	b.n	800067a <_platform_network_state_update_output+0x66>
 800065a:	4410      	add	r0, r2
 800065c:	6822      	ldr	r2, [r4, #0]
 800065e:	6060      	str	r0, [r4, #4]
 8000660:	4290      	cmp	r0, r2
 8000662:	d302      	bcc.n	800066a <_platform_network_state_update_output+0x56>
 8000664:	68e0      	ldr	r0, [r4, #12]
 8000666:	4240      	negs	r0, r0
 8000668:	4410      	add	r0, r2
 800066a:	6060      	str	r0, [r4, #4]
 800066c:	688a      	ldr	r2, [r1, #8]
 800066e:	68cb      	ldr	r3, [r1, #12]
 8000670:	1ad2      	subs	r2, r2, r3
 8000672:	4410      	add	r0, r2
 8000674:	6088      	str	r0, [r1, #8]
 8000676:	6862      	ldr	r2, [r4, #4]
 8000678:	60ca      	str	r2, [r1, #12]
 800067a:	1c76      	adds	r6, r6, #1
 800067c:	6828      	ldr	r0, [r5, #0]
 800067e:	59c1      	ldr	r1, [r0, r7]
 8000680:	8928      	ldrh	r0, [r5, #8]
 8000682:	1d3f      	adds	r7, r7, #4
 8000684:	4286      	cmp	r6, r0
 8000686:	f108 0810 	add.w	r8, r8, #16
 800068a:	d3cd      	bcc.n	8000628 <_platform_network_state_update_output+0x14>
 800068c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000690 <_platform_network_io_bind>:
 8000690:	2800      	cmp	r0, #0
 8000692:	d100      	bne.n	8000696 <_platform_network_io_bind+0x6>
 8000694:	4770      	bx	lr
 8000696:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800069a:	b081      	sub	sp, #4
 800069c:	2300      	movs	r3, #0
 800069e:	b405      	push	{r0, r2}
 80006a0:	b081      	sub	sp, #4
 80006a2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80006a4:	8243      	strh	r3, [r0, #18]
 80006a6:	9801      	ldr	r0, [sp, #4]
 80006a8:	8203      	strh	r3, [r0, #16]
 80006aa:	9b01      	ldr	r3, [sp, #4]
 80006ac:	7a18      	ldrb	r0, [r3, #8]
 80006ae:	f000 0003 	and.w	r0, r0, #3
 80006b2:	2803      	cmp	r0, #3
 80006b4:	d004      	beq.n	80006c0 <_platform_network_io_bind+0x30>
 80006b6:	2230      	movs	r2, #48	; 0x30
 80006b8:	2111      	movs	r1, #17
 80006ba:	f103 000c 	add.w	r0, r3, #12
 80006be:	e0ce      	b.n	800085e <_platform_network_io_bind+0x1ce>
 80006c0:	2900      	cmp	r1, #0
 80006c2:	bf1c      	itt	ne
 80006c4:	8910      	ldrhne	r0, [r2, #8]
 80006c6:	2800      	cmpne	r0, #0
 80006c8:	f000 80c3 	beq.w	8000852 <_platform_network_io_bind+0x1c2>
 80006cc:	6810      	ldr	r0, [r2, #0]
 80006ce:	f8b1 a004 	ldrh.w	sl, [r1, #4]
 80006d2:	6804      	ldr	r4, [r0, #0]
 80006d4:	9200      	str	r2, [sp, #0]
 80006d6:	2700      	movs	r7, #0
 80006d8:	2504      	movs	r5, #4
 80006da:	46b9      	mov	r9, r7
 80006dc:	1d0e      	adds	r6, r1, #4
 80006de:	9800      	ldr	r0, [sp, #0]
 80006e0:	8901      	ldrh	r1, [r0, #8]
 80006e2:	428f      	cmp	r7, r1
 80006e4:	f080 80b1 	bcs.w	800084a <_platform_network_io_bind+0x1ba>
 80006e8:	6841      	ldr	r1, [r0, #4]
 80006ea:	680a      	ldr	r2, [r1, #0]
 80006ec:	eb02 0809 	add.w	r8, r2, r9
 80006f0:	2c00      	cmp	r4, #0
 80006f2:	bf18      	it	ne
 80006f4:	f1b8 0f00 	cmpne.w	r8, #0
 80006f8:	f000 80ab 	beq.w	8000852 <_platform_network_io_bind+0x1c2>
 80006fc:	6820      	ldr	r0, [r4, #0]
 80006fe:	8873      	ldrh	r3, [r6, #2]
 8000700:	f8b6 c004 	ldrh.w	ip, [r6, #4]
 8000704:	68b2      	ldr	r2, [r6, #8]
 8000706:	6841      	ldr	r1, [r0, #4]
 8000708:	fb03 fe0c 	mul.w	lr, r3, ip
 800070c:	fb02 fe0e 	mul.w	lr, r2, lr
 8000710:	4571      	cmp	r1, lr
 8000712:	f0c0 80a0 	bcc.w	8000856 <_platform_network_io_bind+0x1c6>
 8000716:	f8d4 e010 	ldr.w	lr, [r4, #16]
 800071a:	459e      	cmp	lr, r3
 800071c:	bf04      	itt	eq
 800071e:	68e3      	ldreq	r3, [r4, #12]
 8000720:	4563      	cmpeq	r3, ip
 8000722:	bf04      	itt	eq
 8000724:	68a3      	ldreq	r3, [r4, #8]
 8000726:	4293      	cmpeq	r3, r2
 8000728:	f040 8095 	bne.w	8000856 <_platform_network_io_bind+0x1c6>
 800072c:	6800      	ldr	r0, [r0, #0]
 800072e:	f003 ff6b 	bl	8004608 <ai_array_get_byte_size>
 8000732:	6921      	ldr	r1, [r4, #16]
 8000734:	6a22      	ldr	r2, [r4, #32]
 8000736:	4351      	muls	r1, r2
 8000738:	4288      	cmp	r0, r1
 800073a:	f0c0 808c 	bcc.w	8000856 <_platform_network_io_bind+0x1c6>
 800073e:	6820      	ldr	r0, [r4, #0]
 8000740:	6800      	ldr	r0, [r0, #0]
 8000742:	f003 fe89 	bl	8004458 <ai_array_to_buffer_fmt>
 8000746:	f856 1c04 	ldr.w	r1, [r6, #-4]
 800074a:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 800074e:	f021 417e 	bic.w	r1, r1, #4261412864	; 0xfe000000
 8000752:	4288      	cmp	r0, r1
 8000754:	d115      	bne.n	8000782 <_platform_network_io_bind+0xf2>
 8000756:	68f0      	ldr	r0, [r6, #12]
 8000758:	2800      	cmp	r0, #0
 800075a:	d07a      	beq.n	8000852 <_platform_network_io_bind+0x1c2>
 800075c:	8830      	ldrh	r0, [r6, #0]
 800075e:	b190      	cbz	r0, 8000786 <_platform_network_io_bind+0xf6>
 8000760:	4550      	cmp	r0, sl
 8000762:	bf28      	it	cs
 8000764:	4682      	movcs	sl, r0
 8000766:	4622      	mov	r2, r4
 8000768:	1f31      	subs	r1, r6, #4
 800076a:	4640      	mov	r0, r8
 800076c:	f7ff ff03 	bl	8000576 <_platform_network_state_setup>
 8000770:	9800      	ldr	r0, [sp, #0]
 8000772:	6801      	ldr	r1, [r0, #0]
 8000774:	594c      	ldr	r4, [r1, r5]
 8000776:	1c7f      	adds	r7, r7, #1
 8000778:	3614      	adds	r6, #20
 800077a:	f109 0910 	add.w	r9, r9, #16
 800077e:	1d2d      	adds	r5, r5, #4
 8000780:	e7ad      	b.n	80006de <_platform_network_io_bind+0x4e>
 8000782:	2219      	movs	r2, #25
 8000784:	e068      	b.n	8000858 <_platform_network_io_bind+0x1c8>
 8000786:	2221      	movs	r2, #33	; 0x21
 8000788:	e066      	b.n	8000858 <_platform_network_io_bind+0x1c8>
 800078a:	9901      	ldr	r1, [sp, #4]
 800078c:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800078e:	320c      	adds	r2, #12
 8000790:	8911      	ldrh	r1, [r2, #8]
 8000792:	2900      	cmp	r1, #0
 8000794:	d073      	beq.n	800087e <_platform_network_io_bind+0x1ee>
 8000796:	6813      	ldr	r3, [r2, #0]
 8000798:	681c      	ldr	r4, [r3, #0]
 800079a:	9200      	str	r2, [sp, #0]
 800079c:	2700      	movs	r7, #0
 800079e:	2504      	movs	r5, #4
 80007a0:	46b9      	mov	r9, r7
 80007a2:	1d06      	adds	r6, r0, #4
 80007a4:	9800      	ldr	r0, [sp, #0]
 80007a6:	8901      	ldrh	r1, [r0, #8]
 80007a8:	428f      	cmp	r7, r1
 80007aa:	d25e      	bcs.n	800086a <_platform_network_io_bind+0x1da>
 80007ac:	6841      	ldr	r1, [r0, #4]
 80007ae:	680a      	ldr	r2, [r1, #0]
 80007b0:	eb02 0809 	add.w	r8, r2, r9
 80007b4:	2c00      	cmp	r4, #0
 80007b6:	bf18      	it	ne
 80007b8:	f1b8 0f00 	cmpne.w	r8, #0
 80007bc:	d05c      	beq.n	8000878 <_platform_network_io_bind+0x1e8>
 80007be:	6820      	ldr	r0, [r4, #0]
 80007c0:	8873      	ldrh	r3, [r6, #2]
 80007c2:	f8b6 c004 	ldrh.w	ip, [r6, #4]
 80007c6:	68b2      	ldr	r2, [r6, #8]
 80007c8:	6841      	ldr	r1, [r0, #4]
 80007ca:	fb03 fe0c 	mul.w	lr, r3, ip
 80007ce:	fb02 fe0e 	mul.w	lr, r2, lr
 80007d2:	4571      	cmp	r1, lr
 80007d4:	d353      	bcc.n	800087e <_platform_network_io_bind+0x1ee>
 80007d6:	f8d4 e010 	ldr.w	lr, [r4, #16]
 80007da:	459e      	cmp	lr, r3
 80007dc:	bf04      	itt	eq
 80007de:	68e3      	ldreq	r3, [r4, #12]
 80007e0:	4563      	cmpeq	r3, ip
 80007e2:	bf04      	itt	eq
 80007e4:	68a3      	ldreq	r3, [r4, #8]
 80007e6:	4293      	cmpeq	r3, r2
 80007e8:	d149      	bne.n	800087e <_platform_network_io_bind+0x1ee>
 80007ea:	6800      	ldr	r0, [r0, #0]
 80007ec:	f003 ff0c 	bl	8004608 <ai_array_get_byte_size>
 80007f0:	6921      	ldr	r1, [r4, #16]
 80007f2:	6a22      	ldr	r2, [r4, #32]
 80007f4:	4351      	muls	r1, r2
 80007f6:	4288      	cmp	r0, r1
 80007f8:	d341      	bcc.n	800087e <_platform_network_io_bind+0x1ee>
 80007fa:	6820      	ldr	r0, [r4, #0]
 80007fc:	6800      	ldr	r0, [r0, #0]
 80007fe:	f003 fe2b 	bl	8004458 <ai_array_to_buffer_fmt>
 8000802:	f856 1c04 	ldr.w	r1, [r6, #-4]
 8000806:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 800080a:	f021 417e 	bic.w	r1, r1, #4261412864	; 0xfe000000
 800080e:	4288      	cmp	r0, r1
 8000810:	d115      	bne.n	800083e <_platform_network_io_bind+0x1ae>
 8000812:	68f0      	ldr	r0, [r6, #12]
 8000814:	2800      	cmp	r0, #0
 8000816:	d02f      	beq.n	8000878 <_platform_network_io_bind+0x1e8>
 8000818:	8830      	ldrh	r0, [r6, #0]
 800081a:	b198      	cbz	r0, 8000844 <_platform_network_io_bind+0x1b4>
 800081c:	4550      	cmp	r0, sl
 800081e:	bf28      	it	cs
 8000820:	4682      	movcs	sl, r0
 8000822:	4622      	mov	r2, r4
 8000824:	1f31      	subs	r1, r6, #4
 8000826:	4640      	mov	r0, r8
 8000828:	f7ff fea5 	bl	8000576 <_platform_network_state_setup>
 800082c:	9800      	ldr	r0, [sp, #0]
 800082e:	6801      	ldr	r1, [r0, #0]
 8000830:	594c      	ldr	r4, [r1, r5]
 8000832:	1c7f      	adds	r7, r7, #1
 8000834:	3614      	adds	r6, #20
 8000836:	f109 0910 	add.w	r9, r9, #16
 800083a:	1d2d      	adds	r5, r5, #4
 800083c:	e7b2      	b.n	80007a4 <_platform_network_io_bind+0x114>
 800083e:	2219      	movs	r2, #25
 8000840:	2113      	movs	r1, #19
 8000842:	e00a      	b.n	800085a <_platform_network_io_bind+0x1ca>
 8000844:	2221      	movs	r2, #33	; 0x21
 8000846:	2113      	movs	r1, #19
 8000848:	e007      	b.n	800085a <_platform_network_io_bind+0x1ca>
 800084a:	9802      	ldr	r0, [sp, #8]
 800084c:	2800      	cmp	r0, #0
 800084e:	d19c      	bne.n	800078a <_platform_network_io_bind+0xfa>
 8000850:	e00e      	b.n	8000870 <_platform_network_io_bind+0x1e0>
 8000852:	2217      	movs	r2, #23
 8000854:	e000      	b.n	8000858 <_platform_network_io_bind+0x1c8>
 8000856:	2218      	movs	r2, #24
 8000858:	2112      	movs	r1, #18
 800085a:	9801      	ldr	r0, [sp, #4]
 800085c:	300c      	adds	r0, #12
 800085e:	f000 fa8e 	bl	8000d7e <core_set_error>
 8000862:	2000      	movs	r0, #0
 8000864:	b004      	add	sp, #16
 8000866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800086a:	9801      	ldr	r0, [sp, #4]
 800086c:	f8a0 a010 	strh.w	sl, [r0, #16]
 8000870:	2001      	movs	r0, #1
 8000872:	b004      	add	sp, #16
 8000874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000878:	2217      	movs	r2, #23
 800087a:	2113      	movs	r1, #19
 800087c:	e7ed      	b.n	800085a <_platform_network_io_bind+0x1ca>
 800087e:	2218      	movs	r2, #24
 8000880:	2113      	movs	r1, #19
 8000882:	e7ea      	b.n	800085a <_platform_network_io_bind+0x1ca>

08000884 <ai_platform_runtime_get_revision>:
 8000884:	f8df 04a8 	ldr.w	r0, [pc, #1192]	; 8000d30 <.text_21>
 8000888:	6801      	ldr	r1, [r0, #0]
 800088a:	0849      	lsrs	r1, r1, #1
 800088c:	0049      	lsls	r1, r1, #1
 800088e:	6001      	str	r1, [r0, #0]
 8000890:	2001      	movs	r0, #1
 8000892:	f8df 14a0 	ldr.w	r1, [pc, #1184]	; 8000d34 <.text_22>
 8000896:	6088      	str	r0, [r1, #8]
 8000898:	6888      	ldr	r0, [r1, #8]
 800089a:	2800      	cmp	r0, #0
 800089c:	d1fc      	bne.n	8000898 <ai_platform_runtime_get_revision+0x14>
 800089e:	f8df 2498 	ldr.w	r2, [pc, #1176]	; 8000d38 <.text_23>
 80008a2:	600a      	str	r2, [r1, #0]
 80008a4:	6808      	ldr	r0, [r1, #0]
 80008a6:	f8df 1494 	ldr.w	r1, [pc, #1172]	; 8000d3c <.text_24>
 80008aa:	4288      	cmp	r0, r1
 80008ac:	d000      	beq.n	80008b0 <ai_platform_runtime_get_revision+0x2c>
 80008ae:	e7fe      	b.n	80008ae <ai_platform_runtime_get_revision+0x2a>
 80008b0:	a0aa      	add	r0, pc, #680	; (adr r0, 8000b5c <.text_16>)
 80008b2:	4770      	bx	lr

080008b4 <ai_platform_runtime_get_version>:
 80008b4:	f8df 0478 	ldr.w	r0, [pc, #1144]	; 8000d30 <.text_21>
 80008b8:	6801      	ldr	r1, [r0, #0]
 80008ba:	0849      	lsrs	r1, r1, #1
 80008bc:	0049      	lsls	r1, r1, #1
 80008be:	6001      	str	r1, [r0, #0]
 80008c0:	2001      	movs	r0, #1
 80008c2:	f8df 1470 	ldr.w	r1, [pc, #1136]	; 8000d34 <.text_22>
 80008c6:	6088      	str	r0, [r1, #8]
 80008c8:	6888      	ldr	r0, [r1, #8]
 80008ca:	2800      	cmp	r0, #0
 80008cc:	d1fc      	bne.n	80008c8 <ai_platform_runtime_get_version+0x14>
 80008ce:	f8df 2468 	ldr.w	r2, [pc, #1128]	; 8000d38 <.text_23>
 80008d2:	600a      	str	r2, [r1, #0]
 80008d4:	6808      	ldr	r0, [r1, #0]
 80008d6:	f8df 1464 	ldr.w	r1, [pc, #1124]	; 8000d3c <.text_24>
 80008da:	4288      	cmp	r0, r1
 80008dc:	d000      	beq.n	80008e0 <ai_platform_runtime_get_version+0x2c>
 80008de:	e7fe      	b.n	80008de <ai_platform_runtime_get_version+0x2a>
 80008e0:	f20f 4264 	addw	r2, pc, #1124	; 0x464
 80008e4:	6810      	ldr	r0, [r2, #0]
 80008e6:	4770      	bx	lr

080008e8 <ai_platform_api_get_version>:
 80008e8:	f8df 0444 	ldr.w	r0, [pc, #1092]	; 8000d30 <.text_21>
 80008ec:	6801      	ldr	r1, [r0, #0]
 80008ee:	0849      	lsrs	r1, r1, #1
 80008f0:	0049      	lsls	r1, r1, #1
 80008f2:	6001      	str	r1, [r0, #0]
 80008f4:	2001      	movs	r0, #1
 80008f6:	f8df 143c 	ldr.w	r1, [pc, #1084]	; 8000d34 <.text_22>
 80008fa:	6088      	str	r0, [r1, #8]
 80008fc:	6888      	ldr	r0, [r1, #8]
 80008fe:	2800      	cmp	r0, #0
 8000900:	d1fc      	bne.n	80008fc <ai_platform_api_get_version+0x14>
 8000902:	f8df 2434 	ldr.w	r2, [pc, #1076]	; 8000d38 <.text_23>
 8000906:	600a      	str	r2, [r1, #0]
 8000908:	6808      	ldr	r0, [r1, #0]
 800090a:	f8df 1430 	ldr.w	r1, [pc, #1072]	; 8000d3c <.text_24>
 800090e:	4288      	cmp	r0, r1
 8000910:	d000      	beq.n	8000914 <ai_platform_api_get_version+0x2c>
 8000912:	e7fe      	b.n	8000912 <ai_platform_api_get_version+0x2a>
 8000914:	f20f 4234 	addw	r2, pc, #1076	; 0x434
 8000918:	6810      	ldr	r0, [r2, #0]
 800091a:	4770      	bx	lr

0800091c <ai_platform_interface_api_get_version>:
 800091c:	f8df 0410 	ldr.w	r0, [pc, #1040]	; 8000d30 <.text_21>
 8000920:	6801      	ldr	r1, [r0, #0]
 8000922:	0849      	lsrs	r1, r1, #1
 8000924:	0049      	lsls	r1, r1, #1
 8000926:	6001      	str	r1, [r0, #0]
 8000928:	2001      	movs	r0, #1
 800092a:	f8df 1408 	ldr.w	r1, [pc, #1032]	; 8000d34 <.text_22>
 800092e:	6088      	str	r0, [r1, #8]
 8000930:	6888      	ldr	r0, [r1, #8]
 8000932:	2800      	cmp	r0, #0
 8000934:	d1fc      	bne.n	8000930 <ai_platform_interface_api_get_version+0x14>
 8000936:	f8df 2400 	ldr.w	r2, [pc, #1024]	; 8000d38 <.text_23>
 800093a:	600a      	str	r2, [r1, #0]
 800093c:	6808      	ldr	r0, [r1, #0]
 800093e:	f8df 13fc 	ldr.w	r1, [pc, #1020]	; 8000d3c <.text_24>
 8000942:	4288      	cmp	r0, r1
 8000944:	d000      	beq.n	8000948 <ai_platform_interface_api_get_version+0x2c>
 8000946:	e7fe      	b.n	8000946 <ai_platform_interface_api_get_version+0x2a>
 8000948:	f20f 4204 	addw	r2, pc, #1028	; 0x404
 800094c:	6810      	ldr	r0, [r2, #0]
 800094e:	4770      	bx	lr

08000950 <ai_platform_context_acquire>:
 8000950:	b120      	cbz	r0, 800095c <ai_platform_context_acquire+0xc>
 8000952:	6801      	ldr	r1, [r0, #0]
 8000954:	f8df 23e8 	ldr.w	r2, [pc, #1000]	; 8000d40 <.text_25>
 8000958:	4291      	cmp	r1, r2
 800095a:	d000      	beq.n	800095e <ai_platform_context_acquire+0xe>
 800095c:	2000      	movs	r0, #0
 800095e:	f8df 13d0 	ldr.w	r1, [pc, #976]	; 8000d30 <.text_21>
 8000962:	680a      	ldr	r2, [r1, #0]
 8000964:	0852      	lsrs	r2, r2, #1
 8000966:	0052      	lsls	r2, r2, #1
 8000968:	600a      	str	r2, [r1, #0]
 800096a:	2101      	movs	r1, #1
 800096c:	f8df 23c4 	ldr.w	r2, [pc, #964]	; 8000d34 <.text_22>
 8000970:	6091      	str	r1, [r2, #8]
 8000972:	6891      	ldr	r1, [r2, #8]
 8000974:	2900      	cmp	r1, #0
 8000976:	d1fc      	bne.n	8000972 <ai_platform_context_acquire+0x22>
 8000978:	f8df 33bc 	ldr.w	r3, [pc, #956]	; 8000d38 <.text_23>
 800097c:	6013      	str	r3, [r2, #0]
 800097e:	6811      	ldr	r1, [r2, #0]
 8000980:	f8df 23b8 	ldr.w	r2, [pc, #952]	; 8000d3c <.text_24>
 8000984:	4291      	cmp	r1, r2
 8000986:	d000      	beq.n	800098a <ai_platform_context_acquire+0x3a>
 8000988:	e7fe      	b.n	8000988 <ai_platform_context_acquire+0x38>
 800098a:	4770      	bx	lr

0800098c <ai_platform_context_release>:
 800098c:	f8df 13b0 	ldr.w	r1, [pc, #944]	; 8000d40 <.text_25>
 8000990:	6001      	str	r1, [r0, #0]
 8000992:	4770      	bx	lr

08000994 <ai_platform_network_get_error>:
 8000994:	b120      	cbz	r0, 80009a0 <ai_platform_network_get_error+0xc>
 8000996:	6801      	ldr	r1, [r0, #0]
 8000998:	f8df 23a4 	ldr.w	r2, [pc, #932]	; 8000d40 <.text_25>
 800099c:	4291      	cmp	r1, r2
 800099e:	d000      	beq.n	80009a2 <ai_platform_network_get_error+0xe>
 80009a0:	2000      	movs	r0, #0
 80009a2:	f8df 138c 	ldr.w	r1, [pc, #908]	; 8000d30 <.text_21>
 80009a6:	680a      	ldr	r2, [r1, #0]
 80009a8:	0852      	lsrs	r2, r2, #1
 80009aa:	0052      	lsls	r2, r2, #1
 80009ac:	600a      	str	r2, [r1, #0]
 80009ae:	2101      	movs	r1, #1
 80009b0:	f8df 2380 	ldr.w	r2, [pc, #896]	; 8000d34 <.text_22>
 80009b4:	6091      	str	r1, [r2, #8]
 80009b6:	6891      	ldr	r1, [r2, #8]
 80009b8:	2900      	cmp	r1, #0
 80009ba:	d1fc      	bne.n	80009b6 <ai_platform_network_get_error+0x22>
 80009bc:	f8df 3378 	ldr.w	r3, [pc, #888]	; 8000d38 <.text_23>
 80009c0:	6013      	str	r3, [r2, #0]
 80009c2:	6811      	ldr	r1, [r2, #0]
 80009c4:	f8df 2374 	ldr.w	r2, [pc, #884]	; 8000d3c <.text_24>
 80009c8:	4291      	cmp	r1, r2
 80009ca:	d000      	beq.n	80009ce <ai_platform_network_get_error+0x3a>
 80009cc:	e7fe      	b.n	80009cc <ai_platform_network_get_error+0x38>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf1c      	itt	ne
 80009d2:	300c      	addne	r0, #12
 80009d4:	f000 b9ce 	bne.w	8000d74 <core_get_error>
 80009d8:	f20f 3088 	addw	r0, pc, #904	; 0x388
 80009dc:	6800      	ldr	r0, [r0, #0]
 80009de:	4770      	bx	lr

080009e0 <ai_platform_network_set_error>:
 80009e0:	2800      	cmp	r0, #0
 80009e2:	bf1c      	itt	ne
 80009e4:	300c      	addne	r0, #12
 80009e6:	f000 b9ca 	bne.w	8000d7e <core_set_error>
 80009ea:	4770      	bx	lr

080009ec <ai_platform_api_get_network_report>:
 80009ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009f0:	ea5f 0900 	movs.w	r9, r0
 80009f4:	b081      	sub	sp, #4
 80009f6:	460c      	mov	r4, r1
 80009f8:	d005      	beq.n	8000a06 <ai_platform_api_get_network_report+0x1a>
 80009fa:	f8d9 0000 	ldr.w	r0, [r9]
 80009fe:	f8df 1340 	ldr.w	r1, [pc, #832]	; 8000d40 <.text_25>
 8000a02:	4288      	cmp	r0, r1
 8000a04:	d001      	beq.n	8000a0a <ai_platform_api_get_network_report+0x1e>
 8000a06:	f04f 0900 	mov.w	r9, #0
 8000a0a:	f8df 5324 	ldr.w	r5, [pc, #804]	; 8000d30 <.text_21>
 8000a0e:	f8df 6324 	ldr.w	r6, [pc, #804]	; 8000d34 <.text_22>
 8000a12:	6828      	ldr	r0, [r5, #0]
 8000a14:	0840      	lsrs	r0, r0, #1
 8000a16:	0040      	lsls	r0, r0, #1
 8000a18:	6028      	str	r0, [r5, #0]
 8000a1a:	2101      	movs	r1, #1
 8000a1c:	60b1      	str	r1, [r6, #8]
 8000a1e:	68b0      	ldr	r0, [r6, #8]
 8000a20:	2800      	cmp	r0, #0
 8000a22:	d1fc      	bne.n	8000a1e <ai_platform_api_get_network_report+0x32>
 8000a24:	f8df 7310 	ldr.w	r7, [pc, #784]	; 8000d38 <.text_23>
 8000a28:	f8df 8310 	ldr.w	r8, [pc, #784]	; 8000d3c <.text_24>
 8000a2c:	6037      	str	r7, [r6, #0]
 8000a2e:	6830      	ldr	r0, [r6, #0]
 8000a30:	4540      	cmp	r0, r8
 8000a32:	d000      	beq.n	8000a36 <ai_platform_api_get_network_report+0x4a>
 8000a34:	e7fe      	b.n	8000a34 <ai_platform_api_get_network_report+0x48>
 8000a36:	f1b9 0f00 	cmp.w	r9, #0
 8000a3a:	bf18      	it	ne
 8000a3c:	2c00      	cmpne	r4, #0
 8000a3e:	f000 8088 	beq.w	8000b52 <ai_platform_api_get_network_report+0x166>
 8000a42:	2000      	movs	r0, #0
 8000a44:	6660      	str	r0, [r4, #100]	; 0x64
 8000a46:	f8d9 2044 	ldr.w	r2, [r9, #68]	; 0x44
 8000a4a:	2a00      	cmp	r2, #0
 8000a4c:	f000 807b 	beq.w	8000b46 <ai_platform_api_get_network_report+0x15a>
 8000a50:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8000a52:	1c49      	adds	r1, r1, #1
 8000a54:	6661      	str	r1, [r4, #100]	; 0x64
 8000a56:	6890      	ldr	r0, [r2, #8]
 8000a58:	4282      	cmp	r2, r0
 8000a5a:	bf1c      	itt	ne
 8000a5c:	2800      	cmpne	r0, #0
 8000a5e:	4602      	movne	r2, r0
 8000a60:	d1f6      	bne.n	8000a50 <ai_platform_api_get_network_report+0x64>
 8000a62:	e06e      	b.n	8000b42 <ai_platform_api_get_network_report+0x156>
 8000a64:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
 8000a68:	f104 0134 	add.w	r1, r4, #52	; 0x34
 8000a6c:	f7ff fd4a 	bl	8000504 <_ai_platform_get_io_buffers>
 8000a70:	8620      	strh	r0, [r4, #48]	; 0x30
 8000a72:	b910      	cbnz	r0, 8000a7a <ai_platform_api_get_network_report+0x8e>
 8000a74:	2218      	movs	r2, #24
 8000a76:	2112      	movs	r1, #18
 8000a78:	e067      	b.n	8000b4a <ai_platform_api_get_network_report+0x15e>
 8000a7a:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
 8000a7e:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8000a82:	300c      	adds	r0, #12
 8000a84:	f7ff fd3e 	bl	8000504 <_ai_platform_get_io_buffers>
 8000a88:	8660      	strh	r0, [r4, #50]	; 0x32
 8000a8a:	b910      	cbnz	r0, 8000a92 <ai_platform_api_get_network_report+0xa6>
 8000a8c:	2218      	movs	r2, #24
 8000a8e:	2113      	movs	r1, #19
 8000a90:	e05b      	b.n	8000b4a <ai_platform_api_get_network_report+0x15e>
 8000a92:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8000a96:	66a0      	str	r0, [r4, #104]	; 0x68
 8000a98:	f109 0228 	add.w	r2, r9, #40	; 0x28
 8000a9c:	e892 5c08 	ldmia.w	r2, {r3, sl, fp, ip, lr}
 8000aa0:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 8000aa4:	f109 0914 	add.w	r9, r9, #20
 8000aa8:	e881 5c08 	stmia.w	r1, {r3, sl, fp, ip, lr}
 8000aac:	e899 500e 	ldmia.w	r9, {r1, r2, r3, ip, lr}
 8000ab0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8000ab4:	e880 500e 	stmia.w	r0, {r1, r2, r3, ip, lr}
 8000ab8:	6828      	ldr	r0, [r5, #0]
 8000aba:	0840      	lsrs	r0, r0, #1
 8000abc:	0040      	lsls	r0, r0, #1
 8000abe:	6028      	str	r0, [r5, #0]
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	60b3      	str	r3, [r6, #8]
 8000ac4:	68b0      	ldr	r0, [r6, #8]
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	d1fc      	bne.n	8000ac4 <ai_platform_api_get_network_report+0xd8>
 8000aca:	6037      	str	r7, [r6, #0]
 8000acc:	6831      	ldr	r1, [r6, #0]
 8000ace:	4541      	cmp	r1, r8
 8000ad0:	d000      	beq.n	8000ad4 <ai_platform_api_get_network_report+0xe8>
 8000ad2:	e7fe      	b.n	8000ad2 <ai_platform_api_get_network_report+0xe6>
 8000ad4:	a021      	add	r0, pc, #132	; (adr r0, 8000b5c <.text_16>)
 8000ad6:	6120      	str	r0, [r4, #16]
 8000ad8:	6829      	ldr	r1, [r5, #0]
 8000ada:	0849      	lsrs	r1, r1, #1
 8000adc:	0049      	lsls	r1, r1, #1
 8000ade:	6029      	str	r1, [r5, #0]
 8000ae0:	60b3      	str	r3, [r6, #8]
 8000ae2:	68b0      	ldr	r0, [r6, #8]
 8000ae4:	2800      	cmp	r0, #0
 8000ae6:	d1fc      	bne.n	8000ae2 <ai_platform_api_get_network_report+0xf6>
 8000ae8:	6037      	str	r7, [r6, #0]
 8000aea:	6831      	ldr	r1, [r6, #0]
 8000aec:	4541      	cmp	r1, r8
 8000aee:	d000      	beq.n	8000af2 <ai_platform_api_get_network_report+0x106>
 8000af0:	e7fe      	b.n	8000af0 <ai_platform_api_get_network_report+0x104>
 8000af2:	f20f 2054 	addw	r0, pc, #596	; 0x254
 8000af6:	6802      	ldr	r2, [r0, #0]
 8000af8:	6162      	str	r2, [r4, #20]
 8000afa:	6829      	ldr	r1, [r5, #0]
 8000afc:	0849      	lsrs	r1, r1, #1
 8000afe:	0049      	lsls	r1, r1, #1
 8000b00:	6029      	str	r1, [r5, #0]
 8000b02:	60b3      	str	r3, [r6, #8]
 8000b04:	68b0      	ldr	r0, [r6, #8]
 8000b06:	2800      	cmp	r0, #0
 8000b08:	d1fc      	bne.n	8000b04 <ai_platform_api_get_network_report+0x118>
 8000b0a:	6037      	str	r7, [r6, #0]
 8000b0c:	6831      	ldr	r1, [r6, #0]
 8000b0e:	4541      	cmp	r1, r8
 8000b10:	d000      	beq.n	8000b14 <ai_platform_api_get_network_report+0x128>
 8000b12:	e7fe      	b.n	8000b12 <ai_platform_api_get_network_report+0x126>
 8000b14:	a08d      	add	r0, pc, #564	; (adr r0, 8000d4c <.text_28>)
 8000b16:	6802      	ldr	r2, [r0, #0]
 8000b18:	6262      	str	r2, [r4, #36]	; 0x24
 8000b1a:	6829      	ldr	r1, [r5, #0]
 8000b1c:	0849      	lsrs	r1, r1, #1
 8000b1e:	0049      	lsls	r1, r1, #1
 8000b20:	6029      	str	r1, [r5, #0]
 8000b22:	60b3      	str	r3, [r6, #8]
 8000b24:	68b0      	ldr	r0, [r6, #8]
 8000b26:	2800      	cmp	r0, #0
 8000b28:	d1fc      	bne.n	8000b24 <ai_platform_api_get_network_report+0x138>
 8000b2a:	6037      	str	r7, [r6, #0]
 8000b2c:	6831      	ldr	r1, [r6, #0]
 8000b2e:	4541      	cmp	r1, r8
 8000b30:	d000      	beq.n	8000b34 <ai_platform_api_get_network_report+0x148>
 8000b32:	e7fe      	b.n	8000b32 <ai_platform_api_get_network_report+0x146>
 8000b34:	a086      	add	r0, pc, #536	; (adr r0, 8000d50 <.text_29>)
 8000b36:	6802      	ldr	r2, [r0, #0]
 8000b38:	62a2      	str	r2, [r4, #40]	; 0x28
 8000b3a:	2001      	movs	r0, #1
 8000b3c:	b001      	add	sp, #4
 8000b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b42:	2900      	cmp	r1, #0
 8000b44:	d18e      	bne.n	8000a64 <ai_platform_api_get_network_report+0x78>
 8000b46:	2218      	movs	r2, #24
 8000b48:	2111      	movs	r1, #17
 8000b4a:	f109 000c 	add.w	r0, r9, #12
 8000b4e:	f000 f916 	bl	8000d7e <core_set_error>
 8000b52:	2000      	movs	r0, #0
 8000b54:	b001      	add	sp, #4
 8000b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08000b5c <.text_16>:
 8000b5c:	00000000 	.word	0x00000000

08000b60 <ai_platform_network_create>:
 8000b60:	b570      	push	{r4, r5, r6, lr}
 8000b62:	9d04      	ldr	r5, [sp, #16]
 8000b64:	4604      	mov	r4, r0
 8000b66:	9805      	ldr	r0, [sp, #20]
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	042d      	lsls	r5, r5, #16
 8000b6c:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
 8000b70:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
 8000b74:	a07c      	add	r0, pc, #496	; (adr r0, 8000d68 <.text_35>)
 8000b76:	6806      	ldr	r6, [r0, #0]
 8000b78:	486d      	ldr	r0, [pc, #436]	; (8000d30 <.text_21>)
 8000b7a:	6801      	ldr	r1, [r0, #0]
 8000b7c:	0849      	lsrs	r1, r1, #1
 8000b7e:	0049      	lsls	r1, r1, #1
 8000b80:	6001      	str	r1, [r0, #0]
 8000b82:	2001      	movs	r0, #1
 8000b84:	496b      	ldr	r1, [pc, #428]	; (8000d34 <.text_22>)
 8000b86:	6088      	str	r0, [r1, #8]
 8000b88:	6888      	ldr	r0, [r1, #8]
 8000b8a:	2800      	cmp	r0, #0
 8000b8c:	d1fc      	bne.n	8000b88 <ai_platform_network_create+0x28>
 8000b8e:	4b6a      	ldr	r3, [pc, #424]	; (8000d38 <.text_23>)
 8000b90:	600b      	str	r3, [r1, #0]
 8000b92:	6808      	ldr	r0, [r1, #0]
 8000b94:	4969      	ldr	r1, [pc, #420]	; (8000d3c <.text_24>)
 8000b96:	4288      	cmp	r0, r1
 8000b98:	d000      	beq.n	8000b9c <ai_platform_network_create+0x3c>
 8000b9a:	e7fe      	b.n	8000b9a <ai_platform_network_create+0x3a>
 8000b9c:	b91c      	cbnz	r4, 8000ba6 <ai_platform_network_create+0x46>
 8000b9e:	bf00      	nop
 8000ba0:	a072      	add	r0, pc, #456	; (adr r0, 8000d6c <.text_36>)
 8000ba2:	6800      	ldr	r0, [r0, #0]
 8000ba4:	bd70      	pop	{r4, r5, r6, pc}
 8000ba6:	4966      	ldr	r1, [pc, #408]	; (8000d40 <.text_25>)
 8000ba8:	6011      	str	r1, [r2, #0]
 8000baa:	f8c4 2000 	str.w	r2, [r4]
 8000bae:	f000 f8df 	bl	8000d70 <core_init>
 8000bb2:	b908      	cbnz	r0, 8000bb8 <ai_platform_network_create+0x58>
 8000bb4:	a067      	add	r0, pc, #412	; (adr r0, 8000d54 <.text_30>)
 8000bb6:	e00a      	b.n	8000bce <ai_platform_network_create+0x6e>
 8000bb8:	4962      	ldr	r1, [pc, #392]	; (8000d44 <.text_26>)
 8000bba:	428d      	cmp	r5, r1
 8000bbc:	bf28      	it	cs
 8000bbe:	f20f 1098 	addwcs	r0, pc, #408	; 0x198
 8000bc2:	d204      	bcs.n	8000bce <ai_platform_network_create+0x6e>
 8000bc4:	a065      	add	r0, pc, #404	; (adr r0, 8000d5c <_platform_network_sanity_check{5}::signatures>)
 8000bc6:	f000 fed5 	bl	8001974 <ai_check_custom_types>
 8000bca:	b918      	cbnz	r0, 8000bd4 <ai_platform_network_create+0x74>
 8000bcc:	a064      	add	r0, pc, #400	; (adr r0, 8000d60 <.text_33>)
 8000bce:	6806      	ldr	r6, [r0, #0]
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	6021      	str	r1, [r4, #0]
 8000bd4:	4630      	mov	r0, r6
 8000bd6:	bd70      	pop	{r4, r5, r6, pc}

08000bd8 <ai_platform_network_destroy>:
 8000bd8:	b128      	cbz	r0, 8000be6 <ai_platform_network_destroy+0xe>
 8000bda:	6801      	ldr	r1, [r0, #0]
 8000bdc:	4a58      	ldr	r2, [pc, #352]	; (8000d40 <.text_25>)
 8000bde:	4291      	cmp	r1, r2
 8000be0:	bf08      	it	eq
 8000be2:	4602      	moveq	r2, r0
 8000be4:	d000      	beq.n	8000be8 <ai_platform_network_destroy+0x10>
 8000be6:	2200      	movs	r2, #0
 8000be8:	4951      	ldr	r1, [pc, #324]	; (8000d30 <.text_21>)
 8000bea:	680b      	ldr	r3, [r1, #0]
 8000bec:	085b      	lsrs	r3, r3, #1
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	600b      	str	r3, [r1, #0]
 8000bf2:	2101      	movs	r1, #1
 8000bf4:	4b4f      	ldr	r3, [pc, #316]	; (8000d34 <.text_22>)
 8000bf6:	6099      	str	r1, [r3, #8]
 8000bf8:	6899      	ldr	r1, [r3, #8]
 8000bfa:	2900      	cmp	r1, #0
 8000bfc:	d1fc      	bne.n	8000bf8 <ai_platform_network_destroy+0x20>
 8000bfe:	f8df c138 	ldr.w	ip, [pc, #312]	; 8000d38 <.text_23>
 8000c02:	f8c3 c000 	str.w	ip, [r3]
 8000c06:	6819      	ldr	r1, [r3, #0]
 8000c08:	4b4c      	ldr	r3, [pc, #304]	; (8000d3c <.text_24>)
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	d000      	beq.n	8000c10 <ai_platform_network_destroy+0x38>
 8000c0e:	e7fe      	b.n	8000c0e <ai_platform_network_destroy+0x36>
 8000c10:	b102      	cbz	r2, 8000c14 <ai_platform_network_destroy+0x3c>
 8000c12:	2000      	movs	r0, #0
 8000c14:	4770      	bx	lr

08000c16 <ai_platform_network_init>:
 8000c16:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c1a:	b081      	sub	sp, #4
 8000c1c:	460a      	mov	r2, r1
 8000c1e:	b118      	cbz	r0, 8000c28 <ai_platform_network_init+0x12>
 8000c20:	6801      	ldr	r1, [r0, #0]
 8000c22:	4b47      	ldr	r3, [pc, #284]	; (8000d40 <.text_25>)
 8000c24:	4299      	cmp	r1, r3
 8000c26:	d000      	beq.n	8000c2a <ai_platform_network_init+0x14>
 8000c28:	2000      	movs	r0, #0
 8000c2a:	4941      	ldr	r1, [pc, #260]	; (8000d30 <.text_21>)
 8000c2c:	680b      	ldr	r3, [r1, #0]
 8000c2e:	085b      	lsrs	r3, r3, #1
 8000c30:	005b      	lsls	r3, r3, #1
 8000c32:	600b      	str	r3, [r1, #0]
 8000c34:	2101      	movs	r1, #1
 8000c36:	4b3f      	ldr	r3, [pc, #252]	; (8000d34 <.text_22>)
 8000c38:	6099      	str	r1, [r3, #8]
 8000c3a:	6899      	ldr	r1, [r3, #8]
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	d1fc      	bne.n	8000c3a <ai_platform_network_init+0x24>
 8000c40:	4c3d      	ldr	r4, [pc, #244]	; (8000d38 <.text_23>)
 8000c42:	601c      	str	r4, [r3, #0]
 8000c44:	6819      	ldr	r1, [r3, #0]
 8000c46:	4b3d      	ldr	r3, [pc, #244]	; (8000d3c <.text_24>)
 8000c48:	4299      	cmp	r1, r3
 8000c4a:	d000      	beq.n	8000c4e <ai_platform_network_init+0x38>
 8000c4c:	e7fe      	b.n	8000c4c <ai_platform_network_init+0x36>
 8000c4e:	2800      	cmp	r0, #0
 8000c50:	d034      	beq.n	8000cbc <ai_platform_network_init+0xa6>
 8000c52:	b90a      	cbnz	r2, 8000c58 <ai_platform_network_init+0x42>
 8000c54:	2211      	movs	r2, #17
 8000c56:	e012      	b.n	8000c7e <ai_platform_network_init+0x68>
 8000c58:	6913      	ldr	r3, [r2, #16]
 8000c5a:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8000c5c:	b939      	cbnz	r1, 8000c6e <ai_platform_network_init+0x58>
 8000c5e:	8b91      	ldrh	r1, [r2, #28]
 8000c60:	8b55      	ldrh	r5, [r2, #26]
 8000c62:	6a14      	ldr	r4, [r2, #32]
 8000c64:	4369      	muls	r1, r5
 8000c66:	4361      	muls	r1, r4
 8000c68:	bf18      	it	ne
 8000c6a:	2213      	movne	r2, #19
 8000c6c:	d107      	bne.n	8000c7e <ai_platform_network_init+0x68>
 8000c6e:	b973      	cbnz	r3, 8000c8e <ai_platform_network_init+0x78>
 8000c70:	8911      	ldrh	r1, [r2, #8]
 8000c72:	88d4      	ldrh	r4, [r2, #6]
 8000c74:	68d3      	ldr	r3, [r2, #12]
 8000c76:	4361      	muls	r1, r4
 8000c78:	4359      	muls	r1, r3
 8000c7a:	d008      	beq.n	8000c8e <ai_platform_network_init+0x78>
 8000c7c:	2212      	movs	r2, #18
 8000c7e:	2110      	movs	r1, #16
 8000c80:	300c      	adds	r0, #12
 8000c82:	f000 f87c 	bl	8000d7e <core_set_error>
 8000c86:	2000      	movs	r0, #0
 8000c88:	b001      	add	sp, #4
 8000c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c8e:	caf8      	ldmia	r2!, {r3, r4, r5, r6, r7}
 8000c90:	f100 0114 	add.w	r1, r0, #20
 8000c94:	f100 0c28 	add.w	ip, r0, #40	; 0x28
 8000c98:	e881 00f8 	stmia.w	r1, {r3, r4, r5, r6, r7}
 8000c9c:	e892 4f00 	ldmia.w	r2, {r8, r9, sl, fp, lr}
 8000ca0:	e88c 4f00 	stmia.w	ip, {r8, r9, sl, fp, lr}
 8000ca4:	2103      	movs	r1, #3
 8000ca6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8000ca8:	6081      	str	r1, [r0, #8]
 8000caa:	b13a      	cbz	r2, 8000cbc <ai_platform_network_init+0xa6>
 8000cac:	6891      	ldr	r1, [r2, #8]
 8000cae:	6050      	str	r0, [r2, #4]
 8000cb0:	428a      	cmp	r2, r1
 8000cb2:	bf18      	it	ne
 8000cb4:	2900      	cmpne	r1, #0
 8000cb6:	bf18      	it	ne
 8000cb8:	460a      	movne	r2, r1
 8000cba:	d1f7      	bne.n	8000cac <ai_platform_network_init+0x96>
 8000cbc:	b001      	add	sp, #4
 8000cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000cc2 <ai_platform_network_process>:
 8000cc2:	b570      	push	{r4, r5, r6, lr}
 8000cc4:	0004      	movs	r4, r0
 8000cc6:	d003      	beq.n	8000cd0 <ai_platform_network_process+0xe>
 8000cc8:	6820      	ldr	r0, [r4, #0]
 8000cca:	4b1d      	ldr	r3, [pc, #116]	; (8000d40 <.text_25>)
 8000ccc:	4298      	cmp	r0, r3
 8000cce:	d000      	beq.n	8000cd2 <ai_platform_network_process+0x10>
 8000cd0:	2400      	movs	r4, #0
 8000cd2:	4817      	ldr	r0, [pc, #92]	; (8000d30 <.text_21>)
 8000cd4:	6803      	ldr	r3, [r0, #0]
 8000cd6:	085b      	lsrs	r3, r3, #1
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	6003      	str	r3, [r0, #0]
 8000cdc:	2001      	movs	r0, #1
 8000cde:	4b15      	ldr	r3, [pc, #84]	; (8000d34 <.text_22>)
 8000ce0:	6098      	str	r0, [r3, #8]
 8000ce2:	6898      	ldr	r0, [r3, #8]
 8000ce4:	2800      	cmp	r0, #0
 8000ce6:	d1fc      	bne.n	8000ce2 <ai_platform_network_process+0x20>
 8000ce8:	4d13      	ldr	r5, [pc, #76]	; (8000d38 <.text_23>)
 8000cea:	601d      	str	r5, [r3, #0]
 8000cec:	6818      	ldr	r0, [r3, #0]
 8000cee:	4b13      	ldr	r3, [pc, #76]	; (8000d3c <.text_24>)
 8000cf0:	4298      	cmp	r0, r3
 8000cf2:	d000      	beq.n	8000cf6 <ai_platform_network_process+0x34>
 8000cf4:	e7fe      	b.n	8000cf4 <ai_platform_network_process+0x32>
 8000cf6:	4620      	mov	r0, r4
 8000cf8:	f7ff fcca 	bl	8000690 <_platform_network_io_bind>
 8000cfc:	b1b8      	cbz	r0, 8000d2e <ai_platform_network_process+0x6c>
 8000cfe:	8a60      	ldrh	r0, [r4, #18]
 8000d00:	8a21      	ldrh	r1, [r4, #16]
 8000d02:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8000d04:	4288      	cmp	r0, r1
 8000d06:	f105 060c 	add.w	r6, r5, #12
 8000d0a:	d20f      	bcs.n	8000d2c <ai_platform_network_process+0x6a>
 8000d0c:	4628      	mov	r0, r5
 8000d0e:	f7ff fc4d 	bl	80005ac <_platform_network_state_update_input>
 8000d12:	4620      	mov	r0, r4
 8000d14:	f000 fed8 	bl	8001ac8 <ai_layers_forward_all>
 8000d18:	4630      	mov	r0, r6
 8000d1a:	f7ff fc7b 	bl	8000614 <_platform_network_state_update_output>
 8000d1e:	8a60      	ldrh	r0, [r4, #18]
 8000d20:	8a21      	ldrh	r1, [r4, #16]
 8000d22:	1c40      	adds	r0, r0, #1
 8000d24:	8260      	strh	r0, [r4, #18]
 8000d26:	b280      	uxth	r0, r0
 8000d28:	4288      	cmp	r0, r1
 8000d2a:	d3ef      	bcc.n	8000d0c <ai_platform_network_process+0x4a>
 8000d2c:	8a60      	ldrh	r0, [r4, #18]
 8000d2e:	bd70      	pop	{r4, r5, r6, pc}

08000d30 <.text_21>:
 8000d30:	e0002000 	.word	0xe0002000

08000d34 <.text_22>:
 8000d34:	40023000 	.word	0x40023000

08000d38 <.text_23>:
 8000d38:	f407a5c2 	.word	0xf407a5c2

08000d3c <.text_24>:
 8000d3c:	b5e8b5cd 	.word	0xb5e8b5cd

08000d40 <.text_25>:
 8000d40:	a1c00100 	.word	0xa1c00100

08000d44 <.text_26>:
 8000d44:	01030001 	.word	0x01030001

08000d48 <.text_27>:
 8000d48:	00000004 	.word	0x00000004

08000d4c <.text_28>:
 8000d4c:	00000101 	.word	0x00000101

08000d50 <.text_29>:
 8000d50:	00000301 	.word	0x00000301

08000d54 <.text_30>:
 8000d54:	00001030 	.word	0x00001030

08000d58 <.text_31>:
 8000d58:	00001001 	.word	0x00001001

08000d5c <_platform_network_sanity_check{5}::signatures>:
 8000d5c:	84048403                                ....

08000d60 <.text_33>:
 8000d60:	00001002 	.word	0x00001002

08000d64 <.text_34>:
 8000d64:	00001010 	.word	0x00001010

08000d68 <.text_35>:
 8000d68:	00000000 	.word	0x00000000

08000d6c <.text_36>:
 8000d6c:	00001010 	.word	0x00001010

08000d70 <core_init>:
 8000d70:	2001      	movs	r0, #1
 8000d72:	4770      	bx	lr

08000d74 <core_get_error>:
 8000d74:	4601      	mov	r1, r0
 8000d76:	2200      	movs	r2, #0
 8000d78:	6808      	ldr	r0, [r1, #0]
 8000d7a:	600a      	str	r2, [r1, #0]
 8000d7c:	4770      	bx	lr

08000d7e <core_set_error>:
 8000d7e:	7803      	ldrb	r3, [r0, #0]
 8000d80:	ea5f 6c03 	movs.w	ip, r3, lsl #24
 8000d84:	d104      	bne.n	8000d90 <core_set_error+0x12>
 8000d86:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 8000d8a:	6001      	str	r1, [r0, #0]
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	4770      	bx	lr
 8000d90:	2000      	movs	r0, #0
 8000d92:	4770      	bx	lr

08000d94 <core_mem_alloc>:
 8000d94:	2800      	cmp	r0, #0
 8000d96:	d100      	bne.n	8000d9a <core_mem_alloc+0x6>
 8000d98:	4770      	bx	lr
 8000d9a:	b500      	push	{lr}
 8000d9c:	b081      	sub	sp, #4
 8000d9e:	1d00      	adds	r0, r0, #4
 8000da0:	f00b fc6a 	bl	800c678 <malloc>
 8000da4:	b108      	cbz	r0, 8000daa <core_mem_alloc+0x16>
 8000da6:	6000      	str	r0, [r0, #0]
 8000da8:	1d00      	adds	r0, r0, #4
 8000daa:	b001      	add	sp, #4
 8000dac:	bd00      	pop	{pc}

08000dae <core_mem_free>:
 8000dae:	2800      	cmp	r0, #0
 8000db0:	d100      	bne.n	8000db4 <core_mem_free+0x6>
 8000db2:	4770      	bx	lr
 8000db4:	b500      	push	{lr}
 8000db6:	b081      	sub	sp, #4
 8000db8:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8000dbc:	1f01      	subs	r1, r0, #4
 8000dbe:	428a      	cmp	r2, r1
 8000dc0:	d106      	bne.n	8000dd0 <core_mem_free+0x22>
 8000dc2:	b129      	cbz	r1, 8000dd0 <core_mem_free+0x22>
 8000dc4:	2000      	movs	r0, #0
 8000dc6:	6008      	str	r0, [r1, #0]
 8000dc8:	4608      	mov	r0, r1
 8000dca:	f00b fc5d 	bl	800c688 <free>
 8000dce:	2000      	movs	r0, #0
 8000dd0:	b001      	add	sp, #4
 8000dd2:	bd00      	pop	{pc}

08000dd4 <core_mem_realloc>:
 8000dd4:	b500      	push	{lr}
 8000dd6:	b081      	sub	sp, #4
 8000dd8:	b920      	cbnz	r0, 8000de4 <core_mem_realloc+0x10>
 8000dda:	b1c1      	cbz	r1, 8000e0e <core_mem_realloc+0x3a>
 8000ddc:	1d08      	adds	r0, r1, #4
 8000dde:	f00b fc4b 	bl	800c678 <malloc>
 8000de2:	e00e      	b.n	8000e02 <core_mem_realloc+0x2e>
 8000de4:	b919      	cbnz	r1, 8000dee <core_mem_realloc+0x1a>
 8000de6:	b001      	add	sp, #4
 8000de8:	f85d eb04 	ldr.w	lr, [sp], #4
 8000dec:	e7df      	b.n	8000dae <core_mem_free>
 8000dee:	1f02      	subs	r2, r0, #4
 8000df0:	f850 0c04 	ldr.w	r0, [r0, #-4]
 8000df4:	4290      	cmp	r0, r2
 8000df6:	d109      	bne.n	8000e0c <core_mem_realloc+0x38>
 8000df8:	b142      	cbz	r2, 8000e0c <core_mem_realloc+0x38>
 8000dfa:	1d09      	adds	r1, r1, #4
 8000dfc:	4610      	mov	r0, r2
 8000dfe:	f00b fd91 	bl	800c924 <realloc>
 8000e02:	b120      	cbz	r0, 8000e0e <core_mem_realloc+0x3a>
 8000e04:	6000      	str	r0, [r0, #0]
 8000e06:	b001      	add	sp, #4
 8000e08:	1d00      	adds	r0, r0, #4
 8000e0a:	bd00      	pop	{pc}
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	b001      	add	sp, #4
 8000e10:	bd00      	pop	{pc}
	...

08000e14 <core_inspect_tensor_list_>:
 8000e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e16:	0004      	movs	r4, r0
 8000e18:	460d      	mov	r5, r1
 8000e1a:	bf14      	ite	ne
 8000e1c:	2d00      	cmpne	r5, #0
 8000e1e:	2000      	moveq	r0, #0
 8000e20:	b081      	sub	sp, #4
 8000e22:	d022      	beq.n	8000e6a <core_inspect_tensor_list_+0x56>
 8000e24:	2000      	movs	r0, #0
 8000e26:	6028      	str	r0, [r5, #0]
 8000e28:	60a8      	str	r0, [r5, #8]
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	60ea      	str	r2, [r5, #12]
 8000e2e:	2600      	movs	r6, #0
 8000e30:	6820      	ldr	r0, [r4, #0]
 8000e32:	6801      	ldr	r1, [r0, #0]
 8000e34:	8920      	ldrh	r0, [r4, #8]
 8000e36:	2704      	movs	r7, #4
 8000e38:	b1b0      	cbz	r0, 8000e68 <core_inspect_tensor_list_+0x54>
 8000e3a:	6808      	ldr	r0, [r1, #0]
 8000e3c:	b150      	cbz	r0, 8000e54 <core_inspect_tensor_list_+0x40>
 8000e3e:	6802      	ldr	r2, [r0, #0]
 8000e40:	0051      	lsls	r1, r2, #1
 8000e42:	bf4f      	iteee	mi
 8000e44:	2000      	movmi	r0, #0
 8000e46:	6841      	ldrpl	r1, [r0, #4]
 8000e48:	4610      	movpl	r0, r2
 8000e4a:	f003 fbdd 	blpl	8004608 <ai_array_get_byte_size>
 8000e4e:	68a9      	ldr	r1, [r5, #8]
 8000e50:	1840      	adds	r0, r0, r1
 8000e52:	60a8      	str	r0, [r5, #8]
 8000e54:	1c76      	adds	r6, r6, #1
 8000e56:	6828      	ldr	r0, [r5, #0]
 8000e58:	1c40      	adds	r0, r0, #1
 8000e5a:	6028      	str	r0, [r5, #0]
 8000e5c:	6821      	ldr	r1, [r4, #0]
 8000e5e:	59c9      	ldr	r1, [r1, r7]
 8000e60:	8920      	ldrh	r0, [r4, #8]
 8000e62:	1d3f      	adds	r7, r7, #4
 8000e64:	4286      	cmp	r6, r0
 8000e66:	d3e8      	bcc.n	8000e3a <core_inspect_tensor_list_+0x26>
 8000e68:	6828      	ldr	r0, [r5, #0]
 8000e6a:	b001      	add	sp, #4
 8000e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000e70 <core_inspect_net_activations_>:
 8000e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e74:	b083      	sub	sp, #12
 8000e76:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 8000e78:	f20f 31b9 	addw	r1, pc, #953	; 0x3b9
 8000e7c:	f041 0101 	orr.w	r1, r1, #1
 8000e80:	9100      	str	r1, [sp, #0]
 8000e82:	2600      	movs	r6, #0
 8000e84:	9900      	ldr	r1, [sp, #0]
 8000e86:	636e      	str	r6, [r5, #52]	; 0x34
 8000e88:	63ae      	str	r6, [r5, #56]	; 0x38
 8000e8a:	46b2      	mov	sl, r6
 8000e8c:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8000e8e:	2800      	cmp	r0, #0
 8000e90:	46b0      	mov	r8, r6
 8000e92:	46b1      	mov	r9, r6
 8000e94:	d051      	beq.n	8000f3a <core_inspect_net_activations_+0xca>
 8000e96:	9101      	str	r1, [sp, #4]
 8000e98:	e041      	b.n	8000f1e <core_inspect_net_activations_+0xae>
 8000e9a:	6938      	ldr	r0, [r7, #16]
 8000e9c:	6020      	str	r0, [r4, #0]
 8000e9e:	68f9      	ldr	r1, [r7, #12]
 8000ea0:	f041 0101 	orr.w	r1, r1, #1
 8000ea4:	6061      	str	r1, [r4, #4]
 8000ea6:	f104 010c 	add.w	r1, r4, #12
 8000eaa:	9800      	ldr	r0, [sp, #0]
 8000eac:	f040 0001 	orr.w	r0, r0, #1
 8000eb0:	60f8      	str	r0, [r7, #12]
 8000eb2:	697a      	ldr	r2, [r7, #20]
 8000eb4:	6810      	ldr	r0, [r2, #0]
 8000eb6:	f7ff ffad 	bl	8000e14 <core_inspect_tensor_list_>
 8000eba:	4683      	mov	fp, r0
 8000ebc:	6978      	ldr	r0, [r7, #20]
 8000ebe:	6802      	ldr	r2, [r0, #0]
 8000ec0:	f104 011c 	add.w	r1, r4, #28
 8000ec4:	f102 000c 	add.w	r0, r2, #12
 8000ec8:	f7ff ffa4 	bl	8000e14 <core_inspect_tensor_list_>
 8000ecc:	4583      	cmp	fp, r0
 8000ece:	bf38      	it	cc
 8000ed0:	4683      	movcc	fp, r0
 8000ed2:	bf00      	nop
 8000ed4:	f8c4 8010 	str.w	r8, [r4, #16]
 8000ed8:	f8c4 9020 	str.w	r9, [r4, #32]
 8000edc:	45d3      	cmp	fp, sl
 8000ede:	68e0      	ldr	r0, [r4, #12]
 8000ee0:	69e1      	ldr	r1, [r4, #28]
 8000ee2:	4480      	add	r8, r0
 8000ee4:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8000ee6:	61a0      	str	r0, [r4, #24]
 8000ee8:	4489      	add	r9, r1
 8000eea:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8000eec:	62a1      	str	r1, [r4, #40]	; 0x28
 8000eee:	bf28      	it	cs
 8000ef0:	46da      	movcs	sl, fp
 8000ef2:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8000ef4:	6961      	ldr	r1, [r4, #20]
 8000ef6:	1808      	adds	r0, r1, r0
 8000ef8:	6368      	str	r0, [r5, #52]	; 0x34
 8000efa:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000efc:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8000efe:	1808      	adds	r0, r1, r0
 8000f00:	63a8      	str	r0, [r5, #56]	; 0x38
 8000f02:	f9b7 0000 	ldrsh.w	r0, [r7]
 8000f06:	f000 fd49 	bl	800199c <ai_layer_type_name>
 8000f0a:	4601      	mov	r1, r0
 8000f0c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8000f10:	f003 fd52 	bl	80049b8 <core_timer_init>
 8000f14:	68b8      	ldr	r0, [r7, #8]
 8000f16:	4287      	cmp	r7, r0
 8000f18:	bf18      	it	ne
 8000f1a:	2800      	cmpne	r0, #0
 8000f1c:	d00d      	beq.n	8000f3a <core_inspect_net_activations_+0xca>
 8000f1e:	4607      	mov	r7, r0
 8000f20:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8000f22:	ebc6 01c6 	rsb	r1, r6, r6, lsl #3
 8000f26:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8000f2a:	1c76      	adds	r6, r6, #1
 8000f2c:	9801      	ldr	r0, [sp, #4]
 8000f2e:	60a0      	str	r0, [r4, #8]
 8000f30:	2c00      	cmp	r4, #0
 8000f32:	d1b2      	bne.n	8000e9a <core_inspect_net_activations_+0x2a>
 8000f34:	f04f 0b00 	mov.w	fp, #0
 8000f38:	e7cc      	b.n	8000ed4 <core_inspect_net_activations_+0x64>
 8000f3a:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8000f3c:	f8c5 a03c 	str.w	sl, [r5, #60]	; 0x3c
 8000f40:	1cc0      	adds	r0, r0, #3
 8000f42:	0880      	lsrs	r0, r0, #2
 8000f44:	0080      	lsls	r0, r0, #2
 8000f46:	6368      	str	r0, [r5, #52]	; 0x34
 8000f48:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8000f4a:	1cc0      	adds	r0, r0, #3
 8000f4c:	0880      	lsrs	r0, r0, #2
 8000f4e:	0080      	lsls	r0, r0, #2
 8000f50:	63a8      	str	r0, [r5, #56]	; 0x38
 8000f52:	b003      	add	sp, #12
 8000f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000f58 <core_inspect_snapshot_init_report_node_>:
 8000f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f5c:	eb02 0642 	add.w	r6, r2, r2, lsl #1
 8000f60:	4603      	mov	r3, r0
 8000f62:	b085      	sub	sp, #20
 8000f64:	6a18      	ldr	r0, [r3, #32]
 8000f66:	9001      	str	r0, [sp, #4]
 8000f68:	6948      	ldr	r0, [r1, #20]
 8000f6a:	6807      	ldr	r7, [r0, #0]
 8000f6c:	9801      	ldr	r0, [sp, #4]
 8000f6e:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 8000f72:	f107 040c 	add.w	r4, r7, #12
 8000f76:	9402      	str	r4, [sp, #8]
 8000f78:	6945      	ldr	r5, [r0, #20]
 8000f7a:	689c      	ldr	r4, [r3, #8]
 8000f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f7e:	eb05 00c6 	add.w	r0, r5, r6, lsl #3
 8000f82:	ebc2 05c2 	rsb	r5, r2, r2, lsl #3
 8000f86:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8000f8a:	9200      	str	r2, [sp, #0]
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	880e      	ldrh	r6, [r1, #0]
 8000f90:	8006      	strh	r6, [r0, #0]
 8000f92:	09e4      	lsrs	r4, r4, #7
 8000f94:	8849      	ldrh	r1, [r1, #2]
 8000f96:	8041      	strh	r1, [r0, #2]
 8000f98:	6082      	str	r2, [r0, #8]
 8000f9a:	f004 0401 	and.w	r4, r4, #1
 8000f9e:	9900      	ldr	r1, [sp, #0]
 8000fa0:	68ca      	ldr	r2, [r1, #12]
 8000fa2:	8182      	strh	r2, [r0, #12]
 8000fa4:	9900      	ldr	r1, [sp, #0]
 8000fa6:	69ca      	ldr	r2, [r1, #28]
 8000fa8:	81c2      	strh	r2, [r0, #14]
 8000faa:	b92c      	cbnz	r4, 8000fb8 <core_inspect_snapshot_init_report_node_+0x60>
 8000fac:	2100      	movs	r1, #0
 8000fae:	6141      	str	r1, [r0, #20]
 8000fb0:	6101      	str	r1, [r0, #16]
 8000fb2:	b005      	add	sp, #20
 8000fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000fb8:	9901      	ldr	r1, [sp, #4]
 8000fba:	6a0a      	ldr	r2, [r1, #32]
 8000fbc:	9900      	ldr	r1, [sp, #0]
 8000fbe:	690b      	ldr	r3, [r1, #16]
 8000fc0:	eb03 0483 	add.w	r4, r3, r3, lsl #2
 8000fc4:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8000fc8:	6102      	str	r2, [r0, #16]
 8000fca:	2600      	movs	r6, #0
 8000fcc:	9901      	ldr	r1, [sp, #4]
 8000fce:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8000fd0:	9900      	ldr	r1, [sp, #0]
 8000fd2:	6a0b      	ldr	r3, [r1, #32]
 8000fd4:	eb03 0483 	add.w	r4, r3, r3, lsl #2
 8000fd8:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8000fdc:	6142      	str	r2, [r0, #20]
 8000fde:	f04f 0a04 	mov.w	sl, #4
 8000fe2:	9901      	ldr	r1, [sp, #4]
 8000fe4:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8000fe6:	9900      	ldr	r1, [sp, #0]
 8000fe8:	698b      	ldr	r3, [r1, #24]
 8000fea:	8939      	ldrh	r1, [r7, #8]
 8000fec:	fb03 f30b 	mul.w	r3, r3, fp
 8000ff0:	18d4      	adds	r4, r2, r3
 8000ff2:	683a      	ldr	r2, [r7, #0]
 8000ff4:	6815      	ldr	r5, [r2, #0]
 8000ff6:	46b1      	mov	r9, r6
 8000ff8:	b341      	cbz	r1, 800104c <core_inspect_snapshot_init_report_node_+0xf4>
 8000ffa:	9703      	str	r7, [sp, #12]
 8000ffc:	4680      	mov	r8, r0
 8000ffe:	682a      	ldr	r2, [r5, #0]
 8001000:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8001004:	6810      	ldr	r0, [r2, #0]
 8001006:	eb01 0709 	add.w	r7, r1, r9
 800100a:	f003 fa25 	bl	8004458 <ai_array_to_buffer_fmt>
 800100e:	6038      	str	r0, [r7, #0]
 8001010:	f8a7 b004 	strh.w	fp, [r7, #4]
 8001014:	1c76      	adds	r6, r6, #1
 8001016:	6928      	ldr	r0, [r5, #16]
 8001018:	80f8      	strh	r0, [r7, #6]
 800101a:	f109 0914 	add.w	r9, r9, #20
 800101e:	68e9      	ldr	r1, [r5, #12]
 8001020:	8139      	strh	r1, [r7, #8]
 8001022:	68a8      	ldr	r0, [r5, #8]
 8001024:	60f8      	str	r0, [r7, #12]
 8001026:	613c      	str	r4, [r7, #16]
 8001028:	6828      	ldr	r0, [r5, #0]
 800102a:	6841      	ldr	r1, [r0, #4]
 800102c:	6800      	ldr	r0, [r0, #0]
 800102e:	f003 faeb 	bl	8004608 <ai_array_get_byte_size>
 8001032:	fb00 f00b 	mul.w	r0, r0, fp
 8001036:	4404      	add	r4, r0
 8001038:	9803      	ldr	r0, [sp, #12]
 800103a:	6801      	ldr	r1, [r0, #0]
 800103c:	f851 500a 	ldr.w	r5, [r1, sl]
 8001040:	8901      	ldrh	r1, [r0, #8]
 8001042:	428e      	cmp	r6, r1
 8001044:	f10a 0a04 	add.w	sl, sl, #4
 8001048:	d3d9      	bcc.n	8000ffe <core_inspect_snapshot_init_report_node_+0xa6>
 800104a:	4640      	mov	r0, r8
 800104c:	9a01      	ldr	r2, [sp, #4]
 800104e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001050:	9a00      	ldr	r2, [sp, #0]
 8001052:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8001054:	fb03 f30b 	mul.w	r3, r3, fp
 8001058:	18cd      	adds	r5, r1, r3
 800105a:	9902      	ldr	r1, [sp, #8]
 800105c:	680a      	ldr	r2, [r1, #0]
 800105e:	6816      	ldr	r6, [r2, #0]
 8001060:	890a      	ldrh	r2, [r1, #8]
 8001062:	f04f 0a04 	mov.w	sl, #4
 8001066:	f04f 0900 	mov.w	r9, #0
 800106a:	b34a      	cbz	r2, 80010c0 <core_inspect_snapshot_init_report_node_+0x168>
 800106c:	46d8      	mov	r8, fp
 800106e:	460c      	mov	r4, r1
 8001070:	9000      	str	r0, [sp, #0]
 8001072:	46cb      	mov	fp, r9
 8001074:	9800      	ldr	r0, [sp, #0]
 8001076:	6832      	ldr	r2, [r6, #0]
 8001078:	6941      	ldr	r1, [r0, #20]
 800107a:	6810      	ldr	r0, [r2, #0]
 800107c:	eb01 0709 	add.w	r7, r1, r9
 8001080:	f003 f9ea 	bl	8004458 <ai_array_to_buffer_fmt>
 8001084:	6038      	str	r0, [r7, #0]
 8001086:	f8a7 8004 	strh.w	r8, [r7, #4]
 800108a:	f10b 0b01 	add.w	fp, fp, #1
 800108e:	6930      	ldr	r0, [r6, #16]
 8001090:	80f8      	strh	r0, [r7, #6]
 8001092:	f109 0914 	add.w	r9, r9, #20
 8001096:	68f1      	ldr	r1, [r6, #12]
 8001098:	8139      	strh	r1, [r7, #8]
 800109a:	68b0      	ldr	r0, [r6, #8]
 800109c:	60f8      	str	r0, [r7, #12]
 800109e:	613d      	str	r5, [r7, #16]
 80010a0:	6830      	ldr	r0, [r6, #0]
 80010a2:	6841      	ldr	r1, [r0, #4]
 80010a4:	6800      	ldr	r0, [r0, #0]
 80010a6:	f003 faaf 	bl	8004608 <ai_array_get_byte_size>
 80010aa:	fb00 f008 	mul.w	r0, r0, r8
 80010ae:	4405      	add	r5, r0
 80010b0:	6820      	ldr	r0, [r4, #0]
 80010b2:	f850 600a 	ldr.w	r6, [r0, sl]
 80010b6:	8920      	ldrh	r0, [r4, #8]
 80010b8:	4583      	cmp	fp, r0
 80010ba:	f10a 0a04 	add.w	sl, sl, #4
 80010be:	d3d9      	bcc.n	8001074 <core_inspect_snapshot_init_report_node_+0x11c>
 80010c0:	b005      	add	sp, #20
 80010c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080010c6 <core_inspect_snapshot_push_>:
 80010c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010ca:	4606      	mov	r6, r0
 80010cc:	b083      	sub	sp, #12
 80010ce:	68b0      	ldr	r0, [r6, #8]
 80010d0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80010d2:	09c0      	lsrs	r0, r0, #7
 80010d4:	f000 0a01 	and.w	sl, r0, #1
 80010d8:	69b0      	ldr	r0, [r6, #24]
 80010da:	2300      	movs	r3, #0
 80010dc:	2200      	movs	r2, #0
 80010de:	2500      	movs	r5, #0
 80010e0:	b338      	cbz	r0, 8001132 <core_inspect_snapshot_push_+0x6c>
 80010e2:	b2af      	uxth	r7, r5
 80010e4:	ebc7 0ec7 	rsb	lr, r7, r7, lsl #3
 80010e8:	eb04 07ce 	add.w	r7, r4, lr, lsl #3
 80010ec:	1c6d      	adds	r5, r5, #1
 80010ee:	f8d7 800c 	ldr.w	r8, [r7, #12]
 80010f2:	69ff      	ldr	r7, [r7, #28]
 80010f4:	443a      	add	r2, r7
 80010f6:	b2af      	uxth	r7, r5
 80010f8:	4287      	cmp	r7, r0
 80010fa:	4443      	add	r3, r8
 80010fc:	d219      	bcs.n	8001132 <core_inspect_snapshot_push_+0x6c>
 80010fe:	ebc7 08c7 	rsb	r8, r7, r7, lsl #3
 8001102:	eb04 07c8 	add.w	r7, r4, r8, lsl #3
 8001106:	1c6d      	adds	r5, r5, #1
 8001108:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 800110c:	69ff      	ldr	r7, [r7, #28]
 800110e:	443a      	add	r2, r7
 8001110:	b2af      	uxth	r7, r5
 8001112:	4287      	cmp	r7, r0
 8001114:	4473      	add	r3, lr
 8001116:	d20c      	bcs.n	8001132 <core_inspect_snapshot_push_+0x6c>
 8001118:	ebc7 0ec7 	rsb	lr, r7, r7, lsl #3
 800111c:	eb04 07ce 	add.w	r7, r4, lr, lsl #3
 8001120:	1c6d      	adds	r5, r5, #1
 8001122:	f8d7 800c 	ldr.w	r8, [r7, #12]
 8001126:	69ff      	ldr	r7, [r7, #28]
 8001128:	443a      	add	r2, r7
 800112a:	b2af      	uxth	r7, r5
 800112c:	4287      	cmp	r7, r0
 800112e:	4443      	add	r3, r8
 8001130:	d3d7      	bcc.n	80010e2 <core_inspect_snapshot_push_+0x1c>
 8001132:	460d      	mov	r5, r1
 8001134:	eb03 0483 	add.w	r4, r3, r3, lsl #2
 8001138:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800113c:	00a3      	lsls	r3, r4, #2
 800113e:	008a      	lsls	r2, r1, #2
 8001140:	9301      	str	r3, [sp, #4]
 8001142:	9200      	str	r2, [sp, #0]
 8001144:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8001148:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 800114a:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 800114e:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 8001152:	eb08 0081 	add.w	r0, r8, r1, lsl #2
 8001156:	3037      	adds	r0, #55	; 0x37
 8001158:	ea4f 0990 	mov.w	r9, r0, lsr #2
 800115c:	6b77      	ldr	r7, [r6, #52]	; 0x34
 800115e:	9801      	ldr	r0, [sp, #4]
 8001160:	fb07 0705 	mla	r7, r7, r5, r0
 8001164:	1cff      	adds	r7, r7, #3
 8001166:	08bf      	lsrs	r7, r7, #2
 8001168:	00bf      	lsls	r7, r7, #2
 800116a:	ea5f 010a 	movs.w	r1, sl
 800116e:	d009      	beq.n	8001184 <core_inspect_snapshot_push_+0xbe>
 8001170:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 8001172:	fb01 2105 	mla	r1, r1, r5, r2
 8001176:	1cc9      	adds	r1, r1, #3
 8001178:	eb07 0089 	add.w	r0, r7, r9, lsl #2
 800117c:	0889      	lsrs	r1, r1, #2
 800117e:	eb00 0b81 	add.w	fp, r0, r1, lsl #2
 8001182:	e001      	b.n	8001188 <core_inspect_snapshot_push_+0xc2>
 8001184:	ea4f 0b89 	mov.w	fp, r9, lsl #2
 8001188:	6a34      	ldr	r4, [r6, #32]
 800118a:	b154      	cbz	r4, 80011a2 <core_inspect_snapshot_push_+0xdc>
 800118c:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 800118e:	b112      	cbz	r2, 8001196 <core_inspect_snapshot_push_+0xd0>
 8001190:	6b30      	ldr	r0, [r6, #48]	; 0x30
 8001192:	4621      	mov	r1, r4
 8001194:	4790      	blx	r2
 8001196:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001198:	4559      	cmp	r1, fp
 800119a:	d20b      	bcs.n	80011b4 <core_inspect_snapshot_push_+0xee>
 800119c:	4620      	mov	r0, r4
 800119e:	f7ff fe06 	bl	8000dae <core_mem_free>
 80011a2:	4658      	mov	r0, fp
 80011a4:	f7ff fdf6 	bl	8000d94 <core_mem_alloc>
 80011a8:	0004      	movs	r4, r0
 80011aa:	bf08      	it	eq
 80011ac:	2000      	moveq	r0, #0
 80011ae:	d03d      	beq.n	800122c <core_inspect_snapshot_push_+0x166>
 80011b0:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
 80011b4:	f104 0134 	add.w	r1, r4, #52	; 0x34
 80011b8:	f104 0034 	add.w	r0, r4, #52	; 0x34
 80011bc:	4441      	add	r1, r8
 80011be:	f1ba 0f00 	cmp.w	sl, #0
 80011c2:	61a0      	str	r0, [r4, #24]
 80011c4:	61e1      	str	r1, [r4, #28]
 80011c6:	d007      	beq.n	80011d8 <core_inspect_snapshot_push_+0x112>
 80011c8:	eb04 0089 	add.w	r0, r4, r9, lsl #2
 80011cc:	9a01      	ldr	r2, [sp, #4]
 80011ce:	9b00      	ldr	r3, [sp, #0]
 80011d0:	19c1      	adds	r1, r0, r7
 80011d2:	4402      	add	r2, r0
 80011d4:	440b      	add	r3, r1
 80011d6:	e003      	b.n	80011e0 <core_inspect_snapshot_push_+0x11a>
 80011d8:	2100      	movs	r1, #0
 80011da:	2000      	movs	r0, #0
 80011dc:	2300      	movs	r3, #0
 80011de:	2200      	movs	r2, #0
 80011e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80011e2:	62a2      	str	r2, [r4, #40]	; 0x28
 80011e4:	6261      	str	r1, [r4, #36]	; 0x24
 80011e6:	6220      	str	r0, [r4, #32]
 80011e8:	6234      	str	r4, [r6, #32]
 80011ea:	61f5      	str	r5, [r6, #28]
 80011ec:	2500      	movs	r5, #0
 80011ee:	f8df 14ec 	ldr.w	r1, [pc, #1260]	; 80016dc <.text_12>
 80011f2:	6930      	ldr	r0, [r6, #16]
 80011f4:	680a      	ldr	r2, [r1, #0]
 80011f6:	6022      	str	r2, [r4, #0]
 80011f8:	1c52      	adds	r2, r2, #1
 80011fa:	600a      	str	r2, [r1, #0]
 80011fc:	6065      	str	r5, [r4, #4]
 80011fe:	68f2      	ldr	r2, [r6, #12]
 8001200:	60a2      	str	r2, [r4, #8]
 8001202:	69b1      	ldr	r1, [r6, #24]
 8001204:	60e1      	str	r1, [r4, #12]
 8001206:	6125      	str	r5, [r4, #16]
 8001208:	69a1      	ldr	r1, [r4, #24]
 800120a:	6161      	str	r1, [r4, #20]
 800120c:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800120e:	b164      	cbz	r4, 800122a <core_inspect_snapshot_push_+0x164>
 8001210:	462a      	mov	r2, r5
 8001212:	4621      	mov	r1, r4
 8001214:	4630      	mov	r0, r6
 8001216:	f7ff fe9f 	bl	8000f58 <core_inspect_snapshot_init_report_node_>
 800121a:	68a0      	ldr	r0, [r4, #8]
 800121c:	1c6d      	adds	r5, r5, #1
 800121e:	4284      	cmp	r4, r0
 8001220:	bf18      	it	ne
 8001222:	2800      	cmpne	r0, #0
 8001224:	bf18      	it	ne
 8001226:	4604      	movne	r4, r0
 8001228:	d1f2      	bne.n	8001210 <core_inspect_snapshot_push_+0x14a>
 800122a:	2001      	movs	r0, #1
 800122c:	b003      	add	sp, #12
 800122e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08001234 <core_inspect_forward_validate_>:
 8001234:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001238:	b08c      	sub	sp, #48	; 0x30
 800123a:	6841      	ldr	r1, [r0, #4]
 800123c:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 800123e:	68a0      	ldr	r0, [r4, #8]
 8001240:	09c0      	lsrs	r0, r0, #7
 8001242:	f000 0001 	and.w	r0, r0, #1
 8001246:	f88d 0000 	strb.w	r0, [sp]
 800124a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800124c:	6942      	ldr	r2, [r0, #20]
 800124e:	6815      	ldr	r5, [r2, #0]
 8001250:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001252:	f105 030c 	add.w	r3, r5, #12
 8001256:	9303      	str	r3, [sp, #12]
 8001258:	8a4a      	ldrh	r2, [r1, #18]
 800125a:	9204      	str	r2, [sp, #16]
 800125c:	8a0e      	ldrh	r6, [r1, #16]
 800125e:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8001260:	4288      	cmp	r0, r1
 8001262:	bf01      	itttt	eq
 8001264:	2200      	moveq	r2, #0
 8001266:	6162      	streq	r2, [r4, #20]
 8001268:	69e0      	ldreq	r0, [r4, #28]
 800126a:	2800      	cmpeq	r0, #0
 800126c:	d103      	bne.n	8001276 <core_inspect_forward_validate_+0x42>
 800126e:	4631      	mov	r1, r6
 8001270:	4620      	mov	r0, r4
 8001272:	f7ff ff28 	bl	80010c6 <core_inspect_snapshot_push_>
 8001276:	6a22      	ldr	r2, [r4, #32]
 8001278:	6961      	ldr	r1, [r4, #20]
 800127a:	6953      	ldr	r3, [r2, #20]
 800127c:	eb01 0741 	add.w	r7, r1, r1, lsl #1
 8001280:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8001284:	9702      	str	r7, [sp, #8]
 8001286:	69d2      	ldr	r2, [r2, #28]
 8001288:	9205      	str	r2, [sp, #20]
 800128a:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 800128e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001290:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 8001294:	9101      	str	r1, [sp, #4]
 8001296:	9804      	ldr	r0, [sp, #16]
 8001298:	9902      	ldr	r1, [sp, #8]
 800129a:	1c40      	adds	r0, r0, #1
 800129c:	8088      	strh	r0, [r1, #4]
 800129e:	9802      	ldr	r0, [sp, #8]
 80012a0:	80c6      	strh	r6, [r0, #6]
 80012a2:	69e1      	ldr	r1, [r4, #28]
 80012a4:	42b1      	cmp	r1, r6
 80012a6:	d103      	bne.n	80012b0 <core_inspect_forward_validate_+0x7c>
 80012a8:	9801      	ldr	r0, [sp, #4]
 80012aa:	302c      	adds	r0, #44	; 0x2c
 80012ac:	f003 fb99 	bl	80049e2 <core_timer_reset>
 80012b0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80012b2:	684a      	ldr	r2, [r1, #4]
 80012b4:	6860      	ldr	r0, [r4, #4]
 80012b6:	64d0      	str	r0, [r2, #76]	; 0x4c
 80012b8:	9801      	ldr	r0, [sp, #4]
 80012ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80012bc:	6841      	ldr	r1, [r0, #4]
 80012be:	f041 0101 	orr.w	r1, r1, #1
 80012c2:	60d1      	str	r1, [r2, #12]
 80012c4:	f89d 0000 	ldrb.w	r0, [sp]
 80012c8:	b360      	cbz	r0, 8001324 <core_inspect_forward_validate_+0xf0>
 80012ca:	6829      	ldr	r1, [r5, #0]
 80012cc:	8928      	ldrh	r0, [r5, #8]
 80012ce:	f8d1 8000 	ldr.w	r8, [r1]
 80012d2:	f04f 0900 	mov.w	r9, #0
 80012d6:	f04f 0a04 	mov.w	sl, #4
 80012da:	46cb      	mov	fp, r9
 80012dc:	b310      	cbz	r0, 8001324 <core_inspect_forward_validate_+0xf0>
 80012de:	9e04      	ldr	r6, [sp, #16]
 80012e0:	f8dd 7008 	ldr.w	r7, [sp, #8]
 80012e4:	f8d8 0000 	ldr.w	r0, [r8]
 80012e8:	6841      	ldr	r1, [r0, #4]
 80012ea:	6800      	ldr	r0, [r0, #0]
 80012ec:	f003 f98c 	bl	8004608 <ai_array_get_byte_size>
 80012f0:	f8d8 3000 	ldr.w	r3, [r8]
 80012f4:	6899      	ldr	r1, [r3, #8]
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	3310      	adds	r3, #16
 80012fa:	4602      	mov	r2, r0
 80012fc:	f853 300b 	ldr.w	r3, [r3, fp]
 8001300:	4370      	muls	r0, r6
 8001302:	4418      	add	r0, r3
 8001304:	f00b f98c 	bl	800c620 <__aeabi_memcpy>
 8001308:	6828      	ldr	r0, [r5, #0]
 800130a:	8929      	ldrh	r1, [r5, #8]
 800130c:	f850 800a 	ldr.w	r8, [r0, sl]
 8001310:	f109 0901 	add.w	r9, r9, #1
 8001314:	4589      	cmp	r9, r1
 8001316:	f10b 0b14 	add.w	fp, fp, #20
 800131a:	f10a 0a04 	add.w	sl, sl, #4
 800131e:	d3e1      	bcc.n	80012e4 <core_inspect_forward_validate_+0xb0>
 8001320:	9604      	str	r6, [sp, #16]
 8001322:	9702      	str	r7, [sp, #8]
 8001324:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001326:	2900      	cmp	r1, #0
 8001328:	d047      	beq.n	80013ba <core_inspect_forward_validate_+0x186>
 800132a:	9902      	ldr	r1, [sp, #8]
 800132c:	e891 50cc 	ldmia.w	r1, {r2, r3, r6, r7, ip, lr}
 8001330:	a806      	add	r0, sp, #24
 8001332:	2100      	movs	r1, #0
 8001334:	e880 50cc 	stmia.w	r0, {r2, r3, r6, r7, ip, lr}
 8001338:	9805      	ldr	r0, [sp, #20]
 800133a:	900a      	str	r0, [sp, #40]	; 0x28
 800133c:	910b      	str	r1, [sp, #44]	; 0x2c
 800133e:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 8001342:	2700      	movs	r7, #0
 8001344:	6828      	ldr	r0, [r5, #0]
 8001346:	6806      	ldr	r6, [r0, #0]
 8001348:	8928      	ldrh	r0, [r5, #8]
 800134a:	f04f 0804 	mov.w	r8, #4
 800134e:	468b      	mov	fp, r1
 8001350:	b318      	cbz	r0, 800139a <core_inspect_forward_validate_+0x166>
 8001352:	6830      	ldr	r0, [r6, #0]
 8001354:	f8d0 9008 	ldr.w	r9, [r0, #8]
 8001358:	990a      	ldr	r1, [sp, #40]	; 0x28
 800135a:	6800      	ldr	r0, [r0, #0]
 800135c:	eb01 0a0b 	add.w	sl, r1, fp
 8001360:	f003 f87a 	bl	8004458 <ai_array_to_buffer_fmt>
 8001364:	f8ca 0000 	str.w	r0, [sl]
 8001368:	1c7f      	adds	r7, r7, #1
 800136a:	2001      	movs	r0, #1
 800136c:	f8aa 0004 	strh.w	r0, [sl, #4]
 8001370:	f10b 0b14 	add.w	fp, fp, #20
 8001374:	6931      	ldr	r1, [r6, #16]
 8001376:	f8aa 1006 	strh.w	r1, [sl, #6]
 800137a:	68f0      	ldr	r0, [r6, #12]
 800137c:	f8aa 0008 	strh.w	r0, [sl, #8]
 8001380:	68b1      	ldr	r1, [r6, #8]
 8001382:	f8ca 100c 	str.w	r1, [sl, #12]
 8001386:	f8ca 9010 	str.w	r9, [sl, #16]
 800138a:	6828      	ldr	r0, [r5, #0]
 800138c:	f850 6008 	ldr.w	r6, [r0, r8]
 8001390:	8928      	ldrh	r0, [r5, #8]
 8001392:	4287      	cmp	r7, r0
 8001394:	f108 0804 	add.w	r8, r8, #4
 8001398:	d3db      	bcc.n	8001352 <core_inspect_forward_validate_+0x11e>
 800139a:	9901      	ldr	r1, [sp, #4]
 800139c:	ed91 0a0d 	vldr	s0, [r1, #52]	; 0x34
 80013a0:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 80013a4:	eddf 0acc 	vldr	s1, [pc, #816]	; 80016d8 <.text_11>
 80013a8:	ee60 0a20 	vmul.f32	s1, s0, s1
 80013ac:	edcd 0a08 	vstr	s1, [sp, #32]
 80013b0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80013b2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80013b4:	2200      	movs	r2, #0
 80013b6:	a906      	add	r1, sp, #24
 80013b8:	4798      	blx	r3
 80013ba:	980c      	ldr	r0, [sp, #48]	; 0x30
 80013bc:	f9b0 0000 	ldrsh.w	r0, [r0]
 80013c0:	f000 fb74 	bl	8001aac <ai_layer_type_is_valid>
 80013c4:	2800      	cmp	r0, #0
 80013c6:	9801      	ldr	r0, [sp, #4]
 80013c8:	d006      	beq.n	80013d8 <core_inspect_forward_validate_+0x1a4>
 80013ca:	302c      	adds	r0, #44	; 0x2c
 80013cc:	f003 fb0f 	bl	80049ee <core_timer_start>
 80013d0:	980c      	ldr	r0, [sp, #48]	; 0x30
 80013d2:	68c2      	ldr	r2, [r0, #12]
 80013d4:	4790      	blx	r2
 80013d6:	e002      	b.n	80013de <core_inspect_forward_validate_+0x1aa>
 80013d8:	302c      	adds	r0, #44	; 0x2c
 80013da:	f003 fb08 	bl	80049ee <core_timer_start>
 80013de:	9801      	ldr	r0, [sp, #4]
 80013e0:	302c      	adds	r0, #44	; 0x2c
 80013e2:	f003 fb0e 	bl	8004a02 <core_timer_stop>
 80013e6:	f89d 0000 	ldrb.w	r0, [sp]
 80013ea:	b390      	cbz	r0, 8001452 <core_inspect_forward_validate_+0x21e>
 80013ec:	9803      	ldr	r0, [sp, #12]
 80013ee:	6801      	ldr	r1, [r0, #0]
 80013f0:	f8d1 a000 	ldr.w	sl, [r1]
 80013f4:	4601      	mov	r1, r0
 80013f6:	f04f 0800 	mov.w	r8, #0
 80013fa:	8908      	ldrh	r0, [r1, #8]
 80013fc:	f04f 0904 	mov.w	r9, #4
 8001400:	46c3      	mov	fp, r8
 8001402:	b330      	cbz	r0, 8001452 <core_inspect_forward_validate_+0x21e>
 8001404:	9f04      	ldr	r7, [sp, #16]
 8001406:	9d02      	ldr	r5, [sp, #8]
 8001408:	ea4f 0601 	mov.w	r6, r1
 800140c:	f8da 0000 	ldr.w	r0, [sl]
 8001410:	6841      	ldr	r1, [r0, #4]
 8001412:	6800      	ldr	r0, [r0, #0]
 8001414:	f003 f8f8 	bl	8004608 <ai_array_get_byte_size>
 8001418:	4602      	mov	r2, r0
 800141a:	f8da 0000 	ldr.w	r0, [sl]
 800141e:	6881      	ldr	r1, [r0, #8]
 8001420:	6968      	ldr	r0, [r5, #20]
 8001422:	3010      	adds	r0, #16
 8001424:	4613      	mov	r3, r2
 8001426:	f850 e00b 	ldr.w	lr, [r0, fp]
 800142a:	437a      	muls	r2, r7
 800142c:	eb0e 0002 	add.w	r0, lr, r2
 8001430:	461a      	mov	r2, r3
 8001432:	f00b f8f5 	bl	800c620 <__aeabi_memcpy>
 8001436:	6830      	ldr	r0, [r6, #0]
 8001438:	8931      	ldrh	r1, [r6, #8]
 800143a:	f850 a009 	ldr.w	sl, [r0, r9]
 800143e:	f108 0801 	add.w	r8, r8, #1
 8001442:	4588      	cmp	r8, r1
 8001444:	f10b 0b14 	add.w	fp, fp, #20
 8001448:	f109 0904 	add.w	r9, r9, #4
 800144c:	d3de      	bcc.n	800140c <core_inspect_forward_validate_+0x1d8>
 800144e:	9603      	str	r6, [sp, #12]
 8001450:	9502      	str	r5, [sp, #8]
 8001452:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001454:	2800      	cmp	r0, #0
 8001456:	d04e      	beq.n	80014f6 <core_inspect_forward_validate_+0x2c2>
 8001458:	9a02      	ldr	r2, [sp, #8]
 800145a:	e892 50e8 	ldmia.w	r2, {r3, r5, r6, r7, ip, lr}
 800145e:	a906      	add	r1, sp, #24
 8001460:	2200      	movs	r2, #0
 8001462:	e881 50e8 	stmia.w	r1, {r3, r5, r6, r7, ip, lr}
 8001466:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 800146a:	920a      	str	r2, [sp, #40]	; 0x28
 800146c:	4692      	mov	sl, r2
 800146e:	9805      	ldr	r0, [sp, #20]
 8001470:	900b      	str	r0, [sp, #44]	; 0x2c
 8001472:	f04f 0b04 	mov.w	fp, #4
 8001476:	9803      	ldr	r0, [sp, #12]
 8001478:	6801      	ldr	r1, [r0, #0]
 800147a:	8900      	ldrh	r0, [r0, #8]
 800147c:	f8d1 9000 	ldr.w	r9, [r1]
 8001480:	2500      	movs	r5, #0
 8001482:	b340      	cbz	r0, 80014d6 <core_inspect_forward_validate_+0x2a2>
 8001484:	f8dd 600c 	ldr.w	r6, [sp, #12]
 8001488:	f8d9 0000 	ldr.w	r0, [r9]
 800148c:	6887      	ldr	r7, [r0, #8]
 800148e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8001490:	6800      	ldr	r0, [r0, #0]
 8001492:	eb01 0805 	add.w	r8, r1, r5
 8001496:	f002 ffdf 	bl	8004458 <ai_array_to_buffer_fmt>
 800149a:	f8c8 0000 	str.w	r0, [r8]
 800149e:	f10a 0a01 	add.w	sl, sl, #1
 80014a2:	2001      	movs	r0, #1
 80014a4:	f8a8 0004 	strh.w	r0, [r8, #4]
 80014a8:	3514      	adds	r5, #20
 80014aa:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80014ae:	f8a8 1006 	strh.w	r1, [r8, #6]
 80014b2:	f8d9 000c 	ldr.w	r0, [r9, #12]
 80014b6:	f8a8 0008 	strh.w	r0, [r8, #8]
 80014ba:	f8d9 1008 	ldr.w	r1, [r9, #8]
 80014be:	f8c8 100c 	str.w	r1, [r8, #12]
 80014c2:	f8c8 7010 	str.w	r7, [r8, #16]
 80014c6:	6830      	ldr	r0, [r6, #0]
 80014c8:	f850 900b 	ldr.w	r9, [r0, fp]
 80014cc:	8930      	ldrh	r0, [r6, #8]
 80014ce:	4582      	cmp	sl, r0
 80014d0:	f10b 0b04 	add.w	fp, fp, #4
 80014d4:	d3d8      	bcc.n	8001488 <core_inspect_forward_validate_+0x254>
 80014d6:	9901      	ldr	r1, [sp, #4]
 80014d8:	ed91 0a0d 	vldr	s0, [r1, #52]	; 0x34
 80014dc:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 80014e0:	eddf 0a7d 	vldr	s1, [pc, #500]	; 80016d8 <.text_11>
 80014e4:	ee60 0a20 	vmul.f32	s1, s0, s1
 80014e8:	edcd 0a08 	vstr	s1, [sp, #32]
 80014ec:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80014ee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80014f0:	2201      	movs	r2, #1
 80014f2:	a906      	add	r1, sp, #24
 80014f4:	4798      	blx	r3
 80014f6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80014f8:	6841      	ldr	r1, [r0, #4]
 80014fa:	64cc      	str	r4, [r1, #76]	; 0x4c
 80014fc:	9801      	ldr	r0, [sp, #4]
 80014fe:	6881      	ldr	r1, [r0, #8]
 8001500:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001502:	f041 0101 	orr.w	r1, r1, #1
 8001506:	60c1      	str	r1, [r0, #12]
 8001508:	990c      	ldr	r1, [sp, #48]	; 0x30
 800150a:	6888      	ldr	r0, [r1, #8]
 800150c:	4281      	cmp	r1, r0
 800150e:	bf18      	it	ne
 8001510:	2800      	cmpne	r0, #0
 8001512:	d13b      	bne.n	800158c <core_inspect_forward_validate_+0x358>
 8001514:	68e3      	ldr	r3, [r4, #12]
 8001516:	69e0      	ldr	r0, [r4, #28]
 8001518:	1c5b      	adds	r3, r3, #1
 800151a:	1e40      	subs	r0, r0, #1
 800151c:	60e3      	str	r3, [r4, #12]
 800151e:	61e0      	str	r0, [r4, #28]
 8001520:	d134      	bne.n	800158c <core_inspect_forward_validate_+0x358>
 8001522:	6a22      	ldr	r2, [r4, #32]
 8001524:	6891      	ldr	r1, [r2, #8]
 8001526:	68a0      	ldr	r0, [r4, #8]
 8001528:	1a5b      	subs	r3, r3, r1
 800152a:	6093      	str	r3, [r2, #8]
 800152c:	09c0      	lsrs	r0, r0, #7
 800152e:	2300      	movs	r3, #0
 8001530:	6113      	str	r3, [r2, #16]
 8001532:	f000 0001 	and.w	r0, r0, #1
 8001536:	69a1      	ldr	r1, [r4, #24]
 8001538:	ed9f 0a67 	vldr	s0, [pc, #412]	; 80016d8 <.text_11>
 800153c:	b331      	cbz	r1, 800158c <core_inspect_forward_validate_+0x358>
 800153e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8001540:	3534      	adds	r5, #52	; 0x34
 8001542:	ebc3 06c3 	rsb	r6, r3, r3, lsl #3
 8001546:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
 800154a:	6955      	ldr	r5, [r2, #20]
 800154c:	edd6 0a00 	vldr	s1, [r6]
 8001550:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 8001554:	00f6      	lsls	r6, r6, #3
 8001556:	f105 0708 	add.w	r7, r5, #8
 800155a:	eef8 0a60 	vcvt.f32.u32	s1, s1
 800155e:	4437      	add	r7, r6
 8001560:	ee60 0a80 	vmul.f32	s1, s1, s0
 8001564:	edc7 0a00 	vstr	s1, [r7]
 8001568:	ed92 1a04 	vldr	s2, [r2, #16]
 800156c:	ee71 0a20 	vadd.f32	s1, s2, s1
 8001570:	edc2 0a04 	vstr	s1, [r2, #16]
 8001574:	b930      	cbnz	r0, 8001584 <core_inspect_forward_validate_+0x350>
 8001576:	f105 0c14 	add.w	ip, r5, #20
 800157a:	2700      	movs	r7, #0
 800157c:	f84c 7006 	str.w	r7, [ip, r6]
 8001580:	3510      	adds	r5, #16
 8001582:	51af      	str	r7, [r5, r6]
 8001584:	1c5b      	adds	r3, r3, #1
 8001586:	b29b      	uxth	r3, r3
 8001588:	428b      	cmp	r3, r1
 800158a:	d3d8      	bcc.n	800153e <core_inspect_forward_validate_+0x30a>
 800158c:	6960      	ldr	r0, [r4, #20]
 800158e:	1c40      	adds	r0, r0, #1
 8001590:	6160      	str	r0, [r4, #20]
 8001592:	b00d      	add	sp, #52	; 0x34
 8001594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001598 <ai_network_inspect_init>:
 8001598:	b570      	push	{r4, r5, r6, lr}
 800159a:	460c      	mov	r4, r1
 800159c:	f7ff f9d8 	bl	8000950 <ai_platform_context_acquire>
 80015a0:	4605      	mov	r5, r0
 80015a2:	2600      	movs	r6, #0
 80015a4:	2d00      	cmp	r5, #0
 80015a6:	bf1c      	itt	ne
 80015a8:	6c69      	ldrne	r1, [r5, #68]	; 0x44
 80015aa:	2900      	cmpne	r1, #0
 80015ac:	d03c      	beq.n	8001628 <ai_network_inspect_init+0x90>
 80015ae:	6888      	ldr	r0, [r1, #8]
 80015b0:	1c76      	adds	r6, r6, #1
 80015b2:	4281      	cmp	r1, r0
 80015b4:	bf1c      	itt	ne
 80015b6:	2800      	cmpne	r0, #0
 80015b8:	4601      	movne	r1, r0
 80015ba:	d1f8      	bne.n	80015ae <ai_network_inspect_init+0x16>
 80015bc:	e02b      	b.n	8001616 <ai_network_inspect_init+0x7e>
 80015be:	4948      	ldr	r1, [pc, #288]	; (80016e0 <.text_13>)
 80015c0:	6001      	str	r1, [r0, #0]
 80015c2:	2c00      	cmp	r4, #0
 80015c4:	bf14      	ite	ne
 80015c6:	6861      	ldrne	r1, [r4, #4]
 80015c8:	2100      	moveq	r1, #0
 80015ca:	6281      	str	r1, [r0, #40]	; 0x28
 80015cc:	2c00      	cmp	r4, #0
 80015ce:	bf14      	ite	ne
 80015d0:	68a1      	ldrne	r1, [r4, #8]
 80015d2:	2100      	moveq	r1, #0
 80015d4:	62c1      	str	r1, [r0, #44]	; 0x2c
 80015d6:	2c00      	cmp	r4, #0
 80015d8:	bf14      	ite	ne
 80015da:	68e1      	ldrne	r1, [r4, #12]
 80015dc:	2100      	moveq	r1, #0
 80015de:	6301      	str	r1, [r0, #48]	; 0x30
 80015e0:	2c00      	cmp	r4, #0
 80015e2:	bf14      	ite	ne
 80015e4:	7821      	ldrbne	r1, [r4, #0]
 80015e6:	2101      	moveq	r1, #1
 80015e8:	6081      	str	r1, [r0, #8]
 80015ea:	2200      	movs	r2, #0
 80015ec:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 80015ee:	6041      	str	r1, [r0, #4]
 80015f0:	60c2      	str	r2, [r0, #12]
 80015f2:	f100 0140 	add.w	r1, r0, #64	; 0x40
 80015f6:	6105      	str	r5, [r0, #16]
 80015f8:	6186      	str	r6, [r0, #24]
 80015fa:	6142      	str	r2, [r0, #20]
 80015fc:	61c2      	str	r2, [r0, #28]
 80015fe:	6241      	str	r1, [r0, #36]	; 0x24
 8001600:	6202      	str	r2, [r0, #32]
 8001602:	64e8      	str	r0, [r5, #76]	; 0x4c
 8001604:	4628      	mov	r0, r5
 8001606:	f7ff fc33 	bl	8000e70 <core_inspect_net_activations_>
 800160a:	1d29      	adds	r1, r5, #4
 800160c:	4628      	mov	r0, r5
 800160e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001612:	f000 b905 	b.w	8001820 <core_utils_generate_network_signature>
 8001616:	b13e      	cbz	r6, 8001628 <ai_network_inspect_init+0x90>
 8001618:	ebc6 00c6 	rsb	r0, r6, r6, lsl #3
 800161c:	00c0      	lsls	r0, r0, #3
 800161e:	3040      	adds	r0, #64	; 0x40
 8001620:	f7ff fbb8 	bl	8000d94 <core_mem_alloc>
 8001624:	2800      	cmp	r0, #0
 8001626:	d1ca      	bne.n	80015be <ai_network_inspect_init+0x26>
 8001628:	2000      	movs	r0, #0
 800162a:	bd70      	pop	{r4, r5, r6, pc}

0800162c <ai_network_inspect_get_report>:
 800162c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800162e:	b081      	sub	sp, #4
 8001630:	460c      	mov	r4, r1
 8001632:	f7ff f98d 	bl	8000950 <ai_platform_context_acquire>
 8001636:	2800      	cmp	r0, #0
 8001638:	bf18      	it	ne
 800163a:	2c00      	cmpne	r4, #0
 800163c:	d002      	beq.n	8001644 <ai_network_inspect_get_report+0x18>
 800163e:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8001640:	6a09      	ldr	r1, [r1, #32]
 8001642:	b911      	cbnz	r1, 800164a <ai_network_inspect_get_report+0x1e>
 8001644:	2000      	movs	r0, #0
 8001646:	b001      	add	sp, #4
 8001648:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800164a:	e891 10ec 	ldmia.w	r1, {r2, r3, r5, r6, r7, ip}
 800164e:	e884 10ec 	stmia.w	r4, {r2, r3, r5, r6, r7, ip}
 8001652:	6840      	ldr	r0, [r0, #4]
 8001654:	6060      	str	r0, [r4, #4]
 8001656:	b001      	add	sp, #4
 8001658:	2001      	movs	r0, #1
 800165a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800165c <ai_network_inspect_destroy>:
 800165c:	b530      	push	{r4, r5, lr}
 800165e:	b081      	sub	sp, #4
 8001660:	f7ff f976 	bl	8000950 <ai_platform_context_acquire>
 8001664:	4601      	mov	r1, r0
 8001666:	2300      	movs	r3, #0
 8001668:	2900      	cmp	r1, #0
 800166a:	bf1c      	itt	ne
 800166c:	6ccc      	ldrne	r4, [r1, #76]	; 0x4c
 800166e:	2c00      	cmpne	r4, #0
 8001670:	d003      	beq.n	800167a <ai_network_inspect_destroy+0x1e>
 8001672:	6820      	ldr	r0, [r4, #0]
 8001674:	4a1a      	ldr	r2, [pc, #104]	; (80016e0 <.text_13>)
 8001676:	4290      	cmp	r0, r2
 8001678:	d002      	beq.n	8001680 <ai_network_inspect_destroy+0x24>
 800167a:	2000      	movs	r0, #0
 800167c:	b001      	add	sp, #4
 800167e:	bd30      	pop	{r4, r5, pc}
 8001680:	6c4a      	ldr	r2, [r1, #68]	; 0x44
 8001682:	b1ea      	cbz	r2, 80016c0 <ai_network_inspect_destroy+0x64>
 8001684:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001686:	ebc3 05c3 	rsb	r5, r3, r3, lsl #3
 800168a:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
 800168e:	1c5b      	adds	r3, r3, #1
 8001690:	b128      	cbz	r0, 800169e <ai_network_inspect_destroy+0x42>
 8001692:	6805      	ldr	r5, [r0, #0]
 8001694:	6115      	str	r5, [r2, #16]
 8001696:	6840      	ldr	r0, [r0, #4]
 8001698:	f040 0001 	orr.w	r0, r0, #1
 800169c:	60d0      	str	r0, [r2, #12]
 800169e:	6890      	ldr	r0, [r2, #8]
 80016a0:	4282      	cmp	r2, r0
 80016a2:	bf1c      	itt	ne
 80016a4:	2800      	cmpne	r0, #0
 80016a6:	4602      	movne	r2, r0
 80016a8:	d1ec      	bne.n	8001684 <ai_network_inspect_destroy+0x28>
 80016aa:	e009      	b.n	80016c0 <ai_network_inspect_destroy+0x64>
 80016ac:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80016ae:	b10a      	cbz	r2, 80016b4 <ai_network_inspect_destroy+0x58>
 80016b0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80016b2:	4790      	blx	r2
 80016b4:	6a20      	ldr	r0, [r4, #32]
 80016b6:	f7ff fb7a 	bl	8000dae <core_mem_free>
 80016ba:	2000      	movs	r0, #0
 80016bc:	6220      	str	r0, [r4, #32]
 80016be:	e004      	b.n	80016ca <ai_network_inspect_destroy+0x6e>
 80016c0:	6860      	ldr	r0, [r4, #4]
 80016c2:	64c8      	str	r0, [r1, #76]	; 0x4c
 80016c4:	6a21      	ldr	r1, [r4, #32]
 80016c6:	2900      	cmp	r1, #0
 80016c8:	d1f0      	bne.n	80016ac <ai_network_inspect_destroy+0x50>
 80016ca:	4620      	mov	r0, r4
 80016cc:	f7ff fb6f 	bl	8000dae <core_mem_free>
 80016d0:	2001      	movs	r0, #1
 80016d2:	b001      	add	sp, #4
 80016d4:	bd30      	pop	{r4, r5, pc}
	...

080016d8 <.text_11>:
 80016d8:	3a83126f 	.word	0x3a83126f

080016dc <.text_12>:
 80016dc:	20000000 	.word	0x20000000

080016e0 <.text_13>:
 80016e0:	a1c00101 	.word	0xa1c00101

080016e4 <_compute_fletcher32>:
 80016e4:	b4f0      	push	{r4, r5, r6, r7}
 80016e6:	0849      	lsrs	r1, r1, #1
 80016e8:	2400      	movs	r4, #0
 80016ea:	2300      	movs	r3, #0
 80016ec:	f5b1 7fb4 	cmp.w	r1, #360	; 0x168
 80016f0:	4602      	mov	r2, r0
 80016f2:	d32a      	bcc.n	800174a <_compute_fletcher32+0x66>
 80016f4:	f05f 002d 	movs.w	r0, #45	; 0x2d
 80016f8:	f832 5b02 	ldrh.w	r5, [r2], #2
 80016fc:	f832 6b02 	ldrh.w	r6, [r2], #2
 8001700:	f832 7b02 	ldrh.w	r7, [r2], #2
 8001704:	1964      	adds	r4, r4, r5
 8001706:	18e3      	adds	r3, r4, r3
 8001708:	19a4      	adds	r4, r4, r6
 800170a:	18e3      	adds	r3, r4, r3
 800170c:	19e4      	adds	r4, r4, r7
 800170e:	f832 5b02 	ldrh.w	r5, [r2], #2
 8001712:	18e3      	adds	r3, r4, r3
 8001714:	442c      	add	r4, r5
 8001716:	f832 5b02 	ldrh.w	r5, [r2], #2
 800171a:	f832 6b02 	ldrh.w	r6, [r2], #2
 800171e:	f832 7b02 	ldrh.w	r7, [r2], #2
 8001722:	18e3      	adds	r3, r4, r3
 8001724:	1964      	adds	r4, r4, r5
 8001726:	18e3      	adds	r3, r4, r3
 8001728:	19a4      	adds	r4, r4, r6
 800172a:	18e3      	adds	r3, r4, r3
 800172c:	19e4      	adds	r4, r4, r7
 800172e:	f832 5b02 	ldrh.w	r5, [r2], #2
 8001732:	18e3      	adds	r3, r4, r3
 8001734:	442c      	add	r4, r5
 8001736:	18e3      	adds	r3, r4, r3
 8001738:	1e40      	subs	r0, r0, #1
 800173a:	d1dd      	bne.n	80016f8 <_compute_fletcher32+0x14>
 800173c:	f5a1 71b4 	sub.w	r1, r1, #360	; 0x168
 8001740:	f5b1 7fb4 	cmp.w	r1, #360	; 0x168
 8001744:	b2a4      	uxth	r4, r4
 8001746:	b29b      	uxth	r3, r3
 8001748:	d2d4      	bcs.n	80016f4 <_compute_fletcher32+0x10>
 800174a:	b1e9      	cbz	r1, 8001788 <_compute_fletcher32+0xa4>
 800174c:	f011 0003 	ands.w	r0, r1, #3
 8001750:	f000 8006 	beq.w	8001760 <_compute_fletcher32+0x7c>
 8001754:	f832 5b02 	ldrh.w	r5, [r2], #2
 8001758:	1964      	adds	r4, r4, r5
 800175a:	18e3      	adds	r3, r4, r3
 800175c:	1e40      	subs	r0, r0, #1
 800175e:	d1f9      	bne.n	8001754 <_compute_fletcher32+0x70>
 8001760:	0889      	lsrs	r1, r1, #2
 8001762:	d011      	beq.n	8001788 <_compute_fletcher32+0xa4>
 8001764:	f832 0b02 	ldrh.w	r0, [r2], #2
 8001768:	f832 5b02 	ldrh.w	r5, [r2], #2
 800176c:	1820      	adds	r0, r4, r0
 800176e:	18c3      	adds	r3, r0, r3
 8001770:	1940      	adds	r0, r0, r5
 8001772:	f832 4b02 	ldrh.w	r4, [r2], #2
 8001776:	f832 5b02 	ldrh.w	r5, [r2], #2
 800177a:	18c3      	adds	r3, r0, r3
 800177c:	1900      	adds	r0, r0, r4
 800177e:	18c3      	adds	r3, r0, r3
 8001780:	1944      	adds	r4, r0, r5
 8001782:	18e3      	adds	r3, r4, r3
 8001784:	1e49      	subs	r1, r1, #1
 8001786:	d1ed      	bne.n	8001764 <_compute_fletcher32+0x80>
 8001788:	eac4 4003 	pkhbt	r0, r4, r3, lsl #16
 800178c:	bcf0      	pop	{r4, r5, r6, r7}
 800178e:	4770      	bx	lr

08001790 <serialize_signature_buffer_>:
 8001790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001792:	b081      	sub	sp, #4
 8001794:	460c      	mov	r4, r1
 8001796:	2100      	movs	r1, #0
 8001798:	9100      	str	r1, [sp, #0]
 800179a:	b10c      	cbz	r4, 80017a0 <serialize_signature_buffer_+0x10>
 800179c:	6801      	ldr	r1, [r0, #0]
 800179e:	6021      	str	r1, [r4, #0]
 80017a0:	1d21      	adds	r1, r4, #4
 80017a2:	6c46      	ldr	r6, [r0, #68]	; 0x44
 80017a4:	b3a6      	cbz	r6, 8001810 <serialize_signature_buffer_+0x80>
 80017a6:	e017      	b.n	80017d8 <serialize_signature_buffer_+0x48>
 80017a8:	6828      	ldr	r0, [r5, #0]
 80017aa:	6802      	ldr	r2, [r0, #0]
 80017ac:	600a      	str	r2, [r1, #0]
 80017ae:	1d0f      	adds	r7, r1, #4
 80017b0:	2210      	movs	r2, #16
 80017b2:	1d29      	adds	r1, r5, #4
 80017b4:	4638      	mov	r0, r7
 80017b6:	f00a ff33 	bl	800c620 <__aeabi_memcpy>
 80017ba:	3710      	adds	r7, #16
 80017bc:	2210      	movs	r2, #16
 80017be:	f105 0114 	add.w	r1, r5, #20
 80017c2:	4638      	mov	r0, r7
 80017c4:	f00a ff2c 	bl	800c620 <__aeabi_memcpy>
 80017c8:	f107 0110 	add.w	r1, r7, #16
 80017cc:	68b0      	ldr	r0, [r6, #8]
 80017ce:	4286      	cmp	r6, r0
 80017d0:	bf18      	it	ne
 80017d2:	2800      	cmpne	r0, #0
 80017d4:	d01c      	beq.n	8001810 <serialize_signature_buffer_+0x80>
 80017d6:	4606      	mov	r6, r0
 80017d8:	6970      	ldr	r0, [r6, #20]
 80017da:	6802      	ldr	r2, [r0, #0]
 80017dc:	68d3      	ldr	r3, [r2, #12]
 80017de:	9800      	ldr	r0, [sp, #0]
 80017e0:	681d      	ldr	r5, [r3, #0]
 80017e2:	1c40      	adds	r0, r0, #1
 80017e4:	9000      	str	r0, [sp, #0]
 80017e6:	b90c      	cbnz	r4, 80017ec <serialize_signature_buffer_+0x5c>
 80017e8:	1c88      	adds	r0, r1, #2
 80017ea:	e009      	b.n	8001800 <serialize_signature_buffer_+0x70>
 80017ec:	7830      	ldrb	r0, [r6, #0]
 80017ee:	7008      	strb	r0, [r1, #0]
 80017f0:	7870      	ldrb	r0, [r6, #1]
 80017f2:	7048      	strb	r0, [r1, #1]
 80017f4:	1c88      	adds	r0, r1, #2
 80017f6:	1cb1      	adds	r1, r6, #2
 80017f8:	780a      	ldrb	r2, [r1, #0]
 80017fa:	7002      	strb	r2, [r0, #0]
 80017fc:	784a      	ldrb	r2, [r1, #1]
 80017fe:	7042      	strb	r2, [r0, #1]
 8001800:	1c81      	adds	r1, r0, #2
 8001802:	2d00      	cmp	r5, #0
 8001804:	d0e2      	beq.n	80017cc <serialize_signature_buffer_+0x3c>
 8001806:	2c00      	cmp	r4, #0
 8001808:	d1ce      	bne.n	80017a8 <serialize_signature_buffer_+0x18>
 800180a:	f101 0714 	add.w	r7, r1, #20
 800180e:	e7db      	b.n	80017c8 <serialize_signature_buffer_+0x38>
 8001810:	b10c      	cbz	r4, 8001816 <serialize_signature_buffer_+0x86>
 8001812:	9a00      	ldr	r2, [sp, #0]
 8001814:	600a      	str	r2, [r1, #0]
 8001816:	1d09      	adds	r1, r1, #4
 8001818:	1b08      	subs	r0, r1, r4
 800181a:	b001      	add	sp, #4
 800181c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800181e <core_utils_compute_crc32>:
 800181e:	e761      	b.n	80016e4 <_compute_fletcher32>

08001820 <core_utils_generate_network_signature>:
 8001820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001822:	0006      	movs	r6, r0
 8001824:	460d      	mov	r5, r1
 8001826:	bf18      	it	ne
 8001828:	2d00      	cmpne	r5, #0
 800182a:	b081      	sub	sp, #4
 800182c:	d00a      	beq.n	8001844 <core_utils_generate_network_signature+0x24>
 800182e:	2100      	movs	r1, #0
 8001830:	f7ff ffae 	bl	8001790 <serialize_signature_buffer_>
 8001834:	4607      	mov	r7, r0
 8001836:	2000      	movs	r0, #0
 8001838:	6028      	str	r0, [r5, #0]
 800183a:	4638      	mov	r0, r7
 800183c:	f7ff faaa 	bl	8000d94 <core_mem_alloc>
 8001840:	0004      	movs	r4, r0
 8001842:	d102      	bne.n	800184a <core_utils_generate_network_signature+0x2a>
 8001844:	2000      	movs	r0, #0
 8001846:	b001      	add	sp, #4
 8001848:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800184a:	4621      	mov	r1, r4
 800184c:	4630      	mov	r0, r6
 800184e:	f7ff ff9f 	bl	8001790 <serialize_signature_buffer_>
 8001852:	4639      	mov	r1, r7
 8001854:	4620      	mov	r0, r4
 8001856:	f7ff ff45 	bl	80016e4 <_compute_fletcher32>
 800185a:	6028      	str	r0, [r5, #0]
 800185c:	4620      	mov	r0, r4
 800185e:	f7ff faa6 	bl	8000dae <core_mem_free>
 8001862:	2001      	movs	r0, #1
 8001864:	b001      	add	sp, #4
 8001866:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001868 <get_broadcasted_shape>:
 8001868:	b40e      	push	{r1, r2, r3}
 800186a:	b430      	push	{r4, r5}
 800186c:	b084      	sub	sp, #16
 800186e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001870:	4291      	cmp	r1, r2
 8001872:	bf38      	it	cc
 8001874:	4611      	movcc	r1, r2
 8001876:	9100      	str	r1, [sp, #0]
 8001878:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800187a:	9907      	ldr	r1, [sp, #28]
 800187c:	428a      	cmp	r2, r1
 800187e:	bf28      	it	cs
 8001880:	4611      	movcs	r1, r2
 8001882:	9101      	str	r1, [sp, #4]
 8001884:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001886:	9908      	ldr	r1, [sp, #32]
 8001888:	428a      	cmp	r2, r1
 800188a:	bf28      	it	cs
 800188c:	4611      	movcs	r1, r2
 800188e:	9102      	str	r1, [sp, #8]
 8001890:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001892:	9909      	ldr	r1, [sp, #36]	; 0x24
 8001894:	428a      	cmp	r2, r1
 8001896:	bf28      	it	cs
 8001898:	4611      	movcs	r1, r2
 800189a:	9103      	str	r1, [sp, #12]
 800189c:	4669      	mov	r1, sp
 800189e:	e891 003c 	ldmia.w	r1, {r2, r3, r4, r5}
 80018a2:	e880 003c 	stmia.w	r0, {r2, r3, r4, r5}
 80018a6:	b004      	add	sp, #16
 80018a8:	bc30      	pop	{r4, r5}
 80018aa:	b003      	add	sp, #12
 80018ac:	4770      	bx	lr

080018ae <compute_offsets>:
 80018ae:	b40e      	push	{r1, r2, r3}
 80018b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80018b4:	f20f 0c98 	addw	ip, pc, #152	; 0x98
 80018b8:	e89c 4700 	ldmia.w	ip, {r8, r9, sl, lr}
 80018bc:	b089      	sub	sp, #36	; 0x24
 80018be:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80018c0:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80018c2:	9f18      	ldr	r7, [sp, #96]	; 0x60
 80018c4:	4291      	cmp	r1, r2
 80018c6:	9916      	ldr	r1, [sp, #88]	; 0x58
 80018c8:	bf14      	ite	ne
 80018ca:	2201      	movne	r2, #1
 80018cc:	2200      	moveq	r2, #0
 80018ce:	428e      	cmp	r6, r1
 80018d0:	4619      	mov	r1, r3
 80018d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80018d4:	bf14      	ite	ne
 80018d6:	2401      	movne	r4, #1
 80018d8:	2400      	moveq	r4, #0
 80018da:	4299      	cmp	r1, r3
 80018dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80018de:	bf14      	ite	ne
 80018e0:	2501      	movne	r5, #1
 80018e2:	2500      	moveq	r5, #0
 80018e4:	42bb      	cmp	r3, r7
 80018e6:	466f      	mov	r7, sp
 80018e8:	bf14      	ite	ne
 80018ea:	2301      	movne	r3, #1
 80018ec:	2300      	moveq	r3, #0
 80018ee:	e887 4700 	stmia.w	r7, {r8, r9, sl, lr}
 80018f2:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80018f4:	9701      	str	r7, [sp, #4]
 80018f6:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80018f8:	437e      	muls	r6, r7
 80018fa:	9602      	str	r6, [sp, #8]
 80018fc:	f085 0701 	eor.w	r7, r5, #1
 8001900:	434e      	muls	r6, r1
 8001902:	9603      	str	r6, [sp, #12]
 8001904:	f082 0601 	eor.w	r6, r2, #1
 8001908:	9604      	str	r6, [sp, #16]
 800190a:	f084 0601 	eor.w	r6, r4, #1
 800190e:	9901      	ldr	r1, [sp, #4]
 8001910:	4361      	muls	r1, r4
 8001912:	4016      	ands	r6, r2
 8001914:	1a76      	subs	r6, r6, r1
 8001916:	9605      	str	r6, [sp, #20]
 8001918:	4027      	ands	r7, r4
 800191a:	9e02      	ldr	r6, [sp, #8]
 800191c:	436e      	muls	r6, r5
 800191e:	4017      	ands	r7, r2
 8001920:	1bbf      	subs	r7, r7, r6
 8001922:	19c9      	adds	r1, r1, r7
 8001924:	9106      	str	r1, [sp, #24]
 8001926:	f083 0101 	eor.w	r1, r3, #1
 800192a:	400d      	ands	r5, r1
 800192c:	402c      	ands	r4, r5
 800192e:	9903      	ldr	r1, [sp, #12]
 8001930:	4022      	ands	r2, r4
 8001932:	fb01 2213 	mls	r2, r1, r3, r2
 8001936:	18b2      	adds	r2, r6, r2
 8001938:	9207      	str	r2, [sp, #28]
 800193a:	aa04      	add	r2, sp, #16
 800193c:	e892 0078 	ldmia.w	r2, {r3, r4, r5, r6}
 8001940:	e880 0078 	stmia.w	r0, {r3, r4, r5, r6}
 8001944:	b009      	add	sp, #36	; 0x24
 8001946:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 800194a:	f85d fb10 	ldr.w	pc, [sp], #16
	...

08001950 <.text_8>:
 8001950:	00000001 	.word	0x00000001
	...

08001960 <ai_layers_forward_layer>:
 8001960:	b510      	push	{r4, lr}
 8001962:	4604      	mov	r4, r0
 8001964:	68e1      	ldr	r1, [r4, #12]
 8001966:	4788      	blx	r1
 8001968:	68a0      	ldr	r0, [r4, #8]
 800196a:	42a0      	cmp	r0, r4
 800196c:	bf08      	it	eq
 800196e:	2000      	moveq	r0, #0
 8001970:	bd10      	pop	{r4, pc}
	...

08001974 <ai_check_custom_types>:
 8001974:	b500      	push	{lr}
 8001976:	b081      	sub	sp, #4
 8001978:	b160      	cbz	r0, 8001994 <ai_check_custom_types+0x20>
 800197a:	7801      	ldrb	r1, [r0, #0]
 800197c:	2903      	cmp	r1, #3
 800197e:	d109      	bne.n	8001994 <ai_check_custom_types+0x20>
 8001980:	f05f 0204 	movs.w	r2, #4
 8001984:	a18c      	add	r1, pc, #560	; (adr r1, 8001bb8 <ai_check_custom_types::ref_signatures>)
 8001986:	f00a fe87 	bl	800c698 <memcmp>
 800198a:	1e40      	subs	r0, r0, #1
 800198c:	4180      	sbcs	r0, r0
 800198e:	0fc0      	lsrs	r0, r0, #31
 8001990:	b001      	add	sp, #4
 8001992:	bd00      	pop	{pc}
 8001994:	2000      	movs	r0, #0
 8001996:	b001      	add	sp, #4
 8001998:	bd00      	pop	{pc}
	...

0800199c <ai_layer_type_name>:
 800199c:	f242 7211 	movw	r2, #10001	; 0x2711
 80019a0:	1a81      	subs	r1, r0, r2
 80019a2:	2901      	cmp	r1, #1
 80019a4:	bf81      	itttt	hi
 80019a6:	1ec9      	subhi	r1, r1, #3
 80019a8:	290d      	cmphi	r1, #13
 80019aa:	390f      	subhi	r1, #15
 80019ac:	2909      	cmphi	r1, #9
 80019ae:	f200 806b 	bhi.w	8001a88 <ai_layer_type_name+0xec>
 80019b2:	1a80      	subs	r0, r0, r2
 80019b4:	d033      	beq.n	8001a1e <ai_layer_type_name+0x82>
 80019b6:	1e40      	subs	r0, r0, #1
 80019b8:	d033      	beq.n	8001a22 <ai_layer_type_name+0x86>
 80019ba:	1e80      	subs	r0, r0, #2
 80019bc:	d033      	beq.n	8001a26 <ai_layer_type_name+0x8a>
 80019be:	1e40      	subs	r0, r0, #1
 80019c0:	d034      	beq.n	8001a2c <ai_layer_type_name+0x90>
 80019c2:	1e40      	subs	r0, r0, #1
 80019c4:	d034      	beq.n	8001a30 <ai_layer_type_name+0x94>
 80019c6:	1e40      	subs	r0, r0, #1
 80019c8:	d034      	beq.n	8001a34 <ai_layer_type_name+0x98>
 80019ca:	1e40      	subs	r0, r0, #1
 80019cc:	d034      	beq.n	8001a38 <ai_layer_type_name+0x9c>
 80019ce:	1e40      	subs	r0, r0, #1
 80019d0:	d034      	beq.n	8001a3c <ai_layer_type_name+0xa0>
 80019d2:	1e40      	subs	r0, r0, #1
 80019d4:	d034      	beq.n	8001a40 <ai_layer_type_name+0xa4>
 80019d6:	1e40      	subs	r0, r0, #1
 80019d8:	d034      	beq.n	8001a44 <ai_layer_type_name+0xa8>
 80019da:	1e40      	subs	r0, r0, #1
 80019dc:	d034      	beq.n	8001a48 <ai_layer_type_name+0xac>
 80019de:	1e40      	subs	r0, r0, #1
 80019e0:	d034      	beq.n	8001a4c <ai_layer_type_name+0xb0>
 80019e2:	1e40      	subs	r0, r0, #1
 80019e4:	d034      	beq.n	8001a50 <ai_layer_type_name+0xb4>
 80019e6:	1e40      	subs	r0, r0, #1
 80019e8:	d034      	beq.n	8001a54 <ai_layer_type_name+0xb8>
 80019ea:	1e40      	subs	r0, r0, #1
 80019ec:	d034      	beq.n	8001a58 <ai_layer_type_name+0xbc>
 80019ee:	1e40      	subs	r0, r0, #1
 80019f0:	d034      	beq.n	8001a5c <ai_layer_type_name+0xc0>
 80019f2:	1e80      	subs	r0, r0, #2
 80019f4:	d034      	beq.n	8001a60 <ai_layer_type_name+0xc4>
 80019f6:	1e40      	subs	r0, r0, #1
 80019f8:	d034      	beq.n	8001a64 <ai_layer_type_name+0xc8>
 80019fa:	1e40      	subs	r0, r0, #1
 80019fc:	d034      	beq.n	8001a68 <ai_layer_type_name+0xcc>
 80019fe:	1e40      	subs	r0, r0, #1
 8001a00:	d034      	beq.n	8001a6c <ai_layer_type_name+0xd0>
 8001a02:	1e40      	subs	r0, r0, #1
 8001a04:	d034      	beq.n	8001a70 <ai_layer_type_name+0xd4>
 8001a06:	1e40      	subs	r0, r0, #1
 8001a08:	d034      	beq.n	8001a74 <ai_layer_type_name+0xd8>
 8001a0a:	1e40      	subs	r0, r0, #1
 8001a0c:	d034      	beq.n	8001a78 <ai_layer_type_name+0xdc>
 8001a0e:	1e40      	subs	r0, r0, #1
 8001a10:	d034      	beq.n	8001a7c <ai_layer_type_name+0xe0>
 8001a12:	1e40      	subs	r0, r0, #1
 8001a14:	d034      	beq.n	8001a80 <ai_layer_type_name+0xe4>
 8001a16:	1e40      	subs	r0, r0, #1
 8001a18:	d034      	beq.n	8001a84 <ai_layer_type_name+0xe8>
 8001a1a:	a01c      	add	r0, pc, #112	; (adr r0, 8001a8c <.text_5>)
 8001a1c:	4770      	bx	lr
 8001a1e:	a01c      	add	r0, pc, #112	; (adr r0, 8001a90 <.text_6>)
 8001a20:	4770      	bx	lr
 8001a22:	a01c      	add	r0, pc, #112	; (adr r0, 8001a94 <.text_7>)
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	a031      	add	r0, pc, #196	; (adr r0, 8001af0 <.text_15>)
 8001a2a:	4770      	bx	lr
 8001a2c:	a032      	add	r0, pc, #200	; (adr r0, 8001af8 <.text_16>)
 8001a2e:	4770      	bx	lr
 8001a30:	a019      	add	r0, pc, #100	; (adr r0, 8001a98 <.text_8>)
 8001a32:	4770      	bx	lr
 8001a34:	a019      	add	r0, pc, #100	; (adr r0, 8001a9c <.text_9>)
 8001a36:	4770      	bx	lr
 8001a38:	a031      	add	r0, pc, #196	; (adr r0, 8001b00 <.text_17>)
 8001a3a:	4770      	bx	lr
 8001a3c:	a018      	add	r0, pc, #96	; (adr r0, 8001aa0 <.text_10>)
 8001a3e:	4770      	bx	lr
 8001a40:	a031      	add	r0, pc, #196	; (adr r0, 8001b08 <.text_18>)
 8001a42:	4770      	bx	lr
 8001a44:	a032      	add	r0, pc, #200	; (adr r0, 8001b10 <.text_19>)
 8001a46:	4770      	bx	lr
 8001a48:	a036      	add	r0, pc, #216	; (adr r0, 8001b24 <.text_20>)
 8001a4a:	4770      	bx	lr
 8001a4c:	a037      	add	r0, pc, #220	; (adr r0, 8001b2c <.text_21>)
 8001a4e:	4770      	bx	lr
 8001a50:	a014      	add	r0, pc, #80	; (adr r0, 8001aa4 <.text_11>)
 8001a52:	4770      	bx	lr
 8001a54:	a037      	add	r0, pc, #220	; (adr r0, 8001b34 <.text_22>)
 8001a56:	4770      	bx	lr
 8001a58:	a038      	add	r0, pc, #224	; (adr r0, 8001b3c <.text_23>)
 8001a5a:	4770      	bx	lr
 8001a5c:	a03a      	add	r0, pc, #232	; (adr r0, 8001b48 <.text_24>)
 8001a5e:	4770      	bx	lr
 8001a60:	a03e      	add	r0, pc, #248	; (adr r0, 8001b5c <.text_25>)
 8001a62:	4770      	bx	lr
 8001a64:	a03f      	add	r0, pc, #252	; (adr r0, 8001b64 <.text_26>)
 8001a66:	4770      	bx	lr
 8001a68:	a040      	add	r0, pc, #256	; (adr r0, 8001b6c <.text_27>)
 8001a6a:	4770      	bx	lr
 8001a6c:	a042      	add	r0, pc, #264	; (adr r0, 8001b78 <.text_28>)
 8001a6e:	4770      	bx	lr
 8001a70:	a043      	add	r0, pc, #268	; (adr r0, 8001b80 <.text_29>)
 8001a72:	4770      	bx	lr
 8001a74:	a044      	add	r0, pc, #272	; (adr r0, 8001b88 <.text_30>)
 8001a76:	4770      	bx	lr
 8001a78:	a00b      	add	r0, pc, #44	; (adr r0, 8001aa8 <.text_12>)
 8001a7a:	4770      	bx	lr
 8001a7c:	a048      	add	r0, pc, #288	; (adr r0, 8001ba0 <.text_31>)
 8001a7e:	4770      	bx	lr
 8001a80:	a049      	add	r0, pc, #292	; (adr r0, 8001ba8 <.text_32>)
 8001a82:	4770      	bx	lr
 8001a84:	a04a      	add	r0, pc, #296	; (adr r0, 8001bb0 <.text_33>)
 8001a86:	4770      	bx	lr
 8001a88:	a000      	add	r0, pc, #0	; (adr r0, 8001a8c <.text_5>)
 8001a8a:	4770      	bx	lr

08001a8c <.text_5>:
 8001a8c:	00000000 	.word	0x00000000

08001a90 <.text_6>:
 8001a90:	00444441 	.word	0x00444441

08001a94 <.text_7>:
 8001a94:	00004e42 	.word	0x00004e42

08001a98 <.text_8>:
 8001a98:	00555247 	.word	0x00555247

08001a9c <.text_9>:
 8001a9c:	004e524c 	.word	0x004e524c

08001aa0 <.text_10>:
 8001aa0:	00004c4e 	.word	0x00004c4e

08001aa4 <.text_11>:
 8001aa4:	00004d53 	.word	0x00004d53

08001aa8 <.text_12>:
 8001aa8:	00444150 	.word	0x00444150

08001aac <ai_layer_type_is_valid>:
 8001aac:	f242 7111 	movw	r1, #10001	; 0x2711
 8001ab0:	1a40      	subs	r0, r0, r1
 8001ab2:	2801      	cmp	r0, #1
 8001ab4:	bf81      	itttt	hi
 8001ab6:	1ec0      	subhi	r0, r0, #3
 8001ab8:	280d      	cmphi	r0, #13
 8001aba:	380f      	subhi	r0, #15
 8001abc:	2809      	cmphi	r0, #9
 8001abe:	d801      	bhi.n	8001ac4 <ai_layer_type_is_valid+0x18>
 8001ac0:	2001      	movs	r0, #1
 8001ac2:	4770      	bx	lr
 8001ac4:	2000      	movs	r0, #0
 8001ac6:	4770      	bx	lr

08001ac8 <ai_layers_forward_all>:
 8001ac8:	b530      	push	{r4, r5, lr}
 8001aca:	4604      	mov	r4, r0
 8001acc:	b081      	sub	sp, #4
 8001ace:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001ad0:	b158      	cbz	r0, 8001aea <ai_layers_forward_all+0x22>
 8001ad2:	64a0      	str	r0, [r4, #72]	; 0x48
 8001ad4:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8001ad6:	68e9      	ldr	r1, [r5, #12]
 8001ad8:	4628      	mov	r0, r5
 8001ada:	4788      	blx	r1
 8001adc:	68a8      	ldr	r0, [r5, #8]
 8001ade:	42a8      	cmp	r0, r5
 8001ae0:	bf08      	it	eq
 8001ae2:	2000      	moveq	r0, #0
 8001ae4:	2800      	cmp	r0, #0
 8001ae6:	64a0      	str	r0, [r4, #72]	; 0x48
 8001ae8:	d1f4      	bne.n	8001ad4 <ai_layers_forward_all+0xc>
 8001aea:	b001      	add	sp, #4
 8001aec:	bd30      	pop	{r4, r5, pc}
	...

08001af0 <.text_15>:
 8001af0:	564e4f43 	.word	0x564e4f43
 8001af4:	4432      	.short	0x4432
	...

08001af8 <.text_16>:
 8001af8:	534e4544 	.word	0x534e4544
 8001afc:	0045      	.short	0x0045
	...

08001b00 <.text_17>:
 8001b00:	4d54534c 	.word	0x4d54534c
 8001b04:	00000000 	.word	0x00000000

08001b08 <.text_18>:
 8001b08:	4d524f4e 	.word	0x4d524f4e
 8001b0c:	00000000 	.word	0x00000000

08001b10 <.text_19>:
 8001b10:	4954504f 	.word	0x4954504f
 8001b14:	455a494d 	.word	0x455a494d
 8001b18:	4f435f44 	.word	0x4f435f44
 8001b1c:	4432564e 	.word	0x4432564e
 8001b20:	00000000 	.word	0x00000000

08001b24 <.text_20>:
 8001b24:	4d524550 	.word	0x4d524550
 8001b28:	00455455 	.word	0x00455455

08001b2c <.text_21>:
 8001b2c:	4c4f4f50 	.word	0x4c4f4f50
 8001b30:	00000000 	.word	0x00000000

08001b34 <.text_22>:
 8001b34:	494c5053 	.word	0x494c5053
 8001b38:	0054      	.short	0x0054
	...

08001b3c <.text_23>:
 8001b3c:	454d4954 	.word	0x454d4954
 8001b40:	4c45445f 	.word	0x4c45445f
 8001b44:	5941      	.short	0x5941
	...

08001b48 <.text_24>:
 8001b48:	454d4954 	.word	0x454d4954
 8001b4c:	5349445f 	.word	0x5349445f
 8001b50:	42495254 	.word	0x42495254
 8001b54:	44455455 	.word	0x44455455
 8001b58:	00000000 	.word	0x00000000

08001b5c <.text_25>:
 8001b5c:	434e4f43 	.word	0x434e4f43
 8001b60:	5441      	.short	0x5441
	...

08001b64 <.text_26>:
 8001b64:	4d4d4547 	.word	0x4d4d4547
 8001b68:	00000000 	.word	0x00000000

08001b6c <.text_27>:
 8001b6c:	41535055 	.word	0x41535055
 8001b70:	454c504d 	.word	0x454c504d
 8001b74:	00000000 	.word	0x00000000

08001b78 <.text_28>:
 8001b78:	57544c45 	.word	0x57544c45
 8001b7c:	00455349 	.word	0x00455349

08001b80 <.text_29>:
 8001b80:	454e4547 	.word	0x454e4547
 8001b84:	00434952 	.word	0x00434952

08001b88 <.text_30>:
 8001b88:	54534e49 	.word	0x54534e49
 8001b8c:	45434e41 	.word	0x45434e41
 8001b90:	4d524f4e 	.word	0x4d524f4e
 8001b94:	5a494c41 	.word	0x5a494c41
 8001b98:	4f495441 	.word	0x4f495441
 8001b9c:	004e      	.short	0x004e
	...

08001ba0 <.text_31>:
 8001ba0:	43494c53 	.word	0x43494c53
 8001ba4:	0045      	.short	0x0045
	...

08001ba8 <.text_32>:
 8001ba8:	454c4954 	.word	0x454c4954
 8001bac:	00000000 	.word	0x00000000

08001bb0 <.text_33>:
 8001bb0:	55444552 	.word	0x55444552
 8001bb4:	4543      	.short	0x4543
	...

08001bb8 <ai_check_custom_types::ref_signatures>:
 8001bb8:	8403 8404                                   ....

08001bbc <ai_conv2d_kernel_simple_f32>:
 8001bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bc0:	b081      	sub	sp, #4
 8001bc2:	468b      	mov	fp, r1
 8001bc4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8001bc6:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8001bca:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8001bcc:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001bd0:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8001bd2:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 8001bd6:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
 8001bda:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8001bde:	4619      	mov	r1, r3
 8001be0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001be2:	eba5 0709 	sub.w	r7, r5, r9
 8001be6:	fb07 f708 	mul.w	r7, r7, r8
 8001bea:	9700      	str	r7, [sp, #0]
 8001bec:	1ae4      	subs	r4, r4, r3
 8001bee:	fb05 f708 	mul.w	r7, r5, r8
 8001bf2:	fb05 650e 	mla	r5, r5, lr, r6
 8001bf6:	fb08 f505 	mul.w	r5, r8, r5
 8001bfa:	437c      	muls	r4, r7
 8001bfc:	eb01 0685 	add.w	r6, r1, r5, lsl #2
 8001c00:	45da      	cmp	sl, fp
 8001c02:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001c04:	ebac 0009 	sub.w	r0, ip, r9
 8001c08:	bf0c      	ite	eq
 8001c0a:	ed9f 0aab 	vldreq	s0, [pc, #684]	; 8001eb8 <.text_4>
 8001c0e:	eeb7 0a00 	vmovne.f32	s0, #112	; 0x3f800000  1.0
 8001c12:	fb0c f50e 	mul.w	r5, ip, lr
 8001c16:	fb00 f008 	mul.w	r0, r0, r8
 8001c1a:	fb09 f908 	mul.w	r9, r9, r8
 8001c1e:	fb08 f505 	mul.w	r5, r8, r5
 8001c22:	2900      	cmp	r1, #0
 8001c24:	eb02 0885 	add.w	r8, r2, r5, lsl #2
 8001c28:	f000 8070 	beq.w	8001d0c <ai_conv2d_kernel_simple_f32+0x150>
 8001c2c:	f029 0203 	bic.w	r2, r9, #3
 8001c30:	edda 0a00 	vldr	s1, [sl]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	ee60 0a80 	vmul.f32	s1, s1, s0
 8001c3a:	46c4      	mov	ip, r8
 8001c3c:	dd5c      	ble.n	8001cf8 <ai_conv2d_kernel_simple_f32+0x13c>
 8001c3e:	9d00      	ldr	r5, [sp, #0]
 8001c40:	469e      	mov	lr, r3
 8001c42:	2700      	movs	r7, #0
 8001c44:	2a00      	cmp	r2, #0
 8001c46:	dd1d      	ble.n	8001c84 <ai_conv2d_kernel_simple_f32+0xc8>
 8001c48:	ed96 4a00 	vldr	s8, [r6]
 8001c4c:	eddc 4a00 	vldr	s9, [ip]
 8001c50:	ed96 3a01 	vldr	s6, [r6, #4]
 8001c54:	eddc 3a01 	vldr	s7, [ip, #4]
 8001c58:	ed96 2a02 	vldr	s4, [r6, #8]
 8001c5c:	eddc 2a02 	vldr	s5, [ip, #8]
 8001c60:	ed96 1a03 	vldr	s2, [r6, #12]
 8001c64:	eddc 1a03 	vldr	s3, [ip, #12]
 8001c68:	ee44 0a24 	vmla.f32	s1, s8, s9
 8001c6c:	ee43 0a23 	vmla.f32	s1, s6, s7
 8001c70:	3610      	adds	r6, #16
 8001c72:	1d3f      	adds	r7, r7, #4
 8001c74:	ee42 0a22 	vmla.f32	s1, s4, s5
 8001c78:	4297      	cmp	r7, r2
 8001c7a:	ee41 0a21 	vmla.f32	s1, s2, s3
 8001c7e:	f10c 0c10 	add.w	ip, ip, #16
 8001c82:	dbe1      	blt.n	8001c48 <ai_conv2d_kernel_simple_f32+0x8c>
 8001c84:	454f      	cmp	r7, r9
 8001c86:	da2f      	bge.n	8001ce8 <ai_conv2d_kernel_simple_f32+0x12c>
 8001c88:	1c7f      	adds	r7, r7, #1
 8001c8a:	ed96 1a00 	vldr	s2, [r6]
 8001c8e:	eddc 1a00 	vldr	s3, [ip]
 8001c92:	1d36      	adds	r6, r6, #4
 8001c94:	454f      	cmp	r7, r9
 8001c96:	ee41 0a21 	vmla.f32	s1, s2, s3
 8001c9a:	f10c 0c04 	add.w	ip, ip, #4
 8001c9e:	da23      	bge.n	8001ce8 <ai_conv2d_kernel_simple_f32+0x12c>
 8001ca0:	1c7f      	adds	r7, r7, #1
 8001ca2:	ed96 1a00 	vldr	s2, [r6]
 8001ca6:	eddc 1a00 	vldr	s3, [ip]
 8001caa:	1d36      	adds	r6, r6, #4
 8001cac:	454f      	cmp	r7, r9
 8001cae:	ee41 0a21 	vmla.f32	s1, s2, s3
 8001cb2:	f10c 0c04 	add.w	ip, ip, #4
 8001cb6:	da17      	bge.n	8001ce8 <ai_conv2d_kernel_simple_f32+0x12c>
 8001cb8:	1c7f      	adds	r7, r7, #1
 8001cba:	ed96 1a00 	vldr	s2, [r6]
 8001cbe:	eddc 1a00 	vldr	s3, [ip]
 8001cc2:	1d36      	adds	r6, r6, #4
 8001cc4:	454f      	cmp	r7, r9
 8001cc6:	ee41 0a21 	vmla.f32	s1, s2, s3
 8001cca:	f10c 0c04 	add.w	ip, ip, #4
 8001cce:	da0b      	bge.n	8001ce8 <ai_conv2d_kernel_simple_f32+0x12c>
 8001cd0:	1c7f      	adds	r7, r7, #1
 8001cd2:	ed96 1a00 	vldr	s2, [r6]
 8001cd6:	eddc 1a00 	vldr	s3, [ip]
 8001cda:	1d36      	adds	r6, r6, #4
 8001cdc:	454f      	cmp	r7, r9
 8001cde:	ee41 0a21 	vmla.f32	s1, s2, s3
 8001ce2:	f10c 0c04 	add.w	ip, ip, #4
 8001ce6:	dbcf      	blt.n	8001c88 <ai_conv2d_kernel_simple_f32+0xcc>
 8001ce8:	f1be 0e01 	subs.w	lr, lr, #1
 8001cec:	eb0c 0c80 	add.w	ip, ip, r0, lsl #2
 8001cf0:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 8001cf4:	d1a5      	bne.n	8001c42 <ai_conv2d_kernel_simple_f32+0x86>
 8001cf6:	9500      	str	r5, [sp, #0]
 8001cf8:	edcb 0a00 	vstr	s1, [fp]
 8001cfc:	1e49      	subs	r1, r1, #1
 8001cfe:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 8001d02:	f10b 0b04 	add.w	fp, fp, #4
 8001d06:	f10a 0a04 	add.w	sl, sl, #4
 8001d0a:	d191      	bne.n	8001c30 <ai_conv2d_kernel_simple_f32+0x74>
 8001d0c:	b001      	add	sp, #4
 8001d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08001d14 <ai_conv2d_kernel_depthwise_f32>:
 8001d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001d18:	b081      	sub	sp, #4
 8001d1a:	b402      	push	{r1}
 8001d1c:	b084      	sub	sp, #16
 8001d1e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8001d20:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 8001d24:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
 8001d28:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8001d2a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8001d2c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8001d2e:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 8001d32:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8001d34:	f8dd e050 	ldr.w	lr, [sp, #80]	; 0x50
 8001d38:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8001d3a:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8001d3e:	fbb6 f6fa 	udiv	r6, r6, sl
 8001d42:	eba8 0a00 	sub.w	sl, r8, r0
 8001d46:	fb0c fa0a 	mul.w	sl, ip, sl
 8001d4a:	1b09      	subs	r1, r1, r4
 8001d4c:	eba5 0c00 	sub.w	ip, r5, r0
 8001d50:	4369      	muls	r1, r5
 8001d52:	fb05 750e 	mla	r5, r5, lr, r7
 8001d56:	eb03 0785 	add.w	r7, r3, r5, lsl #2
 8001d5a:	9b04      	ldr	r3, [sp, #16]
 8001d5c:	4599      	cmp	r9, r3
 8001d5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001d60:	bf0c      	ite	eq
 8001d62:	ed9f 0a55 	vldreq	s0, [pc, #340]	; 8001eb8 <.text_4>
 8001d66:	eeb7 0a00 	vmovne.f32	s0, #112	; 0x3f800000  1.0
 8001d6a:	fb08 f50e 	mul.w	r5, r8, lr
 8001d6e:	435d      	muls	r5, r3
 8001d70:	eb02 0e85 	add.w	lr, r2, r5, lsl #2
 8001d74:	eb0e 0583 	add.w	r5, lr, r3, lsl #2
 8001d78:	45ae      	cmp	lr, r5
 8001d7a:	f04f 0800 	mov.w	r8, #0
 8001d7e:	9500      	str	r5, [sp, #0]
 8001d80:	f080 8097 	bcs.w	8001eb2 <ai_conv2d_kernel_depthwise_f32+0x19e>
 8001d84:	f020 0303 	bic.w	r3, r0, #3
 8001d88:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8001d8c:	9603      	str	r6, [sp, #12]
 8001d8e:	9a03      	ldr	r2, [sp, #12]
 8001d90:	2a00      	cmp	r2, #0
 8001d92:	f000 8088 	beq.w	8001ea6 <ai_conv2d_kernel_depthwise_f32+0x192>
 8001d96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001d98:	9e04      	ldr	r6, [sp, #16]
 8001d9a:	eb02 0988 	add.w	r9, r2, r8, lsl #2
 8001d9e:	9a03      	ldr	r2, [sp, #12]
 8001da0:	9415      	str	r4, [sp, #84]	; 0x54
 8001da2:	eb06 0688 	add.w	r6, r6, r8, lsl #2
 8001da6:	9102      	str	r1, [sp, #8]
 8001da8:	f8cd e004 	str.w	lr, [sp, #4]
 8001dac:	9915      	ldr	r1, [sp, #84]	; 0x54
 8001dae:	edd9 0a00 	vldr	s1, [r9]
 8001db2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001db6:	2900      	cmp	r1, #0
 8001db8:	ee60 0a80 	vmul.f32	s1, s1, s0
 8001dbc:	dd63      	ble.n	8001e86 <ai_conv2d_kernel_depthwise_f32+0x172>
 8001dbe:	2400      	movs	r4, #0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	dd26      	ble.n	8001e12 <ai_conv2d_kernel_depthwise_f32+0xfe>
 8001dc4:	f8dd 503c 	ldr.w	r5, [sp, #60]	; 0x3c
 8001dc8:	ed97 1a00 	vldr	s2, [r7]
 8001dcc:	edde 1a00 	vldr	s3, [lr]
 8001dd0:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
 8001dd4:	ee41 0a21 	vmla.f32	s1, s2, s3
 8001dd8:	ed97 1a01 	vldr	s2, [r7, #4]
 8001ddc:	edde 1a00 	vldr	s3, [lr]
 8001de0:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
 8001de4:	ee41 0a21 	vmla.f32	s1, s2, s3
 8001de8:	ed97 1a02 	vldr	s2, [r7, #8]
 8001dec:	edde 1a00 	vldr	s3, [lr]
 8001df0:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
 8001df4:	ee41 0a21 	vmla.f32	s1, s2, s3
 8001df8:	1d24      	adds	r4, r4, #4
 8001dfa:	ed97 1a03 	vldr	s2, [r7, #12]
 8001dfe:	edde 1a00 	vldr	s3, [lr]
 8001e02:	3710      	adds	r7, #16
 8001e04:	429c      	cmp	r4, r3
 8001e06:	ee41 0a21 	vmla.f32	s1, s2, s3
 8001e0a:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
 8001e0e:	dbdb      	blt.n	8001dc8 <ai_conv2d_kernel_depthwise_f32+0xb4>
 8001e10:	950f      	str	r5, [sp, #60]	; 0x3c
 8001e12:	4284      	cmp	r4, r0
 8001e14:	da31      	bge.n	8001e7a <ai_conv2d_kernel_depthwise_f32+0x166>
 8001e16:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8001e18:	1c64      	adds	r4, r4, #1
 8001e1a:	ed97 1a00 	vldr	s2, [r7]
 8001e1e:	edde 1a00 	vldr	s3, [lr]
 8001e22:	1d3f      	adds	r7, r7, #4
 8001e24:	4284      	cmp	r4, r0
 8001e26:	ee41 0a21 	vmla.f32	s1, s2, s3
 8001e2a:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
 8001e2e:	da23      	bge.n	8001e78 <ai_conv2d_kernel_depthwise_f32+0x164>
 8001e30:	1c64      	adds	r4, r4, #1
 8001e32:	ed97 1a00 	vldr	s2, [r7]
 8001e36:	edde 1a00 	vldr	s3, [lr]
 8001e3a:	1d3f      	adds	r7, r7, #4
 8001e3c:	4284      	cmp	r4, r0
 8001e3e:	ee41 0a21 	vmla.f32	s1, s2, s3
 8001e42:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
 8001e46:	da17      	bge.n	8001e78 <ai_conv2d_kernel_depthwise_f32+0x164>
 8001e48:	1c64      	adds	r4, r4, #1
 8001e4a:	ed97 1a00 	vldr	s2, [r7]
 8001e4e:	edde 1a00 	vldr	s3, [lr]
 8001e52:	1d3f      	adds	r7, r7, #4
 8001e54:	4284      	cmp	r4, r0
 8001e56:	ee41 0a21 	vmla.f32	s1, s2, s3
 8001e5a:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
 8001e5e:	da0b      	bge.n	8001e78 <ai_conv2d_kernel_depthwise_f32+0x164>
 8001e60:	1c64      	adds	r4, r4, #1
 8001e62:	ed97 1a00 	vldr	s2, [r7]
 8001e66:	edde 1a00 	vldr	s3, [lr]
 8001e6a:	1d3f      	adds	r7, r7, #4
 8001e6c:	4284      	cmp	r4, r0
 8001e6e:	ee41 0a21 	vmla.f32	s1, s2, s3
 8001e72:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
 8001e76:	dbcf      	blt.n	8001e18 <ai_conv2d_kernel_depthwise_f32+0x104>
 8001e78:	950f      	str	r5, [sp, #60]	; 0x3c
 8001e7a:	1e49      	subs	r1, r1, #1
 8001e7c:	eb0e 0e8a 	add.w	lr, lr, sl, lsl #2
 8001e80:	eb07 078c 	add.w	r7, r7, ip, lsl #2
 8001e84:	d19b      	bne.n	8001dbe <ai_conv2d_kernel_depthwise_f32+0xaa>
 8001e86:	9902      	ldr	r1, [sp, #8]
 8001e88:	edc6 0a00 	vstr	s1, [r6]
 8001e8c:	1d36      	adds	r6, r6, #4
 8001e8e:	1e52      	subs	r2, r2, #1
 8001e90:	eb07 0781 	add.w	r7, r7, r1, lsl #2
 8001e94:	f108 0801 	add.w	r8, r8, #1
 8001e98:	f109 0904 	add.w	r9, r9, #4
 8001e9c:	d186      	bne.n	8001dac <ai_conv2d_kernel_depthwise_f32+0x98>
 8001e9e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8001ea0:	9902      	ldr	r1, [sp, #8]
 8001ea2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001ea6:	9a00      	ldr	r2, [sp, #0]
 8001ea8:	f10e 0e04 	add.w	lr, lr, #4
 8001eac:	4596      	cmp	lr, r2
 8001eae:	f4ff af6e 	bcc.w	8001d8e <ai_conv2d_kernel_depthwise_f32+0x7a>
 8001eb2:	b006      	add	sp, #24
 8001eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001eb8 <.text_4>:
 8001eb8:	00000000 	.word	0x00000000

08001ebc <ai_conv2d_kernel_group_f32>:
 8001ebc:	e92d 4ffa 	stmdb	sp!, {r1, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ec0:	b085      	sub	sp, #20
 8001ec2:	4693      	mov	fp, r2
 8001ec4:	f9bd 9050 	ldrsh.w	r9, [sp, #80]	; 0x50
 8001ec8:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8001eca:	9912      	ldr	r1, [sp, #72]	; 0x48
 8001ecc:	f9bd 8054 	ldrsh.w	r8, [sp, #84]	; 0x54
 8001ed0:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 8001ed4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8001ed6:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8001ed8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8001eda:	981c      	ldr	r0, [sp, #112]	; 0x70
 8001edc:	46ca      	mov	sl, r9
 8001ede:	4655      	mov	r5, sl
 8001ee0:	ebaa 0c04 	sub.w	ip, sl, r4
 8001ee4:	fb94 f6f5 	sdiv	r6, r4, r5
 8001ee8:	fb05 c506 	mla	r5, r5, r6, ip
 8001eec:	fb95 fcfa 	sdiv	ip, r5, sl
 8001ef0:	fb0a 551c 	mls	r5, sl, ip, r5
 8001ef4:	9501      	str	r5, [sp, #4]
 8001ef6:	4454      	add	r4, sl
 8001ef8:	4645      	mov	r5, r8
 8001efa:	1bee      	subs	r6, r5, r7
 8001efc:	fb97 fcf5 	sdiv	ip, r7, r5
 8001f00:	fb05 6c0c 	mla	ip, r5, ip, r6
 8001f04:	fb9c f6f5 	sdiv	r6, ip, r5
 8001f08:	fb05 cc16 	mls	ip, r5, r6, ip
 8001f0c:	f8cd c000 	str.w	ip, [sp]
 8001f10:	1e64      	subs	r4, r4, #1
 8001f12:	9e01      	ldr	r6, [sp, #4]
 8001f14:	1b80      	subs	r0, r0, r6
 8001f16:	4450      	add	r0, sl
 8001f18:	1e40      	subs	r0, r0, #1
 8001f1a:	fb90 f0fa 	sdiv	r0, r0, sl
 8001f1e:	9e00      	ldr	r6, [sp, #0]
 8001f20:	1b9b      	subs	r3, r3, r6
 8001f22:	fbb1 f6f2 	udiv	r6, r1, r2
 8001f26:	18eb      	adds	r3, r5, r3
 8001f28:	1e5b      	subs	r3, r3, #1
 8001f2a:	fb93 fcf5 	sdiv	ip, r3, r5
 8001f2e:	ebae 0e0c 	sub.w	lr, lr, ip
 8001f32:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001f34:	9604      	str	r6, [sp, #16]
 8001f36:	fbb3 f3f2 	udiv	r3, r3, r2
 8001f3a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8001f3c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8001f3e:	fb01 f808 	mul.w	r8, r1, r8
 8001f42:	fb00 881a 	mls	r8, r0, sl, r8
 8001f46:	fb06 f808 	mul.w	r8, r6, r8
 8001f4a:	fb06 f109 	mul.w	r1, r6, r9
 8001f4e:	9e16      	ldr	r6, [sp, #88]	; 0x58
 8001f50:	435e      	muls	r6, r3
 8001f52:	fb0e fe06 	mul.w	lr, lr, r6
 8001f56:	19ee      	adds	r6, r5, r7
 8001f58:	1e76      	subs	r6, r6, #1
 8001f5a:	fb96 f5f5 	sdiv	r5, r6, r5
 8001f5e:	9e16      	ldr	r6, [sp, #88]	; 0x58
 8001f60:	fb94 f4fa 	sdiv	r4, r4, sl
 8001f64:	eba1 0903 	sub.w	r9, r1, r3
 8001f68:	fb06 4405 	mla	r4, r6, r5, r4
 8001f6c:	9e06      	ldr	r6, [sp, #24]
 8001f6e:	9916      	ldr	r1, [sp, #88]	; 0x58
 8001f70:	9d05      	ldr	r5, [sp, #20]
 8001f72:	435c      	muls	r4, r3
 8001f74:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8001f78:	1a09      	subs	r1, r1, r0
 8001f7a:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8001f7c:	4359      	muls	r1, r3
 8001f7e:	42ae      	cmp	r6, r5
 8001f80:	9d00      	ldr	r5, [sp, #0]
 8001f82:	9e01      	ldr	r6, [sp, #4]
 8001f84:	442f      	add	r7, r5
 8001f86:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8001f88:	fb05 6507 	mla	r5, r5, r7, r6
 8001f8c:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8001f8e:	bf0c      	ite	eq
 8001f90:	ed9f 0a3d 	vldreq	s0, [pc, #244]	; 8002088 <.text_6>
 8001f94:	eeb7 0a00 	vmovne.f32	s0, #112	; 0x3f800000  1.0
 8001f98:	437d      	muls	r5, r7
 8001f9a:	2a00      	cmp	r2, #0
 8001f9c:	eb0b 0585 	add.w	r5, fp, r5, lsl #2
 8001fa0:	f04f 0a00 	mov.w	sl, #0
 8001fa4:	d06d      	beq.n	8002082 <ai_conv2d_kernel_group_f32+0x1c6>
 8001fa6:	9200      	str	r2, [sp, #0]
 8001fa8:	9a04      	ldr	r2, [sp, #16]
 8001faa:	2a00      	cmp	r2, #0
 8001fac:	d063      	beq.n	8002076 <ai_conv2d_kernel_group_f32+0x1ba>
 8001fae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8001fb0:	9f05      	ldr	r7, [sp, #20]
 8001fb2:	f8cd c004 	str.w	ip, [sp, #4]
 8001fb6:	eb02 0b8a 	add.w	fp, r2, sl, lsl #2
 8001fba:	9a04      	ldr	r2, [sp, #16]
 8001fbc:	f8cd e00c 	str.w	lr, [sp, #12]
 8001fc0:	eb07 078a 	add.w	r7, r7, sl, lsl #2
 8001fc4:	f8cd 5008 	str.w	r5, [sp, #8]
 8001fc8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001fcc:	eddb 0a00 	vldr	s1, [fp]
 8001fd0:	9d02      	ldr	r5, [sp, #8]
 8001fd2:	f1be 0f01 	cmp.w	lr, #1
 8001fd6:	ee60 0a80 	vmul.f32	s1, s1, s0
 8001fda:	db3b      	blt.n	8002054 <ai_conv2d_kernel_group_f32+0x198>
 8001fdc:	2801      	cmp	r0, #1
 8001fde:	db32      	blt.n	8002046 <ai_conv2d_kernel_group_f32+0x18a>
 8001fe0:	ea4f 0c00 	mov.w	ip, r0
 8001fe4:	eb05 0683 	add.w	r6, r5, r3, lsl #2
 8001fe8:	42b5      	cmp	r5, r6
 8001fea:	d227      	bcs.n	800203c <ai_conv2d_kernel_group_f32+0x180>
 8001fec:	ed94 1a00 	vldr	s2, [r4]
 8001ff0:	edd5 1a00 	vldr	s3, [r5]
 8001ff4:	1d24      	adds	r4, r4, #4
 8001ff6:	1d2d      	adds	r5, r5, #4
 8001ff8:	42b5      	cmp	r5, r6
 8001ffa:	ee41 0a21 	vmla.f32	s1, s2, s3
 8001ffe:	d21d      	bcs.n	800203c <ai_conv2d_kernel_group_f32+0x180>
 8002000:	ed94 1a00 	vldr	s2, [r4]
 8002004:	edd5 1a00 	vldr	s3, [r5]
 8002008:	1d24      	adds	r4, r4, #4
 800200a:	1d2d      	adds	r5, r5, #4
 800200c:	42b5      	cmp	r5, r6
 800200e:	ee41 0a21 	vmla.f32	s1, s2, s3
 8002012:	d213      	bcs.n	800203c <ai_conv2d_kernel_group_f32+0x180>
 8002014:	ed94 1a00 	vldr	s2, [r4]
 8002018:	edd5 1a00 	vldr	s3, [r5]
 800201c:	1d24      	adds	r4, r4, #4
 800201e:	1d2d      	adds	r5, r5, #4
 8002020:	42b5      	cmp	r5, r6
 8002022:	ee41 0a21 	vmla.f32	s1, s2, s3
 8002026:	d209      	bcs.n	800203c <ai_conv2d_kernel_group_f32+0x180>
 8002028:	ed94 1a00 	vldr	s2, [r4]
 800202c:	edd5 1a00 	vldr	s3, [r5]
 8002030:	1d24      	adds	r4, r4, #4
 8002032:	1d2d      	adds	r5, r5, #4
 8002034:	42b5      	cmp	r5, r6
 8002036:	ee41 0a21 	vmla.f32	s1, s2, s3
 800203a:	d3d7      	bcc.n	8001fec <ai_conv2d_kernel_group_f32+0x130>
 800203c:	f1bc 0c01 	subs.w	ip, ip, #1
 8002040:	eb05 0589 	add.w	r5, r5, r9, lsl #2
 8002044:	d1ce      	bne.n	8001fe4 <ai_conv2d_kernel_group_f32+0x128>
 8002046:	f1be 0e01 	subs.w	lr, lr, #1
 800204a:	eb05 0588 	add.w	r5, r5, r8, lsl #2
 800204e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8002052:	d1c3      	bne.n	8001fdc <ai_conv2d_kernel_group_f32+0x120>
 8002054:	9d03      	ldr	r5, [sp, #12]
 8002056:	edc7 0a00 	vstr	s1, [r7]
 800205a:	1d3f      	adds	r7, r7, #4
 800205c:	1e52      	subs	r2, r2, #1
 800205e:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8002062:	f10a 0a01 	add.w	sl, sl, #1
 8002066:	f10b 0b04 	add.w	fp, fp, #4
 800206a:	d1ad      	bne.n	8001fc8 <ai_conv2d_kernel_group_f32+0x10c>
 800206c:	f8dd c004 	ldr.w	ip, [sp, #4]
 8002070:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8002074:	9d02      	ldr	r5, [sp, #8]
 8002076:	9a00      	ldr	r2, [sp, #0]
 8002078:	1e52      	subs	r2, r2, #1
 800207a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 800207e:	9200      	str	r2, [sp, #0]
 8002080:	d192      	bne.n	8001fa8 <ai_conv2d_kernel_group_f32+0xec>
 8002082:	b007      	add	sp, #28
 8002084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002088 <.text_6>:
 8002088:	00000000 	.word	0x00000000

0800208c <ai_conv2d_kernel_f32>:
 800208c:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002090:	b090      	sub	sp, #64	; 0x40
 8002092:	991a      	ldr	r1, [sp, #104]	; 0x68
 8002094:	b901      	cbnz	r1, 8002098 <ai_conv2d_kernel_f32+0xc>
 8002096:	9910      	ldr	r1, [sp, #64]	; 0x40
 8002098:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800209a:	9e25      	ldr	r6, [sp, #148]	; 0x94
 800209c:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800209e:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 80020a0:	f8dd e088 	ldr.w	lr, [sp, #136]	; 0x88
 80020a4:	f9bd c078 	ldrsh.w	ip, [sp, #120]	; 0x78
 80020a8:	f9bd 807c 	ldrsh.w	r8, [sp, #124]	; 0x7c
 80020ac:	900f      	str	r0, [sp, #60]	; 0x3c
 80020ae:	1bed      	subs	r5, r5, r7
 80020b0:	1ba4      	subs	r4, r4, r6
 80020b2:	920e      	str	r2, [sp, #56]	; 0x38
 80020b4:	930d      	str	r3, [sp, #52]	; 0x34
 80020b6:	f1be 0f01 	cmp.w	lr, #1
 80020ba:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80020bc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80020be:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80020c0:	f8dd 9080 	ldr.w	r9, [sp, #128]	; 0x80
 80020c4:	f8dd a084 	ldr.w	sl, [sp, #132]	; 0x84
 80020c8:	bf04      	itt	eq
 80020ca:	fb1c fb08 	smulbbeq	fp, ip, r8
 80020ce:	f1bb 0f01 	cmpeq.w	fp, #1
 80020d2:	d114      	bne.n	80020fe <ai_conv2d_kernel_f32+0x72>
 80020d4:	9303      	str	r3, [sp, #12]
 80020d6:	9202      	str	r2, [sp, #8]
 80020d8:	9001      	str	r0, [sp, #4]
 80020da:	9100      	str	r1, [sp, #0]
 80020dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80020de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80020e0:	9910      	ldr	r1, [sp, #64]	; 0x40
 80020e2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80020e4:	9409      	str	r4, [sp, #36]	; 0x24
 80020e6:	9608      	str	r6, [sp, #32]
 80020e8:	9507      	str	r5, [sp, #28]
 80020ea:	9706      	str	r7, [sp, #24]
 80020ec:	f8cd a014 	str.w	sl, [sp, #20]
 80020f0:	f8cd 9010 	str.w	r9, [sp, #16]
 80020f4:	f7ff fd62 	bl	8001bbc <ai_conv2d_kernel_simple_f32>
 80020f8:	b011      	add	sp, #68	; 0x44
 80020fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020fe:	4586      	cmp	lr, r0
 8002100:	bf04      	itt	eq
 8002102:	fb1c fb08 	smulbbeq	fp, ip, r8
 8002106:	f1bb 0f01 	cmpeq.w	fp, #1
 800210a:	d114      	bne.n	8002136 <ai_conv2d_kernel_f32+0xaa>
 800210c:	9303      	str	r3, [sp, #12]
 800210e:	9202      	str	r2, [sp, #8]
 8002110:	9001      	str	r0, [sp, #4]
 8002112:	9100      	str	r1, [sp, #0]
 8002114:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002116:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002118:	9910      	ldr	r1, [sp, #64]	; 0x40
 800211a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800211c:	9409      	str	r4, [sp, #36]	; 0x24
 800211e:	9608      	str	r6, [sp, #32]
 8002120:	9507      	str	r5, [sp, #28]
 8002122:	9706      	str	r7, [sp, #24]
 8002124:	f8cd a014 	str.w	sl, [sp, #20]
 8002128:	f8cd 9010 	str.w	r9, [sp, #16]
 800212c:	f7ff fdf2 	bl	8001d14 <ai_conv2d_kernel_depthwise_f32>
 8002130:	b011      	add	sp, #68	; 0x44
 8002132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002136:	9303      	str	r3, [sp, #12]
 8002138:	9202      	str	r2, [sp, #8]
 800213a:	9001      	str	r0, [sp, #4]
 800213c:	9100      	str	r1, [sp, #0]
 800213e:	f8cd e020 	str.w	lr, [sp, #32]
 8002142:	f8cd c010 	str.w	ip, [sp, #16]
 8002146:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002148:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800214a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800214c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800214e:	940c      	str	r4, [sp, #48]	; 0x30
 8002150:	960b      	str	r6, [sp, #44]	; 0x2c
 8002152:	950a      	str	r5, [sp, #40]	; 0x28
 8002154:	9709      	str	r7, [sp, #36]	; 0x24
 8002156:	f8cd a01c 	str.w	sl, [sp, #28]
 800215a:	f8cd 9018 	str.w	r9, [sp, #24]
 800215e:	f8cd 8014 	str.w	r8, [sp, #20]
 8002162:	f7ff feab 	bl	8001ebc <ai_conv2d_kernel_group_f32>
 8002166:	b011      	add	sp, #68	; 0x44
 8002168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800216c <ai_conv2d_stripe_f32>:
 800216c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002170:	b091      	sub	sp, #68	; 0x44
 8002172:	4604      	mov	r4, r0
 8002174:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8002178:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 800217a:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
 800217e:	9826      	ldr	r0, [sp, #152]	; 0x98
 8002180:	fb08 b000 	mla	r0, r8, r0, fp
 8002184:	2d00      	cmp	r5, #0
 8002186:	9001      	str	r0, [sp, #4]
 8002188:	d05d      	beq.n	8002246 <ai_conv2d_stripe_f32+0xda>
 800218a:	9102      	str	r1, [sp, #8]
 800218c:	920e      	str	r2, [sp, #56]	; 0x38
 800218e:	9500      	str	r5, [sp, #0]
 8002190:	930d      	str	r3, [sp, #52]	; 0x34
 8002192:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8002194:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8002196:	971a      	str	r7, [sp, #104]	; 0x68
 8002198:	4625      	mov	r5, r4
 800219a:	950f      	str	r5, [sp, #60]	; 0x3c
 800219c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800219e:	9c20      	ldr	r4, [sp, #128]	; 0x80
 80021a0:	f8dd c088 	ldr.w	ip, [sp, #136]	; 0x88
 80021a4:	f8dd e08c 	ldr.w	lr, [sp, #140]	; 0x8c
 80021a8:	9821      	ldr	r0, [sp, #132]	; 0x84
 80021aa:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 80021ae:	f9bd 10a0 	ldrsh.w	r1, [sp, #160]	; 0xa0
 80021b2:	f9bd 20a4 	ldrsh.w	r2, [sp, #164]	; 0xa4
 80021b6:	9d02      	ldr	r5, [sp, #8]
 80021b8:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 80021ba:	931f      	str	r3, [sp, #124]	; 0x7c
 80021bc:	9420      	str	r4, [sp, #128]	; 0x80
 80021be:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
 80021c2:	f8cd e08c 	str.w	lr, [sp, #140]	; 0x8c
 80021c6:	9624      	str	r6, [sp, #144]	; 0x90
 80021c8:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 80021ca:	f8dd a004 	ldr.w	sl, [sp, #4]
 80021ce:	9c00      	ldr	r4, [sp, #0]
 80021d0:	f8ad 10a0 	strh.w	r1, [sp, #160]	; 0xa0
 80021d4:	f8ad 20a4 	strh.w	r2, [sp, #164]	; 0xa4
 80021d8:	f8ad 0084 	strh.w	r0, [sp, #132]	; 0x84
 80021dc:	f1db 0000 	rsbs	r0, fp, #0
 80021e0:	bfd8      	it	le
 80021e2:	2000      	movle	r0, #0
 80021e4:	eba8 010b 	sub.w	r1, r8, fp
 80021e8:	42b1      	cmp	r1, r6
 80021ea:	bf28      	it	cs
 80021ec:	4631      	movcs	r1, r6
 80021ee:	910c      	str	r1, [sp, #48]	; 0x30
 80021f0:	900b      	str	r0, [sp, #44]	; 0x2c
 80021f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80021f6:	9702      	str	r7, [sp, #8]
 80021f8:	f8cd 9004 	str.w	r9, [sp, #4]
 80021fc:	4450      	add	r0, sl
 80021fe:	9924      	ldr	r1, [sp, #144]	; 0x90
 8002200:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8002202:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002204:	910a      	str	r1, [sp, #40]	; 0x28
 8002206:	9209      	str	r2, [sp, #36]	; 0x24
 8002208:	fb00 f009 	mul.w	r0, r0, r9
 800220c:	9922      	ldr	r1, [sp, #136]	; 0x88
 800220e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002210:	9108      	str	r1, [sp, #32]
 8002212:	9207      	str	r2, [sp, #28]
 8002214:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8002216:	f9bd 20a4 	ldrsh.w	r2, [sp, #164]	; 0xa4
 800221a:	9106      	str	r1, [sp, #24]
 800221c:	9205      	str	r2, [sp, #20]
 800221e:	f9bd 10a0 	ldrsh.w	r1, [sp, #160]	; 0xa0
 8002222:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8002224:	9104      	str	r1, [sp, #16]
 8002226:	9200      	str	r2, [sp, #0]
 8002228:	990e      	ldr	r1, [sp, #56]	; 0x38
 800222a:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 800222e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8002230:	4629      	mov	r1, r5
 8002232:	f7ff ff2b 	bl	800208c <ai_conv2d_kernel_f32>
 8002236:	f8bd 0084 	ldrh.w	r0, [sp, #132]	; 0x84
 800223a:	1e64      	subs	r4, r4, #1
 800223c:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 8002240:	4483      	add	fp, r0
 8002242:	4482      	add	sl, r0
 8002244:	d1ca      	bne.n	80021dc <ai_conv2d_stripe_f32+0x70>
 8002246:	b011      	add	sp, #68	; 0x44
 8002248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800224c <func_dummy>:
 800224c:	4770      	bx	lr
	...

08002250 <ai_dict8_dot_array_f32>:
 8002250:	b4f0      	push	{r4, r5, r6, r7}
 8002252:	4604      	mov	r4, r0
 8002254:	9804      	ldr	r0, [sp, #16]
 8002256:	eb03 0580 	add.w	r5, r3, r0, lsl #2
 800225a:	3d20      	subs	r5, #32
 800225c:	2808      	cmp	r0, #8
 800225e:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 80025c4 <.text_12>
 8002262:	d22f      	bcs.n	80022c4 <ai_dict8_dot_array_f32+0x74>
 8002264:	3520      	adds	r5, #32
 8002266:	42ab      	cmp	r3, r5
 8002268:	d224      	bcs.n	80022b4 <ai_dict8_dot_array_f32+0x64>
 800226a:	7808      	ldrb	r0, [r1, #0]
 800226c:	ed93 1a00 	vldr	s2, [r3]
 8002270:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 8002274:	1d18      	adds	r0, r3, #4
 8002276:	edd6 0a00 	vldr	s1, [r6]
 800227a:	42a8      	cmp	r0, r5
 800227c:	ee00 0a81 	vmla.f32	s0, s1, s2
 8002280:	d218      	bcs.n	80022b4 <ai_dict8_dot_array_f32+0x64>
 8002282:	784b      	ldrb	r3, [r1, #1]
 8002284:	ed90 1a00 	vldr	s2, [r0]
 8002288:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 800228c:	1d00      	adds	r0, r0, #4
 800228e:	edd6 0a00 	vldr	s1, [r6]
 8002292:	42a8      	cmp	r0, r5
 8002294:	ee00 0a81 	vmla.f32	s0, s1, s2
 8002298:	d20c      	bcs.n	80022b4 <ai_dict8_dot_array_f32+0x64>
 800229a:	788b      	ldrb	r3, [r1, #2]
 800229c:	ed90 1a00 	vldr	s2, [r0]
 80022a0:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 80022a4:	1d03      	adds	r3, r0, #4
 80022a6:	1cc9      	adds	r1, r1, #3
 80022a8:	edd6 0a00 	vldr	s1, [r6]
 80022ac:	42ab      	cmp	r3, r5
 80022ae:	ee00 0a81 	vmla.f32	s0, s1, s2
 80022b2:	d3da      	bcc.n	800226a <ai_dict8_dot_array_f32+0x1a>
 80022b4:	edd4 0a00 	vldr	s1, [r4]
 80022b8:	ee30 0a80 	vadd.f32	s0, s1, s0
 80022bc:	ed84 0a00 	vstr	s0, [r4]
 80022c0:	bcf0      	pop	{r4, r5, r6, r7}
 80022c2:	4770      	bx	lr
 80022c4:	f001 0003 	and.w	r0, r1, #3
 80022c8:	2803      	cmp	r0, #3
 80022ca:	d8f3      	bhi.n	80022b4 <ai_dict8_dot_array_f32+0x64>
 80022cc:	e8df f000 	tbb	[pc, r0]
 80022d0:	4c413603 	.word	0x4c413603
 80022d4:	e7ee      	b.n	80022b4 <ai_dict8_dot_array_f32+0x64>
 80022d6:	429d      	cmp	r5, r3
 80022d8:	f080 80d5 	bcs.w	8002486 <ai_dict8_dot_array_f32+0x236>
 80022dc:	3520      	adds	r5, #32
 80022de:	42ab      	cmp	r3, r5
 80022e0:	d2e8      	bcs.n	80022b4 <ai_dict8_dot_array_f32+0x64>
 80022e2:	7808      	ldrb	r0, [r1, #0]
 80022e4:	ed93 1a00 	vldr	s2, [r3]
 80022e8:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 80022ec:	1d18      	adds	r0, r3, #4
 80022ee:	edd6 0a00 	vldr	s1, [r6]
 80022f2:	42a8      	cmp	r0, r5
 80022f4:	ee00 0a81 	vmla.f32	s0, s1, s2
 80022f8:	d2dc      	bcs.n	80022b4 <ai_dict8_dot_array_f32+0x64>
 80022fa:	784b      	ldrb	r3, [r1, #1]
 80022fc:	ed90 1a00 	vldr	s2, [r0]
 8002300:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 8002304:	1d00      	adds	r0, r0, #4
 8002306:	edd6 0a00 	vldr	s1, [r6]
 800230a:	42a8      	cmp	r0, r5
 800230c:	ee00 0a81 	vmla.f32	s0, s1, s2
 8002310:	d2d0      	bcs.n	80022b4 <ai_dict8_dot_array_f32+0x64>
 8002312:	788b      	ldrb	r3, [r1, #2]
 8002314:	ed90 1a00 	vldr	s2, [r0]
 8002318:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 800231c:	1d03      	adds	r3, r0, #4
 800231e:	1cc9      	adds	r1, r1, #3
 8002320:	edd6 0a00 	vldr	s1, [r6]
 8002324:	42ab      	cmp	r3, r5
 8002326:	ee00 0a81 	vmla.f32	s0, s1, s2
 800232a:	d3da      	bcc.n	80022e2 <ai_dict8_dot_array_f32+0x92>
 800232c:	edd4 0a00 	vldr	s1, [r4]
 8002330:	ee30 0a80 	vadd.f32	s0, s1, s0
 8002334:	ed84 0a00 	vstr	s0, [r4]
 8002338:	bcf0      	pop	{r4, r5, r6, r7}
 800233a:	4770      	bx	lr
 800233c:	f811 0b01 	ldrb.w	r0, [r1], #1
 8002340:	ed93 1a00 	vldr	s2, [r3]
 8002344:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 8002348:	1d1b      	adds	r3, r3, #4
 800234a:	edd6 0a00 	vldr	s1, [r6]
 800234e:	ee00 0a81 	vmla.f32	s0, s1, s2
 8002352:	f811 0b01 	ldrb.w	r0, [r1], #1
 8002356:	ed93 1a00 	vldr	s2, [r3]
 800235a:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 800235e:	1d1b      	adds	r3, r3, #4
 8002360:	edd6 0a00 	vldr	s1, [r6]
 8002364:	ee00 0a81 	vmla.f32	s0, s1, s2
 8002368:	f811 0b01 	ldrb.w	r0, [r1], #1
 800236c:	ed93 1a00 	vldr	s2, [r3]
 8002370:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 8002374:	1d1b      	adds	r3, r3, #4
 8002376:	edd6 0a00 	vldr	s1, [r6]
 800237a:	429d      	cmp	r5, r3
 800237c:	ee00 0a81 	vmla.f32	s0, s1, s2
 8002380:	d34e      	bcc.n	8002420 <ai_dict8_dot_array_f32+0x1d0>
 8002382:	78cf      	ldrb	r7, [r1, #3]
 8002384:	ed93 4a00 	vldr	s8, [r3]
 8002388:	ed93 3a01 	vldr	s6, [r3, #4]
 800238c:	ed93 2a02 	vldr	s4, [r3, #8]
 8002390:	ed93 1a03 	vldr	s2, [r3, #12]
 8002394:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 8002398:	788f      	ldrb	r7, [r1, #2]
 800239a:	edd6 0a00 	vldr	s1, [r6]
 800239e:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 80023a2:	784f      	ldrb	r7, [r1, #1]
 80023a4:	edd6 1a00 	vldr	s3, [r6]
 80023a8:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 80023ac:	780f      	ldrb	r7, [r1, #0]
 80023ae:	edd6 2a00 	vldr	s5, [r6]
 80023b2:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 80023b6:	f103 0010 	add.w	r0, r3, #16
 80023ba:	edd6 3a00 	vldr	s7, [r6]
 80023be:	790b      	ldrb	r3, [r1, #4]
 80023c0:	ee03 0a84 	vmla.f32	s0, s7, s8
 80023c4:	ee02 0a83 	vmla.f32	s0, s5, s6
 80023c8:	ee01 0a82 	vmla.f32	s0, s3, s4
 80023cc:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 80023d0:	ee00 0a81 	vmla.f32	s0, s1, s2
 80023d4:	794b      	ldrb	r3, [r1, #5]
 80023d6:	edd7 0a00 	vldr	s1, [r7]
 80023da:	ed90 4a00 	vldr	s8, [r0]
 80023de:	edd0 3a01 	vldr	s7, [r0, #4]
 80023e2:	ed90 3a02 	vldr	s6, [r0, #8]
 80023e6:	edd0 2a03 	vldr	s5, [r0, #12]
 80023ea:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 80023ee:	798b      	ldrb	r3, [r1, #6]
 80023f0:	ed97 1a00 	vldr	s2, [r7]
 80023f4:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 80023f8:	79cb      	ldrb	r3, [r1, #7]
 80023fa:	edd7 1a00 	vldr	s3, [r7]
 80023fe:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 8002402:	ee00 0a84 	vmla.f32	s0, s1, s8
 8002406:	3108      	adds	r1, #8
 8002408:	f100 0310 	add.w	r3, r0, #16
 800240c:	ee01 0a23 	vmla.f32	s0, s2, s7
 8002410:	ed97 2a00 	vldr	s4, [r7]
 8002414:	ee01 0a83 	vmla.f32	s0, s3, s6
 8002418:	429d      	cmp	r5, r3
 800241a:	ee02 0a22 	vmla.f32	s0, s4, s5
 800241e:	d2b0      	bcs.n	8002382 <ai_dict8_dot_array_f32+0x132>
 8002420:	3520      	adds	r5, #32
 8002422:	42ab      	cmp	r3, r5
 8002424:	f4bf af46 	bcs.w	80022b4 <ai_dict8_dot_array_f32+0x64>
 8002428:	7808      	ldrb	r0, [r1, #0]
 800242a:	ed93 1a00 	vldr	s2, [r3]
 800242e:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 8002432:	1d18      	adds	r0, r3, #4
 8002434:	edd6 0a00 	vldr	s1, [r6]
 8002438:	42a8      	cmp	r0, r5
 800243a:	ee00 0a81 	vmla.f32	s0, s1, s2
 800243e:	f4bf af39 	bcs.w	80022b4 <ai_dict8_dot_array_f32+0x64>
 8002442:	784b      	ldrb	r3, [r1, #1]
 8002444:	ed90 1a00 	vldr	s2, [r0]
 8002448:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 800244c:	1d00      	adds	r0, r0, #4
 800244e:	edd6 0a00 	vldr	s1, [r6]
 8002452:	42a8      	cmp	r0, r5
 8002454:	ee00 0a81 	vmla.f32	s0, s1, s2
 8002458:	f4bf af2c 	bcs.w	80022b4 <ai_dict8_dot_array_f32+0x64>
 800245c:	788b      	ldrb	r3, [r1, #2]
 800245e:	ed90 1a00 	vldr	s2, [r0]
 8002462:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 8002466:	1d03      	adds	r3, r0, #4
 8002468:	1cc9      	adds	r1, r1, #3
 800246a:	edd6 0a00 	vldr	s1, [r6]
 800246e:	42ab      	cmp	r3, r5
 8002470:	ee00 0a81 	vmla.f32	s0, s1, s2
 8002474:	d3d8      	bcc.n	8002428 <ai_dict8_dot_array_f32+0x1d8>
 8002476:	edd4 0a00 	vldr	s1, [r4]
 800247a:	ee30 0a80 	vadd.f32	s0, s1, s0
 800247e:	ed84 0a00 	vstr	s0, [r4]
 8002482:	bcf0      	pop	{r4, r5, r6, r7}
 8002484:	4770      	bx	lr
 8002486:	78cf      	ldrb	r7, [r1, #3]
 8002488:	ed93 4a00 	vldr	s8, [r3]
 800248c:	ed93 3a01 	vldr	s6, [r3, #4]
 8002490:	ed93 2a02 	vldr	s4, [r3, #8]
 8002494:	ed93 1a03 	vldr	s2, [r3, #12]
 8002498:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 800249c:	788f      	ldrb	r7, [r1, #2]
 800249e:	edd6 0a00 	vldr	s1, [r6]
 80024a2:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 80024a6:	784f      	ldrb	r7, [r1, #1]
 80024a8:	edd6 1a00 	vldr	s3, [r6]
 80024ac:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 80024b0:	780f      	ldrb	r7, [r1, #0]
 80024b2:	edd6 2a00 	vldr	s5, [r6]
 80024b6:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 80024ba:	f103 0010 	add.w	r0, r3, #16
 80024be:	edd6 3a00 	vldr	s7, [r6]
 80024c2:	790b      	ldrb	r3, [r1, #4]
 80024c4:	ee03 0a84 	vmla.f32	s0, s7, s8
 80024c8:	ee02 0a83 	vmla.f32	s0, s5, s6
 80024cc:	ee01 0a82 	vmla.f32	s0, s3, s4
 80024d0:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 80024d4:	ee00 0a81 	vmla.f32	s0, s1, s2
 80024d8:	794b      	ldrb	r3, [r1, #5]
 80024da:	edd7 0a00 	vldr	s1, [r7]
 80024de:	ed90 4a00 	vldr	s8, [r0]
 80024e2:	edd0 3a01 	vldr	s7, [r0, #4]
 80024e6:	ed90 3a02 	vldr	s6, [r0, #8]
 80024ea:	edd0 2a03 	vldr	s5, [r0, #12]
 80024ee:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 80024f2:	798b      	ldrb	r3, [r1, #6]
 80024f4:	ed97 1a00 	vldr	s2, [r7]
 80024f8:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 80024fc:	79cb      	ldrb	r3, [r1, #7]
 80024fe:	edd7 1a00 	vldr	s3, [r7]
 8002502:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 8002506:	ee00 0a84 	vmla.f32	s0, s1, s8
 800250a:	3108      	adds	r1, #8
 800250c:	f100 0310 	add.w	r3, r0, #16
 8002510:	ee01 0a23 	vmla.f32	s0, s2, s7
 8002514:	ed97 2a00 	vldr	s4, [r7]
 8002518:	ee01 0a83 	vmla.f32	s0, s3, s6
 800251c:	429d      	cmp	r5, r3
 800251e:	ee02 0a22 	vmla.f32	s0, s4, s5
 8002522:	d2b0      	bcs.n	8002486 <ai_dict8_dot_array_f32+0x236>
 8002524:	e6da      	b.n	80022dc <ai_dict8_dot_array_f32+0x8c>
	...

08002528 <ai_dict4_dot_array_f32>:
 8002528:	b4f0      	push	{r4, r5, r6, r7}
 800252a:	9c04      	ldr	r4, [sp, #16]
 800252c:	0865      	lsrs	r5, r4, #1
 800252e:	006d      	lsls	r5, r5, #1
 8002530:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8002534:	42ab      	cmp	r3, r5
 8002536:	ed9f 0a23 	vldr	s0, [pc, #140]	; 80025c4 <.text_12>
 800253a:	d22f      	bcs.n	800259c <ai_dict4_dot_array_f32+0x74>
 800253c:	f811 6b01 	ldrb.w	r6, [r1], #1
 8002540:	ed93 2a00 	vldr	s4, [r3]
 8002544:	ed93 1a01 	vldr	s2, [r3, #4]
 8002548:	f006 070f 	and.w	r7, r6, #15
 800254c:	0936      	lsrs	r6, r6, #4
 800254e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8002552:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8002556:	edd6 1a00 	vldr	s3, [r6]
 800255a:	edd7 0a00 	vldr	s1, [r7]
 800255e:	3308      	adds	r3, #8
 8002560:	ee01 0a82 	vmla.f32	s0, s3, s4
 8002564:	42ab      	cmp	r3, r5
 8002566:	ee00 0a81 	vmla.f32	s0, s1, s2
 800256a:	d217      	bcs.n	800259c <ai_dict4_dot_array_f32+0x74>
 800256c:	f811 6b01 	ldrb.w	r6, [r1], #1
 8002570:	ed93 2a00 	vldr	s4, [r3]
 8002574:	ed93 1a01 	vldr	s2, [r3, #4]
 8002578:	f006 070f 	and.w	r7, r6, #15
 800257c:	0936      	lsrs	r6, r6, #4
 800257e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8002582:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8002586:	edd6 1a00 	vldr	s3, [r6]
 800258a:	edd7 0a00 	vldr	s1, [r7]
 800258e:	3308      	adds	r3, #8
 8002590:	ee01 0a82 	vmla.f32	s0, s3, s4
 8002594:	42ab      	cmp	r3, r5
 8002596:	ee00 0a81 	vmla.f32	s0, s1, s2
 800259a:	d3cf      	bcc.n	800253c <ai_dict4_dot_array_f32+0x14>
 800259c:	07e4      	lsls	r4, r4, #31
 800259e:	d509      	bpl.n	80025b4 <ai_dict4_dot_array_f32+0x8c>
 80025a0:	7809      	ldrb	r1, [r1, #0]
 80025a2:	ed93 1a00 	vldr	s2, [r3]
 80025a6:	0909      	lsrs	r1, r1, #4
 80025a8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80025ac:	edd2 0a00 	vldr	s1, [r2]
 80025b0:	ee00 0a81 	vmla.f32	s0, s1, s2
 80025b4:	edd0 1a00 	vldr	s3, [r0]
 80025b8:	ee31 0a80 	vadd.f32	s0, s3, s0
 80025bc:	ed80 0a00 	vstr	s0, [r0]
 80025c0:	bcf0      	pop	{r4, r5, r6, r7}
 80025c2:	4770      	bx	lr

080025c4 <.text_12>:
 80025c4:	00000000 	.word	0x00000000

080025c8 <ai_dict_decompress_f32>:
 80025c8:	b4f0      	push	{r4, r5, r6, r7}
 80025ca:	4604      	mov	r4, r0
 80025cc:	9805      	ldr	r0, [sp, #20]
 80025ce:	9e04      	ldr	r6, [sp, #16]
 80025d0:	2b04      	cmp	r3, #4
 80025d2:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 80025d6:	d003      	beq.n	80025e0 <ai_dict_decompress_f32+0x18>
 80025d8:	2b08      	cmp	r3, #8
 80025da:	d03e      	beq.n	800265a <ai_dict_decompress_f32+0x92>
 80025dc:	bcf0      	pop	{r4, r5, r6, r7}
 80025de:	4770      	bx	lr
 80025e0:	42ac      	cmp	r4, r5
 80025e2:	d259      	bcs.n	8002698 <ai_dict_decompress_f32+0xd0>
 80025e4:	0870      	lsrs	r0, r6, #1
 80025e6:	d02e      	beq.n	8002646 <ai_dict_decompress_f32+0x7e>
 80025e8:	07c3      	lsls	r3, r0, #31
 80025ea:	d50c      	bpl.n	8002606 <ai_dict_decompress_f32+0x3e>
 80025ec:	780f      	ldrb	r7, [r1, #0]
 80025ee:	093f      	lsrs	r7, r7, #4
 80025f0:	f852 3027 	ldr.w	r3, [r2, r7, lsl #2]
 80025f4:	6023      	str	r3, [r4, #0]
 80025f6:	f811 7b01 	ldrb.w	r7, [r1], #1
 80025fa:	f007 070f 	and.w	r7, r7, #15
 80025fe:	f852 3027 	ldr.w	r3, [r2, r7, lsl #2]
 8002602:	6063      	str	r3, [r4, #4]
 8002604:	3408      	adds	r4, #8
 8002606:	0840      	lsrs	r0, r0, #1
 8002608:	d01d      	beq.n	8002646 <ai_dict_decompress_f32+0x7e>
 800260a:	780b      	ldrb	r3, [r1, #0]
 800260c:	091b      	lsrs	r3, r3, #4
 800260e:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
 8002612:	6027      	str	r7, [r4, #0]
 8002614:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002618:	f003 030f 	and.w	r3, r3, #15
 800261c:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
 8002620:	6067      	str	r7, [r4, #4]
 8002622:	f104 0308 	add.w	r3, r4, #8
 8002626:	780c      	ldrb	r4, [r1, #0]
 8002628:	0924      	lsrs	r4, r4, #4
 800262a:	f852 7024 	ldr.w	r7, [r2, r4, lsl #2]
 800262e:	601f      	str	r7, [r3, #0]
 8002630:	1e40      	subs	r0, r0, #1
 8002632:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002636:	f004 040f 	and.w	r4, r4, #15
 800263a:	f852 7024 	ldr.w	r7, [r2, r4, lsl #2]
 800263e:	605f      	str	r7, [r3, #4]
 8002640:	f103 0408 	add.w	r4, r3, #8
 8002644:	d1e1      	bne.n	800260a <ai_dict_decompress_f32+0x42>
 8002646:	07f0      	lsls	r0, r6, #31
 8002648:	d5ca      	bpl.n	80025e0 <ai_dict_decompress_f32+0x18>
 800264a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800264e:	091b      	lsrs	r3, r3, #4
 8002650:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002654:	f844 0b04 	str.w	r0, [r4], #4
 8002658:	e7c2      	b.n	80025e0 <ai_dict_decompress_f32+0x18>
 800265a:	42ac      	cmp	r4, r5
 800265c:	d21c      	bcs.n	8002698 <ai_dict_decompress_f32+0xd0>
 800265e:	780b      	ldrb	r3, [r1, #0]
 8002660:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002664:	6020      	str	r0, [r4, #0]
 8002666:	1d20      	adds	r0, r4, #4
 8002668:	42a8      	cmp	r0, r5
 800266a:	bf3f      	itttt	cc
 800266c:	784b      	ldrbcc	r3, [r1, #1]
 800266e:	f852 4023 	ldrcc.w	r4, [r2, r3, lsl #2]
 8002672:	f840 4b04 	strcc.w	r4, [r0], #4
 8002676:	42a8      	cmpcc	r0, r5
 8002678:	d20e      	bcs.n	8002698 <ai_dict_decompress_f32+0xd0>
 800267a:	788b      	ldrb	r3, [r1, #2]
 800267c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8002680:	f840 4b04 	str.w	r4, [r0], #4
 8002684:	42a8      	cmp	r0, r5
 8002686:	d207      	bcs.n	8002698 <ai_dict_decompress_f32+0xd0>
 8002688:	78cb      	ldrb	r3, [r1, #3]
 800268a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800268e:	6004      	str	r4, [r0, #0]
 8002690:	1d09      	adds	r1, r1, #4
 8002692:	1d04      	adds	r4, r0, #4
 8002694:	42ac      	cmp	r4, r5
 8002696:	d3e2      	bcc.n	800265e <ai_dict_decompress_f32+0x96>
 8002698:	bcf0      	pop	{r4, r5, r6, r7}
 800269a:	4770      	bx	lr

0800269c <forward_conv2d>:
 800269c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026a0:	4605      	mov	r5, r0
 80026a2:	b0a7      	sub	sp, #156	; 0x9c
 80026a4:	6968      	ldr	r0, [r5, #20]
 80026a6:	6800      	ldr	r0, [r0, #0]
 80026a8:	68c2      	ldr	r2, [r0, #12]
 80026aa:	6813      	ldr	r3, [r2, #0]
 80026ac:	6801      	ldr	r1, [r0, #0]
 80026ae:	6982      	ldr	r2, [r0, #24]
 80026b0:	8c00      	ldrh	r0, [r0, #32]
 80026b2:	680c      	ldr	r4, [r1, #0]
 80026b4:	f8d2 b000 	ldr.w	fp, [r2]
 80026b8:	2801      	cmp	r0, #1
 80026ba:	6890      	ldr	r0, [r2, #8]
 80026bc:	bfcc      	ite	gt
 80026be:	6851      	ldrgt	r1, [r2, #4]
 80026c0:	2100      	movle	r1, #0
 80026c2:	68a2      	ldr	r2, [r4, #8]
 80026c4:	921b      	str	r2, [sp, #108]	; 0x6c
 80026c6:	689e      	ldr	r6, [r3, #8]
 80026c8:	9603      	str	r6, [sp, #12]
 80026ca:	f8d3 a010 	ldr.w	sl, [r3, #16]
 80026ce:	68da      	ldr	r2, [r3, #12]
 80026d0:	9215      	str	r2, [sp, #84]	; 0x54
 80026d2:	6926      	ldr	r6, [r4, #16]
 80026d4:	961a      	str	r6, [sp, #104]	; 0x68
 80026d6:	68e7      	ldr	r7, [r4, #12]
 80026d8:	9721      	str	r7, [sp, #132]	; 0x84
 80026da:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 80026dc:	f8ad 6040 	strh.w	r6, [sp, #64]	; 0x40
 80026e0:	8d2f      	ldrh	r7, [r5, #40]	; 0x28
 80026e2:	9720      	str	r7, [sp, #128]	; 0x80
 80026e4:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80026e6:	6817      	ldr	r7, [r2, #0]
 80026e8:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 80026ec:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80026ee:	9219      	str	r2, [sp, #100]	; 0x64
 80026f0:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 80026f2:	9618      	str	r6, [sp, #96]	; 0x60
 80026f4:	f8db 200c 	ldr.w	r2, [fp, #12]
 80026f8:	9214      	str	r2, [sp, #80]	; 0x50
 80026fa:	f8db 6008 	ldr.w	r6, [fp, #8]
 80026fe:	9613      	str	r6, [sp, #76]	; 0x4c
 8002700:	69aa      	ldr	r2, [r5, #24]
 8002702:	921f      	str	r2, [sp, #124]	; 0x7c
 8002704:	6822      	ldr	r2, [r4, #0]
 8002706:	6894      	ldr	r4, [r2, #8]
 8002708:	941e      	str	r4, [sp, #120]	; 0x78
 800270a:	f8db 2000 	ldr.w	r2, [fp]
 800270e:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8002712:	b119      	cbz	r1, 800271c <forward_conv2d+0x80>
 8002714:	680a      	ldr	r2, [r1, #0]
 8002716:	6894      	ldr	r4, [r2, #8]
 8002718:	9417      	str	r4, [sp, #92]	; 0x5c
 800271a:	e001      	b.n	8002720 <forward_conv2d+0x84>
 800271c:	2200      	movs	r2, #0
 800271e:	9217      	str	r2, [sp, #92]	; 0x5c
 8002720:	6819      	ldr	r1, [r3, #0]
 8002722:	688a      	ldr	r2, [r1, #8]
 8002724:	9202      	str	r2, [sp, #8]
 8002726:	69e9      	ldr	r1, [r5, #28]
 8002728:	b158      	cbz	r0, 8002742 <forward_conv2d+0xa6>
 800272a:	6803      	ldr	r3, [r0, #0]
 800272c:	689a      	ldr	r2, [r3, #8]
 800272e:	9212      	str	r2, [sp, #72]	; 0x48
 8002730:	921c      	str	r2, [sp, #112]	; 0x70
 8002732:	69c0      	ldr	r0, [r0, #28]
 8002734:	9024      	str	r0, [sp, #144]	; 0x90
 8002736:	6859      	ldr	r1, [r3, #4]
 8002738:	6818      	ldr	r0, [r3, #0]
 800273a:	f001 ff65 	bl	8004608 <ai_array_get_byte_size>
 800273e:	4604      	mov	r4, r0
 8002740:	e00a      	b.n	8002758 <forward_conv2d+0xbc>
 8002742:	b119      	cbz	r1, 800274c <forward_conv2d+0xb0>
 8002744:	6888      	ldr	r0, [r1, #8]
 8002746:	9012      	str	r0, [sp, #72]	; 0x48
 8002748:	901c      	str	r0, [sp, #112]	; 0x70
 800274a:	e002      	b.n	8002752 <forward_conv2d+0xb6>
 800274c:	2200      	movs	r2, #0
 800274e:	9212      	str	r2, [sp, #72]	; 0x48
 8002750:	911c      	str	r1, [sp, #112]	; 0x70
 8002752:	2200      	movs	r2, #0
 8002754:	9224      	str	r2, [sp, #144]	; 0x90
 8002756:	2401      	movs	r4, #1
 8002758:	6a28      	ldr	r0, [r5, #32]
 800275a:	2800      	cmp	r0, #0
 800275c:	aa18      	add	r2, sp, #96	; 0x60
 800275e:	bf12      	itee	ne
 8002760:	9023      	strne	r0, [sp, #140]	; 0x8c
 8002762:	f8df 1b88 	ldreq.w	r1, [pc, #2952]	; 80032ec <.text_22>
 8002766:	9123      	streq	r1, [sp, #140]	; 0x8c
 8002768:	9914      	ldr	r1, [sp, #80]	; 0x50
 800276a:	8813      	ldrh	r3, [r2, #0]
 800276c:	1e48      	subs	r0, r1, #1
 800276e:	1e5b      	subs	r3, r3, #1
 8002770:	aa19      	add	r2, sp, #100	; 0x64
 8002772:	fb03 1100 	mla	r1, r3, r0, r1
 8002776:	9116      	str	r1, [sp, #88]	; 0x58
 8002778:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800277a:	8813      	ldrh	r3, [r2, #0]
 800277c:	1e41      	subs	r1, r0, #1
 800277e:	1e5b      	subs	r3, r3, #1
 8002780:	fb03 0001 	mla	r0, r3, r1, r0
 8002784:	901d      	str	r0, [sp, #116]	; 0x74
 8002786:	2600      	movs	r6, #0
 8002788:	f8db 1000 	ldr.w	r1, [fp]
 800278c:	6808      	ldr	r0, [r1, #0]
 800278e:	2200      	movs	r2, #0
 8002790:	11c3      	asrs	r3, r0, #7
 8002792:	ea4f 5c60 	mov.w	ip, r0, asr #21
 8002796:	1440      	asrs	r0, r0, #17
 8002798:	f000 000f 	and.w	r0, r0, #15
 800279c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027a0:	f00c 0c03 	and.w	ip, ip, #3
 80027a4:	2804      	cmp	r0, #4
 80027a6:	fa23 f30c 	lsr.w	r3, r3, ip
 80027aa:	bf14      	ite	ne
 80027ac:	2808      	cmpne	r0, #8
 80027ae:	68ca      	ldreq	r2, [r1, #12]
 80027b0:	b182      	cbz	r2, 80027d4 <forward_conv2d+0x138>
 80027b2:	6968      	ldr	r0, [r5, #20]
 80027b4:	6800      	ldr	r0, [r0, #0]
 80027b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80027b8:	6828      	ldr	r0, [r5, #0]
 80027ba:	b108      	cbz	r0, 80027c0 <forward_conv2d+0x124>
 80027bc:	6806      	ldr	r6, [r0, #0]
 80027be:	68b6      	ldr	r6, [r6, #8]
 80027c0:	6800      	ldr	r0, [r0, #0]
 80027c2:	6840      	ldr	r0, [r0, #4]
 80027c4:	9001      	str	r0, [sp, #4]
 80027c6:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80027c8:	9000      	str	r0, [sp, #0]
 80027ca:	4630      	mov	r0, r6
 80027cc:	6889      	ldr	r1, [r1, #8]
 80027ce:	f7ff fefb 	bl	80025c8 <ai_dict_decompress_f32>
 80027d2:	b906      	cbnz	r6, 80027d6 <forward_conv2d+0x13a>
 80027d4:	464e      	mov	r6, r9
 80027d6:	b2bf      	uxth	r7, r7
 80027d8:	427f      	negs	r7, r7
 80027da:	f1ba 0f00 	cmp.w	sl, #0
 80027de:	d065      	beq.n	80028ac <forward_conv2d+0x210>
 80027e0:	f1c8 0800 	rsb	r8, r8, #0
 80027e4:	f8cd 8094 	str.w	r8, [sp, #148]	; 0x94
 80027e8:	4652      	mov	r2, sl
 80027ea:	9d02      	ldr	r5, [sp, #8]
 80027ec:	f8dd a00c 	ldr.w	sl, [sp, #12]
 80027f0:	9626      	str	r6, [sp, #152]	; 0x98
 80027f2:	9711      	str	r7, [sp, #68]	; 0x44
 80027f4:	9222      	str	r2, [sp, #136]	; 0x88
 80027f6:	9825      	ldr	r0, [sp, #148]	; 0x94
 80027f8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80027fa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80027fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80027fe:	9e16      	ldr	r6, [sp, #88]	; 0x58
 8002800:	4249      	negs	r1, r1
 8002802:	bfd8      	it	le
 8002804:	2100      	movle	r1, #0
 8002806:	1ad2      	subs	r2, r2, r3
 8002808:	42b2      	cmp	r2, r6
 800280a:	bf3d      	ittte	cc
 800280c:	9b1a      	ldrcc	r3, [sp, #104]	; 0x68
 800280e:	9a11      	ldrcc	r2, [sp, #68]	; 0x44
 8002810:	1a9a      	subcc	r2, r3, r2
 8002812:	4632      	movcs	r2, r6
 8002814:	900b      	str	r0, [sp, #44]	; 0x2c
 8002816:	9109      	str	r1, [sp, #36]	; 0x24
 8002818:	920a      	str	r2, [sp, #40]	; 0x28
 800281a:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800281c:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 8002820:	9008      	str	r0, [sp, #32]
 8002822:	9107      	str	r1, [sp, #28]
 8002824:	f8cd a008 	str.w	sl, [sp, #8]
 8002828:	9814      	ldr	r0, [sp, #80]	; 0x50
 800282a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800282c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800282e:	9006      	str	r0, [sp, #24]
 8002830:	9105      	str	r1, [sp, #20]
 8002832:	b21b      	sxth	r3, r3
 8002834:	9815      	ldr	r0, [sp, #84]	; 0x54
 8002836:	9921      	ldr	r1, [sp, #132]	; 0x84
 8002838:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800283a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800283c:	930f      	str	r3, [sp, #60]	; 0x3c
 800283e:	9004      	str	r0, [sp, #16]
 8002840:	9103      	str	r1, [sp, #12]
 8002842:	b236      	sxth	r6, r6
 8002844:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8002846:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8002848:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800284a:	960e      	str	r6, [sp, #56]	; 0x38
 800284c:	930d      	str	r3, [sp, #52]	; 0x34
 800284e:	9001      	str	r0, [sp, #4]
 8002850:	9100      	str	r1, [sp, #0]
 8002852:	4629      	mov	r1, r5
 8002854:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8002856:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8002858:	960c      	str	r6, [sp, #48]	; 0x30
 800285a:	2000      	movs	r0, #0
 800285c:	f7ff fc86 	bl	800216c <ai_conv2d_stripe_f32>
 8002860:	9815      	ldr	r0, [sp, #84]	; 0x54
 8002862:	b1d8      	cbz	r0, 800289c <forward_conv2d+0x200>
 8002864:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8002866:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8002868:	f8dd 8090 	ldr.w	r8, [sp, #144]	; 0x90
 800286c:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8002870:	4683      	mov	fp, r0
 8002872:	4633      	mov	r3, r6
 8002874:	4652      	mov	r2, sl
 8002876:	4629      	mov	r1, r5
 8002878:	4628      	mov	r0, r5
 800287a:	47c8      	blx	r9
 800287c:	4446      	add	r6, r8
 800287e:	1bf0      	subs	r0, r6, r7
 8002880:	42a0      	cmp	r0, r4
 8002882:	bfa8      	it	ge
 8002884:	463e      	movge	r6, r7
 8002886:	f1bb 0b01 	subs.w	fp, fp, #1
 800288a:	eb05 058a 	add.w	r5, r5, sl, lsl #2
 800288e:	d1f0      	bne.n	8002872 <forward_conv2d+0x1d6>
 8002890:	9612      	str	r6, [sp, #72]	; 0x48
 8002892:	971c      	str	r7, [sp, #112]	; 0x70
 8002894:	f8cd 8090 	str.w	r8, [sp, #144]	; 0x90
 8002898:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800289c:	9811      	ldr	r0, [sp, #68]	; 0x44
 800289e:	9920      	ldr	r1, [sp, #128]	; 0x80
 80028a0:	1808      	adds	r0, r1, r0
 80028a2:	9011      	str	r0, [sp, #68]	; 0x44
 80028a4:	9822      	ldr	r0, [sp, #136]	; 0x88
 80028a6:	1e40      	subs	r0, r0, #1
 80028a8:	9022      	str	r0, [sp, #136]	; 0x88
 80028aa:	d1a4      	bne.n	80027f6 <forward_conv2d+0x15a>
 80028ac:	b027      	add	sp, #156	; 0x9c
 80028ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080028b4 <forward_conv2d_nl_pool>:
 80028b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028b8:	4607      	mov	r7, r0
 80028ba:	b0b9      	sub	sp, #228	; 0xe4
 80028bc:	6978      	ldr	r0, [r7, #20]
 80028be:	6800      	ldr	r0, [r0, #0]
 80028c0:	68c2      	ldr	r2, [r0, #12]
 80028c2:	6816      	ldr	r6, [r2, #0]
 80028c4:	6801      	ldr	r1, [r0, #0]
 80028c6:	6982      	ldr	r2, [r0, #24]
 80028c8:	8c00      	ldrh	r0, [r0, #32]
 80028ca:	680b      	ldr	r3, [r1, #0]
 80028cc:	f8d2 b000 	ldr.w	fp, [r2]
 80028d0:	689c      	ldr	r4, [r3, #8]
 80028d2:	2801      	cmp	r0, #1
 80028d4:	6890      	ldr	r0, [r2, #8]
 80028d6:	bfcc      	ite	gt
 80028d8:	6851      	ldrgt	r1, [r2, #4]
 80028da:	2100      	movle	r1, #0
 80028dc:	9424      	str	r4, [sp, #144]	; 0x90
 80028de:	68b5      	ldr	r5, [r6, #8]
 80028e0:	9502      	str	r5, [sp, #8]
 80028e2:	6934      	ldr	r4, [r6, #16]
 80028e4:	9423      	str	r4, [sp, #140]	; 0x8c
 80028e6:	68f5      	ldr	r5, [r6, #12]
 80028e8:	9522      	str	r5, [sp, #136]	; 0x88
 80028ea:	691c      	ldr	r4, [r3, #16]
 80028ec:	941c      	str	r4, [sp, #112]	; 0x70
 80028ee:	68dd      	ldr	r5, [r3, #12]
 80028f0:	952e      	str	r5, [sp, #184]	; 0xb8
 80028f2:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80028f4:	f8ad 404c 	strh.w	r4, [sp, #76]	; 0x4c
 80028f8:	8d3d      	ldrh	r5, [r7, #40]	; 0x28
 80028fa:	9521      	str	r5, [sp, #132]	; 0x84
 80028fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028fe:	69bd      	ldr	r5, [r7, #24]
 8002900:	f8b2 8000 	ldrh.w	r8, [r2]
 8002904:	f8b2 9004 	ldrh.w	r9, [r2, #4]
 8002908:	6894      	ldr	r4, [r2, #8]
 800290a:	952d      	str	r5, [sp, #180]	; 0xb4
 800290c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800290e:	9220      	str	r2, [sp, #128]	; 0x80
 8002910:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 8002912:	951f      	str	r5, [sp, #124]	; 0x7c
 8002914:	f8db 2008 	ldr.w	r2, [fp, #8]
 8002918:	921b      	str	r2, [sp, #108]	; 0x6c
 800291a:	f8db 500c 	ldr.w	r5, [fp, #12]
 800291e:	951a      	str	r5, [sp, #104]	; 0x68
 8002920:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002922:	922c      	str	r2, [sp, #176]	; 0xb0
 8002924:	6c7d      	ldr	r5, [r7, #68]	; 0x44
 8002926:	952b      	str	r5, [sp, #172]	; 0xac
 8002928:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800292a:	9216      	str	r2, [sp, #88]	; 0x58
 800292c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800292e:	6815      	ldr	r5, [r2, #0]
 8002930:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8002934:	f8cd e0a8 	str.w	lr, [sp, #168]	; 0xa8
 8002938:	6892      	ldr	r2, [r2, #8]
 800293a:	921e      	str	r2, [sp, #120]	; 0x78
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	6893      	ldr	r3, [r2, #8]
 8002940:	9329      	str	r3, [sp, #164]	; 0xa4
 8002942:	f8db 2000 	ldr.w	r2, [fp]
 8002946:	f8d2 a008 	ldr.w	sl, [r2, #8]
 800294a:	b119      	cbz	r1, 8002954 <forward_conv2d_nl_pool+0xa0>
 800294c:	680a      	ldr	r2, [r1, #0]
 800294e:	6893      	ldr	r3, [r2, #8]
 8002950:	931d      	str	r3, [sp, #116]	; 0x74
 8002952:	e001      	b.n	8002958 <forward_conv2d_nl_pool+0xa4>
 8002954:	2200      	movs	r2, #0
 8002956:	921d      	str	r2, [sp, #116]	; 0x74
 8002958:	69f9      	ldr	r1, [r7, #28]
 800295a:	b158      	cbz	r0, 8002974 <forward_conv2d_nl_pool+0xc0>
 800295c:	6803      	ldr	r3, [r0, #0]
 800295e:	689a      	ldr	r2, [r3, #8]
 8002960:	9218      	str	r2, [sp, #96]	; 0x60
 8002962:	9210      	str	r2, [sp, #64]	; 0x40
 8002964:	69c0      	ldr	r0, [r0, #28]
 8002966:	9015      	str	r0, [sp, #84]	; 0x54
 8002968:	6859      	ldr	r1, [r3, #4]
 800296a:	6818      	ldr	r0, [r3, #0]
 800296c:	f001 fe4c 	bl	8004608 <ai_array_get_byte_size>
 8002970:	9014      	str	r0, [sp, #80]	; 0x50
 8002972:	e00b      	b.n	800298c <forward_conv2d_nl_pool+0xd8>
 8002974:	b119      	cbz	r1, 800297e <forward_conv2d_nl_pool+0xca>
 8002976:	6889      	ldr	r1, [r1, #8]
 8002978:	9118      	str	r1, [sp, #96]	; 0x60
 800297a:	9110      	str	r1, [sp, #64]	; 0x40
 800297c:	e002      	b.n	8002984 <forward_conv2d_nl_pool+0xd0>
 800297e:	2200      	movs	r2, #0
 8002980:	9118      	str	r1, [sp, #96]	; 0x60
 8002982:	9210      	str	r2, [sp, #64]	; 0x40
 8002984:	2100      	movs	r1, #0
 8002986:	2201      	movs	r2, #1
 8002988:	9115      	str	r1, [sp, #84]	; 0x54
 800298a:	9214      	str	r2, [sp, #80]	; 0x50
 800298c:	aa1f      	add	r2, sp, #124	; 0x7c
 800298e:	6a38      	ldr	r0, [r7, #32]
 8002990:	2800      	cmp	r0, #0
 8002992:	bf12      	itee	ne
 8002994:	9030      	strne	r0, [sp, #192]	; 0xc0
 8002996:	f8df 1954 	ldreq.w	r1, [pc, #2388]	; 80032ec <.text_22>
 800299a:	9130      	streq	r1, [sp, #192]	; 0xc0
 800299c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800299e:	981a      	ldr	r0, [sp, #104]	; 0x68
 80029a0:	8813      	ldrh	r3, [r2, #0]
 80029a2:	9128      	str	r1, [sp, #160]	; 0xa0
 80029a4:	1e5b      	subs	r3, r3, #1
 80029a6:	1e41      	subs	r1, r0, #1
 80029a8:	aa20      	add	r2, sp, #128	; 0x80
 80029aa:	fb03 0001 	mla	r0, r3, r1, r0
 80029ae:	9019      	str	r0, [sp, #100]	; 0x64
 80029b0:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80029b2:	8813      	ldrh	r3, [r2, #0]
 80029b4:	1e48      	subs	r0, r1, #1
 80029b6:	1e5b      	subs	r3, r3, #1
 80029b8:	fb03 1100 	mla	r1, r3, r0, r1
 80029bc:	9127      	str	r1, [sp, #156]	; 0x9c
 80029be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80029c0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80029c2:	9819      	ldr	r0, [sp, #100]	; 0x64
 80029c4:	9112      	str	r1, [sp, #72]	; 0x48
 80029c6:	1a12      	subs	r2, r2, r0
 80029c8:	4442      	add	r2, r8
 80029ca:	9921      	ldr	r1, [sp, #132]	; 0x84
 80029cc:	fa12 f084 	uxtah	r0, r2, r4
 80029d0:	fbb0 f1f1 	udiv	r1, r0, r1
 80029d4:	1c49      	adds	r1, r1, #1
 80029d6:	9111      	str	r1, [sp, #68]	; 0x44
 80029d8:	2400      	movs	r4, #0
 80029da:	f8db 1000 	ldr.w	r1, [fp]
 80029de:	6808      	ldr	r0, [r1, #0]
 80029e0:	2200      	movs	r2, #0
 80029e2:	11c3      	asrs	r3, r0, #7
 80029e4:	ea4f 5c60 	mov.w	ip, r0, asr #21
 80029e8:	1440      	asrs	r0, r0, #17
 80029ea:	f000 000f 	and.w	r0, r0, #15
 80029ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029f2:	f00c 0c03 	and.w	ip, ip, #3
 80029f6:	2804      	cmp	r0, #4
 80029f8:	fa23 f30c 	lsr.w	r3, r3, ip
 80029fc:	bf14      	ite	ne
 80029fe:	2808      	cmpne	r0, #8
 8002a00:	68ca      	ldreq	r2, [r1, #12]
 8002a02:	b1a2      	cbz	r2, 8002a2e <forward_conv2d_nl_pool+0x17a>
 8002a04:	6978      	ldr	r0, [r7, #20]
 8002a06:	6800      	ldr	r0, [r0, #0]
 8002a08:	f8d0 e024 	ldr.w	lr, [r0, #36]	; 0x24
 8002a0c:	f8de 0004 	ldr.w	r0, [lr, #4]
 8002a10:	b108      	cbz	r0, 8002a16 <forward_conv2d_nl_pool+0x162>
 8002a12:	6804      	ldr	r4, [r0, #0]
 8002a14:	68a4      	ldr	r4, [r4, #8]
 8002a16:	6800      	ldr	r0, [r0, #0]
 8002a18:	6840      	ldr	r0, [r0, #4]
 8002a1a:	9001      	str	r0, [sp, #4]
 8002a1c:	9824      	ldr	r0, [sp, #144]	; 0x90
 8002a1e:	9000      	str	r0, [sp, #0]
 8002a20:	4620      	mov	r0, r4
 8002a22:	6889      	ldr	r1, [r1, #8]
 8002a24:	f7ff fdd0 	bl	80025c8 <ai_dict_decompress_f32>
 8002a28:	b10c      	cbz	r4, 8002a2e <forward_conv2d_nl_pool+0x17a>
 8002a2a:	4623      	mov	r3, r4
 8002a2c:	e000      	b.n	8002a30 <forward_conv2d_nl_pool+0x17c>
 8002a2e:	4653      	mov	r3, sl
 8002a30:	697a      	ldr	r2, [r7, #20]
 8002a32:	6814      	ldr	r4, [r2, #0]
 8002a34:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002a36:	6814      	ldr	r4, [r2, #0]
 8002a38:	6827      	ldr	r7, [r4, #0]
 8002a3a:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8002a3e:	68e2      	ldr	r2, [r4, #12]
 8002a40:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8002a42:	f8dd c008 	ldr.w	ip, [sp, #8]
 8002a46:	6830      	ldr	r0, [r6, #0]
 8002a48:	4357      	muls	r7, r2
 8002a4a:	fb0c f707 	mul.w	r7, ip, r7
 8002a4e:	00bf      	lsls	r7, r7, #2
 8002a50:	9736      	str	r7, [sp, #216]	; 0xd8
 8002a52:	2100      	movs	r1, #0
 8002a54:	af16      	add	r7, sp, #88	; 0x58
 8002a56:	f1c9 0900 	rsb	r9, r9, #0
 8002a5a:	5e7f      	ldrsh	r7, [r7, r1]
 8002a5c:	9735      	str	r7, [sp, #212]	; 0xd4
 8002a5e:	b22d      	sxth	r5, r5
 8002a60:	9f02      	ldr	r7, [sp, #8]
 8002a62:	f8dd e088 	ldr.w	lr, [sp, #136]	; 0x88
 8002a66:	fb0e f707 	mul.w	r7, lr, r7
 8002a6a:	9734      	str	r7, [sp, #208]	; 0xd0
 8002a6c:	462e      	mov	r6, r5
 8002a6e:	9f02      	ldr	r7, [sp, #8]
 8002a70:	4357      	muls	r7, r2
 8002a72:	9733      	str	r7, [sp, #204]	; 0xcc
 8002a74:	f8cd 90c8 	str.w	r9, [sp, #200]	; 0xc8
 8002a78:	f1c8 0800 	rsb	r8, r8, #0
 8002a7c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8002a7e:	9731      	str	r7, [sp, #196]	; 0xc4
 8002a80:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 8002a82:	2f00      	cmp	r7, #0
 8002a84:	f000 8100 	beq.w	8002c88 <forward_conv2d_nl_pool+0x3d4>
 8002a88:	46e1      	mov	r9, ip
 8002a8a:	9337      	str	r3, [sp, #220]	; 0xdc
 8002a8c:	9026      	str	r0, [sp, #152]	; 0x98
 8002a8e:	912f      	str	r1, [sp, #188]	; 0xbc
 8002a90:	9225      	str	r2, [sp, #148]	; 0x94
 8002a92:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8002a96:	9811      	ldr	r0, [sp, #68]	; 0x44
 8002a98:	2800      	cmp	r0, #0
 8002a9a:	dd5d      	ble.n	8002b58 <forward_conv2d_nl_pool+0x2a4>
 8002a9c:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8002a9e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8002aa0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8002aa2:	9832      	ldr	r0, [sp, #200]	; 0xc8
 8002aa4:	4249      	negs	r1, r1
 8002aa6:	bfd8      	it	le
 8002aa8:	2100      	movle	r1, #0
 8002aaa:	1ad2      	subs	r2, r2, r3
 8002aac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	bf3d      	ittte	cc
 8002ab2:	9b1c      	ldrcc	r3, [sp, #112]	; 0x70
 8002ab4:	9a17      	ldrcc	r2, [sp, #92]	; 0x5c
 8002ab6:	1a9a      	subcc	r2, r3, r2
 8002ab8:	461a      	movcs	r2, r3
 8002aba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002abc:	b21b      	sxth	r3, r3
 8002abe:	930f      	str	r3, [sp, #60]	; 0x3c
 8002ac0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002ac2:	b21b      	sxth	r3, r3
 8002ac4:	930e      	str	r3, [sp, #56]	; 0x38
 8002ac6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8002ac8:	930d      	str	r3, [sp, #52]	; 0x34
 8002aca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8002acc:	930c      	str	r3, [sp, #48]	; 0x30
 8002ace:	900b      	str	r0, [sp, #44]	; 0x2c
 8002ad0:	9109      	str	r1, [sp, #36]	; 0x24
 8002ad2:	920a      	str	r2, [sp, #40]	; 0x28
 8002ad4:	982d      	ldr	r0, [sp, #180]	; 0xb4
 8002ad6:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 8002ada:	9008      	str	r0, [sp, #32]
 8002adc:	9107      	str	r1, [sp, #28]
 8002ade:	f8cd 9008 	str.w	r9, [sp, #8]
 8002ae2:	981a      	ldr	r0, [sp, #104]	; 0x68
 8002ae4:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8002ae6:	9006      	str	r0, [sp, #24]
 8002ae8:	9105      	str	r1, [sp, #20]
 8002aea:	9825      	ldr	r0, [sp, #148]	; 0x94
 8002aec:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8002aee:	9004      	str	r0, [sp, #16]
 8002af0:	9103      	str	r1, [sp, #12]
 8002af2:	9824      	ldr	r0, [sp, #144]	; 0x90
 8002af4:	991d      	ldr	r1, [sp, #116]	; 0x74
 8002af6:	9001      	str	r0, [sp, #4]
 8002af8:	9100      	str	r1, [sp, #0]
 8002afa:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8002afc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8002afe:	4651      	mov	r1, sl
 8002b00:	2000      	movs	r0, #0
 8002b02:	f7ff fb33 	bl	800216c <ai_conv2d_stripe_f32>
 8002b06:	9825      	ldr	r0, [sp, #148]	; 0x94
 8002b08:	b320      	cbz	r0, 8002b54 <forward_conv2d_nl_pool+0x2a0>
 8002b0a:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8002b0e:	9f30      	ldr	r7, [sp, #192]	; 0xc0
 8002b10:	4683      	mov	fp, r0
 8002b12:	4643      	mov	r3, r8
 8002b14:	464a      	mov	r2, r9
 8002b16:	4651      	mov	r1, sl
 8002b18:	4650      	mov	r0, sl
 8002b1a:	47b8      	blx	r7
 8002b1c:	9815      	ldr	r0, [sp, #84]	; 0x54
 8002b1e:	9931      	ldr	r1, [sp, #196]	; 0xc4
 8002b20:	4480      	add	r8, r0
 8002b22:	9814      	ldr	r0, [sp, #80]	; 0x50
 8002b24:	eba8 0101 	sub.w	r1, r8, r1
 8002b28:	4281      	cmp	r1, r0
 8002b2a:	6820      	ldr	r0, [r4, #0]
 8002b2c:	6841      	ldr	r1, [r0, #4]
 8002b2e:	68c0      	ldr	r0, [r0, #12]
 8002b30:	bfa8      	it	ge
 8002b32:	f8dd 8040 	ldrge.w	r8, [sp, #64]	; 0x40
 8002b36:	eb0a 0a89 	add.w	sl, sl, r9, lsl #2
 8002b3a:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 8002b3e:	4592      	cmp	sl, r2
 8002b40:	d302      	bcc.n	8002b48 <forward_conv2d_nl_pool+0x294>
 8002b42:	0089      	lsls	r1, r1, #2
 8002b44:	4249      	negs	r1, r1
 8002b46:	448a      	add	sl, r1
 8002b48:	f1bb 0b01 	subs.w	fp, fp, #1
 8002b4c:	d1e1      	bne.n	8002b12 <forward_conv2d_nl_pool+0x25e>
 8002b4e:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
 8002b52:	9730      	str	r7, [sp, #192]	; 0xc0
 8002b54:	1c76      	adds	r6, r6, #1
 8002b56:	b236      	sxth	r6, r6
 8002b58:	9811      	ldr	r0, [sp, #68]	; 0x44
 8002b5a:	1e40      	subs	r0, r0, #1
 8002b5c:	2800      	cmp	r0, #0
 8002b5e:	9011      	str	r0, [sp, #68]	; 0x44
 8002b60:	dc4e      	bgt.n	8002c00 <forward_conv2d_nl_pool+0x34c>
 8002b62:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8002b64:	4370      	muls	r0, r6
 8002b66:	0080      	lsls	r0, r0, #2
 8002b68:	4240      	negs	r0, r0
 8002b6a:	eb0a 0100 	add.w	r1, sl, r0
 8002b6e:	6820      	ldr	r0, [r4, #0]
 8002b70:	68c2      	ldr	r2, [r0, #12]
 8002b72:	4291      	cmp	r1, r2
 8002b74:	bf3c      	itt	cc
 8002b76:	6843      	ldrcc	r3, [r0, #4]
 8002b78:	eb01 0183 	addcc.w	r1, r1, r3, lsl #2
 8002b7c:	428a      	cmp	r2, r1
 8002b7e:	4657      	mov	r7, sl
 8002b80:	d232      	bcs.n	8002be8 <forward_conv2d_nl_pool+0x334>
 8002b82:	ab12      	add	r3, sp, #72	; 0x48
 8002b84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b88:	429e      	cmp	r6, r3
 8002b8a:	d02d      	beq.n	8002be8 <forward_conv2d_nl_pool+0x334>
 8002b8c:	6843      	ldr	r3, [r0, #4]
 8002b8e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8002b92:	4291      	cmp	r1, r2
 8002b94:	f080 8028 	bcs.w	8002be8 <forward_conv2d_nl_pool+0x334>
 8002b98:	f851 3b04 	ldr.w	r3, [r1], #4
 8002b9c:	f84a 3b04 	str.w	r3, [sl], #4
 8002ba0:	68c2      	ldr	r2, [r0, #12]
 8002ba2:	6843      	ldr	r3, [r0, #4]
 8002ba4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8002ba8:	4291      	cmp	r1, r2
 8002baa:	d21d      	bcs.n	8002be8 <forward_conv2d_nl_pool+0x334>
 8002bac:	f851 2b04 	ldr.w	r2, [r1], #4
 8002bb0:	f84a 2b04 	str.w	r2, [sl], #4
 8002bb4:	6843      	ldr	r3, [r0, #4]
 8002bb6:	68c2      	ldr	r2, [r0, #12]
 8002bb8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8002bbc:	4291      	cmp	r1, r2
 8002bbe:	d213      	bcs.n	8002be8 <forward_conv2d_nl_pool+0x334>
 8002bc0:	f851 2b04 	ldr.w	r2, [r1], #4
 8002bc4:	f84a 2b04 	str.w	r2, [sl], #4
 8002bc8:	6843      	ldr	r3, [r0, #4]
 8002bca:	68c2      	ldr	r2, [r0, #12]
 8002bcc:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8002bd0:	4291      	cmp	r1, r2
 8002bd2:	d209      	bcs.n	8002be8 <forward_conv2d_nl_pool+0x334>
 8002bd4:	f851 2b04 	ldr.w	r2, [r1], #4
 8002bd8:	f84a 2b04 	str.w	r2, [sl], #4
 8002bdc:	6843      	ldr	r3, [r0, #4]
 8002bde:	68c2      	ldr	r2, [r0, #12]
 8002be0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8002be4:	4291      	cmp	r1, r2
 8002be6:	d3d7      	bcc.n	8002b98 <forward_conv2d_nl_pool+0x2e4>
 8002be8:	9811      	ldr	r0, [sp, #68]	; 0x44
 8002bea:	2800      	cmp	r0, #0
 8002bec:	d506      	bpl.n	8002bfc <forward_conv2d_nl_pool+0x348>
 8002bee:	9936      	ldr	r1, [sp, #216]	; 0xd8
 8002bf0:	4650      	mov	r0, sl
 8002bf2:	f009 fd12 	bl	800c61a <__aeabi_memclr>
 8002bf6:	981e      	ldr	r0, [sp, #120]	; 0x78
 8002bf8:	1986      	adds	r6, r0, r6
 8002bfa:	b236      	sxth	r6, r6
 8002bfc:	9612      	str	r6, [sp, #72]	; 0x48
 8002bfe:	46ba      	mov	sl, r7
 8002c00:	9812      	ldr	r0, [sp, #72]	; 0x48
 8002c02:	4286      	cmp	r6, r0
 8002c04:	d136      	bne.n	8002c74 <forward_conv2d_nl_pool+0x3c0>
 8002c06:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8002c08:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8002c0a:	f8dd c0a0 	ldr.w	ip, [sp, #160]	; 0xa0
 8002c0e:	9916      	ldr	r1, [sp, #88]	; 0x58
 8002c10:	1c40      	adds	r0, r0, #1
 8002c12:	902f      	str	r0, [sp, #188]	; 0xbc
 8002c14:	b292      	uxth	r2, r2
 8002c16:	9826      	ldr	r0, [sp, #152]	; 0x98
 8002c18:	9008      	str	r0, [sp, #32]
 8002c1a:	9206      	str	r2, [sp, #24]
 8002c1c:	fa1f f389 	uxth.w	r3, r9
 8002c20:	9816      	ldr	r0, [sp, #88]	; 0x58
 8002c22:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002c24:	b280      	uxth	r0, r0
 8002c26:	9005      	str	r0, [sp, #20]
 8002c28:	b292      	uxth	r2, r2
 8002c2a:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8002c2c:	b280      	uxth	r0, r0
 8002c2e:	9002      	str	r0, [sp, #8]
 8002c30:	1a76      	subs	r6, r6, r1
 8002c32:	2101      	movs	r1, #1
 8002c34:	9107      	str	r1, [sp, #28]
 8002c36:	b236      	sxth	r6, r6
 8002c38:	992b      	ldr	r1, [sp, #172]	; 0xac
 8002c3a:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8002c3c:	b289      	uxth	r1, r1
 8002c3e:	9104      	str	r1, [sp, #16]
 8002c40:	b280      	uxth	r0, r0
 8002c42:	b2a9      	uxth	r1, r5
 8002c44:	9103      	str	r1, [sp, #12]
 8002c46:	9000      	str	r0, [sp, #0]
 8002c48:	9912      	ldr	r1, [sp, #72]	; 0x48
 8002c4a:	b289      	uxth	r1, r1
 8002c4c:	9101      	str	r1, [sp, #4]
 8002c4e:	9925      	ldr	r1, [sp, #148]	; 0x94
 8002c50:	6820      	ldr	r0, [r4, #0]
 8002c52:	b289      	uxth	r1, r1
 8002c54:	47e0      	blx	ip
 8002c56:	9826      	ldr	r0, [sp, #152]	; 0x98
 8002c58:	6881      	ldr	r1, [r0, #8]
 8002c5a:	9834      	ldr	r0, [sp, #208]	; 0xd0
 8002c5c:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8002c60:	9926      	ldr	r1, [sp, #152]	; 0x98
 8002c62:	608a      	str	r2, [r1, #8]
 8002c64:	9835      	ldr	r0, [sp, #212]	; 0xd4
 8002c66:	1a28      	subs	r0, r5, r0
 8002c68:	2800      	cmp	r0, #0
 8002c6a:	bfc3      	ittte	gt
 8002c6c:	9816      	ldrgt	r0, [sp, #88]	; 0x58
 8002c6e:	1a2d      	subgt	r5, r5, r0
 8002c70:	b22d      	sxthgt	r5, r5
 8002c72:	2500      	movle	r5, #0
 8002c74:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8002c76:	9921      	ldr	r1, [sp, #132]	; 0x84
 8002c78:	1808      	adds	r0, r1, r0
 8002c7a:	9017      	str	r0, [sp, #92]	; 0x5c
 8002c7c:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8002c7e:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8002c80:	4288      	cmp	r0, r1
 8002c82:	f4ff af08 	bcc.w	8002a96 <forward_conv2d_nl_pool+0x1e2>
 8002c86:	9826      	ldr	r0, [sp, #152]	; 0x98
 8002c88:	6821      	ldr	r1, [r4, #0]
 8002c8a:	68ca      	ldr	r2, [r1, #12]
 8002c8c:	608a      	str	r2, [r1, #8]
 8002c8e:	68c1      	ldr	r1, [r0, #12]
 8002c90:	6081      	str	r1, [r0, #8]
 8002c92:	b039      	add	sp, #228	; 0xe4
 8002c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002c98 <forward_dense>:
 8002c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c9c:	b081      	sub	sp, #4
 8002c9e:	ed2d 8b02 	vpush	{d8}
 8002ca2:	b088      	sub	sp, #32
 8002ca4:	6940      	ldr	r0, [r0, #20]
 8002ca6:	6800      	ldr	r0, [r0, #0]
 8002ca8:	6801      	ldr	r1, [r0, #0]
 8002caa:	680a      	ldr	r2, [r1, #0]
 8002cac:	68c3      	ldr	r3, [r0, #12]
 8002cae:	6981      	ldr	r1, [r0, #24]
 8002cb0:	8c00      	ldrh	r0, [r0, #32]
 8002cb2:	681f      	ldr	r7, [r3, #0]
 8002cb4:	f8d1 e000 	ldr.w	lr, [r1]
 8002cb8:	6894      	ldr	r4, [r2, #8]
 8002cba:	f8de 9000 	ldr.w	r9, [lr]
 8002cbe:	f8d7 c008 	ldr.w	ip, [r7, #8]
 8002cc2:	f8d9 5000 	ldr.w	r5, [r9]
 8002cc6:	6812      	ldr	r2, [r2, #0]
 8002cc8:	2802      	cmp	r0, #2
 8002cca:	bfac      	ite	ge
 8002ccc:	684b      	ldrge	r3, [r1, #4]
 8002cce:	2300      	movlt	r3, #0
 8002cd0:	68f9      	ldr	r1, [r7, #12]
 8002cd2:	6938      	ldr	r0, [r7, #16]
 8002cd4:	683f      	ldr	r7, [r7, #0]
 8002cd6:	68bf      	ldr	r7, [r7, #8]
 8002cd8:	4341      	muls	r1, r0
 8002cda:	2000      	movs	r0, #0
 8002cdc:	11ee      	asrs	r6, r5, #7
 8002cde:	f006 087f 	and.w	r8, r6, #127	; 0x7f
 8002ce2:	156e      	asrs	r6, r5, #21
 8002ce4:	146d      	asrs	r5, r5, #17
 8002ce6:	f005 050f 	and.w	r5, r5, #15
 8002cea:	2d04      	cmp	r5, #4
 8002cec:	bf14      	ite	ne
 8002cee:	2d08      	cmpne	r5, #8
 8002cf0:	f8d9 000c 	ldreq.w	r0, [r9, #12]
 8002cf4:	6895      	ldr	r5, [r2, #8]
 8002cf6:	f8de 9018 	ldr.w	r9, [lr, #24]
 8002cfa:	f006 0603 	and.w	r6, r6, #3
 8002cfe:	2900      	cmp	r1, #0
 8002d00:	fa28 f806 	lsr.w	r8, r8, r6
 8002d04:	eb07 028c 	add.w	r2, r7, ip, lsl #2
 8002d08:	f000 80eb 	beq.w	8002ee2 <forward_dense+0x24a>
 8002d0c:	f8cd e01c 	str.w	lr, [sp, #28]
 8002d10:	9305      	str	r3, [sp, #20]
 8002d12:	f8cd c018 	str.w	ip, [sp, #24]
 8002d16:	9201      	str	r2, [sp, #4]
 8002d18:	9104      	str	r1, [sp, #16]
 8002d1a:	9907      	ldr	r1, [sp, #28]
 8002d1c:	680a      	ldr	r2, [r1, #0]
 8002d1e:	9905      	ldr	r1, [sp, #20]
 8002d20:	f8d2 b008 	ldr.w	fp, [r2, #8]
 8002d24:	9b01      	ldr	r3, [sp, #4]
 8002d26:	2900      	cmp	r1, #0
 8002d28:	bf1a      	itte	ne
 8002d2a:	680a      	ldrne	r2, [r1, #0]
 8002d2c:	6892      	ldrne	r2, [r2, #8]
 8002d2e:	2200      	moveq	r2, #0
 8002d30:	2800      	cmp	r0, #0
 8002d32:	f040 80ab 	bne.w	8002e8c <forward_dense+0x1f4>
 8002d36:	429f      	cmp	r7, r3
 8002d38:	f080 80c7 	bcs.w	8002eca <forward_dense+0x232>
 8002d3c:	9003      	str	r0, [sp, #12]
 8002d3e:	2a00      	cmp	r2, #0
 8002d40:	bf0e      	itee	eq
 8002d42:	ed9f 0a6b 	vldreq	s0, [pc, #428]	; 8002ef0 <.text_17>
 8002d46:	ed92 0a00 	vldrne	s0, [r2]
 8002d4a:	1d12      	addne	r2, r2, #4
 8002d4c:	2c04      	cmp	r4, #4
 8002d4e:	4620      	mov	r0, r4
 8002d50:	46ae      	mov	lr, r5
 8002d52:	46dc      	mov	ip, fp
 8002d54:	eddf 0a66 	vldr	s1, [pc, #408]	; 8002ef0 <.text_17>
 8002d58:	d35d      	bcc.n	8002e16 <forward_dense+0x17e>
 8002d5a:	08a1      	lsrs	r1, r4, #2
 8002d5c:	07ce      	lsls	r6, r1, #31
 8002d5e:	d51c      	bpl.n	8002d9a <forward_dense+0x102>
 8002d60:	ed9c 4a00 	vldr	s8, [ip]
 8002d64:	edde 4a00 	vldr	s9, [lr]
 8002d68:	ed9c 3a01 	vldr	s6, [ip, #4]
 8002d6c:	edde 3a01 	vldr	s7, [lr, #4]
 8002d70:	ed9c 2a02 	vldr	s4, [ip, #8]
 8002d74:	edde 2a02 	vldr	s5, [lr, #8]
 8002d78:	ed9c 1a03 	vldr	s2, [ip, #12]
 8002d7c:	edde 1a03 	vldr	s3, [lr, #12]
 8002d80:	ee44 0a24 	vmla.f32	s1, s8, s9
 8002d84:	ee43 0a23 	vmla.f32	s1, s6, s7
 8002d88:	ee42 0a22 	vmla.f32	s1, s4, s5
 8002d8c:	ee41 0a21 	vmla.f32	s1, s2, s3
 8002d90:	f10e 0e10 	add.w	lr, lr, #16
 8002d94:	f10c 0c10 	add.w	ip, ip, #16
 8002d98:	1f00      	subs	r0, r0, #4
 8002d9a:	0849      	lsrs	r1, r1, #1
 8002d9c:	f000 803b 	beq.w	8002e16 <forward_dense+0x17e>
 8002da0:	edde 4a00 	vldr	s9, [lr]
 8002da4:	edde 3a01 	vldr	s7, [lr, #4]
 8002da8:	edde 2a02 	vldr	s5, [lr, #8]
 8002dac:	edde 1a03 	vldr	s3, [lr, #12]
 8002db0:	ed9c 1a03 	vldr	s2, [ip, #12]
 8002db4:	ed9c 2a02 	vldr	s4, [ip, #8]
 8002db8:	ed9c 3a01 	vldr	s6, [ip, #4]
 8002dbc:	ed9c 4a00 	vldr	s8, [ip]
 8002dc0:	ee44 0a24 	vmla.f32	s1, s8, s9
 8002dc4:	ee43 0a23 	vmla.f32	s1, s6, s7
 8002dc8:	ee42 0a22 	vmla.f32	s1, s4, s5
 8002dcc:	ee41 0a21 	vmla.f32	s1, s2, s3
 8002dd0:	f10e 0610 	add.w	r6, lr, #16
 8002dd4:	f10c 0c10 	add.w	ip, ip, #16
 8002dd8:	edd6 8a00 	vldr	s17, [r6]
 8002ddc:	ed9c 8a00 	vldr	s16, [ip]
 8002de0:	ed9c 7a01 	vldr	s14, [ip, #4]
 8002de4:	edd6 7a01 	vldr	s15, [r6, #4]
 8002de8:	ed9c 6a02 	vldr	s12, [ip, #8]
 8002dec:	edd6 6a02 	vldr	s13, [r6, #8]
 8002df0:	ed9c 5a03 	vldr	s10, [ip, #12]
 8002df4:	edd6 5a03 	vldr	s11, [r6, #12]
 8002df8:	ee48 0a28 	vmla.f32	s1, s16, s17
 8002dfc:	ee47 0a27 	vmla.f32	s1, s14, s15
 8002e00:	3808      	subs	r0, #8
 8002e02:	ee46 0a26 	vmla.f32	s1, s12, s13
 8002e06:	1e49      	subs	r1, r1, #1
 8002e08:	ee45 0a25 	vmla.f32	s1, s10, s11
 8002e0c:	f106 0e10 	add.w	lr, r6, #16
 8002e10:	f10c 0c10 	add.w	ip, ip, #16
 8002e14:	d1c4      	bne.n	8002da0 <forward_dense+0x108>
 8002e16:	b378      	cbz	r0, 8002e78 <forward_dense+0x1e0>
 8002e18:	f010 0103 	ands.w	r1, r0, #3
 8002e1c:	f000 800c 	beq.w	8002e38 <forward_dense+0x1a0>
 8002e20:	ed9c 1a00 	vldr	s2, [ip]
 8002e24:	edde 1a00 	vldr	s3, [lr]
 8002e28:	1e49      	subs	r1, r1, #1
 8002e2a:	ee41 0a21 	vmla.f32	s1, s2, s3
 8002e2e:	f10e 0e04 	add.w	lr, lr, #4
 8002e32:	f10c 0c04 	add.w	ip, ip, #4
 8002e36:	d1f3      	bne.n	8002e20 <forward_dense+0x188>
 8002e38:	0880      	lsrs	r0, r0, #2
 8002e3a:	d01d      	beq.n	8002e78 <forward_dense+0x1e0>
 8002e3c:	ed9c 2a00 	vldr	s4, [ip]
 8002e40:	ed9e 1a00 	vldr	s2, [lr]
 8002e44:	eddc 1a01 	vldr	s3, [ip, #4]
 8002e48:	edde 2a01 	vldr	s5, [lr, #4]
 8002e4c:	ee42 0a01 	vmla.f32	s1, s4, s2
 8002e50:	ee41 0aa2 	vmla.f32	s1, s3, s5
 8002e54:	ed9c 2a02 	vldr	s4, [ip, #8]
 8002e58:	ed9e 1a02 	vldr	s2, [lr, #8]
 8002e5c:	eddc 1a03 	vldr	s3, [ip, #12]
 8002e60:	edde 2a03 	vldr	s5, [lr, #12]
 8002e64:	ee42 0a01 	vmla.f32	s1, s4, s2
 8002e68:	1e40      	subs	r0, r0, #1
 8002e6a:	ee41 0aa2 	vmla.f32	s1, s3, s5
 8002e6e:	f10e 0e10 	add.w	lr, lr, #16
 8002e72:	f10c 0c10 	add.w	ip, ip, #16
 8002e76:	d1e1      	bne.n	8002e3c <forward_dense+0x1a4>
 8002e78:	ee30 0a20 	vadd.f32	s0, s0, s1
 8002e7c:	ed87 0a00 	vstr	s0, [r7]
 8002e80:	1d3f      	adds	r7, r7, #4
 8002e82:	429f      	cmp	r7, r3
 8002e84:	44cb      	add	fp, r9
 8002e86:	f4ff af5a 	bcc.w	8002d3e <forward_dense+0xa6>
 8002e8a:	e01d      	b.n	8002ec8 <forward_dense+0x230>
 8002e8c:	429f      	cmp	r7, r3
 8002e8e:	d21c      	bcs.n	8002eca <forward_dense+0x232>
 8002e90:	469a      	mov	sl, r3
 8002e92:	9003      	str	r0, [sp, #12]
 8002e94:	4616      	mov	r6, r2
 8002e96:	2e00      	cmp	r6, #0
 8002e98:	bf14      	ite	ne
 8002e9a:	f856 0b04 	ldrne.w	r0, [r6], #4
 8002e9e:	2000      	moveq	r0, #0
 8002ea0:	9002      	str	r0, [sp, #8]
 8002ea2:	f1b8 0f04 	cmp.w	r8, #4
 8002ea6:	9a03      	ldr	r2, [sp, #12]
 8002ea8:	9400      	str	r4, [sp, #0]
 8002eaa:	462b      	mov	r3, r5
 8002eac:	4659      	mov	r1, fp
 8002eae:	a802      	add	r0, sp, #8
 8002eb0:	d102      	bne.n	8002eb8 <forward_dense+0x220>
 8002eb2:	f7ff fb39 	bl	8002528 <ai_dict4_dot_array_f32>
 8002eb6:	e001      	b.n	8002ebc <forward_dense+0x224>
 8002eb8:	f7ff f9ca 	bl	8002250 <ai_dict8_dot_array_f32>
 8002ebc:	9802      	ldr	r0, [sp, #8]
 8002ebe:	f847 0b04 	str.w	r0, [r7], #4
 8002ec2:	4557      	cmp	r7, sl
 8002ec4:	44cb      	add	fp, r9
 8002ec6:	d3e6      	bcc.n	8002e96 <forward_dense+0x1fe>
 8002ec8:	9803      	ldr	r0, [sp, #12]
 8002eca:	9901      	ldr	r1, [sp, #4]
 8002ecc:	9a06      	ldr	r2, [sp, #24]
 8002ece:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8002ed2:	9904      	ldr	r1, [sp, #16]
 8002ed4:	9301      	str	r3, [sp, #4]
 8002ed6:	1e49      	subs	r1, r1, #1
 8002ed8:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 8002edc:	9104      	str	r1, [sp, #16]
 8002ede:	f47f af1c 	bne.w	8002d1a <forward_dense+0x82>
 8002ee2:	b008      	add	sp, #32
 8002ee4:	ecbd 8b02 	vpop	{d8}
 8002ee8:	b001      	add	sp, #4
 8002eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08002ef0 <.text_17>:
 8002ef0:	00000000 	.word	0x00000000

08002ef4 <arm_mat_gemm_f32>:
 8002ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ef8:	4615      	mov	r5, r2
 8002efa:	b08a      	sub	sp, #40	; 0x28
 8002efc:	6842      	ldr	r2, [r0, #4]
 8002efe:	9203      	str	r2, [sp, #12]
 8002f00:	4699      	mov	r9, r3
 8002f02:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002f04:	686c      	ldr	r4, [r5, #4]
 8002f06:	9400      	str	r4, [sp, #0]
 8002f08:	468b      	mov	fp, r1
 8002f0a:	685e      	ldr	r6, [r3, #4]
 8002f0c:	8804      	ldrh	r4, [r0, #0]
 8002f0e:	f8b3 c000 	ldrh.w	ip, [r3]
 8002f12:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8002f16:	8840      	ldrh	r0, [r0, #2]
 8002f18:	f8bb 1000 	ldrh.w	r1, [fp]
 8002f1c:	f8bb 2002 	ldrh.w	r2, [fp, #2]
 8002f20:	f8b5 e000 	ldrh.w	lr, [r5]
 8002f24:	886f      	ldrh	r7, [r5, #2]
 8002f26:	f8db 3004 	ldr.w	r3, [fp, #4]
 8002f2a:	9306      	str	r3, [sp, #24]
 8002f2c:	9305      	str	r3, [sp, #20]
 8002f2e:	2500      	movs	r5, #0
 8002f30:	fa4f f389 	sxtb.w	r3, r9
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	bf0c      	ite	eq
 8002f38:	46a0      	moveq	r8, r4
 8002f3a:	4680      	movne	r8, r0
 8002f3c:	2f01      	cmp	r7, #1
 8002f3e:	bf0c      	ite	eq
 8002f40:	2300      	moveq	r3, #0
 8002f42:	2304      	movne	r3, #4
 8002f44:	f1be 0f01 	cmp.w	lr, #1
 8002f48:	d104      	bne.n	8002f54 <arm_mat_gemm_f32+0x60>
 8002f4a:	2f01      	cmp	r7, #1
 8002f4c:	d007      	beq.n	8002f5e <arm_mat_gemm_f32+0x6a>
 8002f4e:	f1ca 0e00 	rsb	lr, sl, #0
 8002f52:	e005      	b.n	8002f60 <arm_mat_gemm_f32+0x6c>
 8002f54:	2f01      	cmp	r7, #1
 8002f56:	bf08      	it	eq
 8002f58:	f04f 0e01 	moveq.w	lr, #1
 8002f5c:	d000      	beq.n	8002f60 <arm_mat_gemm_f32+0x6c>
 8002f5e:	46ae      	mov	lr, r5
 8002f60:	fa0f f78e 	sxth.w	r7, lr
 8002f64:	9704      	str	r7, [sp, #16]
 8002f66:	fa4f f789 	sxtb.w	r7, r9
 8002f6a:	2f00      	cmp	r7, #0
 8002f6c:	bf0c      	ite	eq
 8002f6e:	46a3      	moveq	fp, r4
 8002f70:	4683      	movne	fp, r0
 8002f72:	45e3      	cmp	fp, ip
 8002f74:	d117      	bne.n	8002fa6 <arm_mat_gemm_f32+0xb2>
 8002f76:	f99d e04c 	ldrsb.w	lr, [sp, #76]	; 0x4c
 8002f7a:	f1be 0f00 	cmp.w	lr, #0
 8002f7e:	bf0c      	ite	eq
 8002f80:	9201      	streq	r2, [sp, #4]
 8002f82:	9101      	strne	r1, [sp, #4]
 8002f84:	9f01      	ldr	r7, [sp, #4]
 8002f86:	4557      	cmp	r7, sl
 8002f88:	d10d      	bne.n	8002fa6 <arm_mat_gemm_f32+0xb2>
 8002f8a:	fa4f f789 	sxtb.w	r7, r9
 8002f8e:	2f00      	cmp	r7, #0
 8002f90:	bf0c      	ite	eq
 8002f92:	4683      	moveq	fp, r0
 8002f94:	46a3      	movne	fp, r4
 8002f96:	f1be 0f00 	cmp.w	lr, #0
 8002f9a:	bf0c      	ite	eq
 8002f9c:	460f      	moveq	r7, r1
 8002f9e:	4617      	movne	r7, r2
 8002fa0:	45bb      	cmp	fp, r7
 8002fa2:	f000 808d 	beq.w	80030c0 <arm_mat_gemm_f32+0x1cc>
 8002fa6:	fb0a f30c 	mul.w	r3, sl, ip
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	f06f 0002 	mvn.w	r0, #2
 8002fb0:	f340 8083 	ble.w	80030ba <arm_mat_gemm_f32+0x1c6>
 8002fb4:	1c6d      	adds	r5, r5, #1
 8002fb6:	2100      	movs	r1, #0
 8002fb8:	b2aa      	uxth	r2, r5
 8002fba:	6031      	str	r1, [r6, #0]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	bfbf      	itttt	lt
 8002fc0:	6071      	strlt	r1, [r6, #4]
 8002fc2:	1c6d      	addlt	r5, r5, #1
 8002fc4:	b2aa      	uxthlt	r2, r5
 8002fc6:	429a      	cmplt	r2, r3
 8002fc8:	da77      	bge.n	80030ba <arm_mat_gemm_f32+0x1c6>
 8002fca:	1c6d      	adds	r5, r5, #1
 8002fcc:	b2aa      	uxth	r2, r5
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	60b1      	str	r1, [r6, #8]
 8002fd2:	da72      	bge.n	80030ba <arm_mat_gemm_f32+0x1c6>
 8002fd4:	60f1      	str	r1, [r6, #12]
 8002fd6:	1c6d      	adds	r5, r5, #1
 8002fd8:	3610      	adds	r6, #16
 8002fda:	b2aa      	uxth	r2, r5
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	dbe9      	blt.n	8002fb4 <arm_mat_gemm_f32+0xc0>
 8002fe0:	b00a      	add	sp, #40	; 0x28
 8002fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fe6:	9d06      	ldr	r5, [sp, #24]
 8002fe8:	0097      	lsls	r7, r2, #2
 8002fea:	9708      	str	r7, [sp, #32]
 8002fec:	0087      	lsls	r7, r0, #2
 8002fee:	9707      	str	r7, [sp, #28]
 8002ff0:	f8cd c00c 	str.w	ip, [sp, #12]
 8002ff4:	f8ad 4008 	strh.w	r4, [sp, #8]
 8002ff8:	ea4f 0408 	mov.w	r4, r8
 8002ffc:	f8dd c014 	ldr.w	ip, [sp, #20]
 8003000:	fa4f f789 	sxtb.w	r7, r9
 8003004:	2f00      	cmp	r7, #0
 8003006:	bf0c      	ite	eq
 8003008:	4682      	moveq	sl, r0
 800300a:	f8bd a008 	ldrhne.w	sl, [sp, #8]
 800300e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8003012:	f1ba 0f00 	cmp.w	sl, #0
 8003016:	ed9f 1ab4 	vldr	s2, [pc, #720]	; 80032e8 <.text_21>
 800301a:	d018      	beq.n	800304e <arm_mat_gemm_f32+0x15a>
 800301c:	fa4f f789 	sxtb.w	r7, r9
 8003020:	2f00      	cmp	r7, #0
 8003022:	bf0c      	ite	eq
 8003024:	2704      	moveq	r7, #4
 8003026:	9f07      	ldrne	r7, [sp, #28]
 8003028:	f1be 0f00 	cmp.w	lr, #0
 800302c:	f1aa 0a01 	sub.w	sl, sl, #1
 8003030:	edd8 1a00 	vldr	s3, [r8]
 8003034:	ed95 2a00 	vldr	s4, [r5]
 8003038:	44b8      	add	r8, r7
 800303a:	bf0c      	ite	eq
 800303c:	9f08      	ldreq	r7, [sp, #32]
 800303e:	2704      	movne	r7, #4
 8003040:	19ed      	adds	r5, r5, r7
 8003042:	fa1f f78a 	uxth.w	r7, sl
 8003046:	2f00      	cmp	r7, #0
 8003048:	ee01 1a82 	vmla.f32	s2, s3, s4
 800304c:	d1e6      	bne.n	800301c <arm_mat_gemm_f32+0x128>
 800304e:	ee20 1a01 	vmul.f32	s2, s0, s2
 8003052:	eddb 1a00 	vldr	s3, [fp]
 8003056:	ee00 1aa1 	vmla.f32	s2, s1, s3
 800305a:	ed86 1a00 	vstr	s2, [r6]
 800305e:	1d36      	adds	r6, r6, #4
 8003060:	1e64      	subs	r4, r4, #1
 8003062:	b2a4      	uxth	r4, r4
 8003064:	f1be 0f00 	cmp.w	lr, #0
 8003068:	bf0e      	itee	eq
 800306a:	1b15      	subeq	r5, r2, r4
 800306c:	1b0d      	subne	r5, r1, r4
 800306e:	4355      	mulne	r5, r2
 8003070:	2c00      	cmp	r4, #0
 8003072:	449b      	add	fp, r3
 8003074:	eb0c 0585 	add.w	r5, ip, r5, lsl #2
 8003078:	d1c2      	bne.n	8003000 <arm_mat_gemm_f32+0x10c>
 800307a:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 800307e:	9d03      	ldr	r5, [sp, #12]
 8003080:	f8bd 4008 	ldrh.w	r4, [sp, #8]
 8003084:	f8cd c014 	str.w	ip, [sp, #20]
 8003088:	9f01      	ldr	r7, [sp, #4]
 800308a:	443e      	add	r6, r7
 800308c:	f8ad 6002 	strh.w	r6, [sp, #2]
 8003090:	fa4f f689 	sxtb.w	r6, r9
 8003094:	2e00      	cmp	r6, #0
 8003096:	bf0c      	ite	eq
 8003098:	ea4f 0c80 	moveq.w	ip, r0, lsl #2
 800309c:	f04f 0c04 	movne.w	ip, #4
 80030a0:	44ac      	add	ip, r5
 80030a2:	9d04      	ldr	r5, [sp, #16]
 80030a4:	f8bd 6000 	ldrh.w	r6, [sp]
 80030a8:	eb0b 0b85 	add.w	fp, fp, r5, lsl #2
 80030ac:	1e75      	subs	r5, r6, #1
 80030ae:	f8ad 5000 	strh.w	r5, [sp]
 80030b2:	f8bd 5000 	ldrh.w	r5, [sp]
 80030b6:	b965      	cbnz	r5, 80030d2 <arm_mat_gemm_f32+0x1de>
 80030b8:	2000      	movs	r0, #0
 80030ba:	b00a      	add	sp, #40	; 0x28
 80030bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030c0:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80030c4:	f8dd b000 	ldr.w	fp, [sp]
 80030c8:	9609      	str	r6, [sp, #36]	; 0x24
 80030ca:	f8ad 5002 	strh.w	r5, [sp, #2]
 80030ce:	f8ad 8000 	strh.w	r8, [sp]
 80030d2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80030d4:	f8bd 5002 	ldrh.w	r5, [sp, #2]
 80030d8:	f1be 0f00 	cmp.w	lr, #0
 80030dc:	eb07 0685 	add.w	r6, r7, r5, lsl #2
 80030e0:	bf0c      	ite	eq
 80030e2:	4690      	moveq	r8, r2
 80030e4:	4688      	movne	r8, r1
 80030e6:	e77e      	b.n	8002fe6 <arm_mat_gemm_f32+0xf2>

080030e8 <forward_gemm>:
 80030e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030ea:	4604      	mov	r4, r0
 80030ec:	b08b      	sub	sp, #44	; 0x2c
 80030ee:	6960      	ldr	r0, [r4, #20]
 80030f0:	6800      	ldr	r0, [r0, #0]
 80030f2:	6801      	ldr	r1, [r0, #0]
 80030f4:	68c3      	ldr	r3, [r0, #12]
 80030f6:	8902      	ldrh	r2, [r0, #8]
 80030f8:	2600      	movs	r6, #0
 80030fa:	2700      	movs	r7, #0
 80030fc:	680d      	ldr	r5, [r1, #0]
 80030fe:	f8d3 c000 	ldr.w	ip, [r3]
 8003102:	2a03      	cmp	r2, #3
 8003104:	d102      	bne.n	800310c <forward_gemm+0x24>
 8003106:	684e      	ldr	r6, [r1, #4]
 8003108:	688f      	ldr	r7, [r1, #8]
 800310a:	e00a      	b.n	8003122 <forward_gemm+0x3a>
 800310c:	2a02      	cmp	r2, #2
 800310e:	d103      	bne.n	8003118 <forward_gemm+0x30>
 8003110:	6980      	ldr	r0, [r0, #24]
 8003112:	684e      	ldr	r6, [r1, #4]
 8003114:	6807      	ldr	r7, [r0, #0]
 8003116:	e004      	b.n	8003122 <forward_gemm+0x3a>
 8003118:	2a01      	cmp	r2, #1
 800311a:	d102      	bne.n	8003122 <forward_gemm+0x3a>
 800311c:	6980      	ldr	r0, [r0, #24]
 800311e:	6806      	ldr	r6, [r0, #0]
 8003120:	6847      	ldr	r7, [r0, #4]
 8003122:	f8dc 0000 	ldr.w	r0, [ip]
 8003126:	f8dc 2008 	ldr.w	r2, [ip, #8]
 800312a:	6883      	ldr	r3, [r0, #8]
 800312c:	f8dc 1010 	ldr.w	r1, [ip, #16]
 8003130:	b292      	uxth	r2, r2
 8003132:	b289      	uxth	r1, r1
 8003134:	a808      	add	r0, sp, #32
 8003136:	f002 fa77 	bl	8005628 <arm_mat_init_f32>
 800313a:	6829      	ldr	r1, [r5, #0]
 800313c:	688b      	ldr	r3, [r1, #8]
 800313e:	68aa      	ldr	r2, [r5, #8]
 8003140:	6929      	ldr	r1, [r5, #16]
 8003142:	b292      	uxth	r2, r2
 8003144:	b289      	uxth	r1, r1
 8003146:	a806      	add	r0, sp, #24
 8003148:	f002 fa6e 	bl	8005628 <arm_mat_init_f32>
 800314c:	6830      	ldr	r0, [r6, #0]
 800314e:	68b2      	ldr	r2, [r6, #8]
 8003150:	6883      	ldr	r3, [r0, #8]
 8003152:	6931      	ldr	r1, [r6, #16]
 8003154:	b292      	uxth	r2, r2
 8003156:	b289      	uxth	r1, r1
 8003158:	a804      	add	r0, sp, #16
 800315a:	f002 fa65 	bl	8005628 <arm_mat_init_f32>
 800315e:	6838      	ldr	r0, [r7, #0]
 8003160:	68ba      	ldr	r2, [r7, #8]
 8003162:	6883      	ldr	r3, [r0, #8]
 8003164:	6939      	ldr	r1, [r7, #16]
 8003166:	b292      	uxth	r2, r2
 8003168:	b289      	uxth	r1, r1
 800316a:	a802      	add	r0, sp, #8
 800316c:	f002 fa5c 	bl	8005628 <arm_mat_init_f32>
 8003170:	a808      	add	r0, sp, #32
 8003172:	9001      	str	r0, [sp, #4]
 8003174:	aa02      	add	r2, sp, #8
 8003176:	f994 1021 	ldrsb.w	r1, [r4, #33]	; 0x21
 800317a:	9100      	str	r1, [sp, #0]
 800317c:	a904      	add	r1, sp, #16
 800317e:	f994 3020 	ldrsb.w	r3, [r4, #32]
 8003182:	edd4 0a07 	vldr	s1, [r4, #28]
 8003186:	ed94 0a06 	vldr	s0, [r4, #24]
 800318a:	a806      	add	r0, sp, #24
 800318c:	f7ff feb2 	bl	8002ef4 <arm_mat_gemm_f32>
 8003190:	b00b      	add	sp, #44	; 0x2c
 8003192:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003194 <forward_matmul>:
 8003194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003198:	b08b      	sub	sp, #44	; 0x2c
 800319a:	6940      	ldr	r0, [r0, #20]
 800319c:	6801      	ldr	r1, [r0, #0]
 800319e:	680a      	ldr	r2, [r1, #0]
 80031a0:	6810      	ldr	r0, [r2, #0]
 80031a2:	6857      	ldr	r7, [r2, #4]
 80031a4:	68ca      	ldr	r2, [r1, #12]
 80031a6:	6814      	ldr	r4, [r2, #0]
 80031a8:	b90f      	cbnz	r7, 80031ae <forward_matmul+0x1a>
 80031aa:	6989      	ldr	r1, [r1, #24]
 80031ac:	680f      	ldr	r7, [r1, #0]
 80031ae:	68a2      	ldr	r2, [r4, #8]
 80031b0:	f8d0 e004 	ldr.w	lr, [r0, #4]
 80031b4:	687d      	ldr	r5, [r7, #4]
 80031b6:	f8d4 c004 	ldr.w	ip, [r4, #4]
 80031ba:	68c1      	ldr	r1, [r0, #12]
 80031bc:	f8d7 800c 	ldr.w	r8, [r7, #12]
 80031c0:	f8d4 b00c 	ldr.w	fp, [r4, #12]
 80031c4:	6923      	ldr	r3, [r4, #16]
 80031c6:	9306      	str	r3, [sp, #24]
 80031c8:	fb01 fa0e 	mul.w	sl, r1, lr
 80031cc:	6824      	ldr	r4, [r4, #0]
 80031ce:	68a3      	ldr	r3, [r4, #8]
 80031d0:	6904      	ldr	r4, [r0, #16]
 80031d2:	434c      	muls	r4, r1
 80031d4:	fb0e f404 	mul.w	r4, lr, r4
 80031d8:	940a      	str	r4, [sp, #40]	; 0x28
 80031da:	693e      	ldr	r6, [r7, #16]
 80031dc:	fb08 f606 	mul.w	r6, r8, r6
 80031e0:	436e      	muls	r6, r5
 80031e2:	2a00      	cmp	r2, #0
 80031e4:	9609      	str	r6, [sp, #36]	; 0x24
 80031e6:	fb08 f805 	mul.w	r8, r8, r5
 80031ea:	d079      	beq.n	80032e0 <forward_matmul+0x14c>
 80031ec:	2400      	movs	r4, #0
 80031ee:	46a1      	mov	r9, r4
 80031f0:	9202      	str	r2, [sp, #8]
 80031f2:	9a06      	ldr	r2, [sp, #24]
 80031f4:	2a00      	cmp	r2, #0
 80031f6:	d069      	beq.n	80032cc <forward_matmul+0x138>
 80031f8:	2600      	movs	r6, #0
 80031fa:	9600      	str	r6, [sp, #0]
 80031fc:	f8cd a014 	str.w	sl, [sp, #20]
 8003200:	f8cd b00c 	str.w	fp, [sp, #12]
 8003204:	9a06      	ldr	r2, [sp, #24]
 8003206:	f8dd a000 	ldr.w	sl, [sp]
 800320a:	9201      	str	r2, [sp, #4]
 800320c:	9a03      	ldr	r2, [sp, #12]
 800320e:	2a00      	cmp	r2, #0
 8003210:	d052      	beq.n	80032b8 <forward_matmul+0x124>
 8003212:	9507      	str	r5, [sp, #28]
 8003214:	f04f 0b00 	mov.w	fp, #0
 8003218:	f8cd c010 	str.w	ip, [sp, #16]
 800321c:	9200      	str	r2, [sp, #0]
 800321e:	9a04      	ldr	r2, [sp, #16]
 8003220:	2a00      	cmp	r2, #0
 8003222:	d03f      	beq.n	80032a4 <forward_matmul+0x110>
 8003224:	f04f 0c00 	mov.w	ip, #0
 8003228:	9008      	str	r0, [sp, #32]
 800322a:	9808      	ldr	r0, [sp, #32]
 800322c:	6805      	ldr	r5, [r0, #0]
 800322e:	6838      	ldr	r0, [r7, #0]
 8003230:	68ae      	ldr	r6, [r5, #8]
 8003232:	6880      	ldr	r0, [r0, #8]
 8003234:	1936      	adds	r6, r6, r4
 8003236:	4456      	add	r6, sl
 8003238:	4448      	add	r0, r9
 800323a:	eb06 050c 	add.w	r5, r6, ip
 800323e:	4458      	add	r0, fp
 8003240:	eb00 060c 	add.w	r6, r0, ip
 8003244:	ed9f 0a28 	vldr	s0, [pc, #160]	; 80032e8 <.text_21>
 8003248:	b321      	cbz	r1, 8003294 <forward_matmul+0x100>
 800324a:	07c8      	lsls	r0, r1, #31
 800324c:	d509      	bpl.n	8003262 <forward_matmul+0xce>
 800324e:	edd5 0a00 	vldr	s1, [r5]
 8003252:	ed96 1a00 	vldr	s2, [r6]
 8003256:	ee00 0a81 	vmla.f32	s0, s1, s2
 800325a:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 800325e:	eb06 0688 	add.w	r6, r6, r8, lsl #2
 8003262:	0848      	lsrs	r0, r1, #1
 8003264:	f000 8016 	beq.w	8003294 <forward_matmul+0x100>
 8003268:	edd5 0a00 	vldr	s1, [r5]
 800326c:	ed96 1a00 	vldr	s2, [r6]
 8003270:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 8003274:	eb06 0688 	add.w	r6, r6, r8, lsl #2
 8003278:	ee00 0a81 	vmla.f32	s0, s1, s2
 800327c:	edd5 0a00 	vldr	s1, [r5]
 8003280:	ed96 1a00 	vldr	s2, [r6]
 8003284:	1e40      	subs	r0, r0, #1
 8003286:	ee00 0a81 	vmla.f32	s0, s1, s2
 800328a:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 800328e:	eb06 0688 	add.w	r6, r6, r8, lsl #2
 8003292:	d1e9      	bne.n	8003268 <forward_matmul+0xd4>
 8003294:	ed83 0a00 	vstr	s0, [r3]
 8003298:	1d1b      	adds	r3, r3, #4
 800329a:	1e52      	subs	r2, r2, #1
 800329c:	f10c 0c04 	add.w	ip, ip, #4
 80032a0:	d1c3      	bne.n	800322a <forward_matmul+0x96>
 80032a2:	9808      	ldr	r0, [sp, #32]
 80032a4:	9d00      	ldr	r5, [sp, #0]
 80032a6:	9a07      	ldr	r2, [sp, #28]
 80032a8:	1e6d      	subs	r5, r5, #1
 80032aa:	eb0b 0b82 	add.w	fp, fp, r2, lsl #2
 80032ae:	9500      	str	r5, [sp, #0]
 80032b0:	d1b5      	bne.n	800321e <forward_matmul+0x8a>
 80032b2:	4615      	mov	r5, r2
 80032b4:	f8dd c010 	ldr.w	ip, [sp, #16]
 80032b8:	9e01      	ldr	r6, [sp, #4]
 80032ba:	9a05      	ldr	r2, [sp, #20]
 80032bc:	1e76      	subs	r6, r6, #1
 80032be:	eb0a 0a82 	add.w	sl, sl, r2, lsl #2
 80032c2:	9601      	str	r6, [sp, #4]
 80032c4:	d1a2      	bne.n	800320c <forward_matmul+0x78>
 80032c6:	4692      	mov	sl, r2
 80032c8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80032cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80032ce:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80032d0:	eb09 0982 	add.w	r9, r9, r2, lsl #2
 80032d4:	9a02      	ldr	r2, [sp, #8]
 80032d6:	1e52      	subs	r2, r2, #1
 80032d8:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 80032dc:	9202      	str	r2, [sp, #8]
 80032de:	d188      	bne.n	80031f2 <forward_matmul+0x5e>
 80032e0:	b00b      	add	sp, #44	; 0x2c
 80032e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080032e8 <.text_21>:
 80032e8:	00000000 	.word	0x00000000

080032ec <.text_22>:
 80032ec:	0800224d 	.word	0x0800224d

080032f0 <nl_func_sm_channel_f32>:
 80032f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032f4:	460f      	mov	r7, r1
 80032f6:	4614      	mov	r4, r2
 80032f8:	ed2d 8b02 	vpush	{d8}
 80032fc:	2c02      	cmp	r4, #2
 80032fe:	4606      	mov	r6, r0
 8003300:	ed97 8a00 	vldr	s16, [r7]
 8003304:	eddf 8ac5 	vldr	s17, [pc, #788]	; 800361c <.text_12>
 8003308:	d33d      	bcc.n	8003386 <nl_func_sm_channel_f32+0x96>
 800330a:	1e61      	subs	r1, r4, #1
 800330c:	1d3a      	adds	r2, r7, #4
 800330e:	f011 0003 	ands.w	r0, r1, #3
 8003312:	d00c      	beq.n	800332e <nl_func_sm_channel_f32+0x3e>
 8003314:	ed92 0a00 	vldr	s0, [r2]
 8003318:	eeb4 0a48 	vcmp.f32	s0, s16
 800331c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003320:	bf58      	it	pl
 8003322:	eeb0 8a40 	vmovpl.f32	s16, s0
 8003326:	1e40      	subs	r0, r0, #1
 8003328:	f102 0204 	add.w	r2, r2, #4
 800332c:	d1f2      	bne.n	8003314 <nl_func_sm_channel_f32+0x24>
 800332e:	0889      	lsrs	r1, r1, #2
 8003330:	f000 802b 	beq.w	800338a <nl_func_sm_channel_f32+0x9a>
 8003334:	ed92 0a00 	vldr	s0, [r2]
 8003338:	eeb4 0a48 	vcmp.f32	s0, s16
 800333c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003340:	bf58      	it	pl
 8003342:	eeb0 8a40 	vmovpl.f32	s16, s0
 8003346:	ed92 0a01 	vldr	s0, [r2, #4]
 800334a:	eeb4 0a48 	vcmp.f32	s0, s16
 800334e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003352:	bf58      	it	pl
 8003354:	eeb0 8a40 	vmovpl.f32	s16, s0
 8003358:	ed92 0a02 	vldr	s0, [r2, #8]
 800335c:	eeb4 0a48 	vcmp.f32	s0, s16
 8003360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003364:	bf58      	it	pl
 8003366:	eeb0 8a40 	vmovpl.f32	s16, s0
 800336a:	ed92 0a03 	vldr	s0, [r2, #12]
 800336e:	eeb4 0a48 	vcmp.f32	s0, s16
 8003372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003376:	bf58      	it	pl
 8003378:	eeb0 8a40 	vmovpl.f32	s16, s0
 800337c:	1e49      	subs	r1, r1, #1
 800337e:	f102 0210 	add.w	r2, r2, #16
 8003382:	d1d7      	bne.n	8003334 <nl_func_sm_channel_f32+0x44>
 8003384:	e001      	b.n	800338a <nl_func_sm_channel_f32+0x9a>
 8003386:	2c00      	cmp	r4, #0
 8003388:	d040      	beq.n	800340c <nl_func_sm_channel_f32+0x11c>
 800338a:	46b0      	mov	r8, r6
 800338c:	ea4f 0504 	mov.w	r5, r4
 8003390:	ed97 0a00 	vldr	s0, [r7]
 8003394:	ee30 0a48 	vsub.f32	s0, s0, s16
 8003398:	f00a f982 	bl	800d6a0 <expf>
 800339c:	1d3f      	adds	r7, r7, #4
 800339e:	ed88 0a00 	vstr	s0, [r8]
 80033a2:	1e6d      	subs	r5, r5, #1
 80033a4:	ee78 8a80 	vadd.f32	s17, s17, s0
 80033a8:	f108 0804 	add.w	r8, r8, #4
 80033ac:	d1f0      	bne.n	8003390 <nl_func_sm_channel_f32+0xa0>
 80033ae:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80033b2:	f014 0003 	ands.w	r0, r4, #3
 80033b6:	ee80 0a28 	vdiv.f32	s0, s0, s17
 80033ba:	d009      	beq.n	80033d0 <nl_func_sm_channel_f32+0xe0>
 80033bc:	edd6 0a00 	vldr	s1, [r6]
 80033c0:	ee60 0a80 	vmul.f32	s1, s1, s0
 80033c4:	edc6 0a00 	vstr	s1, [r6]
 80033c8:	1e40      	subs	r0, r0, #1
 80033ca:	f106 0604 	add.w	r6, r6, #4
 80033ce:	d1f5      	bne.n	80033bc <nl_func_sm_channel_f32+0xcc>
 80033d0:	08a4      	lsrs	r4, r4, #2
 80033d2:	d01b      	beq.n	800340c <nl_func_sm_channel_f32+0x11c>
 80033d4:	edd6 0a00 	vldr	s1, [r6]
 80033d8:	ee60 0a80 	vmul.f32	s1, s1, s0
 80033dc:	edc6 0a00 	vstr	s1, [r6]
 80033e0:	1e64      	subs	r4, r4, #1
 80033e2:	ed96 1a01 	vldr	s2, [r6, #4]
 80033e6:	edd6 0a02 	vldr	s1, [r6, #8]
 80033ea:	ee21 1a00 	vmul.f32	s2, s2, s0
 80033ee:	ed86 1a01 	vstr	s2, [r6, #4]
 80033f2:	ee60 0a80 	vmul.f32	s1, s1, s0
 80033f6:	ed96 1a03 	vldr	s2, [r6, #12]
 80033fa:	edc6 0a02 	vstr	s1, [r6, #8]
 80033fe:	ee21 1a00 	vmul.f32	s2, s2, s0
 8003402:	ed86 1a03 	vstr	s2, [r6, #12]
 8003406:	f106 0610 	add.w	r6, r6, #16
 800340a:	d1e3      	bne.n	80033d4 <nl_func_sm_channel_f32+0xe4>
 800340c:	ecbd 8b02 	vpop	{d8}
 8003410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003414 <nl_func_sm_array_f32>:
 8003414:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003418:	b081      	sub	sp, #4
 800341a:	460c      	mov	r4, r1
 800341c:	9f08      	ldr	r7, [sp, #32]
 800341e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8003420:	00bf      	lsls	r7, r7, #2
 8003422:	427f      	negs	r7, r7
 8003424:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8003428:	19cd      	adds	r5, r1, r7
 800342a:	00b6      	lsls	r6, r6, #2
 800342c:	4276      	negs	r6, r6
 800342e:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8003432:	42a5      	cmp	r5, r4
 8003434:	4698      	mov	r8, r3
 8003436:	eb00 0906 	add.w	r9, r0, r6
 800343a:	d309      	bcc.n	8003450 <nl_func_sm_array_f32+0x3c>
 800343c:	2300      	movs	r3, #0
 800343e:	4642      	mov	r2, r8
 8003440:	4629      	mov	r1, r5
 8003442:	4648      	mov	r0, r9
 8003444:	f7ff ff54 	bl	80032f0 <nl_func_sm_channel_f32>
 8003448:	19ed      	adds	r5, r5, r7
 800344a:	42a5      	cmp	r5, r4
 800344c:	44b1      	add	r9, r6
 800344e:	d2f5      	bcs.n	800343c <nl_func_sm_array_f32+0x28>
 8003450:	b001      	add	sp, #4
 8003452:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08003458 <nl_func_tanh_array_f32>:
 8003458:	b570      	push	{r4, r5, r6, lr}
 800345a:	460c      	mov	r4, r1
 800345c:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8003460:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8003464:	1f0d      	subs	r5, r1, #4
 8003466:	1f06      	subs	r6, r0, #4
 8003468:	42a5      	cmp	r5, r4
 800346a:	d309      	bcc.n	8003480 <nl_func_tanh_array_f32+0x28>
 800346c:	ed95 0a00 	vldr	s0, [r5]
 8003470:	f00a f8c4 	bl	800d5fc <tanhf>
 8003474:	ed86 0a00 	vstr	s0, [r6]
 8003478:	1f2d      	subs	r5, r5, #4
 800347a:	1f36      	subs	r6, r6, #4
 800347c:	42a5      	cmp	r5, r4
 800347e:	d2f5      	bcs.n	800346c <nl_func_tanh_array_f32+0x14>
 8003480:	bd70      	pop	{r4, r5, r6, pc}
	...

08003484 <nl_func_sigmoid_array_f32>:
 8003484:	b570      	push	{r4, r5, r6, lr}
 8003486:	460c      	mov	r4, r1
 8003488:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800348c:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8003490:	1f0d      	subs	r5, r1, #4
 8003492:	1f06      	subs	r6, r0, #4
 8003494:	42a5      	cmp	r5, r4
 8003496:	d313      	bcc.n	80034c0 <nl_func_sigmoid_array_f32+0x3c>
 8003498:	ed95 0a00 	vldr	s0, [r5]
 800349c:	eeb1 0a40 	vneg.f32	s0, s0
 80034a0:	f00a f8fe 	bl	800d6a0 <expf>
 80034a4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80034a8:	ee70 0a20 	vadd.f32	s1, s0, s1
 80034ac:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80034b0:	ee80 0a20 	vdiv.f32	s0, s0, s1
 80034b4:	ed86 0a00 	vstr	s0, [r6]
 80034b8:	1f2d      	subs	r5, r5, #4
 80034ba:	1f36      	subs	r6, r6, #4
 80034bc:	42a5      	cmp	r5, r4
 80034be:	d2eb      	bcs.n	8003498 <nl_func_sigmoid_array_f32+0x14>
 80034c0:	bd70      	pop	{r4, r5, r6, pc}
	...

080034c4 <nl_func_hard_sigmoid_array_f32>:
 80034c4:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 80034c8:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80034cc:	1f1b      	subs	r3, r3, #4
 80034ce:	1f00      	subs	r0, r0, #4
 80034d0:	428b      	cmp	r3, r1
 80034d2:	d321      	bcc.n	8003518 <nl_func_hard_sigmoid_array_f32+0x54>
 80034d4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80034d8:	eddf 0aa6 	vldr	s1, [pc, #664]	; 8003774 <.text_16>
 80034dc:	edd3 1a00 	vldr	s3, [r3]
 80034e0:	ed9f 2aa5 	vldr	s4, [pc, #660]	; 8003778 <.text_17>
 80034e4:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 80034e8:	ee01 1a82 	vmla.f32	s2, s3, s4
 80034ec:	eeb4 1a60 	vcmp.f32	s2, s1
 80034f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034f4:	da08      	bge.n	8003508 <nl_func_hard_sigmoid_array_f32+0x44>
 80034f6:	eeb5 1a40 	vcmp.f32	s2, #0.0
 80034fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034fe:	d505      	bpl.n	800350c <nl_func_hard_sigmoid_array_f32+0x48>
 8003500:	ed9f 1a46 	vldr	s2, [pc, #280]	; 800361c <.text_12>
 8003504:	e002      	b.n	800350c <nl_func_hard_sigmoid_array_f32+0x48>
 8003506:	bf00      	nop
 8003508:	eeb0 1a40 	vmov.f32	s2, s0
 800350c:	ed80 1a00 	vstr	s2, [r0]
 8003510:	1f1b      	subs	r3, r3, #4
 8003512:	1f00      	subs	r0, r0, #4
 8003514:	428b      	cmp	r3, r1
 8003516:	d2e1      	bcs.n	80034dc <nl_func_hard_sigmoid_array_f32+0x18>
 8003518:	4770      	bx	lr
	...

0800351c <nl_func_exp_array_f32>:
 800351c:	b570      	push	{r4, r5, r6, lr}
 800351e:	460c      	mov	r4, r1
 8003520:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8003524:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8003528:	1f0d      	subs	r5, r1, #4
 800352a:	1f06      	subs	r6, r0, #4
 800352c:	42a5      	cmp	r5, r4
 800352e:	d309      	bcc.n	8003544 <nl_func_exp_array_f32+0x28>
 8003530:	ed95 0a00 	vldr	s0, [r5]
 8003534:	f00a f8b4 	bl	800d6a0 <expf>
 8003538:	ed86 0a00 	vstr	s0, [r6]
 800353c:	1f2d      	subs	r5, r5, #4
 800353e:	1f36      	subs	r6, r6, #4
 8003540:	42a5      	cmp	r5, r4
 8003542:	d2f5      	bcs.n	8003530 <nl_func_exp_array_f32+0x14>
 8003544:	bd70      	pop	{r4, r5, r6, pc}
	...

08003548 <nl_func_sqrt_array_f32>:
 8003548:	b570      	push	{r4, r5, r6, lr}
 800354a:	460c      	mov	r4, r1
 800354c:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8003550:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8003554:	1f0d      	subs	r5, r1, #4
 8003556:	1f06      	subs	r6, r0, #4
 8003558:	42a5      	cmp	r5, r4
 800355a:	d309      	bcc.n	8003570 <nl_func_sqrt_array_f32+0x28>
 800355c:	ed95 0a00 	vldr	s0, [r5]
 8003560:	f001 f9a8 	bl	80048b4 <ai_math_sqrt>
 8003564:	ed86 0a00 	vstr	s0, [r6]
 8003568:	1f2d      	subs	r5, r5, #4
 800356a:	1f36      	subs	r6, r6, #4
 800356c:	42a5      	cmp	r5, r4
 800356e:	d2f5      	bcs.n	800355c <nl_func_sqrt_array_f32+0x14>
 8003570:	bd70      	pop	{r4, r5, r6, pc}
	...

08003574 <nl_func_soft_plus_array_f32>:
 8003574:	b570      	push	{r4, r5, r6, lr}
 8003576:	460c      	mov	r4, r1
 8003578:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800357c:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8003580:	1f0d      	subs	r5, r1, #4
 8003582:	1f06      	subs	r6, r0, #4
 8003584:	42a5      	cmp	r5, r4
 8003586:	d30f      	bcc.n	80035a8 <nl_func_soft_plus_array_f32+0x34>
 8003588:	ed95 0a00 	vldr	s0, [r5]
 800358c:	f00a f888 	bl	800d6a0 <expf>
 8003590:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003594:	ee30 0a20 	vadd.f32	s0, s0, s1
 8003598:	f00a f8fc 	bl	800d794 <logf>
 800359c:	ed86 0a00 	vstr	s0, [r6]
 80035a0:	1f2d      	subs	r5, r5, #4
 80035a2:	1f36      	subs	r6, r6, #4
 80035a4:	42a5      	cmp	r5, r4
 80035a6:	d2ef      	bcs.n	8003588 <nl_func_soft_plus_array_f32+0x14>
 80035a8:	bd70      	pop	{r4, r5, r6, pc}
	...

080035ac <nl_func_soft_sign_array_f32>:
 80035ac:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 80035b0:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80035b4:	1f1b      	subs	r3, r3, #4
 80035b6:	1f00      	subs	r0, r0, #4
 80035b8:	428b      	cmp	r3, r1
 80035ba:	d30f      	bcc.n	80035dc <nl_func_soft_sign_array_f32+0x30>
 80035bc:	ed93 0a00 	vldr	s0, [r3]
 80035c0:	eef0 0ac0 	vabs.f32	s1, s0
 80035c4:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80035c8:	ee70 0a81 	vadd.f32	s1, s1, s2
 80035cc:	ee80 0a20 	vdiv.f32	s0, s0, s1
 80035d0:	ed80 0a00 	vstr	s0, [r0]
 80035d4:	1f1b      	subs	r3, r3, #4
 80035d6:	1f00      	subs	r0, r0, #4
 80035d8:	428b      	cmp	r3, r1
 80035da:	d2ef      	bcs.n	80035bc <nl_func_soft_sign_array_f32+0x10>
 80035dc:	4770      	bx	lr
	...

080035e0 <nl_func_sign_array_f32>:
 80035e0:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 80035e4:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80035e8:	1f1b      	subs	r3, r3, #4
 80035ea:	1f00      	subs	r0, r0, #4
 80035ec:	428b      	cmp	r3, r1
 80035ee:	d314      	bcc.n	800361a <nl_func_sign_array_f32+0x3a>
 80035f0:	f04f 32ff 	mov.w	r2, #4294967295
 80035f4:	ed93 0a00 	vldr	s0, [r3]
 80035f8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80035fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003600:	bfcc      	ite	gt
 8003602:	ed9f 0ab9 	vldrgt	s0, [pc, #740]	; 80038e8 <.text_21>
 8003606:	ee00 2a10 	vmovle	s0, r2
 800360a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800360e:	ed80 0a00 	vstr	s0, [r0]
 8003612:	1f1b      	subs	r3, r3, #4
 8003614:	1f00      	subs	r0, r0, #4
 8003616:	428b      	cmp	r3, r1
 8003618:	d2ec      	bcs.n	80035f4 <nl_func_sign_array_f32+0x14>
 800361a:	4770      	bx	lr

0800361c <.text_12>:
 800361c:	00000000 	.word	0x00000000

08003620 <nl_func_clip_array_f32>:
 8003620:	ed93 0a00 	vldr	s0, [r3]
 8003624:	edd3 0a01 	vldr	s1, [r3, #4]
 8003628:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 800362c:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8003630:	1f1b      	subs	r3, r3, #4
 8003632:	1f00      	subs	r0, r0, #4
 8003634:	428b      	cmp	r3, r1
 8003636:	d315      	bcc.n	8003664 <nl_func_clip_array_f32+0x44>
 8003638:	ed93 1a00 	vldr	s2, [r3]
 800363c:	eeb4 0a41 	vcmp.f32	s0, s2
 8003640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003644:	bf58      	it	pl
 8003646:	eeb0 1a40 	vmovpl.f32	s2, s0
 800364a:	eeb4 1a60 	vcmp.f32	s2, s1
 800364e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003652:	bf58      	it	pl
 8003654:	eeb0 1a60 	vmovpl.f32	s2, s1
 8003658:	ed80 1a00 	vstr	s2, [r0]
 800365c:	1f1b      	subs	r3, r3, #4
 800365e:	1f00      	subs	r0, r0, #4
 8003660:	428b      	cmp	r3, r1
 8003662:	d2e9      	bcs.n	8003638 <nl_func_clip_array_f32+0x18>
 8003664:	4770      	bx	lr
	...

08003668 <nl_func_hardmax_array_f32>:
 8003668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800366c:	6856      	ldr	r6, [r2, #4]
 800366e:	68d4      	ldr	r4, [r2, #12]
 8003670:	4688      	mov	r8, r1
 8003672:	4374      	muls	r4, r6
 8003674:	4605      	mov	r5, r0
 8003676:	00a1      	lsls	r1, r4, #2
 8003678:	f008 ffcf 	bl	800c61a <__aeabi_memclr>
 800367c:	2200      	movs	r2, #0
 800367e:	2c00      	cmp	r4, #0
 8003680:	4643      	mov	r3, r8
 8003682:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003686:	d05a      	beq.n	800373e <nl_func_hardmax_array_f32+0xd6>
 8003688:	f102 0c01 	add.w	ip, r2, #1
 800368c:	eb06 0e02 	add.w	lr, r6, r2
 8003690:	45f4      	cmp	ip, lr
 8003692:	edd3 0a00 	vldr	s1, [r3]
 8003696:	d249      	bcs.n	800372c <nl_func_hardmax_array_f32+0xc4>
 8003698:	1e71      	subs	r1, r6, #1
 800369a:	f011 0003 	ands.w	r0, r1, #3
 800369e:	eb08 078c 	add.w	r7, r8, ip, lsl #2
 80036a2:	d00f      	beq.n	80036c4 <nl_func_hardmax_array_f32+0x5c>
 80036a4:	ed97 1a00 	vldr	s2, [r7]
 80036a8:	eef4 0a41 	vcmp.f32	s1, s2
 80036ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036b0:	bf44      	itt	mi
 80036b2:	eef0 0a41 	vmovmi.f32	s1, s2
 80036b6:	4662      	movmi	r2, ip
 80036b8:	1e40      	subs	r0, r0, #1
 80036ba:	f10c 0c01 	add.w	ip, ip, #1
 80036be:	f107 0704 	add.w	r7, r7, #4
 80036c2:	d1ef      	bne.n	80036a4 <nl_func_hardmax_array_f32+0x3c>
 80036c4:	0889      	lsrs	r1, r1, #2
 80036c6:	d031      	beq.n	800372c <nl_func_hardmax_array_f32+0xc4>
 80036c8:	ed97 1a00 	vldr	s2, [r7]
 80036cc:	eef4 0a41 	vcmp.f32	s1, s2
 80036d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036d4:	bf44      	itt	mi
 80036d6:	eef0 0a41 	vmovmi.f32	s1, s2
 80036da:	4662      	movmi	r2, ip
 80036dc:	ed97 1a01 	vldr	s2, [r7, #4]
 80036e0:	eef4 0a41 	vcmp.f32	s1, s2
 80036e4:	f10c 0001 	add.w	r0, ip, #1
 80036e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036ec:	bf44      	itt	mi
 80036ee:	eef0 0a41 	vmovmi.f32	s1, s2
 80036f2:	4602      	movmi	r2, r0
 80036f4:	ed97 1a02 	vldr	s2, [r7, #8]
 80036f8:	1c40      	adds	r0, r0, #1
 80036fa:	eef4 0a41 	vcmp.f32	s1, s2
 80036fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003702:	bf44      	itt	mi
 8003704:	eef0 0a41 	vmovmi.f32	s1, s2
 8003708:	4602      	movmi	r2, r0
 800370a:	ed97 1a03 	vldr	s2, [r7, #12]
 800370e:	1c40      	adds	r0, r0, #1
 8003710:	eef4 0a41 	vcmp.f32	s1, s2
 8003714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003718:	bf44      	itt	mi
 800371a:	eef0 0a41 	vmovmi.f32	s1, s2
 800371e:	4602      	movmi	r2, r0
 8003720:	1e49      	subs	r1, r1, #1
 8003722:	f100 0c01 	add.w	ip, r0, #1
 8003726:	f107 0710 	add.w	r7, r7, #16
 800372a:	d1cd      	bne.n	80036c8 <nl_func_hardmax_array_f32+0x60>
 800372c:	eb05 0082 	add.w	r0, r5, r2, lsl #2
 8003730:	4672      	mov	r2, lr
 8003732:	42a2      	cmp	r2, r4
 8003734:	ed80 0a00 	vstr	s0, [r0]
 8003738:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800373c:	d3a4      	bcc.n	8003688 <nl_func_hardmax_array_f32+0x20>
 800373e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08003744 <nl_func_relu_array_f32>:
 8003744:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8003748:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800374c:	1f1b      	subs	r3, r3, #4
 800374e:	1f00      	subs	r0, r0, #4
 8003750:	428b      	cmp	r3, r1
 8003752:	d30e      	bcc.n	8003772 <nl_func_relu_array_f32+0x2e>
 8003754:	ed93 0a00 	vldr	s0, [r3]
 8003758:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800375c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003760:	bf48      	it	mi
 8003762:	ed9f 0ab9 	vldrmi	s0, [pc, #740]	; 8003a48 <.text_25>
 8003766:	ed80 0a00 	vstr	s0, [r0]
 800376a:	1f1b      	subs	r3, r3, #4
 800376c:	1f00      	subs	r0, r0, #4
 800376e:	428b      	cmp	r3, r1
 8003770:	d2f0      	bcs.n	8003754 <nl_func_relu_array_f32+0x10>
 8003772:	4770      	bx	lr

08003774 <.text_16>:
 8003774:	3f800001 	.word	0x3f800001

08003778 <.text_17>:
 8003778:	3e4ccccd 	.word	0x3e4ccccd

0800377c <nl_func_relu_generic_array_f32>:
 800377c:	ed93 0a00 	vldr	s0, [r3]
 8003780:	edd3 0a01 	vldr	s1, [r3, #4]
 8003784:	ed93 1a02 	vldr	s2, [r3, #8]
 8003788:	1f00      	subs	r0, r0, #4
 800378a:	eeb5 1a40 	vcmp.f32	s2, #0.0
 800378e:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8003792:	1f0b      	subs	r3, r1, #4
 8003794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003798:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800379c:	d52a      	bpl.n	80037f4 <nl_func_relu_generic_array_f32+0x78>
 800379e:	eef5 0a40 	vcmp.f32	s1, #0.0
 80037a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037a6:	d013      	beq.n	80037d0 <nl_func_relu_generic_array_f32+0x54>
 80037a8:	428a      	cmp	r2, r1
 80037aa:	d310      	bcc.n	80037ce <nl_func_relu_generic_array_f32+0x52>
 80037ac:	ed92 1a00 	vldr	s2, [r2]
 80037b0:	eeb4 1a40 	vcmp.f32	s2, s0
 80037b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037b8:	bf44      	itt	mi
 80037ba:	ee31 1a40 	vsubmi.f32	s2, s2, s0
 80037be:	ee21 1a20 	vmulmi.f32	s2, s2, s1
 80037c2:	ed80 1a00 	vstr	s2, [r0]
 80037c6:	1f12      	subs	r2, r2, #4
 80037c8:	1f00      	subs	r0, r0, #4
 80037ca:	428a      	cmp	r2, r1
 80037cc:	d2ee      	bcs.n	80037ac <nl_func_relu_generic_array_f32+0x30>
 80037ce:	4770      	bx	lr
 80037d0:	428a      	cmp	r2, r1
 80037d2:	d3fc      	bcc.n	80037ce <nl_func_relu_generic_array_f32+0x52>
 80037d4:	edd2 0a00 	vldr	s1, [r2]
 80037d8:	eef4 0a40 	vcmp.f32	s1, s0
 80037dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037e0:	bf48      	it	mi
 80037e2:	eddf 0a99 	vldrmi	s1, [pc, #612]	; 8003a48 <.text_25>
 80037e6:	edc0 0a00 	vstr	s1, [r0]
 80037ea:	1f12      	subs	r2, r2, #4
 80037ec:	1f00      	subs	r0, r0, #4
 80037ee:	428a      	cmp	r2, r1
 80037f0:	d2f0      	bcs.n	80037d4 <nl_func_relu_generic_array_f32+0x58>
 80037f2:	4770      	bx	lr
 80037f4:	428a      	cmp	r2, r1
 80037f6:	d3ea      	bcc.n	80037ce <nl_func_relu_generic_array_f32+0x52>
 80037f8:	edd2 1a00 	vldr	s3, [r2]
 80037fc:	eef4 1a41 	vcmp.f32	s3, s2
 8003800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003804:	d50a      	bpl.n	800381c <nl_func_relu_generic_array_f32+0xa0>
 8003806:	eef4 1a40 	vcmp.f32	s3, s0
 800380a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800380e:	d507      	bpl.n	8003820 <nl_func_relu_generic_array_f32+0xa4>
 8003810:	ee71 1ac0 	vsub.f32	s3, s3, s0
 8003814:	ee61 1aa0 	vmul.f32	s3, s3, s1
 8003818:	e002      	b.n	8003820 <nl_func_relu_generic_array_f32+0xa4>
 800381a:	bf00      	nop
 800381c:	eef0 1a41 	vmov.f32	s3, s2
 8003820:	edc0 1a00 	vstr	s3, [r0]
 8003824:	1f12      	subs	r2, r2, #4
 8003826:	1f00      	subs	r0, r0, #4
 8003828:	428a      	cmp	r2, r1
 800382a:	d2e5      	bcs.n	80037f8 <nl_func_relu_generic_array_f32+0x7c>
 800382c:	4770      	bx	lr
	...

08003830 <nl_func_relu_thresholded_array_f32>:
 8003830:	ed93 0a00 	vldr	s0, [r3]
 8003834:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8003838:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800383c:	1f1b      	subs	r3, r3, #4
 800383e:	1f00      	subs	r0, r0, #4
 8003840:	428b      	cmp	r3, r1
 8003842:	d30e      	bcc.n	8003862 <nl_func_relu_thresholded_array_f32+0x32>
 8003844:	edd3 0a00 	vldr	s1, [r3]
 8003848:	eef4 0a40 	vcmp.f32	s1, s0
 800384c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003850:	bf48      	it	mi
 8003852:	eddf 0a7d 	vldrmi	s1, [pc, #500]	; 8003a48 <.text_25>
 8003856:	edc0 0a00 	vstr	s1, [r0]
 800385a:	1f1b      	subs	r3, r3, #4
 800385c:	1f00      	subs	r0, r0, #4
 800385e:	428b      	cmp	r3, r1
 8003860:	d2f0      	bcs.n	8003844 <nl_func_relu_thresholded_array_f32+0x14>
 8003862:	4770      	bx	lr

08003864 <nl_func_elu_array_f32>:
 8003864:	b570      	push	{r4, r5, r6, lr}
 8003866:	460c      	mov	r4, r1
 8003868:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800386c:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8003870:	1f0d      	subs	r5, r1, #4
 8003872:	1f06      	subs	r6, r0, #4
 8003874:	ed2d 8b04 	vpush	{d8-d9}
 8003878:	42a5      	cmp	r5, r4
 800387a:	ed93 8a00 	vldr	s16, [r3]
 800387e:	d32f      	bcc.n	80038e0 <nl_func_elu_array_f32+0x7c>
 8003880:	edd5 8a00 	vldr	s17, [r5]
 8003884:	eef5 8a40 	vcmp.f32	s17, #0.0
 8003888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800388c:	bf4c      	ite	mi
 800388e:	ed9f 9a6e 	vldrmi	s18, [pc, #440]	; 8003a48 <.text_25>
 8003892:	eeb0 9a68 	vmovpl.f32	s18, s17
 8003896:	eeb0 0a68 	vmov.f32	s0, s17
 800389a:	f009 ff01 	bl	800d6a0 <expf>
 800389e:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 80038a2:	ee30 0a20 	vadd.f32	s0, s0, s1
 80038a6:	ee20 0a08 	vmul.f32	s0, s0, s16
 80038aa:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80038ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038b2:	dd05      	ble.n	80038c0 <nl_func_elu_array_f32+0x5c>
 80038b4:	ed9f 1a64 	vldr	s2, [pc, #400]	; 8003a48 <.text_25>
 80038b8:	ee39 9a01 	vadd.f32	s18, s18, s2
 80038bc:	e00a      	b.n	80038d4 <nl_func_elu_array_f32+0x70>
 80038be:	bf00      	nop
 80038c0:	eeb0 0a68 	vmov.f32	s0, s17
 80038c4:	f009 feec 	bl	800d6a0 <expf>
 80038c8:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 80038cc:	ee30 0a20 	vadd.f32	s0, s0, s1
 80038d0:	ee00 9a08 	vmla.f32	s18, s0, s16
 80038d4:	ed86 9a00 	vstr	s18, [r6]
 80038d8:	1f2d      	subs	r5, r5, #4
 80038da:	1f36      	subs	r6, r6, #4
 80038dc:	42a5      	cmp	r5, r4
 80038de:	d2cf      	bcs.n	8003880 <nl_func_elu_array_f32+0x1c>
 80038e0:	ecbd 8b04 	vpop	{d8-d9}
 80038e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080038e8 <.text_21>:
 80038e8:	00000001 	.word	0x00000001

080038ec <nl_func_selu_array_f32>:
 80038ec:	b570      	push	{r4, r5, r6, lr}
 80038ee:	460c      	mov	r4, r1
 80038f0:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 80038f4:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80038f8:	1f0d      	subs	r5, r1, #4
 80038fa:	1f06      	subs	r6, r0, #4
 80038fc:	ed2d 8b04 	vpush	{d8-d9}
 8003900:	42a5      	cmp	r5, r4
 8003902:	ed93 8a00 	vldr	s16, [r3]
 8003906:	edd3 8a01 	vldr	s17, [r3, #4]
 800390a:	d331      	bcc.n	8003970 <nl_func_selu_array_f32+0x84>
 800390c:	ed95 9a00 	vldr	s18, [r5]
 8003910:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8003914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003918:	bf4c      	ite	mi
 800391a:	eddf 9a4b 	vldrmi	s19, [pc, #300]	; 8003a48 <.text_25>
 800391e:	eef0 9a49 	vmovpl.f32	s19, s18
 8003922:	eeb0 0a49 	vmov.f32	s0, s18
 8003926:	f009 febb 	bl	800d6a0 <expf>
 800392a:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 800392e:	ee30 0a20 	vadd.f32	s0, s0, s1
 8003932:	ee20 0a08 	vmul.f32	s0, s0, s16
 8003936:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800393a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800393e:	dd05      	ble.n	800394c <nl_func_selu_array_f32+0x60>
 8003940:	ed9f 1a41 	vldr	s2, [pc, #260]	; 8003a48 <.text_25>
 8003944:	ee79 9a81 	vadd.f32	s19, s19, s2
 8003948:	e00a      	b.n	8003960 <nl_func_selu_array_f32+0x74>
 800394a:	bf00      	nop
 800394c:	eeb0 0a49 	vmov.f32	s0, s18
 8003950:	f009 fea6 	bl	800d6a0 <expf>
 8003954:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8003958:	ee30 0a20 	vadd.f32	s0, s0, s1
 800395c:	ee40 9a08 	vmla.f32	s19, s0, s16
 8003960:	ee28 0aa9 	vmul.f32	s0, s17, s19
 8003964:	ed86 0a00 	vstr	s0, [r6]
 8003968:	1f2d      	subs	r5, r5, #4
 800396a:	1f36      	subs	r6, r6, #4
 800396c:	42a5      	cmp	r5, r4
 800396e:	d2cd      	bcs.n	800390c <nl_func_selu_array_f32+0x20>
 8003970:	ecbd 8b04 	vpop	{d8-d9}
 8003974:	bd70      	pop	{r4, r5, r6, pc}
	...

08003978 <nl_func_prelu_array_f32>:
 8003978:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800397c:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8003980:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8003984:	1f1b      	subs	r3, r3, #4
 8003986:	f1ac 0c04 	sub.w	ip, ip, #4
 800398a:	1f00      	subs	r0, r0, #4
 800398c:	458c      	cmp	ip, r1
 800398e:	d320      	bcc.n	80039d2 <nl_func_prelu_array_f32+0x5a>
 8003990:	ed9c 0a00 	vldr	s0, [ip]
 8003994:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800399c:	bf4c      	ite	mi
 800399e:	eddf 0a2a 	vldrmi	s1, [pc, #168]	; 8003a48 <.text_25>
 80039a2:	eef0 0a40 	vmovpl.f32	s1, s0
 80039a6:	461a      	mov	r2, r3
 80039a8:	eeb1 0a40 	vneg.f32	s0, s0
 80039ac:	1f13      	subs	r3, r2, #4
 80039ae:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80039b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039b6:	bf48      	it	mi
 80039b8:	ed9f 0a23 	vldrmi	s0, [pc, #140]	; 8003a48 <.text_25>
 80039bc:	ed92 1a00 	vldr	s2, [r2]
 80039c0:	ee41 0a40 	vmls.f32	s1, s2, s0
 80039c4:	edc0 0a00 	vstr	s1, [r0]
 80039c8:	f1ac 0c04 	sub.w	ip, ip, #4
 80039cc:	1f00      	subs	r0, r0, #4
 80039ce:	458c      	cmp	ip, r1
 80039d0:	d2de      	bcs.n	8003990 <nl_func_prelu_array_f32+0x18>
 80039d2:	4770      	bx	lr

080039d4 <forward_relu>:
 80039d4:	b430      	push	{r4, r5}
 80039d6:	4602      	mov	r2, r0
 80039d8:	6950      	ldr	r0, [r2, #20]
 80039da:	6800      	ldr	r0, [r0, #0]
 80039dc:	6801      	ldr	r1, [r0, #0]
 80039de:	68c0      	ldr	r0, [r0, #12]
 80039e0:	680b      	ldr	r3, [r1, #0]
 80039e2:	6805      	ldr	r5, [r0, #0]
 80039e4:	685c      	ldr	r4, [r3, #4]
 80039e6:	6898      	ldr	r0, [r3, #8]
 80039e8:	68d9      	ldr	r1, [r3, #12]
 80039ea:	682d      	ldr	r5, [r5, #0]
 80039ec:	6992      	ldr	r2, [r2, #24]
 80039ee:	4344      	muls	r4, r0
 80039f0:	6918      	ldr	r0, [r3, #16]
 80039f2:	434c      	muls	r4, r1
 80039f4:	6819      	ldr	r1, [r3, #0]
 80039f6:	6889      	ldr	r1, [r1, #8]
 80039f8:	4344      	muls	r4, r0
 80039fa:	68a8      	ldr	r0, [r5, #8]
 80039fc:	b9ca      	cbnz	r2, 8003a32 <forward_relu+0x5e>
 80039fe:	eb01 0284 	add.w	r2, r1, r4, lsl #2
 8003a02:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8003a06:	1f12      	subs	r2, r2, #4
 8003a08:	1f00      	subs	r0, r0, #4
 8003a0a:	428a      	cmp	r2, r1
 8003a0c:	f0c0 801a 	bcc.w	8003a44 <forward_relu+0x70>
 8003a10:	ed92 0a00 	vldr	s0, [r2]
 8003a14:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a1c:	bf48      	it	mi
 8003a1e:	ed9f 0a0a 	vldrmi	s0, [pc, #40]	; 8003a48 <.text_25>
 8003a22:	ed80 0a00 	vstr	s0, [r0]
 8003a26:	1f12      	subs	r2, r2, #4
 8003a28:	1f00      	subs	r0, r0, #4
 8003a2a:	428a      	cmp	r2, r1
 8003a2c:	d2f0      	bcs.n	8003a10 <forward_relu+0x3c>
 8003a2e:	bc30      	pop	{r4, r5}
 8003a30:	4770      	bx	lr
 8003a32:	6893      	ldr	r3, [r2, #8]
 8003a34:	6852      	ldr	r2, [r2, #4]
 8003a36:	2a01      	cmp	r2, #1
 8003a38:	4622      	mov	r2, r4
 8003a3a:	d101      	bne.n	8003a40 <forward_relu+0x6c>
 8003a3c:	bc30      	pop	{r4, r5}
 8003a3e:	e6f7      	b.n	8003830 <nl_func_relu_thresholded_array_f32>
 8003a40:	bc30      	pop	{r4, r5}
 8003a42:	e69b      	b.n	800377c <nl_func_relu_generic_array_f32>
 8003a44:	bc30      	pop	{r4, r5}
 8003a46:	4770      	bx	lr

08003a48 <.text_25>:
 8003a48:	00000000 	.word	0x00000000

08003a4c <forward_relu_thresholded>:
 8003a4c:	b430      	push	{r4, r5}
 8003a4e:	6941      	ldr	r1, [r0, #20]
 8003a50:	6980      	ldr	r0, [r0, #24]
 8003a52:	680c      	ldr	r4, [r1, #0]
 8003a54:	6822      	ldr	r2, [r4, #0]
 8003a56:	6815      	ldr	r5, [r2, #0]
 8003a58:	686b      	ldr	r3, [r5, #4]
 8003a5a:	68a9      	ldr	r1, [r5, #8]
 8003a5c:	68ea      	ldr	r2, [r5, #12]
 8003a5e:	434b      	muls	r3, r1
 8003a60:	6929      	ldr	r1, [r5, #16]
 8003a62:	682d      	ldr	r5, [r5, #0]
 8003a64:	4353      	muls	r3, r2
 8003a66:	6882      	ldr	r2, [r0, #8]
 8003a68:	ed92 0a00 	vldr	s0, [r2]
 8003a6c:	68e2      	ldr	r2, [r4, #12]
 8003a6e:	6814      	ldr	r4, [r2, #0]
 8003a70:	434b      	muls	r3, r1
 8003a72:	68a9      	ldr	r1, [r5, #8]
 8003a74:	6825      	ldr	r5, [r4, #0]
 8003a76:	68aa      	ldr	r2, [r5, #8]
 8003a78:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8003a7c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003a80:	1f00      	subs	r0, r0, #4
 8003a82:	1f1a      	subs	r2, r3, #4
 8003a84:	4288      	cmp	r0, r1
 8003a86:	d30e      	bcc.n	8003aa6 <forward_relu_thresholded+0x5a>
 8003a88:	edd0 0a00 	vldr	s1, [r0]
 8003a8c:	eef4 0a40 	vcmp.f32	s1, s0
 8003a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a94:	bf48      	it	mi
 8003a96:	eddf 0ac1 	vldrmi	s1, [pc, #772]	; 8003d9c <.text_34>
 8003a9a:	edc2 0a00 	vstr	s1, [r2]
 8003a9e:	1f00      	subs	r0, r0, #4
 8003aa0:	1f12      	subs	r2, r2, #4
 8003aa2:	4288      	cmp	r0, r1
 8003aa4:	d2f0      	bcs.n	8003a88 <forward_relu_thresholded+0x3c>
 8003aa6:	bc30      	pop	{r4, r5}
 8003aa8:	4770      	bx	lr
	...

08003aac <forward_elu>:
 8003aac:	b570      	push	{r4, r5, r6, lr}
 8003aae:	ed2d 8b04 	vpush	{d8-d9}
 8003ab2:	6941      	ldr	r1, [r0, #20]
 8003ab4:	680e      	ldr	r6, [r1, #0]
 8003ab6:	6832      	ldr	r2, [r6, #0]
 8003ab8:	6814      	ldr	r4, [r2, #0]
 8003aba:	6863      	ldr	r3, [r4, #4]
 8003abc:	68a1      	ldr	r1, [r4, #8]
 8003abe:	68e2      	ldr	r2, [r4, #12]
 8003ac0:	6980      	ldr	r0, [r0, #24]
 8003ac2:	434b      	muls	r3, r1
 8003ac4:	6921      	ldr	r1, [r4, #16]
 8003ac6:	6824      	ldr	r4, [r4, #0]
 8003ac8:	68a4      	ldr	r4, [r4, #8]
 8003aca:	4353      	muls	r3, r2
 8003acc:	434b      	muls	r3, r1
 8003ace:	6881      	ldr	r1, [r0, #8]
 8003ad0:	ed91 8a00 	vldr	s16, [r1]
 8003ad4:	68f1      	ldr	r1, [r6, #12]
 8003ad6:	eb04 0083 	add.w	r0, r4, r3, lsl #2
 8003ada:	1f05      	subs	r5, r0, #4
 8003adc:	6808      	ldr	r0, [r1, #0]
 8003ade:	6802      	ldr	r2, [r0, #0]
 8003ae0:	6891      	ldr	r1, [r2, #8]
 8003ae2:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8003ae6:	1f06      	subs	r6, r0, #4
 8003ae8:	42a5      	cmp	r5, r4
 8003aea:	d32f      	bcc.n	8003b4c <forward_elu+0xa0>
 8003aec:	edd5 8a00 	vldr	s17, [r5]
 8003af0:	eef5 8a40 	vcmp.f32	s17, #0.0
 8003af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003af8:	bf4c      	ite	mi
 8003afa:	ed9f 9aa8 	vldrmi	s18, [pc, #672]	; 8003d9c <.text_34>
 8003afe:	eeb0 9a68 	vmovpl.f32	s18, s17
 8003b02:	eeb0 0a68 	vmov.f32	s0, s17
 8003b06:	f009 fdcb 	bl	800d6a0 <expf>
 8003b0a:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8003b0e:	ee30 0a20 	vadd.f32	s0, s0, s1
 8003b12:	ee20 0a08 	vmul.f32	s0, s0, s16
 8003b16:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b1e:	dd05      	ble.n	8003b2c <forward_elu+0x80>
 8003b20:	ed9f 1a9e 	vldr	s2, [pc, #632]	; 8003d9c <.text_34>
 8003b24:	ee39 9a01 	vadd.f32	s18, s18, s2
 8003b28:	e00a      	b.n	8003b40 <forward_elu+0x94>
 8003b2a:	bf00      	nop
 8003b2c:	eeb0 0a68 	vmov.f32	s0, s17
 8003b30:	f009 fdb6 	bl	800d6a0 <expf>
 8003b34:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8003b38:	ee30 0a20 	vadd.f32	s0, s0, s1
 8003b3c:	ee00 9a08 	vmla.f32	s18, s0, s16
 8003b40:	ed86 9a00 	vstr	s18, [r6]
 8003b44:	1f2d      	subs	r5, r5, #4
 8003b46:	1f36      	subs	r6, r6, #4
 8003b48:	42a5      	cmp	r5, r4
 8003b4a:	d2cf      	bcs.n	8003aec <forward_elu+0x40>
 8003b4c:	ecbd 8b04 	vpop	{d8-d9}
 8003b50:	bd70      	pop	{r4, r5, r6, pc}

08003b52 <forward_selu>:
 8003b52:	b430      	push	{r4, r5}
 8003b54:	6941      	ldr	r1, [r0, #20]
 8003b56:	680c      	ldr	r4, [r1, #0]
 8003b58:	6822      	ldr	r2, [r4, #0]
 8003b5a:	6980      	ldr	r0, [r0, #24]
 8003b5c:	6815      	ldr	r5, [r2, #0]
 8003b5e:	6883      	ldr	r3, [r0, #8]
 8003b60:	686a      	ldr	r2, [r5, #4]
 8003b62:	68a8      	ldr	r0, [r5, #8]
 8003b64:	68e9      	ldr	r1, [r5, #12]
 8003b66:	4342      	muls	r2, r0
 8003b68:	6928      	ldr	r0, [r5, #16]
 8003b6a:	682d      	ldr	r5, [r5, #0]
 8003b6c:	434a      	muls	r2, r1
 8003b6e:	4342      	muls	r2, r0
 8003b70:	68e0      	ldr	r0, [r4, #12]
 8003b72:	6804      	ldr	r4, [r0, #0]
 8003b74:	68a9      	ldr	r1, [r5, #8]
 8003b76:	6825      	ldr	r5, [r4, #0]
 8003b78:	68a8      	ldr	r0, [r5, #8]
 8003b7a:	bc30      	pop	{r4, r5}
 8003b7c:	e6b6      	b.n	80038ec <nl_func_selu_array_f32>

08003b7e <forward_prelu>:
 8003b7e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003b82:	b081      	sub	sp, #4
 8003b84:	6940      	ldr	r0, [r0, #20]
 8003b86:	6800      	ldr	r0, [r0, #0]
 8003b88:	6801      	ldr	r1, [r0, #0]
 8003b8a:	68c2      	ldr	r2, [r0, #12]
 8003b8c:	6980      	ldr	r0, [r0, #24]
 8003b8e:	6804      	ldr	r4, [r0, #0]
 8003b90:	6820      	ldr	r0, [r4, #0]
 8003b92:	680d      	ldr	r5, [r1, #0]
 8003b94:	6817      	ldr	r7, [r2, #0]
 8003b96:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8003b9a:	b12c      	cbz	r4, 8003ba8 <forward_prelu+0x2a>
 8003b9c:	6841      	ldr	r1, [r0, #4]
 8003b9e:	6800      	ldr	r0, [r0, #0]
 8003ba0:	f000 fd32 	bl	8004608 <ai_array_get_byte_size>
 8003ba4:	4681      	mov	r9, r0
 8003ba6:	e001      	b.n	8003bac <forward_prelu+0x2e>
 8003ba8:	f04f 0901 	mov.w	r9, #1
 8003bac:	6828      	ldr	r0, [r5, #0]
 8003bae:	6841      	ldr	r1, [r0, #4]
 8003bb0:	6800      	ldr	r0, [r0, #0]
 8003bb2:	f000 fd29 	bl	8004608 <ai_array_get_byte_size>
 8003bb6:	6829      	ldr	r1, [r5, #0]
 8003bb8:	683a      	ldr	r2, [r7, #0]
 8003bba:	688e      	ldr	r6, [r1, #8]
 8003bbc:	6895      	ldr	r5, [r2, #8]
 8003bbe:	1837      	adds	r7, r6, r0
 8003bc0:	42be      	cmp	r6, r7
 8003bc2:	d20f      	bcs.n	8003be4 <forward_prelu+0x66>
 8003bc4:	6862      	ldr	r2, [r4, #4]
 8003bc6:	68a0      	ldr	r0, [r4, #8]
 8003bc8:	68e1      	ldr	r1, [r4, #12]
 8003bca:	4342      	muls	r2, r0
 8003bcc:	6920      	ldr	r0, [r4, #16]
 8003bce:	434a      	muls	r2, r1
 8003bd0:	4342      	muls	r2, r0
 8003bd2:	4643      	mov	r3, r8
 8003bd4:	4631      	mov	r1, r6
 8003bd6:	4628      	mov	r0, r5
 8003bd8:	f7ff fece 	bl	8003978 <nl_func_prelu_array_f32>
 8003bdc:	444e      	add	r6, r9
 8003bde:	42be      	cmp	r6, r7
 8003be0:	444d      	add	r5, r9
 8003be2:	d3ef      	bcc.n	8003bc4 <forward_prelu+0x46>
 8003be4:	b001      	add	sp, #4
 8003be6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08003bec <forward_sign>:
 8003bec:	b430      	push	{r4, r5}
 8003bee:	6940      	ldr	r0, [r0, #20]
 8003bf0:	6802      	ldr	r2, [r0, #0]
 8003bf2:	6811      	ldr	r1, [r2, #0]
 8003bf4:	68d2      	ldr	r2, [r2, #12]
 8003bf6:	680b      	ldr	r3, [r1, #0]
 8003bf8:	685c      	ldr	r4, [r3, #4]
 8003bfa:	6898      	ldr	r0, [r3, #8]
 8003bfc:	68d9      	ldr	r1, [r3, #12]
 8003bfe:	4344      	muls	r4, r0
 8003c00:	6918      	ldr	r0, [r3, #16]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	434c      	muls	r4, r1
 8003c06:	4344      	muls	r4, r0
 8003c08:	6898      	ldr	r0, [r3, #8]
 8003c0a:	6813      	ldr	r3, [r2, #0]
 8003c0c:	681d      	ldr	r5, [r3, #0]
 8003c0e:	68aa      	ldr	r2, [r5, #8]
 8003c10:	eb00 0184 	add.w	r1, r0, r4, lsl #2
 8003c14:	eb02 0384 	add.w	r3, r2, r4, lsl #2
 8003c18:	1f09      	subs	r1, r1, #4
 8003c1a:	1f1a      	subs	r2, r3, #4
 8003c1c:	4281      	cmp	r1, r0
 8003c1e:	d314      	bcc.n	8003c4a <forward_sign+0x5e>
 8003c20:	f04f 33ff 	mov.w	r3, #4294967295
 8003c24:	ed91 0a00 	vldr	s0, [r1]
 8003c28:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c30:	bfcc      	ite	gt
 8003c32:	ed9f 0a5b 	vldrgt	s0, [pc, #364]	; 8003da0 <.text_35>
 8003c36:	ee00 3a10 	vmovle	s0, r3
 8003c3a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8003c3e:	ed82 0a00 	vstr	s0, [r2]
 8003c42:	1f09      	subs	r1, r1, #4
 8003c44:	1f12      	subs	r2, r2, #4
 8003c46:	4281      	cmp	r1, r0
 8003c48:	d2ec      	bcs.n	8003c24 <forward_sign+0x38>
 8003c4a:	bc30      	pop	{r4, r5}
 8003c4c:	4770      	bx	lr
	...

08003c50 <forward_clip>:
 8003c50:	b430      	push	{r4, r5}
 8003c52:	6941      	ldr	r1, [r0, #20]
 8003c54:	680c      	ldr	r4, [r1, #0]
 8003c56:	6822      	ldr	r2, [r4, #0]
 8003c58:	6815      	ldr	r5, [r2, #0]
 8003c5a:	686b      	ldr	r3, [r5, #4]
 8003c5c:	68a9      	ldr	r1, [r5, #8]
 8003c5e:	68ea      	ldr	r2, [r5, #12]
 8003c60:	6980      	ldr	r0, [r0, #24]
 8003c62:	434b      	muls	r3, r1
 8003c64:	6929      	ldr	r1, [r5, #16]
 8003c66:	4353      	muls	r3, r2
 8003c68:	434b      	muls	r3, r1
 8003c6a:	682a      	ldr	r2, [r5, #0]
 8003c6c:	6881      	ldr	r1, [r0, #8]
 8003c6e:	6890      	ldr	r0, [r2, #8]
 8003c70:	68e2      	ldr	r2, [r4, #12]
 8003c72:	ed91 0a00 	vldr	s0, [r1]
 8003c76:	6814      	ldr	r4, [r2, #0]
 8003c78:	edd1 0a01 	vldr	s1, [r1, #4]
 8003c7c:	6825      	ldr	r5, [r4, #0]
 8003c7e:	68aa      	ldr	r2, [r5, #8]
 8003c80:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8003c84:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003c88:	1f09      	subs	r1, r1, #4
 8003c8a:	1f1a      	subs	r2, r3, #4
 8003c8c:	4281      	cmp	r1, r0
 8003c8e:	d315      	bcc.n	8003cbc <forward_clip+0x6c>
 8003c90:	ed91 1a00 	vldr	s2, [r1]
 8003c94:	eeb4 0a41 	vcmp.f32	s0, s2
 8003c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c9c:	bf58      	it	pl
 8003c9e:	eeb0 1a40 	vmovpl.f32	s2, s0
 8003ca2:	eeb4 1a60 	vcmp.f32	s2, s1
 8003ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003caa:	bf58      	it	pl
 8003cac:	eeb0 1a60 	vmovpl.f32	s2, s1
 8003cb0:	ed82 1a00 	vstr	s2, [r2]
 8003cb4:	1f09      	subs	r1, r1, #4
 8003cb6:	1f12      	subs	r2, r2, #4
 8003cb8:	4281      	cmp	r1, r0
 8003cba:	d2e9      	bcs.n	8003c90 <forward_clip+0x40>
 8003cbc:	bc30      	pop	{r4, r5}
 8003cbe:	4770      	bx	lr

08003cc0 <forward_sigmoid>:
 8003cc0:	b570      	push	{r4, r5, r6, lr}
 8003cc2:	6940      	ldr	r0, [r0, #20]
 8003cc4:	6802      	ldr	r2, [r0, #0]
 8003cc6:	6811      	ldr	r1, [r2, #0]
 8003cc8:	680b      	ldr	r3, [r1, #0]
 8003cca:	685e      	ldr	r6, [r3, #4]
 8003ccc:	6898      	ldr	r0, [r3, #8]
 8003cce:	68d9      	ldr	r1, [r3, #12]
 8003cd0:	4346      	muls	r6, r0
 8003cd2:	6918      	ldr	r0, [r3, #16]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	689c      	ldr	r4, [r3, #8]
 8003cd8:	434e      	muls	r6, r1
 8003cda:	4346      	muls	r6, r0
 8003cdc:	68d1      	ldr	r1, [r2, #12]
 8003cde:	eb04 0086 	add.w	r0, r4, r6, lsl #2
 8003ce2:	1f05      	subs	r5, r0, #4
 8003ce4:	6808      	ldr	r0, [r1, #0]
 8003ce6:	6802      	ldr	r2, [r0, #0]
 8003ce8:	6891      	ldr	r1, [r2, #8]
 8003cea:	eb01 0086 	add.w	r0, r1, r6, lsl #2
 8003cee:	1f06      	subs	r6, r0, #4
 8003cf0:	42a5      	cmp	r5, r4
 8003cf2:	d313      	bcc.n	8003d1c <forward_sigmoid+0x5c>
 8003cf4:	ed95 0a00 	vldr	s0, [r5]
 8003cf8:	eeb1 0a40 	vneg.f32	s0, s0
 8003cfc:	f009 fcd0 	bl	800d6a0 <expf>
 8003d00:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003d04:	ee70 0a20 	vadd.f32	s1, s0, s1
 8003d08:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003d0c:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8003d10:	ed86 0a00 	vstr	s0, [r6]
 8003d14:	1f2d      	subs	r5, r5, #4
 8003d16:	1f36      	subs	r6, r6, #4
 8003d18:	42a5      	cmp	r5, r4
 8003d1a:	d2eb      	bcs.n	8003cf4 <forward_sigmoid+0x34>
 8003d1c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003d20 <forward_hard_sigmoid>:
 8003d20:	b430      	push	{r4, r5}
 8003d22:	6940      	ldr	r0, [r0, #20]
 8003d24:	6802      	ldr	r2, [r0, #0]
 8003d26:	6811      	ldr	r1, [r2, #0]
 8003d28:	68d2      	ldr	r2, [r2, #12]
 8003d2a:	680b      	ldr	r3, [r1, #0]
 8003d2c:	685c      	ldr	r4, [r3, #4]
 8003d2e:	6898      	ldr	r0, [r3, #8]
 8003d30:	68d9      	ldr	r1, [r3, #12]
 8003d32:	4344      	muls	r4, r0
 8003d34:	6918      	ldr	r0, [r3, #16]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	434c      	muls	r4, r1
 8003d3a:	4344      	muls	r4, r0
 8003d3c:	6898      	ldr	r0, [r3, #8]
 8003d3e:	6813      	ldr	r3, [r2, #0]
 8003d40:	681d      	ldr	r5, [r3, #0]
 8003d42:	68aa      	ldr	r2, [r5, #8]
 8003d44:	eb00 0184 	add.w	r1, r0, r4, lsl #2
 8003d48:	eb02 0384 	add.w	r3, r2, r4, lsl #2
 8003d4c:	1f09      	subs	r1, r1, #4
 8003d4e:	1f1a      	subs	r2, r3, #4
 8003d50:	4281      	cmp	r1, r0
 8003d52:	d321      	bcc.n	8003d98 <forward_hard_sigmoid+0x78>
 8003d54:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003d58:	eddf 0a12 	vldr	s1, [pc, #72]	; 8003da4 <.text_36>
 8003d5c:	edd1 1a00 	vldr	s3, [r1]
 8003d60:	ed9f 2a11 	vldr	s4, [pc, #68]	; 8003da8 <.text_37>
 8003d64:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8003d68:	ee01 1a82 	vmla.f32	s2, s3, s4
 8003d6c:	eeb4 1a60 	vcmp.f32	s2, s1
 8003d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d74:	da08      	bge.n	8003d88 <forward_hard_sigmoid+0x68>
 8003d76:	eeb5 1a40 	vcmp.f32	s2, #0.0
 8003d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d7e:	d505      	bpl.n	8003d8c <forward_hard_sigmoid+0x6c>
 8003d80:	ed9f 1a06 	vldr	s2, [pc, #24]	; 8003d9c <.text_34>
 8003d84:	e002      	b.n	8003d8c <forward_hard_sigmoid+0x6c>
 8003d86:	bf00      	nop
 8003d88:	eeb0 1a40 	vmov.f32	s2, s0
 8003d8c:	ed82 1a00 	vstr	s2, [r2]
 8003d90:	1f09      	subs	r1, r1, #4
 8003d92:	1f12      	subs	r2, r2, #4
 8003d94:	4281      	cmp	r1, r0
 8003d96:	d2e1      	bcs.n	8003d5c <forward_hard_sigmoid+0x3c>
 8003d98:	bc30      	pop	{r4, r5}
 8003d9a:	4770      	bx	lr

08003d9c <.text_34>:
 8003d9c:	00000000 	.word	0x00000000

08003da0 <.text_35>:
 8003da0:	00000001 	.word	0x00000001

08003da4 <.text_36>:
 8003da4:	3f800001 	.word	0x3f800001

08003da8 <.text_37>:
 8003da8:	3e4ccccd 	.word	0x3e4ccccd

08003dac <forward_exp>:
 8003dac:	b570      	push	{r4, r5, r6, lr}
 8003dae:	6940      	ldr	r0, [r0, #20]
 8003db0:	6802      	ldr	r2, [r0, #0]
 8003db2:	6811      	ldr	r1, [r2, #0]
 8003db4:	680b      	ldr	r3, [r1, #0]
 8003db6:	685e      	ldr	r6, [r3, #4]
 8003db8:	6898      	ldr	r0, [r3, #8]
 8003dba:	68d9      	ldr	r1, [r3, #12]
 8003dbc:	4346      	muls	r6, r0
 8003dbe:	6918      	ldr	r0, [r3, #16]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	689c      	ldr	r4, [r3, #8]
 8003dc4:	434e      	muls	r6, r1
 8003dc6:	4346      	muls	r6, r0
 8003dc8:	68d1      	ldr	r1, [r2, #12]
 8003dca:	eb04 0086 	add.w	r0, r4, r6, lsl #2
 8003dce:	1f05      	subs	r5, r0, #4
 8003dd0:	6808      	ldr	r0, [r1, #0]
 8003dd2:	6802      	ldr	r2, [r0, #0]
 8003dd4:	6891      	ldr	r1, [r2, #8]
 8003dd6:	eb01 0086 	add.w	r0, r1, r6, lsl #2
 8003dda:	1f06      	subs	r6, r0, #4
 8003ddc:	42a5      	cmp	r5, r4
 8003dde:	d309      	bcc.n	8003df4 <forward_exp+0x48>
 8003de0:	ed95 0a00 	vldr	s0, [r5]
 8003de4:	f009 fc5c 	bl	800d6a0 <expf>
 8003de8:	ed86 0a00 	vstr	s0, [r6]
 8003dec:	1f2d      	subs	r5, r5, #4
 8003dee:	1f36      	subs	r6, r6, #4
 8003df0:	42a5      	cmp	r5, r4
 8003df2:	d2f5      	bcs.n	8003de0 <forward_exp+0x34>
 8003df4:	bd70      	pop	{r4, r5, r6, pc}
	...

08003df8 <forward_sqrt>:
 8003df8:	b570      	push	{r4, r5, r6, lr}
 8003dfa:	6940      	ldr	r0, [r0, #20]
 8003dfc:	6802      	ldr	r2, [r0, #0]
 8003dfe:	6811      	ldr	r1, [r2, #0]
 8003e00:	680b      	ldr	r3, [r1, #0]
 8003e02:	685e      	ldr	r6, [r3, #4]
 8003e04:	6898      	ldr	r0, [r3, #8]
 8003e06:	68d9      	ldr	r1, [r3, #12]
 8003e08:	4346      	muls	r6, r0
 8003e0a:	6918      	ldr	r0, [r3, #16]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	689c      	ldr	r4, [r3, #8]
 8003e10:	434e      	muls	r6, r1
 8003e12:	4346      	muls	r6, r0
 8003e14:	68d1      	ldr	r1, [r2, #12]
 8003e16:	eb04 0086 	add.w	r0, r4, r6, lsl #2
 8003e1a:	1f05      	subs	r5, r0, #4
 8003e1c:	6808      	ldr	r0, [r1, #0]
 8003e1e:	6802      	ldr	r2, [r0, #0]
 8003e20:	6891      	ldr	r1, [r2, #8]
 8003e22:	eb01 0086 	add.w	r0, r1, r6, lsl #2
 8003e26:	1f06      	subs	r6, r0, #4
 8003e28:	42a5      	cmp	r5, r4
 8003e2a:	d309      	bcc.n	8003e40 <forward_sqrt+0x48>
 8003e2c:	ed95 0a00 	vldr	s0, [r5]
 8003e30:	f000 fd40 	bl	80048b4 <ai_math_sqrt>
 8003e34:	ed86 0a00 	vstr	s0, [r6]
 8003e38:	1f2d      	subs	r5, r5, #4
 8003e3a:	1f36      	subs	r6, r6, #4
 8003e3c:	42a5      	cmp	r5, r4
 8003e3e:	d2f5      	bcs.n	8003e2c <forward_sqrt+0x34>
 8003e40:	bd70      	pop	{r4, r5, r6, pc}
	...

08003e44 <forward_soft_plus>:
 8003e44:	b570      	push	{r4, r5, r6, lr}
 8003e46:	6940      	ldr	r0, [r0, #20]
 8003e48:	6802      	ldr	r2, [r0, #0]
 8003e4a:	6811      	ldr	r1, [r2, #0]
 8003e4c:	680b      	ldr	r3, [r1, #0]
 8003e4e:	685e      	ldr	r6, [r3, #4]
 8003e50:	6898      	ldr	r0, [r3, #8]
 8003e52:	68d9      	ldr	r1, [r3, #12]
 8003e54:	4346      	muls	r6, r0
 8003e56:	6918      	ldr	r0, [r3, #16]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	689c      	ldr	r4, [r3, #8]
 8003e5c:	434e      	muls	r6, r1
 8003e5e:	4346      	muls	r6, r0
 8003e60:	68d1      	ldr	r1, [r2, #12]
 8003e62:	eb04 0086 	add.w	r0, r4, r6, lsl #2
 8003e66:	1f05      	subs	r5, r0, #4
 8003e68:	6808      	ldr	r0, [r1, #0]
 8003e6a:	6802      	ldr	r2, [r0, #0]
 8003e6c:	6891      	ldr	r1, [r2, #8]
 8003e6e:	eb01 0086 	add.w	r0, r1, r6, lsl #2
 8003e72:	1f06      	subs	r6, r0, #4
 8003e74:	42a5      	cmp	r5, r4
 8003e76:	d30f      	bcc.n	8003e98 <forward_soft_plus+0x54>
 8003e78:	ed95 0a00 	vldr	s0, [r5]
 8003e7c:	f009 fc10 	bl	800d6a0 <expf>
 8003e80:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003e84:	ee30 0a20 	vadd.f32	s0, s0, s1
 8003e88:	f009 fc84 	bl	800d794 <logf>
 8003e8c:	ed86 0a00 	vstr	s0, [r6]
 8003e90:	1f2d      	subs	r5, r5, #4
 8003e92:	1f36      	subs	r6, r6, #4
 8003e94:	42a5      	cmp	r5, r4
 8003e96:	d2ef      	bcs.n	8003e78 <forward_soft_plus+0x34>
 8003e98:	bd70      	pop	{r4, r5, r6, pc}
	...

08003e9c <forward_soft_sign>:
 8003e9c:	b430      	push	{r4, r5}
 8003e9e:	6940      	ldr	r0, [r0, #20]
 8003ea0:	6802      	ldr	r2, [r0, #0]
 8003ea2:	6811      	ldr	r1, [r2, #0]
 8003ea4:	68d2      	ldr	r2, [r2, #12]
 8003ea6:	680b      	ldr	r3, [r1, #0]
 8003ea8:	685c      	ldr	r4, [r3, #4]
 8003eaa:	6898      	ldr	r0, [r3, #8]
 8003eac:	68d9      	ldr	r1, [r3, #12]
 8003eae:	4344      	muls	r4, r0
 8003eb0:	6918      	ldr	r0, [r3, #16]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	434c      	muls	r4, r1
 8003eb6:	4344      	muls	r4, r0
 8003eb8:	6898      	ldr	r0, [r3, #8]
 8003eba:	6813      	ldr	r3, [r2, #0]
 8003ebc:	681d      	ldr	r5, [r3, #0]
 8003ebe:	68aa      	ldr	r2, [r5, #8]
 8003ec0:	eb00 0184 	add.w	r1, r0, r4, lsl #2
 8003ec4:	eb02 0384 	add.w	r3, r2, r4, lsl #2
 8003ec8:	1f09      	subs	r1, r1, #4
 8003eca:	1f1a      	subs	r2, r3, #4
 8003ecc:	4281      	cmp	r1, r0
 8003ece:	d30f      	bcc.n	8003ef0 <forward_soft_sign+0x54>
 8003ed0:	ed91 0a00 	vldr	s0, [r1]
 8003ed4:	eef0 0ac0 	vabs.f32	s1, s0
 8003ed8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003edc:	ee70 0a81 	vadd.f32	s1, s1, s2
 8003ee0:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8003ee4:	ed82 0a00 	vstr	s0, [r2]
 8003ee8:	1f09      	subs	r1, r1, #4
 8003eea:	1f12      	subs	r2, r2, #4
 8003eec:	4281      	cmp	r1, r0
 8003eee:	d2ef      	bcs.n	8003ed0 <forward_soft_sign+0x34>
 8003ef0:	bc30      	pop	{r4, r5}
 8003ef2:	4770      	bx	lr

08003ef4 <forward_tanh>:
 8003ef4:	b570      	push	{r4, r5, r6, lr}
 8003ef6:	6940      	ldr	r0, [r0, #20]
 8003ef8:	6802      	ldr	r2, [r0, #0]
 8003efa:	6811      	ldr	r1, [r2, #0]
 8003efc:	680b      	ldr	r3, [r1, #0]
 8003efe:	685e      	ldr	r6, [r3, #4]
 8003f00:	6898      	ldr	r0, [r3, #8]
 8003f02:	68d9      	ldr	r1, [r3, #12]
 8003f04:	4346      	muls	r6, r0
 8003f06:	6918      	ldr	r0, [r3, #16]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	689c      	ldr	r4, [r3, #8]
 8003f0c:	434e      	muls	r6, r1
 8003f0e:	4346      	muls	r6, r0
 8003f10:	68d1      	ldr	r1, [r2, #12]
 8003f12:	eb04 0086 	add.w	r0, r4, r6, lsl #2
 8003f16:	1f05      	subs	r5, r0, #4
 8003f18:	6808      	ldr	r0, [r1, #0]
 8003f1a:	6802      	ldr	r2, [r0, #0]
 8003f1c:	6891      	ldr	r1, [r2, #8]
 8003f1e:	eb01 0086 	add.w	r0, r1, r6, lsl #2
 8003f22:	1f06      	subs	r6, r0, #4
 8003f24:	42a5      	cmp	r5, r4
 8003f26:	d309      	bcc.n	8003f3c <forward_tanh+0x48>
 8003f28:	ed95 0a00 	vldr	s0, [r5]
 8003f2c:	f009 fb66 	bl	800d5fc <tanhf>
 8003f30:	ed86 0a00 	vstr	s0, [r6]
 8003f34:	1f2d      	subs	r5, r5, #4
 8003f36:	1f36      	subs	r6, r6, #4
 8003f38:	42a5      	cmp	r5, r4
 8003f3a:	d2f5      	bcs.n	8003f28 <forward_tanh+0x34>
 8003f3c:	bd70      	pop	{r4, r5, r6, pc}

08003f3e <forward_sm>:
 8003f3e:	b570      	push	{r4, r5, r6, lr}
 8003f40:	b082      	sub	sp, #8
 8003f42:	6940      	ldr	r0, [r0, #20]
 8003f44:	6800      	ldr	r0, [r0, #0]
 8003f46:	6801      	ldr	r1, [r0, #0]
 8003f48:	68c0      	ldr	r0, [r0, #12]
 8003f4a:	680c      	ldr	r4, [r1, #0]
 8003f4c:	6805      	ldr	r5, [r0, #0]
 8003f4e:	68a2      	ldr	r2, [r4, #8]
 8003f50:	68a8      	ldr	r0, [r5, #8]
 8003f52:	9001      	str	r0, [sp, #4]
 8003f54:	9200      	str	r2, [sp, #0]
 8003f56:	4613      	mov	r3, r2
 8003f58:	6866      	ldr	r6, [r4, #4]
 8003f5a:	68e1      	ldr	r1, [r4, #12]
 8003f5c:	6920      	ldr	r0, [r4, #16]
 8003f5e:	6824      	ldr	r4, [r4, #0]
 8003f60:	4372      	muls	r2, r6
 8003f62:	434a      	muls	r2, r1
 8003f64:	4342      	muls	r2, r0
 8003f66:	6828      	ldr	r0, [r5, #0]
 8003f68:	68a1      	ldr	r1, [r4, #8]
 8003f6a:	6880      	ldr	r0, [r0, #8]
 8003f6c:	f7ff fa52 	bl	8003414 <nl_func_sm_array_f32>
 8003f70:	b002      	add	sp, #8
 8003f72:	bd70      	pop	{r4, r5, r6, pc}

08003f74 <forward_hardmax>:
 8003f74:	b430      	push	{r4, r5}
 8003f76:	6941      	ldr	r1, [r0, #20]
 8003f78:	680c      	ldr	r4, [r1, #0]
 8003f7a:	6980      	ldr	r0, [r0, #24]
 8003f7c:	6822      	ldr	r2, [r4, #0]
 8003f7e:	6883      	ldr	r3, [r0, #8]
 8003f80:	6811      	ldr	r1, [r2, #0]
 8003f82:	6808      	ldr	r0, [r1, #0]
 8003f84:	1d0a      	adds	r2, r1, #4
 8003f86:	6881      	ldr	r1, [r0, #8]
 8003f88:	68e0      	ldr	r0, [r4, #12]
 8003f8a:	6804      	ldr	r4, [r0, #0]
 8003f8c:	6825      	ldr	r5, [r4, #0]
 8003f8e:	68a8      	ldr	r0, [r5, #8]
 8003f90:	bc30      	pop	{r4, r5}
 8003f92:	f7ff bb69 	b.w	8003668 <nl_func_hardmax_array_f32>
	...

08003f98 <ai_array_fmt_name>:
 8003f98:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8003f9c:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 8003fa0:	d062      	beq.n	8004068 <ai_array_fmt_name+0xd0>
 8003fa2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003fa6:	1a89      	subs	r1, r1, r2
 8003fa8:	f000 8094 	beq.w	80040d4 <ai_array_fmt_name+0x13c>
 8003fac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fb0:	1a89      	subs	r1, r1, r2
 8003fb2:	d071      	beq.n	8004098 <ai_array_fmt_name+0x100>
 8003fb4:	1a89      	subs	r1, r1, r2
 8003fb6:	d063      	beq.n	8004080 <ai_array_fmt_name+0xe8>
 8003fb8:	1fc9      	subs	r1, r1, #7
 8003fba:	f000 808e 	beq.w	80040da <ai_array_fmt_name+0x142>
 8003fbe:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8003fc2:	1a89      	subs	r1, r1, r2
 8003fc4:	d05f      	beq.n	8004086 <ai_array_fmt_name+0xee>
 8003fc6:	390f      	subs	r1, #15
 8003fc8:	f000 808a 	beq.w	80040e0 <ai_array_fmt_name+0x148>
 8003fcc:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8003fd0:	1a89      	subs	r1, r1, r2
 8003fd2:	d05b      	beq.n	800408c <ai_array_fmt_name+0xf4>
 8003fd4:	391f      	subs	r1, #31
 8003fd6:	f000 8086 	beq.w	80040e6 <ai_array_fmt_name+0x14e>
 8003fda:	f640 72e1 	movw	r2, #4065	; 0xfe1
 8003fde:	1a89      	subs	r1, r1, r2
 8003fe0:	d057      	beq.n	8004092 <ai_array_fmt_name+0xfa>
 8003fe2:	f8df 25d4 	ldr.w	r2, [pc, #1492]	; 80045b8 <.text_15>
 8003fe6:	1a89      	subs	r1, r1, r2
 8003fe8:	f000 808f 	beq.w	800410a <ai_array_fmt_name+0x172>
 8003fec:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8003ff0:	1a89      	subs	r1, r1, r2
 8003ff2:	f000 8087 	beq.w	8004104 <ai_array_fmt_name+0x16c>
 8003ff6:	f8df 25c4 	ldr.w	r2, [pc, #1476]	; 80045bc <.text_16>
 8003ffa:	1a89      	subs	r1, r1, r2
 8003ffc:	d05e      	beq.n	80040bc <ai_array_fmt_name+0x124>
 8003ffe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004002:	1a89      	subs	r1, r1, r2
 8004004:	d057      	beq.n	80040b6 <ai_array_fmt_name+0x11e>
 8004006:	1a89      	subs	r1, r1, r2
 8004008:	d049      	beq.n	800409e <ai_array_fmt_name+0x106>
 800400a:	1fc9      	subs	r1, r1, #7
 800400c:	d059      	beq.n	80040c2 <ai_array_fmt_name+0x12a>
 800400e:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8004012:	1a89      	subs	r1, r1, r2
 8004014:	d046      	beq.n	80040a4 <ai_array_fmt_name+0x10c>
 8004016:	390f      	subs	r1, #15
 8004018:	d056      	beq.n	80040c8 <ai_array_fmt_name+0x130>
 800401a:	f240 72f1 	movw	r2, #2033	; 0x7f1
 800401e:	1a89      	subs	r1, r1, r2
 8004020:	d043      	beq.n	80040aa <ai_array_fmt_name+0x112>
 8004022:	391f      	subs	r1, #31
 8004024:	d053      	beq.n	80040ce <ai_array_fmt_name+0x136>
 8004026:	f640 72e1 	movw	r2, #4065	; 0xfe1
 800402a:	1a89      	subs	r1, r1, r2
 800402c:	d040      	beq.n	80040b0 <ai_array_fmt_name+0x118>
 800402e:	f8df 2588 	ldr.w	r2, [pc, #1416]	; 80045b8 <.text_15>
 8004032:	1a89      	subs	r1, r1, r2
 8004034:	d063      	beq.n	80040fe <ai_array_fmt_name+0x166>
 8004036:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 800403a:	1a89      	subs	r1, r1, r2
 800403c:	d05c      	beq.n	80040f8 <ai_array_fmt_name+0x160>
 800403e:	f8df 2580 	ldr.w	r2, [pc, #1408]	; 80045c0 <.text_17>
 8004042:	1a89      	subs	r1, r1, r2
 8004044:	d019      	beq.n	800407a <ai_array_fmt_name+0xe2>
 8004046:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800404a:	1a89      	subs	r1, r1, r2
 800404c:	d00f      	beq.n	800406e <ai_array_fmt_name+0xd6>
 800404e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004052:	1a89      	subs	r1, r1, r2
 8004054:	d00e      	beq.n	8004074 <ai_array_fmt_name+0xdc>
 8004056:	f8df 256c 	ldr.w	r2, [pc, #1388]	; 80045c4 <.text_18>
 800405a:	1a89      	subs	r1, r1, r2
 800405c:	d049      	beq.n	80040f2 <ai_array_fmt_name+0x15a>
 800405e:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8004062:	1a89      	subs	r1, r1, r2
 8004064:	d042      	beq.n	80040ec <ai_array_fmt_name+0x154>
 8004066:	e053      	b.n	8004110 <ai_array_fmt_name+0x178>
 8004068:	f20f 6074 	addw	r0, pc, #1652	; 0x674
 800406c:	4770      	bx	lr
 800406e:	f20f 607c 	addw	r0, pc, #1660	; 0x67c
 8004072:	4770      	bx	lr
 8004074:	f20f 6080 	addw	r0, pc, #1664	; 0x680
 8004078:	4770      	bx	lr
 800407a:	f20f 6088 	addw	r0, pc, #1672	; 0x688
 800407e:	4770      	bx	lr
 8004080:	f20f 608c 	addw	r0, pc, #1676	; 0x68c
 8004084:	4770      	bx	lr
 8004086:	f20f 6090 	addw	r0, pc, #1680	; 0x690
 800408a:	4770      	bx	lr
 800408c:	f20f 6090 	addw	r0, pc, #1680	; 0x690
 8004090:	4770      	bx	lr
 8004092:	f20f 6094 	addw	r0, pc, #1684	; 0x694
 8004096:	4770      	bx	lr
 8004098:	f20f 6094 	addw	r0, pc, #1684	; 0x694
 800409c:	4770      	bx	lr
 800409e:	f20f 6098 	addw	r0, pc, #1688	; 0x698
 80040a2:	4770      	bx	lr
 80040a4:	f20f 6098 	addw	r0, pc, #1688	; 0x698
 80040a8:	4770      	bx	lr
 80040aa:	f20f 609c 	addw	r0, pc, #1692	; 0x69c
 80040ae:	4770      	bx	lr
 80040b0:	f20f 609c 	addw	r0, pc, #1692	; 0x69c
 80040b4:	4770      	bx	lr
 80040b6:	f20f 60a0 	addw	r0, pc, #1696	; 0x6a0
 80040ba:	4770      	bx	lr
 80040bc:	f20f 60a0 	addw	r0, pc, #1696	; 0x6a0
 80040c0:	4770      	bx	lr
 80040c2:	f20f 60a4 	addw	r0, pc, #1700	; 0x6a4
 80040c6:	4770      	bx	lr
 80040c8:	f20f 60a4 	addw	r0, pc, #1700	; 0x6a4
 80040cc:	4770      	bx	lr
 80040ce:	f20f 60a8 	addw	r0, pc, #1704	; 0x6a8
 80040d2:	4770      	bx	lr
 80040d4:	f20f 60a8 	addw	r0, pc, #1704	; 0x6a8
 80040d8:	4770      	bx	lr
 80040da:	f20f 60ac 	addw	r0, pc, #1708	; 0x6ac
 80040de:	4770      	bx	lr
 80040e0:	f20f 60ac 	addw	r0, pc, #1708	; 0x6ac
 80040e4:	4770      	bx	lr
 80040e6:	f20f 60b4 	addw	r0, pc, #1716	; 0x6b4
 80040ea:	4770      	bx	lr
 80040ec:	f20f 60b8 	addw	r0, pc, #1720	; 0x6b8
 80040f0:	4770      	bx	lr
 80040f2:	f20f 60c4 	addw	r0, pc, #1732	; 0x6c4
 80040f6:	4770      	bx	lr
 80040f8:	f20f 60cc 	addw	r0, pc, #1740	; 0x6cc
 80040fc:	4770      	bx	lr
 80040fe:	f20f 60d8 	addw	r0, pc, #1752	; 0x6d8
 8004102:	4770      	bx	lr
 8004104:	f20f 60e0 	addw	r0, pc, #1760	; 0x6e0
 8004108:	4770      	bx	lr
 800410a:	f20f 60ec 	addw	r0, pc, #1772	; 0x6ec
 800410e:	4770      	bx	lr
 8004110:	f36f 000d 	bfc	r0, #0, #14
 8004114:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8004118:	2840      	cmp	r0, #64	; 0x40
 800411a:	d009      	beq.n	8004130 <ai_array_fmt_name+0x198>
 800411c:	f8df 14a8 	ldr.w	r1, [pc, #1192]	; 80045c8 <.text_19>
 8004120:	4288      	cmp	r0, r1
 8004122:	d00b      	beq.n	800413c <ai_array_fmt_name+0x1a4>
 8004124:	f8df 14a4 	ldr.w	r1, [pc, #1188]	; 80045cc <.text_20>
 8004128:	4288      	cmp	r0, r1
 800412a:	d004      	beq.n	8004136 <ai_array_fmt_name+0x19e>
 800412c:	a07a      	add	r0, pc, #488	; (adr r0, 8004318 <.text_8>)
 800412e:	4770      	bx	lr
 8004130:	f20f 60d4 	addw	r0, pc, #1748	; 0x6d4
 8004134:	4770      	bx	lr
 8004136:	f20f 60e8 	addw	r0, pc, #1768	; 0x6e8
 800413a:	4770      	bx	lr
 800413c:	f20f 60f4 	addw	r0, pc, #1780	; 0x6f4
 8004140:	4770      	bx	lr

08004142 <ai_array_fmt_exported>:
 8004142:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8004146:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 800414a:	d068      	beq.n	800421e <ai_array_fmt_exported+0xdc>
 800414c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004150:	1a89      	subs	r1, r1, r2
 8004152:	d064      	beq.n	800421e <ai_array_fmt_exported+0xdc>
 8004154:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004158:	1a89      	subs	r1, r1, r2
 800415a:	d062      	beq.n	8004222 <ai_array_fmt_exported+0xe0>
 800415c:	1a89      	subs	r1, r1, r2
 800415e:	d05e      	beq.n	800421e <ai_array_fmt_exported+0xdc>
 8004160:	1fc9      	subs	r1, r1, #7
 8004162:	d05c      	beq.n	800421e <ai_array_fmt_exported+0xdc>
 8004164:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8004168:	1a89      	subs	r1, r1, r2
 800416a:	d058      	beq.n	800421e <ai_array_fmt_exported+0xdc>
 800416c:	390f      	subs	r1, #15
 800416e:	d056      	beq.n	800421e <ai_array_fmt_exported+0xdc>
 8004170:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8004174:	1a89      	subs	r1, r1, r2
 8004176:	d054      	beq.n	8004222 <ai_array_fmt_exported+0xe0>
 8004178:	391f      	subs	r1, #31
 800417a:	d052      	beq.n	8004222 <ai_array_fmt_exported+0xe0>
 800417c:	f640 72e1 	movw	r2, #4065	; 0xfe1
 8004180:	1a89      	subs	r1, r1, r2
 8004182:	d04e      	beq.n	8004222 <ai_array_fmt_exported+0xe0>
 8004184:	f8df 2430 	ldr.w	r2, [pc, #1072]	; 80045b8 <.text_15>
 8004188:	1a89      	subs	r1, r1, r2
 800418a:	d04a      	beq.n	8004222 <ai_array_fmt_exported+0xe0>
 800418c:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8004190:	1a89      	subs	r1, r1, r2
 8004192:	d046      	beq.n	8004222 <ai_array_fmt_exported+0xe0>
 8004194:	f8df 2424 	ldr.w	r2, [pc, #1060]	; 80045bc <.text_16>
 8004198:	1a89      	subs	r1, r1, r2
 800419a:	d040      	beq.n	800421e <ai_array_fmt_exported+0xdc>
 800419c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041a0:	1a89      	subs	r1, r1, r2
 80041a2:	d03e      	beq.n	8004222 <ai_array_fmt_exported+0xe0>
 80041a4:	1a89      	subs	r1, r1, r2
 80041a6:	d03a      	beq.n	800421e <ai_array_fmt_exported+0xdc>
 80041a8:	1fc9      	subs	r1, r1, #7
 80041aa:	d038      	beq.n	800421e <ai_array_fmt_exported+0xdc>
 80041ac:	f240 32f9 	movw	r2, #1017	; 0x3f9
 80041b0:	1a89      	subs	r1, r1, r2
 80041b2:	d034      	beq.n	800421e <ai_array_fmt_exported+0xdc>
 80041b4:	390f      	subs	r1, #15
 80041b6:	d032      	beq.n	800421e <ai_array_fmt_exported+0xdc>
 80041b8:	f240 72f1 	movw	r2, #2033	; 0x7f1
 80041bc:	1a89      	subs	r1, r1, r2
 80041be:	d030      	beq.n	8004222 <ai_array_fmt_exported+0xe0>
 80041c0:	391f      	subs	r1, #31
 80041c2:	d02e      	beq.n	8004222 <ai_array_fmt_exported+0xe0>
 80041c4:	f640 72e1 	movw	r2, #4065	; 0xfe1
 80041c8:	1a89      	subs	r1, r1, r2
 80041ca:	d02a      	beq.n	8004222 <ai_array_fmt_exported+0xe0>
 80041cc:	f8df 23e8 	ldr.w	r2, [pc, #1000]	; 80045b8 <.text_15>
 80041d0:	1a89      	subs	r1, r1, r2
 80041d2:	d026      	beq.n	8004222 <ai_array_fmt_exported+0xe0>
 80041d4:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 80041d8:	1a89      	subs	r1, r1, r2
 80041da:	d022      	beq.n	8004222 <ai_array_fmt_exported+0xe0>
 80041dc:	f8df 23e0 	ldr.w	r2, [pc, #992]	; 80045c0 <.text_17>
 80041e0:	1a89      	subs	r1, r1, r2
 80041e2:	d01e      	beq.n	8004222 <ai_array_fmt_exported+0xe0>
 80041e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041e8:	1a89      	subs	r1, r1, r2
 80041ea:	d018      	beq.n	800421e <ai_array_fmt_exported+0xdc>
 80041ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80041f0:	1a89      	subs	r1, r1, r2
 80041f2:	d016      	beq.n	8004222 <ai_array_fmt_exported+0xe0>
 80041f4:	f8df 23cc 	ldr.w	r2, [pc, #972]	; 80045c4 <.text_18>
 80041f8:	1a89      	subs	r1, r1, r2
 80041fa:	d012      	beq.n	8004222 <ai_array_fmt_exported+0xe0>
 80041fc:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8004200:	1a89      	subs	r1, r1, r2
 8004202:	d00e      	beq.n	8004222 <ai_array_fmt_exported+0xe0>
 8004204:	f36f 000d 	bfc	r0, #0, #14
 8004208:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 800420c:	2840      	cmp	r0, #64	; 0x40
 800420e:	bf1f      	itttt	ne
 8004210:	f8df 33b4 	ldrne.w	r3, [pc, #948]	; 80045c8 <.text_19>
 8004214:	4298      	cmpne	r0, r3
 8004216:	f8df 33b4 	ldrne.w	r3, [pc, #948]	; 80045cc <.text_20>
 800421a:	4298      	cmpne	r0, r3
 800421c:	d101      	bne.n	8004222 <ai_array_fmt_exported+0xe0>
 800421e:	2001      	movs	r0, #1
 8004220:	4770      	bx	lr
 8004222:	2000      	movs	r0, #0
 8004224:	4770      	bx	lr

08004226 <ai_array_fmt_valid>:
 8004226:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 800422a:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 800422e:	d069      	beq.n	8004304 <ai_array_fmt_valid+0xde>
 8004230:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004234:	1a89      	subs	r1, r1, r2
 8004236:	d065      	beq.n	8004304 <ai_array_fmt_valid+0xde>
 8004238:	f44f 7200 	mov.w	r2, #512	; 0x200
 800423c:	1a89      	subs	r1, r1, r2
 800423e:	d061      	beq.n	8004304 <ai_array_fmt_valid+0xde>
 8004240:	1a89      	subs	r1, r1, r2
 8004242:	d05f      	beq.n	8004304 <ai_array_fmt_valid+0xde>
 8004244:	1fc9      	subs	r1, r1, #7
 8004246:	d05d      	beq.n	8004304 <ai_array_fmt_valid+0xde>
 8004248:	f240 32f9 	movw	r2, #1017	; 0x3f9
 800424c:	1a89      	subs	r1, r1, r2
 800424e:	d059      	beq.n	8004304 <ai_array_fmt_valid+0xde>
 8004250:	390f      	subs	r1, #15
 8004252:	d057      	beq.n	8004304 <ai_array_fmt_valid+0xde>
 8004254:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8004258:	1a89      	subs	r1, r1, r2
 800425a:	d053      	beq.n	8004304 <ai_array_fmt_valid+0xde>
 800425c:	391f      	subs	r1, #31
 800425e:	d051      	beq.n	8004304 <ai_array_fmt_valid+0xde>
 8004260:	f640 72e1 	movw	r2, #4065	; 0xfe1
 8004264:	1a89      	subs	r1, r1, r2
 8004266:	d04d      	beq.n	8004304 <ai_array_fmt_valid+0xde>
 8004268:	f8df 234c 	ldr.w	r2, [pc, #844]	; 80045b8 <.text_15>
 800426c:	1a89      	subs	r1, r1, r2
 800426e:	d049      	beq.n	8004304 <ai_array_fmt_valid+0xde>
 8004270:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8004274:	1a89      	subs	r1, r1, r2
 8004276:	d045      	beq.n	8004304 <ai_array_fmt_valid+0xde>
 8004278:	f8df 2340 	ldr.w	r2, [pc, #832]	; 80045bc <.text_16>
 800427c:	1a89      	subs	r1, r1, r2
 800427e:	d041      	beq.n	8004304 <ai_array_fmt_valid+0xde>
 8004280:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004284:	1a89      	subs	r1, r1, r2
 8004286:	d03d      	beq.n	8004304 <ai_array_fmt_valid+0xde>
 8004288:	1a89      	subs	r1, r1, r2
 800428a:	d03b      	beq.n	8004304 <ai_array_fmt_valid+0xde>
 800428c:	1fc9      	subs	r1, r1, #7
 800428e:	d039      	beq.n	8004304 <ai_array_fmt_valid+0xde>
 8004290:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8004294:	1a89      	subs	r1, r1, r2
 8004296:	d035      	beq.n	8004304 <ai_array_fmt_valid+0xde>
 8004298:	390f      	subs	r1, #15
 800429a:	d033      	beq.n	8004304 <ai_array_fmt_valid+0xde>
 800429c:	f240 72f1 	movw	r2, #2033	; 0x7f1
 80042a0:	1a89      	subs	r1, r1, r2
 80042a2:	d02f      	beq.n	8004304 <ai_array_fmt_valid+0xde>
 80042a4:	391f      	subs	r1, #31
 80042a6:	d02d      	beq.n	8004304 <ai_array_fmt_valid+0xde>
 80042a8:	f640 72e1 	movw	r2, #4065	; 0xfe1
 80042ac:	1a89      	subs	r1, r1, r2
 80042ae:	d029      	beq.n	8004304 <ai_array_fmt_valid+0xde>
 80042b0:	f8df 2304 	ldr.w	r2, [pc, #772]	; 80045b8 <.text_15>
 80042b4:	1a89      	subs	r1, r1, r2
 80042b6:	d025      	beq.n	8004304 <ai_array_fmt_valid+0xde>
 80042b8:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 80042bc:	1a89      	subs	r1, r1, r2
 80042be:	d021      	beq.n	8004304 <ai_array_fmt_valid+0xde>
 80042c0:	f8df 22fc 	ldr.w	r2, [pc, #764]	; 80045c0 <.text_17>
 80042c4:	1a89      	subs	r1, r1, r2
 80042c6:	d01d      	beq.n	8004304 <ai_array_fmt_valid+0xde>
 80042c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042cc:	1a89      	subs	r1, r1, r2
 80042ce:	d019      	beq.n	8004304 <ai_array_fmt_valid+0xde>
 80042d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80042d4:	1a89      	subs	r1, r1, r2
 80042d6:	d015      	beq.n	8004304 <ai_array_fmt_valid+0xde>
 80042d8:	f8df 22e8 	ldr.w	r2, [pc, #744]	; 80045c4 <.text_18>
 80042dc:	1a89      	subs	r1, r1, r2
 80042de:	d011      	beq.n	8004304 <ai_array_fmt_valid+0xde>
 80042e0:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 80042e4:	1a89      	subs	r1, r1, r2
 80042e6:	bf1e      	ittt	ne
 80042e8:	f36f 000d 	bfcne	r0, #0, #14
 80042ec:	f040 0040 	orrne.w	r0, r0, #64	; 0x40
 80042f0:	2840      	cmpne	r0, #64	; 0x40
 80042f2:	d007      	beq.n	8004304 <ai_array_fmt_valid+0xde>
 80042f4:	f8df 32d0 	ldr.w	r3, [pc, #720]	; 80045c8 <.text_19>
 80042f8:	4298      	cmp	r0, r3
 80042fa:	bf1c      	itt	ne
 80042fc:	f8df 32cc 	ldrne.w	r3, [pc, #716]	; 80045cc <.text_20>
 8004300:	4298      	cmpne	r0, r3
 8004302:	d101      	bne.n	8004308 <ai_array_fmt_valid+0xe2>
 8004304:	2001      	movs	r0, #1
 8004306:	4770      	bx	lr
 8004308:	2000      	movs	r0, #0
 800430a:	4770      	bx	lr

0800430c <ai_array_fmt_get_formats>:
 800430c:	f8df 12c0 	ldr.w	r1, [pc, #704]	; 80045d0 <.text_21>
 8004310:	6001      	str	r1, [r0, #0]
 8004312:	201c      	movs	r0, #28
 8004314:	4770      	bx	lr
	...

08004318 <.text_8>:
 8004318:	00000000 	.word	0x00000000

0800431c <ai_buffer_fmt_name>:
 800431c:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8004320:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 8004324:	d022      	beq.n	800436c <ai_buffer_fmt_name+0x50>
 8004326:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800432a:	1a89      	subs	r1, r1, r2
 800432c:	d039      	beq.n	80043a2 <ai_buffer_fmt_name+0x86>
 800432e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004332:	1a89      	subs	r1, r1, r2
 8004334:	d020      	beq.n	8004378 <ai_buffer_fmt_name+0x5c>
 8004336:	1fc9      	subs	r1, r1, #7
 8004338:	d036      	beq.n	80043a8 <ai_buffer_fmt_name+0x8c>
 800433a:	f240 32f9 	movw	r2, #1017	; 0x3f9
 800433e:	1a89      	subs	r1, r1, r2
 8004340:	d01d      	beq.n	800437e <ai_buffer_fmt_name+0x62>
 8004342:	390f      	subs	r1, #15
 8004344:	d033      	beq.n	80043ae <ai_buffer_fmt_name+0x92>
 8004346:	4aa3      	ldr	r2, [pc, #652]	; (80045d4 <.text_22>)
 8004348:	1a89      	subs	r1, r1, r2
 800434a:	d021      	beq.n	8004390 <ai_buffer_fmt_name+0x74>
 800434c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004350:	1a89      	subs	r1, r1, r2
 8004352:	d017      	beq.n	8004384 <ai_buffer_fmt_name+0x68>
 8004354:	1fc9      	subs	r1, r1, #7
 8004356:	d01e      	beq.n	8004396 <ai_buffer_fmt_name+0x7a>
 8004358:	f240 32f9 	movw	r2, #1017	; 0x3f9
 800435c:	1a89      	subs	r1, r1, r2
 800435e:	d014      	beq.n	800438a <ai_buffer_fmt_name+0x6e>
 8004360:	390f      	subs	r1, #15
 8004362:	d01b      	beq.n	800439c <ai_buffer_fmt_name+0x80>
 8004364:	4a9c      	ldr	r2, [pc, #624]	; (80045d8 <.text_23>)
 8004366:	1a89      	subs	r1, r1, r2
 8004368:	d003      	beq.n	8004372 <ai_buffer_fmt_name+0x56>
 800436a:	e023      	b.n	80043b4 <ai_buffer_fmt_name+0x98>
 800436c:	f20f 3070 	addw	r0, pc, #880	; 0x370
 8004370:	4770      	bx	lr
 8004372:	f20f 3078 	addw	r0, pc, #888	; 0x378
 8004376:	4770      	bx	lr
 8004378:	f20f 3094 	addw	r0, pc, #916	; 0x394
 800437c:	4770      	bx	lr
 800437e:	f20f 3098 	addw	r0, pc, #920	; 0x398
 8004382:	4770      	bx	lr
 8004384:	f20f 30b0 	addw	r0, pc, #944	; 0x3b0
 8004388:	4770      	bx	lr
 800438a:	f20f 30b4 	addw	r0, pc, #948	; 0x3b4
 800438e:	4770      	bx	lr
 8004390:	f20f 30cc 	addw	r0, pc, #972	; 0x3cc
 8004394:	4770      	bx	lr
 8004396:	f20f 30d0 	addw	r0, pc, #976	; 0x3d0
 800439a:	4770      	bx	lr
 800439c:	f20f 30d0 	addw	r0, pc, #976	; 0x3d0
 80043a0:	4770      	bx	lr
 80043a2:	f20f 30dc 	addw	r0, pc, #988	; 0x3dc
 80043a6:	4770      	bx	lr
 80043a8:	f20f 30dc 	addw	r0, pc, #988	; 0x3dc
 80043ac:	4770      	bx	lr
 80043ae:	f20f 30e0 	addw	r0, pc, #992	; 0x3e0
 80043b2:	4770      	bx	lr
 80043b4:	0b80      	lsrs	r0, r0, #14
 80043b6:	0380      	lsls	r0, r0, #14
 80043b8:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 80043bc:	2840      	cmp	r0, #64	; 0x40
 80043be:	d007      	beq.n	80043d0 <ai_buffer_fmt_name+0xb4>
 80043c0:	4981      	ldr	r1, [pc, #516]	; (80045c8 <.text_19>)
 80043c2:	4288      	cmp	r0, r1
 80043c4:	d00a      	beq.n	80043dc <ai_buffer_fmt_name+0xc0>
 80043c6:	4981      	ldr	r1, [pc, #516]	; (80045cc <.text_20>)
 80043c8:	4288      	cmp	r0, r1
 80043ca:	d004      	beq.n	80043d6 <ai_buffer_fmt_name+0xba>
 80043cc:	a079      	add	r0, pc, #484	; (adr r0, 80045b4 <.text_14>)
 80043ce:	4770      	bx	lr
 80043d0:	f20f 4074 	addw	r0, pc, #1140	; 0x474
 80043d4:	4770      	bx	lr
 80043d6:	f20f 4088 	addw	r0, pc, #1160	; 0x488
 80043da:	4770      	bx	lr
 80043dc:	f20f 4094 	addw	r0, pc, #1172	; 0x494
 80043e0:	4770      	bx	lr

080043e2 <ai_buffer_fmt_valid>:
 80043e2:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 80043e6:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 80043ea:	d02d      	beq.n	8004448 <ai_buffer_fmt_valid+0x66>
 80043ec:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80043f0:	1a89      	subs	r1, r1, r2
 80043f2:	d029      	beq.n	8004448 <ai_buffer_fmt_valid+0x66>
 80043f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80043f8:	1a89      	subs	r1, r1, r2
 80043fa:	d025      	beq.n	8004448 <ai_buffer_fmt_valid+0x66>
 80043fc:	1fc9      	subs	r1, r1, #7
 80043fe:	d023      	beq.n	8004448 <ai_buffer_fmt_valid+0x66>
 8004400:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8004404:	1a89      	subs	r1, r1, r2
 8004406:	d01f      	beq.n	8004448 <ai_buffer_fmt_valid+0x66>
 8004408:	390f      	subs	r1, #15
 800440a:	d01d      	beq.n	8004448 <ai_buffer_fmt_valid+0x66>
 800440c:	4a71      	ldr	r2, [pc, #452]	; (80045d4 <.text_22>)
 800440e:	1a89      	subs	r1, r1, r2
 8004410:	d01a      	beq.n	8004448 <ai_buffer_fmt_valid+0x66>
 8004412:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004416:	1a89      	subs	r1, r1, r2
 8004418:	d016      	beq.n	8004448 <ai_buffer_fmt_valid+0x66>
 800441a:	1fc9      	subs	r1, r1, #7
 800441c:	d014      	beq.n	8004448 <ai_buffer_fmt_valid+0x66>
 800441e:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8004422:	1a89      	subs	r1, r1, r2
 8004424:	d010      	beq.n	8004448 <ai_buffer_fmt_valid+0x66>
 8004426:	390f      	subs	r1, #15
 8004428:	d00e      	beq.n	8004448 <ai_buffer_fmt_valid+0x66>
 800442a:	4a6b      	ldr	r2, [pc, #428]	; (80045d8 <.text_23>)
 800442c:	1a89      	subs	r1, r1, r2
 800442e:	bf1f      	itttt	ne
 8004430:	0b80      	lsrne	r0, r0, #14
 8004432:	0380      	lslne	r0, r0, #14
 8004434:	f040 0040 	orrne.w	r0, r0, #64	; 0x40
 8004438:	2840      	cmpne	r0, #64	; 0x40
 800443a:	d005      	beq.n	8004448 <ai_buffer_fmt_valid+0x66>
 800443c:	4b62      	ldr	r3, [pc, #392]	; (80045c8 <.text_19>)
 800443e:	4298      	cmp	r0, r3
 8004440:	bf1c      	itt	ne
 8004442:	4b62      	ldrne	r3, [pc, #392]	; (80045cc <.text_20>)
 8004444:	4298      	cmpne	r0, r3
 8004446:	d101      	bne.n	800444c <ai_buffer_fmt_valid+0x6a>
 8004448:	2001      	movs	r0, #1
 800444a:	4770      	bx	lr
 800444c:	2000      	movs	r0, #0
 800444e:	4770      	bx	lr

08004450 <ai_buffer_fmt_get_formats>:
 8004450:	4962      	ldr	r1, [pc, #392]	; (80045dc <.text_24>)
 8004452:	6001      	str	r1, [r0, #0]
 8004454:	200c      	movs	r0, #12
 8004456:	4770      	bx	lr

08004458 <ai_array_to_buffer_fmt>:
 8004458:	4601      	mov	r1, r0
 800445a:	2040      	movs	r0, #64	; 0x40
 800445c:	f3c1 4243 	ubfx	r2, r1, #17, #4
 8004460:	2a02      	cmp	r2, #2
 8004462:	d104      	bne.n	800446e <ai_array_to_buffer_fmt+0x16>
 8004464:	485e      	ldr	r0, [pc, #376]	; (80045e0 <.text_25>)
 8004466:	4008      	ands	r0, r1
 8004468:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
 800446c:	e037      	b.n	80044de <ai_array_to_buffer_fmt+0x86>
 800446e:	f021 427e 	bic.w	r2, r1, #4261412864	; 0xfe000000
 8004472:	4b55      	ldr	r3, [pc, #340]	; (80045c8 <.text_19>)
 8004474:	1ad2      	subs	r2, r2, r3
 8004476:	d02d      	beq.n	80044d4 <ai_array_to_buffer_fmt+0x7c>
 8004478:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800447c:	1ad2      	subs	r2, r2, r3
 800447e:	d01b      	beq.n	80044b8 <ai_array_to_buffer_fmt+0x60>
 8004480:	1fd2      	subs	r2, r2, #7
 8004482:	d029      	beq.n	80044d8 <ai_array_to_buffer_fmt+0x80>
 8004484:	f240 33f9 	movw	r3, #1017	; 0x3f9
 8004488:	1ad2      	subs	r2, r2, r3
 800448a:	d017      	beq.n	80044bc <ai_array_to_buffer_fmt+0x64>
 800448c:	3a0f      	subs	r2, #15
 800448e:	d025      	beq.n	80044dc <ai_array_to_buffer_fmt+0x84>
 8004490:	4b50      	ldr	r3, [pc, #320]	; (80045d4 <.text_22>)
 8004492:	1ad2      	subs	r2, r2, r3
 8004494:	d018      	beq.n	80044c8 <ai_array_to_buffer_fmt+0x70>
 8004496:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800449a:	1ad2      	subs	r2, r2, r3
 800449c:	d010      	beq.n	80044c0 <ai_array_to_buffer_fmt+0x68>
 800449e:	1fd2      	subs	r2, r2, #7
 80044a0:	d014      	beq.n	80044cc <ai_array_to_buffer_fmt+0x74>
 80044a2:	f240 33f9 	movw	r3, #1017	; 0x3f9
 80044a6:	1ad2      	subs	r2, r2, r3
 80044a8:	d00c      	beq.n	80044c4 <ai_array_to_buffer_fmt+0x6c>
 80044aa:	3a0f      	subs	r2, #15
 80044ac:	d010      	beq.n	80044d0 <ai_array_to_buffer_fmt+0x78>
 80044ae:	4b4a      	ldr	r3, [pc, #296]	; (80045d8 <.text_23>)
 80044b0:	1ad2      	subs	r2, r2, r3
 80044b2:	d114      	bne.n	80044de <ai_array_to_buffer_fmt+0x86>
 80044b4:	484b      	ldr	r0, [pc, #300]	; (80045e4 <.text_26>)
 80044b6:	e012      	b.n	80044de <ai_array_to_buffer_fmt+0x86>
 80044b8:	484b      	ldr	r0, [pc, #300]	; (80045e8 <.text_27>)
 80044ba:	e010      	b.n	80044de <ai_array_to_buffer_fmt+0x86>
 80044bc:	484b      	ldr	r0, [pc, #300]	; (80045ec <.text_28>)
 80044be:	e00e      	b.n	80044de <ai_array_to_buffer_fmt+0x86>
 80044c0:	484b      	ldr	r0, [pc, #300]	; (80045f0 <.text_29>)
 80044c2:	e00c      	b.n	80044de <ai_array_to_buffer_fmt+0x86>
 80044c4:	484b      	ldr	r0, [pc, #300]	; (80045f4 <.text_30>)
 80044c6:	e00a      	b.n	80044de <ai_array_to_buffer_fmt+0x86>
 80044c8:	4840      	ldr	r0, [pc, #256]	; (80045cc <.text_20>)
 80044ca:	e008      	b.n	80044de <ai_array_to_buffer_fmt+0x86>
 80044cc:	484a      	ldr	r0, [pc, #296]	; (80045f8 <.text_31>)
 80044ce:	e006      	b.n	80044de <ai_array_to_buffer_fmt+0x86>
 80044d0:	484a      	ldr	r0, [pc, #296]	; (80045fc <.text_32>)
 80044d2:	e004      	b.n	80044de <ai_array_to_buffer_fmt+0x86>
 80044d4:	4618      	mov	r0, r3
 80044d6:	e002      	b.n	80044de <ai_array_to_buffer_fmt+0x86>
 80044d8:	4849      	ldr	r0, [pc, #292]	; (8004600 <.text_33>)
 80044da:	e000      	b.n	80044de <ai_array_to_buffer_fmt+0x86>
 80044dc:	4849      	ldr	r0, [pc, #292]	; (8004604 <.text_34>)
 80044de:	004a      	lsls	r2, r1, #1
 80044e0:	bf4c      	ite	mi
 80044e2:	f04f 4280 	movmi.w	r2, #1073741824	; 0x40000000
 80044e6:	2200      	movpl	r2, #0
 80044e8:	4310      	orrs	r0, r2
 80044ea:	008a      	lsls	r2, r1, #2
 80044ec:	bf4c      	ite	mi
 80044ee:	f04f 5200 	movmi.w	r2, #536870912	; 0x20000000
 80044f2:	2200      	movpl	r2, #0
 80044f4:	4310      	orrs	r0, r2
 80044f6:	0109      	lsls	r1, r1, #4
 80044f8:	bf4c      	ite	mi
 80044fa:	f04f 6100 	movmi.w	r1, #134217728	; 0x8000000
 80044fe:	2100      	movpl	r1, #0
 8004500:	4308      	orrs	r0, r1
 8004502:	4770      	bx	lr

08004504 <ai_buffer_to_array_fmt>:
 8004504:	4602      	mov	r2, r0
 8004506:	f022 407e 	bic.w	r0, r2, #4261412864	; 0xfe000000
 800450a:	3840      	subs	r0, #64	; 0x40
 800450c:	d022      	beq.n	8004554 <ai_buffer_to_array_fmt+0x50>
 800450e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8004512:	1a40      	subs	r0, r0, r1
 8004514:	d030      	beq.n	8004578 <ai_buffer_to_array_fmt+0x74>
 8004516:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800451a:	1a40      	subs	r0, r0, r1
 800451c:	d01e      	beq.n	800455c <ai_buffer_to_array_fmt+0x58>
 800451e:	1fc0      	subs	r0, r0, #7
 8004520:	d02c      	beq.n	800457c <ai_buffer_to_array_fmt+0x78>
 8004522:	f240 31f9 	movw	r1, #1017	; 0x3f9
 8004526:	1a40      	subs	r0, r0, r1
 8004528:	d01a      	beq.n	8004560 <ai_buffer_to_array_fmt+0x5c>
 800452a:	380f      	subs	r0, #15
 800452c:	d028      	beq.n	8004580 <ai_buffer_to_array_fmt+0x7c>
 800452e:	4929      	ldr	r1, [pc, #164]	; (80045d4 <.text_22>)
 8004530:	1a40      	subs	r0, r0, r1
 8004532:	d01b      	beq.n	800456c <ai_buffer_to_array_fmt+0x68>
 8004534:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004538:	1a40      	subs	r0, r0, r1
 800453a:	d013      	beq.n	8004564 <ai_buffer_to_array_fmt+0x60>
 800453c:	1fc0      	subs	r0, r0, #7
 800453e:	d017      	beq.n	8004570 <ai_buffer_to_array_fmt+0x6c>
 8004540:	f240 31f9 	movw	r1, #1017	; 0x3f9
 8004544:	1a40      	subs	r0, r0, r1
 8004546:	d00f      	beq.n	8004568 <ai_buffer_to_array_fmt+0x64>
 8004548:	380f      	subs	r0, #15
 800454a:	d013      	beq.n	8004574 <ai_buffer_to_array_fmt+0x70>
 800454c:	4922      	ldr	r1, [pc, #136]	; (80045d8 <.text_23>)
 800454e:	1a40      	subs	r0, r0, r1
 8004550:	d002      	beq.n	8004558 <ai_buffer_to_array_fmt+0x54>
 8004552:	e017      	b.n	8004584 <ai_buffer_to_array_fmt+0x80>
 8004554:	2040      	movs	r0, #64	; 0x40
 8004556:	e01f      	b.n	8004598 <ai_buffer_to_array_fmt+0x94>
 8004558:	4822      	ldr	r0, [pc, #136]	; (80045e4 <.text_26>)
 800455a:	e01d      	b.n	8004598 <ai_buffer_to_array_fmt+0x94>
 800455c:	4822      	ldr	r0, [pc, #136]	; (80045e8 <.text_27>)
 800455e:	e01b      	b.n	8004598 <ai_buffer_to_array_fmt+0x94>
 8004560:	4822      	ldr	r0, [pc, #136]	; (80045ec <.text_28>)
 8004562:	e019      	b.n	8004598 <ai_buffer_to_array_fmt+0x94>
 8004564:	4822      	ldr	r0, [pc, #136]	; (80045f0 <.text_29>)
 8004566:	e017      	b.n	8004598 <ai_buffer_to_array_fmt+0x94>
 8004568:	4822      	ldr	r0, [pc, #136]	; (80045f4 <.text_30>)
 800456a:	e015      	b.n	8004598 <ai_buffer_to_array_fmt+0x94>
 800456c:	4817      	ldr	r0, [pc, #92]	; (80045cc <.text_20>)
 800456e:	e013      	b.n	8004598 <ai_buffer_to_array_fmt+0x94>
 8004570:	4821      	ldr	r0, [pc, #132]	; (80045f8 <.text_31>)
 8004572:	e011      	b.n	8004598 <ai_buffer_to_array_fmt+0x94>
 8004574:	4821      	ldr	r0, [pc, #132]	; (80045fc <.text_32>)
 8004576:	e00f      	b.n	8004598 <ai_buffer_to_array_fmt+0x94>
 8004578:	4813      	ldr	r0, [pc, #76]	; (80045c8 <.text_19>)
 800457a:	e00d      	b.n	8004598 <ai_buffer_to_array_fmt+0x94>
 800457c:	4820      	ldr	r0, [pc, #128]	; (8004600 <.text_33>)
 800457e:	e00b      	b.n	8004598 <ai_buffer_to_array_fmt+0x94>
 8004580:	4820      	ldr	r0, [pc, #128]	; (8004604 <.text_34>)
 8004582:	e009      	b.n	8004598 <ai_buffer_to_array_fmt+0x94>
 8004584:	f3c2 51c0 	ubfx	r1, r2, #23, #1
 8004588:	f3c2 000d 	ubfx	r0, r2, #0, #14
 800458c:	2900      	cmp	r1, #0
 800458e:	bf14      	ite	ne
 8004590:	f440 0004 	orrne.w	r0, r0, #8650752	; 0x840000
 8004594:	f440 2080 	orreq.w	r0, r0, #262144	; 0x40000
 8004598:	0051      	lsls	r1, r2, #1
 800459a:	bf48      	it	mi
 800459c:	f040 4080 	orrmi.w	r0, r0, #1073741824	; 0x40000000
 80045a0:	0091      	lsls	r1, r2, #2
 80045a2:	bf48      	it	mi
 80045a4:	f040 5000 	orrmi.w	r0, r0, #536870912	; 0x20000000
 80045a8:	0111      	lsls	r1, r2, #4
 80045aa:	bf48      	it	mi
 80045ac:	f040 6000 	orrmi.w	r0, r0, #134217728	; 0x8000000
 80045b0:	4770      	bx	lr
	...

080045b4 <.text_14>:
 80045b4:	00000000 	.word	0x00000000

080045b8 <.text_15>:
 80045b8:	002be80f 	.word	0x002be80f

080045bc <.text_16>:
 80045bc:	003bf7f1 	.word	0x003bf7f1

080045c0 <.text_17>:
 80045c0:	00b9fff1 	.word	0x00b9fff1

080045c4 <.text_18>:
 80045c4:	004df000 	.word	0x004df000

080045c8 <.text_19>:
 80045c8:	00040040 	.word	0x00040040

080045cc <.text_20>:
 80045cc:	00840040 	.word	0x00840040

080045d0 <.text_21>:
 80045d0:	0800f25c 	.word	0x0800f25c

080045d4 <.text_22>:
 80045d4:	007ff7f1 	.word	0x007ff7f1

080045d8 <.text_23>:
 80045d8:	00fe07f1 	.word	0x00fe07f1

080045dc <.text_24>:
 80045dc:	0800f2cc 	.word	0x0800f2cc

080045e0 <.text_25>:
 80045e0:	00803fff 	.word	0x00803fff

080045e4 <.text_26>:
 80045e4:	01821040 	.word	0x01821040

080045e8 <.text_27>:
 80045e8:	00040440 	.word	0x00040440

080045ec <.text_28>:
 80045ec:	00040840 	.word	0x00040840

080045f0 <.text_29>:
 80045f0:	00840440 	.word	0x00840440

080045f4 <.text_30>:
 80045f4:	00840840 	.word	0x00840840

080045f8 <.text_31>:
 80045f8:	00840447 	.word	0x00840447

080045fc <.text_32>:
 80045fc:	0084084f 	.word	0x0084084f

08004600 <.text_33>:
 8004600:	00040447 	.word	0x00040447

08004604 <.text_34>:
 8004604:	0004084f 	.word	0x0004084f

08004608 <ai_array_get_byte_size>:
 8004608:	b909      	cbnz	r1, 800460e <ai_array_get_byte_size+0x6>
 800460a:	2000      	movs	r0, #0
 800460c:	4770      	bx	lr
 800460e:	11c2      	asrs	r2, r0, #7
 8004610:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004614:	f3c0 3382 	ubfx	r3, r0, #14, #3
 8004618:	189b      	adds	r3, r3, r2
 800461a:	4359      	muls	r1, r3
 800461c:	1dc9      	adds	r1, r1, #7
 800461e:	08c9      	lsrs	r1, r1, #3
 8004620:	1543      	asrs	r3, r0, #21
 8004622:	00c9      	lsls	r1, r1, #3
 8004624:	f003 0303 	and.w	r3, r3, #3
 8004628:	ea4f 4c60 	mov.w	ip, r0, asr #17
 800462c:	40d9      	lsrs	r1, r3
 800462e:	f00c 0c0f 	and.w	ip, ip, #15
 8004632:	f1bc 0f04 	cmp.w	ip, #4
 8004636:	d00a      	beq.n	800464e <ai_array_get_byte_size+0x46>
 8004638:	f1bc 0f08 	cmp.w	ip, #8
 800463c:	bf02      	ittt	eq
 800463e:	f3c0 3082 	ubfxeq	r0, r0, #14, #3
 8004642:	1882      	addeq	r2, r0, r2
 8004644:	eb01 2102 	addeq.w	r1, r1, r2, lsl #8
 8004648:	1dc9      	adds	r1, r1, #7
 800464a:	08c8      	lsrs	r0, r1, #3
 800464c:	4770      	bx	lr
 800464e:	f3c0 3082 	ubfx	r0, r0, #14, #3
 8004652:	1882      	adds	r2, r0, r2
 8004654:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 8004658:	1dc9      	adds	r1, r1, #7
 800465a:	08c8      	lsrs	r0, r1, #3
 800465c:	4770      	bx	lr

0800465e <ai_array_get_data_byte_size>:
 800465e:	b909      	cbnz	r1, 8004664 <ai_array_get_data_byte_size+0x6>
 8004660:	2000      	movs	r0, #0
 8004662:	4770      	bx	lr
 8004664:	11c2      	asrs	r2, r0, #7
 8004666:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800466a:	f3c0 3382 	ubfx	r3, r0, #14, #3
 800466e:	189a      	adds	r2, r3, r2
 8004670:	4351      	muls	r1, r2
 8004672:	1dc9      	adds	r1, r1, #7
 8004674:	08c9      	lsrs	r1, r1, #3
 8004676:	1540      	asrs	r0, r0, #21
 8004678:	00c9      	lsls	r1, r1, #3
 800467a:	f000 0003 	and.w	r0, r0, #3
 800467e:	40c1      	lsrs	r1, r0
 8004680:	1dc9      	adds	r1, r1, #7
 8004682:	08c8      	lsrs	r0, r1, #3
 8004684:	4770      	bx	lr

08004686 <ai_array_get_elems_from_size>:
 8004686:	b909      	cbnz	r1, 800468c <ai_array_get_elems_from_size+0x6>
 8004688:	2000      	movs	r0, #0
 800468a:	4770      	bx	lr
 800468c:	1442      	asrs	r2, r0, #17
 800468e:	00c9      	lsls	r1, r1, #3
 8004690:	f002 020f 	and.w	r2, r2, #15
 8004694:	2a04      	cmp	r2, #4
 8004696:	d002      	beq.n	800469e <ai_array_get_elems_from_size+0x18>
 8004698:	2a08      	cmp	r2, #8
 800469a:	d009      	beq.n	80046b0 <ai_array_get_elems_from_size+0x2a>
 800469c:	e010      	b.n	80046c0 <ai_array_get_elems_from_size+0x3a>
 800469e:	11c3      	asrs	r3, r0, #7
 80046a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046a4:	f3c0 3282 	ubfx	r2, r0, #14, #3
 80046a8:	18d2      	adds	r2, r2, r3
 80046aa:	eba1 1102 	sub.w	r1, r1, r2, lsl #4
 80046ae:	e007      	b.n	80046c0 <ai_array_get_elems_from_size+0x3a>
 80046b0:	11c2      	asrs	r2, r0, #7
 80046b2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80046b6:	f3c0 3382 	ubfx	r3, r0, #14, #3
 80046ba:	189a      	adds	r2, r3, r2
 80046bc:	eba1 2102 	sub.w	r1, r1, r2, lsl #8
 80046c0:	1542      	asrs	r2, r0, #21
 80046c2:	f002 0203 	and.w	r2, r2, #3
 80046c6:	4091      	lsls	r1, r2
 80046c8:	1dc9      	adds	r1, r1, #7
 80046ca:	11c2      	asrs	r2, r0, #7
 80046cc:	08c9      	lsrs	r1, r1, #3
 80046ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80046d2:	f3c0 3082 	ubfx	r0, r0, #14, #3
 80046d6:	00c9      	lsls	r1, r1, #3
 80046d8:	1880      	adds	r0, r0, r2
 80046da:	fbb1 f0f0 	udiv	r0, r1, r0
 80046de:	4770      	bx	lr

080046e0 <.text_38>:
 80046e0:	5f544d46 	.word	0x5f544d46
 80046e4:	454e4f4e 	.word	0x454e4f4e
 80046e8:	00000000 	.word	0x00000000

080046ec <.text_39>:
 80046ec:	5f544d46 	.word	0x5f544d46
 80046f0:	414f4c46 	.word	0x414f4c46
 80046f4:	0054      	.short	0x0054
	...

080046f8 <.text_40>:
 80046f8:	5f544d46 	.word	0x5f544d46
 80046fc:	414f4c46 	.word	0x414f4c46
 8004700:	00343654 	.word	0x00343654

08004704 <.text_41>:
 8004704:	5f544d46 	.word	0x5f544d46
 8004708:	414f4c46 	.word	0x414f4c46
 800470c:	00363154 	.word	0x00363154

08004710 <.text_42>:
 8004710:	5f544d46 	.word	0x5f544d46
 8004714:	3855      	.short	0x3855
	...

08004718 <.text_43>:
 8004718:	5f544d46 	.word	0x5f544d46
 800471c:	00363155 	.word	0x00363155

08004720 <.text_44>:
 8004720:	5f544d46 	.word	0x5f544d46
 8004724:	00323355 	.word	0x00323355

08004728 <.text_45>:
 8004728:	5f544d46 	.word	0x5f544d46
 800472c:	00343655 	.word	0x00343655

08004730 <.text_46>:
 8004730:	5f544d46 	.word	0x5f544d46
 8004734:	3455      	.short	0x3455
	...

08004738 <.text_47>:
 8004738:	5f544d46 	.word	0x5f544d46
 800473c:	3853      	.short	0x3853
	...

08004740 <.text_48>:
 8004740:	5f544d46 	.word	0x5f544d46
 8004744:	00363153 	.word	0x00363153

08004748 <.text_49>:
 8004748:	5f544d46 	.word	0x5f544d46
 800474c:	00323353 	.word	0x00323353

08004750 <.text_50>:
 8004750:	5f544d46 	.word	0x5f544d46
 8004754:	00343653 	.word	0x00343653

08004758 <.text_51>:
 8004758:	5f544d46 	.word	0x5f544d46
 800475c:	3453      	.short	0x3453
	...

08004760 <.text_52>:
 8004760:	5f544d46 	.word	0x5f544d46
 8004764:	0051      	.short	0x0051
	...

08004768 <.text_53>:
 8004768:	5f544d46 	.word	0x5f544d46
 800476c:	3751      	.short	0x3751
	...

08004770 <.text_54>:
 8004770:	5f544d46 	.word	0x5f544d46
 8004774:	00353151 	.word	0x00353151

08004778 <.text_55>:
 8004778:	5f544d46 	.word	0x5f544d46
 800477c:	00313351 	.word	0x00313351

08004780 <.text_56>:
 8004780:	5f544d46 	.word	0x5f544d46
 8004784:	5155      	.short	0x5155
	...

08004788 <.text_57>:
 8004788:	5f544d46 	.word	0x5f544d46
 800478c:	00375155 	.word	0x00375155

08004790 <.text_58>:
 8004790:	5f544d46 	.word	0x5f544d46
 8004794:	35315155 	.word	0x35315155
 8004798:	00000000 	.word	0x00000000

0800479c <.text_59>:
 800479c:	5f544d46 	.word	0x5f544d46
 80047a0:	31335155 	.word	0x31335155
 80047a4:	00000000 	.word	0x00000000

080047a8 <.text_60>:
 80047a8:	5f544d46 	.word	0x5f544d46
 80047ac:	3454554c 	.word	0x3454554c
 80047b0:	4f4c465f 	.word	0x4f4c465f
 80047b4:	5441      	.short	0x5441
	...

080047b8 <.text_61>:
 80047b8:	5f544d46 	.word	0x5f544d46
 80047bc:	3854554c 	.word	0x3854554c
 80047c0:	4f4c465f 	.word	0x4f4c465f
 80047c4:	5441      	.short	0x5441
	...

080047c8 <.text_62>:
 80047c8:	5f544d46 	.word	0x5f544d46
 80047cc:	3454554c 	.word	0x3454554c
 80047d0:	3531515f 	.word	0x3531515f
 80047d4:	00000000 	.word	0x00000000

080047d8 <.text_63>:
 80047d8:	5f544d46 	.word	0x5f544d46
 80047dc:	3854554c 	.word	0x3854554c
 80047e0:	3531515f 	.word	0x3531515f
 80047e4:	00000000 	.word	0x00000000

080047e8 <.text_64>:
 80047e8:	5f544d46 	.word	0x5f544d46
 80047ec:	3454554c 	.word	0x3454554c
 80047f0:	3151555f 	.word	0x3151555f
 80047f4:	0035      	.short	0x0035
	...

080047f8 <.text_65>:
 80047f8:	5f544d46 	.word	0x5f544d46
 80047fc:	3854554c 	.word	0x3854554c
 8004800:	3151555f 	.word	0x3151555f
 8004804:	0035      	.short	0x0035
	...

08004808 <.text_66>:
 8004808:	415f4941 	.word	0x415f4941
 800480c:	59415252 	.word	0x59415252
 8004810:	524f465f 	.word	0x524f465f
 8004814:	5f54414d 	.word	0x5f54414d
 8004818:	454e4f4e 	.word	0x454e4f4e
 800481c:	00000000 	.word	0x00000000

08004820 <.text_67>:
 8004820:	415f4941 	.word	0x415f4941
 8004824:	59415252 	.word	0x59415252
 8004828:	524f465f 	.word	0x524f465f
 800482c:	5f54414d 	.word	0x5f54414d
 8004830:	0051      	.short	0x0051
	...

08004834 <.text_68>:
 8004834:	415f4941 	.word	0x415f4941
 8004838:	59415252 	.word	0x59415252
 800483c:	524f465f 	.word	0x524f465f
 8004840:	5f54414d 	.word	0x5f54414d
 8004844:	5155      	.short	0x5155
	...

08004848 <.text_69>:
 8004848:	425f4941 	.word	0x425f4941
 800484c:	45464655 	.word	0x45464655
 8004850:	4f465f52 	.word	0x4f465f52
 8004854:	54414d52 	.word	0x54414d52
 8004858:	4e4f4e5f 	.word	0x4e4f4e5f
 800485c:	0045      	.short	0x0045
	...

08004860 <.text_70>:
 8004860:	425f4941 	.word	0x425f4941
 8004864:	45464655 	.word	0x45464655
 8004868:	4f465f52 	.word	0x4f465f52
 800486c:	54414d52 	.word	0x54414d52
 8004870:	515f      	.short	0x515f
	...

08004874 <.text_71>:
 8004874:	425f4941 	.word	0x425f4941
 8004878:	45464655 	.word	0x45464655
 800487c:	4f465f52 	.word	0x4f465f52
 8004880:	54414d52 	.word	0x54414d52
 8004884:	0051555f 	.word	0x0051555f

08004888 <ai_math_dot_array>:
 8004888:	b530      	push	{r4, r5, lr}
 800488a:	4604      	mov	r4, r0
 800488c:	4608      	mov	r0, r1
 800488e:	b081      	sub	sp, #4
 8004890:	4611      	mov	r1, r2
 8004892:	461a      	mov	r2, r3
 8004894:	2500      	movs	r5, #0
 8004896:	9500      	str	r5, [sp, #0]
 8004898:	466b      	mov	r3, sp
 800489a:	f000 fe43 	bl	8005524 <arm_dot_prod_f32>
 800489e:	ed94 0a00 	vldr	s0, [r4]
 80048a2:	eddd 0a00 	vldr	s1, [sp]
 80048a6:	ee70 0a20 	vadd.f32	s1, s0, s1
 80048aa:	edc4 0a00 	vstr	s1, [r4]
 80048ae:	b001      	add	sp, #4
 80048b0:	bd30      	pop	{r4, r5, pc}
	...

080048b4 <ai_math_sqrt>:
 80048b4:	eef0 0a40 	vmov.f32	s1, s0
 80048b8:	eef5 0a40 	vcmp.f32	s1, #0.0
 80048bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048c0:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8004964 <.text_12>
 80048c4:	db01      	blt.n	80048ca <ai_math_sqrt+0x16>
 80048c6:	eeb1 0ae0 	vsqrt.f32	s0, s1
 80048ca:	4770      	bx	lr

080048cc <ai_math_exp>:
 80048cc:	f008 bee8 	b.w	800d6a0 <expf>

080048d0 <ai_math_pow>:
 80048d0:	f008 bfd6 	b.w	800d880 <powf>

080048d4 <ai_math_tanh>:
 80048d4:	f008 be92 	b.w	800d5fc <tanhf>

080048d8 <ai_math_relu>:
 80048d8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80048dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048e0:	bf48      	it	mi
 80048e2:	ed9f 0a20 	vldrmi	s0, [pc, #128]	; 8004964 <.text_12>
 80048e6:	4770      	bx	lr

080048e8 <ai_math_prelu>:
 80048e8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80048ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048f0:	bf48      	it	mi
 80048f2:	ee20 0a20 	vmulmi.f32	s0, s0, s1
 80048f6:	4770      	bx	lr

080048f8 <ai_math_sigmoid>:
 80048f8:	b500      	push	{lr}
 80048fa:	b081      	sub	sp, #4
 80048fc:	eeb1 0a40 	vneg.f32	s0, s0
 8004900:	f008 fece 	bl	800d6a0 <expf>
 8004904:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8004908:	ee30 0a20 	vadd.f32	s0, s0, s1
 800490c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8004910:	ee81 0a00 	vdiv.f32	s0, s2, s0
 8004914:	b001      	add	sp, #4
 8004916:	bd00      	pop	{pc}

08004918 <ai_math_hard_sigmoid>:
 8004918:	eef0 0a40 	vmov.f32	s1, s0
 800491c:	ed9f 1a12 	vldr	s2, [pc, #72]	; 8004968 <.text_13>
 8004920:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8004924:	ee00 0a81 	vmla.f32	s0, s1, s2
 8004928:	eddf 0a10 	vldr	s1, [pc, #64]	; 800496c <.text_14>
 800492c:	eeb4 0a60 	vcmp.f32	s0, s1
 8004930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004934:	da07      	bge.n	8004946 <ai_math_hard_sigmoid+0x2e>
 8004936:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800493a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800493e:	d504      	bpl.n	800494a <ai_math_hard_sigmoid+0x32>
 8004940:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8004964 <.text_12>
 8004944:	4770      	bx	lr
 8004946:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800494a:	4770      	bx	lr

0800494c <ai_math_sign>:
 800494c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004954:	bfcc      	ite	gt
 8004956:	ed9f 0a06 	vldrgt	s0, [pc, #24]	; 8004970 <.text_15>
 800495a:	ed9f 0a06 	vldrle	s0, [pc, #24]	; 8004974 <.text_16>
 800495e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8004962:	4770      	bx	lr

08004964 <.text_12>:
 8004964:	00000000 	.word	0x00000000

08004968 <.text_13>:
 8004968:	3e4ccccd 	.word	0x3e4ccccd

0800496c <.text_14>:
 800496c:	3f800001 	.word	0x3f800001

08004970 <.text_15>:
 8004970:	00000001 	.word	0x00000001

08004974 <.text_16>:
 8004974:	ffffffff 	.word	0xffffffff

08004978 <ai_sum>:
 8004978:	ee30 0a20 	vadd.f32	s0, s0, s1
 800497c:	4770      	bx	lr

0800497e <ai_sub>:
 800497e:	ee30 0a60 	vsub.f32	s0, s0, s1
 8004982:	4770      	bx	lr

08004984 <ai_mul>:
 8004984:	ee20 0a20 	vmul.f32	s0, s0, s1
 8004988:	4770      	bx	lr

0800498a <ai_div>:
 800498a:	ee80 0a20 	vdiv.f32	s0, s0, s1
 800498e:	4770      	bx	lr

08004990 <ai_max>:
 8004990:	eef4 0a40 	vcmp.f32	s1, s0
 8004994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004998:	bf58      	it	pl
 800499a:	eeb0 0a60 	vmovpl.f32	s0, s1
 800499e:	4770      	bx	lr

080049a0 <ai_min>:
 80049a0:	eeb4 0a60 	vcmp.f32	s0, s1
 80049a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049a8:	bf58      	it	pl
 80049aa:	eeb0 0a60 	vmovpl.f32	s0, s1
 80049ae:	4770      	bx	lr

080049b0 <core_timer_init_>:
 80049b0:	4770      	bx	lr

080049b2 <core_timer_ticks_>:
 80049b2:	2000      	movs	r0, #0
 80049b4:	4770      	bx	lr
	...

080049b8 <core_timer_init>:
 80049b8:	b530      	push	{r4, r5, lr}
 80049ba:	0005      	movs	r5, r0
 80049bc:	b081      	sub	sp, #4
 80049be:	460c      	mov	r4, r1
 80049c0:	d00d      	beq.n	80049de <core_timer_init+0x26>
 80049c2:	4929      	ldr	r1, [pc, #164]	; (8004a68 <.text_12>)
 80049c4:	7808      	ldrb	r0, [r1, #0]
 80049c6:	b118      	cbz	r0, 80049d0 <core_timer_init+0x18>
 80049c8:	2200      	movs	r2, #0
 80049ca:	700a      	strb	r2, [r1, #0]
 80049cc:	f7ff fff0 	bl	80049b0 <core_timer_init_>
 80049d0:	b904      	cbnz	r4, 80049d4 <core_timer_init+0x1c>
 80049d2:	a423      	add	r4, pc, #140	; (adr r4, 8004a60 <.text_10>)
 80049d4:	602c      	str	r4, [r5, #0]
 80049d6:	2000      	movs	r0, #0
 80049d8:	60a8      	str	r0, [r5, #8]
 80049da:	6068      	str	r0, [r5, #4]
 80049dc:	2001      	movs	r0, #1
 80049de:	b001      	add	sp, #4
 80049e0:	bd30      	pop	{r4, r5, pc}

080049e2 <core_timer_reset>:
 80049e2:	b118      	cbz	r0, 80049ec <core_timer_reset+0xa>
 80049e4:	2100      	movs	r1, #0
 80049e6:	6081      	str	r1, [r0, #8]
 80049e8:	6041      	str	r1, [r0, #4]
 80049ea:	2001      	movs	r0, #1
 80049ec:	4770      	bx	lr

080049ee <core_timer_start>:
 80049ee:	b510      	push	{r4, lr}
 80049f0:	0004      	movs	r4, r0
 80049f2:	d101      	bne.n	80049f8 <core_timer_start+0xa>
 80049f4:	2000      	movs	r0, #0
 80049f6:	bd10      	pop	{r4, pc}
 80049f8:	f7ff ffdb 	bl	80049b2 <core_timer_ticks_>
 80049fc:	6060      	str	r0, [r4, #4]
 80049fe:	2001      	movs	r0, #1
 8004a00:	bd10      	pop	{r4, pc}

08004a02 <core_timer_stop>:
 8004a02:	b510      	push	{r4, lr}
 8004a04:	0004      	movs	r4, r0
 8004a06:	d101      	bne.n	8004a0c <core_timer_stop+0xa>
 8004a08:	2000      	movs	r0, #0
 8004a0a:	bd10      	pop	{r4, pc}
 8004a0c:	f7ff ffd1 	bl	80049b2 <core_timer_ticks_>
 8004a10:	68a2      	ldr	r2, [r4, #8]
 8004a12:	6861      	ldr	r1, [r4, #4]
 8004a14:	1880      	adds	r0, r0, r2
 8004a16:	1a40      	subs	r0, r0, r1
 8004a18:	60a0      	str	r0, [r4, #8]
 8004a1a:	bd10      	pop	{r4, pc}

08004a1c <core_timer_main_test_unit>:
 8004a1c:	b500      	push	{lr}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	a112      	add	r1, pc, #72	; (adr r1, 8004a6c <.text_13>)
 8004a22:	4668      	mov	r0, sp
 8004a24:	f7ff ffc8 	bl	80049b8 <core_timer_init>
 8004a28:	f7ff ffc3 	bl	80049b2 <core_timer_ticks_>
 8004a2c:	9001      	str	r0, [sp, #4]
 8004a2e:	4668      	mov	r0, sp
 8004a30:	f7ff ffe7 	bl	8004a02 <core_timer_stop>
 8004a34:	ed9d 0a02 	vldr	s0, [sp, #8]
 8004a38:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8004a3c:	eddf 0a09 	vldr	s1, [pc, #36]	; 8004a64 <.text_11>
 8004a40:	ee60 0a20 	vmul.f32	s1, s0, s1
 8004a44:	ee10 0a90 	vmov	r0, s1
 8004a48:	f000 fa36 	bl	8004eb8 <__aeabi_f2d>
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	4602      	mov	r2, r0
 8004a50:	f8dd 1000 	ldr.w	r1, [sp]
 8004a54:	a009      	add	r0, pc, #36	; (adr r0, 8004a7c <.text_14>)
 8004a56:	f007 fee9 	bl	800c82c <iprintf>
 8004a5a:	2000      	movs	r0, #0
 8004a5c:	b003      	add	sp, #12
 8004a5e:	bd00      	pop	{pc}

08004a60 <.text_10>:
 8004a60:	00000000 	.word	0x00000000

08004a64 <.text_11>:
 8004a64:	3a83126f 	.word	0x3a83126f

08004a68 <.text_12>:
 8004a68:	20000004 	.word	0x20000004

08004a6c <.text_13>:
 8004a6c:	6d617845 	.word	0x6d617845
 8004a70:	20656c70 	.word	0x20656c70
 8004a74:	656d6954 	.word	0x656d6954
 8004a78:	0072      	.short	0x0072
	...

08004a7c <.text_14>:
 8004a7c:	656d6954 	.word	0x656d6954
 8004a80:	73252072 	.word	0x73252072
 8004a84:	6c45203a 	.word	0x6c45203a
 8004a88:	65737061 	.word	0x65737061
 8004a8c:	66252064 	.word	0x66252064
 8004a90:	0d736d20 	.word	0x0d736d20
 8004a94:	000a      	.short	0x000a
	...

08004a98 <__aeabi_memset>:
 8004a98:	b470      	push	{r4, r5, r6}
 8004a9a:	0784      	lsls	r4, r0, #30
 8004a9c:	d046      	beq.n	8004b2c <__aeabi_memset+0x94>
 8004a9e:	1e4c      	subs	r4, r1, #1
 8004aa0:	2900      	cmp	r1, #0
 8004aa2:	d041      	beq.n	8004b28 <__aeabi_memset+0x90>
 8004aa4:	b2d5      	uxtb	r5, r2
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	e002      	b.n	8004ab0 <__aeabi_memset+0x18>
 8004aaa:	1e61      	subs	r1, r4, #1
 8004aac:	b3e4      	cbz	r4, 8004b28 <__aeabi_memset+0x90>
 8004aae:	460c      	mov	r4, r1
 8004ab0:	f803 5b01 	strb.w	r5, [r3], #1
 8004ab4:	0799      	lsls	r1, r3, #30
 8004ab6:	d1f8      	bne.n	8004aaa <__aeabi_memset+0x12>
 8004ab8:	2c03      	cmp	r4, #3
 8004aba:	d92e      	bls.n	8004b1a <__aeabi_memset+0x82>
 8004abc:	b2d5      	uxtb	r5, r2
 8004abe:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8004ac2:	2c0f      	cmp	r4, #15
 8004ac4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8004ac8:	d919      	bls.n	8004afe <__aeabi_memset+0x66>
 8004aca:	4626      	mov	r6, r4
 8004acc:	f103 0110 	add.w	r1, r3, #16
 8004ad0:	3e10      	subs	r6, #16
 8004ad2:	2e0f      	cmp	r6, #15
 8004ad4:	f841 5c10 	str.w	r5, [r1, #-16]
 8004ad8:	f841 5c0c 	str.w	r5, [r1, #-12]
 8004adc:	f841 5c08 	str.w	r5, [r1, #-8]
 8004ae0:	f841 5c04 	str.w	r5, [r1, #-4]
 8004ae4:	f101 0110 	add.w	r1, r1, #16
 8004ae8:	d8f2      	bhi.n	8004ad0 <__aeabi_memset+0x38>
 8004aea:	f1a4 0110 	sub.w	r1, r4, #16
 8004aee:	f021 010f 	bic.w	r1, r1, #15
 8004af2:	f004 040f 	and.w	r4, r4, #15
 8004af6:	3110      	adds	r1, #16
 8004af8:	2c03      	cmp	r4, #3
 8004afa:	440b      	add	r3, r1
 8004afc:	d90d      	bls.n	8004b1a <__aeabi_memset+0x82>
 8004afe:	461e      	mov	r6, r3
 8004b00:	4621      	mov	r1, r4
 8004b02:	3904      	subs	r1, #4
 8004b04:	2903      	cmp	r1, #3
 8004b06:	f846 5b04 	str.w	r5, [r6], #4
 8004b0a:	d8fa      	bhi.n	8004b02 <__aeabi_memset+0x6a>
 8004b0c:	1f21      	subs	r1, r4, #4
 8004b0e:	f021 0103 	bic.w	r1, r1, #3
 8004b12:	3104      	adds	r1, #4
 8004b14:	440b      	add	r3, r1
 8004b16:	f004 0403 	and.w	r4, r4, #3
 8004b1a:	b12c      	cbz	r4, 8004b28 <__aeabi_memset+0x90>
 8004b1c:	b2d2      	uxtb	r2, r2
 8004b1e:	441c      	add	r4, r3
 8004b20:	f803 2b01 	strb.w	r2, [r3], #1
 8004b24:	42a3      	cmp	r3, r4
 8004b26:	d1fb      	bne.n	8004b20 <__aeabi_memset+0x88>
 8004b28:	bc70      	pop	{r4, r5, r6}
 8004b2a:	4770      	bx	lr
 8004b2c:	460c      	mov	r4, r1
 8004b2e:	4603      	mov	r3, r0
 8004b30:	e7c2      	b.n	8004ab8 <__aeabi_memset+0x20>

08004b32 <strlen>:
 8004b32:	4603      	mov	r3, r0
 8004b34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b38:	2a00      	cmp	r2, #0
 8004b3a:	d1fb      	bne.n	8004b34 <strlen+0x2>
 8004b3c:	1a18      	subs	r0, r3, r0
 8004b3e:	3801      	subs	r0, #1
 8004b40:	4770      	bx	lr
	...

08004b50 <memchr>:
 8004b50:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8004b54:	2a10      	cmp	r2, #16
 8004b56:	db2b      	blt.n	8004bb0 <memchr+0x60>
 8004b58:	f010 0f07 	tst.w	r0, #7
 8004b5c:	d008      	beq.n	8004b70 <memchr+0x20>
 8004b5e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004b62:	3a01      	subs	r2, #1
 8004b64:	428b      	cmp	r3, r1
 8004b66:	d02d      	beq.n	8004bc4 <memchr+0x74>
 8004b68:	f010 0f07 	tst.w	r0, #7
 8004b6c:	b342      	cbz	r2, 8004bc0 <memchr+0x70>
 8004b6e:	d1f6      	bne.n	8004b5e <memchr+0xe>
 8004b70:	b4f0      	push	{r4, r5, r6, r7}
 8004b72:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8004b76:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8004b7a:	f022 0407 	bic.w	r4, r2, #7
 8004b7e:	f07f 0700 	mvns.w	r7, #0
 8004b82:	2300      	movs	r3, #0
 8004b84:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8004b88:	3c08      	subs	r4, #8
 8004b8a:	ea85 0501 	eor.w	r5, r5, r1
 8004b8e:	ea86 0601 	eor.w	r6, r6, r1
 8004b92:	fa85 f547 	uadd8	r5, r5, r7
 8004b96:	faa3 f587 	sel	r5, r3, r7
 8004b9a:	fa86 f647 	uadd8	r6, r6, r7
 8004b9e:	faa5 f687 	sel	r6, r5, r7
 8004ba2:	b98e      	cbnz	r6, 8004bc8 <memchr+0x78>
 8004ba4:	d1ee      	bne.n	8004b84 <memchr+0x34>
 8004ba6:	bcf0      	pop	{r4, r5, r6, r7}
 8004ba8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8004bac:	f002 0207 	and.w	r2, r2, #7
 8004bb0:	b132      	cbz	r2, 8004bc0 <memchr+0x70>
 8004bb2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004bb6:	3a01      	subs	r2, #1
 8004bb8:	ea83 0301 	eor.w	r3, r3, r1
 8004bbc:	b113      	cbz	r3, 8004bc4 <memchr+0x74>
 8004bbe:	d1f8      	bne.n	8004bb2 <memchr+0x62>
 8004bc0:	2000      	movs	r0, #0
 8004bc2:	4770      	bx	lr
 8004bc4:	3801      	subs	r0, #1
 8004bc6:	4770      	bx	lr
 8004bc8:	2d00      	cmp	r5, #0
 8004bca:	bf06      	itte	eq
 8004bcc:	4635      	moveq	r5, r6
 8004bce:	3803      	subeq	r0, #3
 8004bd0:	3807      	subne	r0, #7
 8004bd2:	f015 0f01 	tst.w	r5, #1
 8004bd6:	d107      	bne.n	8004be8 <memchr+0x98>
 8004bd8:	3001      	adds	r0, #1
 8004bda:	f415 7f80 	tst.w	r5, #256	; 0x100
 8004bde:	bf02      	ittt	eq
 8004be0:	3001      	addeq	r0, #1
 8004be2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8004be6:	3001      	addeq	r0, #1
 8004be8:	bcf0      	pop	{r4, r5, r6, r7}
 8004bea:	3801      	subs	r0, #1
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop

08004bf0 <__aeabi_drsub>:
 8004bf0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8004bf4:	e002      	b.n	8004bfc <__adddf3>
 8004bf6:	bf00      	nop

08004bf8 <__aeabi_dsub>:
 8004bf8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08004bfc <__adddf3>:
 8004bfc:	b530      	push	{r4, r5, lr}
 8004bfe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8004c02:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8004c06:	ea94 0f05 	teq	r4, r5
 8004c0a:	bf08      	it	eq
 8004c0c:	ea90 0f02 	teqeq	r0, r2
 8004c10:	bf1f      	itttt	ne
 8004c12:	ea54 0c00 	orrsne.w	ip, r4, r0
 8004c16:	ea55 0c02 	orrsne.w	ip, r5, r2
 8004c1a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8004c1e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8004c22:	f000 80e2 	beq.w	8004dea <__adddf3+0x1ee>
 8004c26:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8004c2a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8004c2e:	bfb8      	it	lt
 8004c30:	426d      	neglt	r5, r5
 8004c32:	dd0c      	ble.n	8004c4e <__adddf3+0x52>
 8004c34:	442c      	add	r4, r5
 8004c36:	ea80 0202 	eor.w	r2, r0, r2
 8004c3a:	ea81 0303 	eor.w	r3, r1, r3
 8004c3e:	ea82 0000 	eor.w	r0, r2, r0
 8004c42:	ea83 0101 	eor.w	r1, r3, r1
 8004c46:	ea80 0202 	eor.w	r2, r0, r2
 8004c4a:	ea81 0303 	eor.w	r3, r1, r3
 8004c4e:	2d36      	cmp	r5, #54	; 0x36
 8004c50:	bf88      	it	hi
 8004c52:	bd30      	pophi	{r4, r5, pc}
 8004c54:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8004c58:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8004c5c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8004c60:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8004c64:	d002      	beq.n	8004c6c <__adddf3+0x70>
 8004c66:	4240      	negs	r0, r0
 8004c68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8004c6c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8004c70:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8004c74:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8004c78:	d002      	beq.n	8004c80 <__adddf3+0x84>
 8004c7a:	4252      	negs	r2, r2
 8004c7c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8004c80:	ea94 0f05 	teq	r4, r5
 8004c84:	f000 80a7 	beq.w	8004dd6 <__adddf3+0x1da>
 8004c88:	f1a4 0401 	sub.w	r4, r4, #1
 8004c8c:	f1d5 0e20 	rsbs	lr, r5, #32
 8004c90:	db0d      	blt.n	8004cae <__adddf3+0xb2>
 8004c92:	fa02 fc0e 	lsl.w	ip, r2, lr
 8004c96:	fa22 f205 	lsr.w	r2, r2, r5
 8004c9a:	1880      	adds	r0, r0, r2
 8004c9c:	f141 0100 	adc.w	r1, r1, #0
 8004ca0:	fa03 f20e 	lsl.w	r2, r3, lr
 8004ca4:	1880      	adds	r0, r0, r2
 8004ca6:	fa43 f305 	asr.w	r3, r3, r5
 8004caa:	4159      	adcs	r1, r3
 8004cac:	e00e      	b.n	8004ccc <__adddf3+0xd0>
 8004cae:	f1a5 0520 	sub.w	r5, r5, #32
 8004cb2:	f10e 0e20 	add.w	lr, lr, #32
 8004cb6:	2a01      	cmp	r2, #1
 8004cb8:	fa03 fc0e 	lsl.w	ip, r3, lr
 8004cbc:	bf28      	it	cs
 8004cbe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8004cc2:	fa43 f305 	asr.w	r3, r3, r5
 8004cc6:	18c0      	adds	r0, r0, r3
 8004cc8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8004ccc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004cd0:	d507      	bpl.n	8004ce2 <__adddf3+0xe6>
 8004cd2:	f04f 0e00 	mov.w	lr, #0
 8004cd6:	f1dc 0c00 	rsbs	ip, ip, #0
 8004cda:	eb7e 0000 	sbcs.w	r0, lr, r0
 8004cde:	eb6e 0101 	sbc.w	r1, lr, r1
 8004ce2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8004ce6:	d31b      	bcc.n	8004d20 <__adddf3+0x124>
 8004ce8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8004cec:	d30c      	bcc.n	8004d08 <__adddf3+0x10c>
 8004cee:	0849      	lsrs	r1, r1, #1
 8004cf0:	ea5f 0030 	movs.w	r0, r0, rrx
 8004cf4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8004cf8:	f104 0401 	add.w	r4, r4, #1
 8004cfc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8004d00:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8004d04:	f080 809a 	bcs.w	8004e3c <__adddf3+0x240>
 8004d08:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8004d0c:	bf08      	it	eq
 8004d0e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8004d12:	f150 0000 	adcs.w	r0, r0, #0
 8004d16:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8004d1a:	ea41 0105 	orr.w	r1, r1, r5
 8004d1e:	bd30      	pop	{r4, r5, pc}
 8004d20:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8004d24:	4140      	adcs	r0, r0
 8004d26:	eb41 0101 	adc.w	r1, r1, r1
 8004d2a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004d2e:	f1a4 0401 	sub.w	r4, r4, #1
 8004d32:	d1e9      	bne.n	8004d08 <__adddf3+0x10c>
 8004d34:	f091 0f00 	teq	r1, #0
 8004d38:	bf04      	itt	eq
 8004d3a:	4601      	moveq	r1, r0
 8004d3c:	2000      	moveq	r0, #0
 8004d3e:	fab1 f381 	clz	r3, r1
 8004d42:	bf08      	it	eq
 8004d44:	3320      	addeq	r3, #32
 8004d46:	f1a3 030b 	sub.w	r3, r3, #11
 8004d4a:	f1b3 0220 	subs.w	r2, r3, #32
 8004d4e:	da0c      	bge.n	8004d6a <__adddf3+0x16e>
 8004d50:	320c      	adds	r2, #12
 8004d52:	dd08      	ble.n	8004d66 <__adddf3+0x16a>
 8004d54:	f102 0c14 	add.w	ip, r2, #20
 8004d58:	f1c2 020c 	rsb	r2, r2, #12
 8004d5c:	fa01 f00c 	lsl.w	r0, r1, ip
 8004d60:	fa21 f102 	lsr.w	r1, r1, r2
 8004d64:	e00c      	b.n	8004d80 <__adddf3+0x184>
 8004d66:	f102 0214 	add.w	r2, r2, #20
 8004d6a:	bfd8      	it	le
 8004d6c:	f1c2 0c20 	rsble	ip, r2, #32
 8004d70:	fa01 f102 	lsl.w	r1, r1, r2
 8004d74:	fa20 fc0c 	lsr.w	ip, r0, ip
 8004d78:	bfdc      	itt	le
 8004d7a:	ea41 010c 	orrle.w	r1, r1, ip
 8004d7e:	4090      	lslle	r0, r2
 8004d80:	1ae4      	subs	r4, r4, r3
 8004d82:	bfa2      	ittt	ge
 8004d84:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8004d88:	4329      	orrge	r1, r5
 8004d8a:	bd30      	popge	{r4, r5, pc}
 8004d8c:	ea6f 0404 	mvn.w	r4, r4
 8004d90:	3c1f      	subs	r4, #31
 8004d92:	da1c      	bge.n	8004dce <__adddf3+0x1d2>
 8004d94:	340c      	adds	r4, #12
 8004d96:	dc0e      	bgt.n	8004db6 <__adddf3+0x1ba>
 8004d98:	f104 0414 	add.w	r4, r4, #20
 8004d9c:	f1c4 0220 	rsb	r2, r4, #32
 8004da0:	fa20 f004 	lsr.w	r0, r0, r4
 8004da4:	fa01 f302 	lsl.w	r3, r1, r2
 8004da8:	ea40 0003 	orr.w	r0, r0, r3
 8004dac:	fa21 f304 	lsr.w	r3, r1, r4
 8004db0:	ea45 0103 	orr.w	r1, r5, r3
 8004db4:	bd30      	pop	{r4, r5, pc}
 8004db6:	f1c4 040c 	rsb	r4, r4, #12
 8004dba:	f1c4 0220 	rsb	r2, r4, #32
 8004dbe:	fa20 f002 	lsr.w	r0, r0, r2
 8004dc2:	fa01 f304 	lsl.w	r3, r1, r4
 8004dc6:	ea40 0003 	orr.w	r0, r0, r3
 8004dca:	4629      	mov	r1, r5
 8004dcc:	bd30      	pop	{r4, r5, pc}
 8004dce:	fa21 f004 	lsr.w	r0, r1, r4
 8004dd2:	4629      	mov	r1, r5
 8004dd4:	bd30      	pop	{r4, r5, pc}
 8004dd6:	f094 0f00 	teq	r4, #0
 8004dda:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8004dde:	bf06      	itte	eq
 8004de0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8004de4:	3401      	addeq	r4, #1
 8004de6:	3d01      	subne	r5, #1
 8004de8:	e74e      	b.n	8004c88 <__adddf3+0x8c>
 8004dea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8004dee:	bf18      	it	ne
 8004df0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8004df4:	d029      	beq.n	8004e4a <__adddf3+0x24e>
 8004df6:	ea94 0f05 	teq	r4, r5
 8004dfa:	bf08      	it	eq
 8004dfc:	ea90 0f02 	teqeq	r0, r2
 8004e00:	d005      	beq.n	8004e0e <__adddf3+0x212>
 8004e02:	ea54 0c00 	orrs.w	ip, r4, r0
 8004e06:	bf04      	itt	eq
 8004e08:	4619      	moveq	r1, r3
 8004e0a:	4610      	moveq	r0, r2
 8004e0c:	bd30      	pop	{r4, r5, pc}
 8004e0e:	ea91 0f03 	teq	r1, r3
 8004e12:	bf1e      	ittt	ne
 8004e14:	2100      	movne	r1, #0
 8004e16:	2000      	movne	r0, #0
 8004e18:	bd30      	popne	{r4, r5, pc}
 8004e1a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8004e1e:	d105      	bne.n	8004e2c <__adddf3+0x230>
 8004e20:	0040      	lsls	r0, r0, #1
 8004e22:	4149      	adcs	r1, r1
 8004e24:	bf28      	it	cs
 8004e26:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8004e2a:	bd30      	pop	{r4, r5, pc}
 8004e2c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8004e30:	bf3c      	itt	cc
 8004e32:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8004e36:	bd30      	popcc	{r4, r5, pc}
 8004e38:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004e3c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8004e40:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004e44:	f04f 0000 	mov.w	r0, #0
 8004e48:	bd30      	pop	{r4, r5, pc}
 8004e4a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8004e4e:	bf1a      	itte	ne
 8004e50:	4619      	movne	r1, r3
 8004e52:	4610      	movne	r0, r2
 8004e54:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8004e58:	bf1c      	itt	ne
 8004e5a:	460b      	movne	r3, r1
 8004e5c:	4602      	movne	r2, r0
 8004e5e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8004e62:	bf06      	itte	eq
 8004e64:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8004e68:	ea91 0f03 	teqeq	r1, r3
 8004e6c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8004e70:	bd30      	pop	{r4, r5, pc}
 8004e72:	bf00      	nop

08004e74 <__aeabi_ui2d>:
 8004e74:	f090 0f00 	teq	r0, #0
 8004e78:	bf04      	itt	eq
 8004e7a:	2100      	moveq	r1, #0
 8004e7c:	4770      	bxeq	lr
 8004e7e:	b530      	push	{r4, r5, lr}
 8004e80:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8004e84:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8004e88:	f04f 0500 	mov.w	r5, #0
 8004e8c:	f04f 0100 	mov.w	r1, #0
 8004e90:	e750      	b.n	8004d34 <__adddf3+0x138>
 8004e92:	bf00      	nop

08004e94 <__aeabi_i2d>:
 8004e94:	f090 0f00 	teq	r0, #0
 8004e98:	bf04      	itt	eq
 8004e9a:	2100      	moveq	r1, #0
 8004e9c:	4770      	bxeq	lr
 8004e9e:	b530      	push	{r4, r5, lr}
 8004ea0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8004ea4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8004ea8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8004eac:	bf48      	it	mi
 8004eae:	4240      	negmi	r0, r0
 8004eb0:	f04f 0100 	mov.w	r1, #0
 8004eb4:	e73e      	b.n	8004d34 <__adddf3+0x138>
 8004eb6:	bf00      	nop

08004eb8 <__aeabi_f2d>:
 8004eb8:	0042      	lsls	r2, r0, #1
 8004eba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8004ebe:	ea4f 0131 	mov.w	r1, r1, rrx
 8004ec2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8004ec6:	bf1f      	itttt	ne
 8004ec8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8004ecc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8004ed0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8004ed4:	4770      	bxne	lr
 8004ed6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8004eda:	bf08      	it	eq
 8004edc:	4770      	bxeq	lr
 8004ede:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8004ee2:	bf04      	itt	eq
 8004ee4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8004ee8:	4770      	bxeq	lr
 8004eea:	b530      	push	{r4, r5, lr}
 8004eec:	f44f 7460 	mov.w	r4, #896	; 0x380
 8004ef0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004ef4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004ef8:	e71c      	b.n	8004d34 <__adddf3+0x138>
 8004efa:	bf00      	nop

08004efc <__aeabi_ul2d>:
 8004efc:	ea50 0201 	orrs.w	r2, r0, r1
 8004f00:	bf08      	it	eq
 8004f02:	4770      	bxeq	lr
 8004f04:	b530      	push	{r4, r5, lr}
 8004f06:	f04f 0500 	mov.w	r5, #0
 8004f0a:	e00a      	b.n	8004f22 <__aeabi_l2d+0x16>

08004f0c <__aeabi_l2d>:
 8004f0c:	ea50 0201 	orrs.w	r2, r0, r1
 8004f10:	bf08      	it	eq
 8004f12:	4770      	bxeq	lr
 8004f14:	b530      	push	{r4, r5, lr}
 8004f16:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8004f1a:	d502      	bpl.n	8004f22 <__aeabi_l2d+0x16>
 8004f1c:	4240      	negs	r0, r0
 8004f1e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8004f22:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8004f26:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8004f2a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8004f2e:	f43f aed8 	beq.w	8004ce2 <__adddf3+0xe6>
 8004f32:	f04f 0203 	mov.w	r2, #3
 8004f36:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8004f3a:	bf18      	it	ne
 8004f3c:	3203      	addne	r2, #3
 8004f3e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8004f42:	bf18      	it	ne
 8004f44:	3203      	addne	r2, #3
 8004f46:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8004f4a:	f1c2 0320 	rsb	r3, r2, #32
 8004f4e:	fa00 fc03 	lsl.w	ip, r0, r3
 8004f52:	fa20 f002 	lsr.w	r0, r0, r2
 8004f56:	fa01 fe03 	lsl.w	lr, r1, r3
 8004f5a:	ea40 000e 	orr.w	r0, r0, lr
 8004f5e:	fa21 f102 	lsr.w	r1, r1, r2
 8004f62:	4414      	add	r4, r2
 8004f64:	e6bd      	b.n	8004ce2 <__adddf3+0xe6>
 8004f66:	bf00      	nop

08004f68 <__aeabi_d2f>:
 8004f68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8004f6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8004f70:	bf24      	itt	cs
 8004f72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8004f76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8004f7a:	d90d      	bls.n	8004f98 <__aeabi_d2f+0x30>
 8004f7c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8004f80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8004f84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8004f88:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8004f8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8004f90:	bf08      	it	eq
 8004f92:	f020 0001 	biceq.w	r0, r0, #1
 8004f96:	4770      	bx	lr
 8004f98:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8004f9c:	d121      	bne.n	8004fe2 <__aeabi_d2f+0x7a>
 8004f9e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8004fa2:	bfbc      	itt	lt
 8004fa4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8004fa8:	4770      	bxlt	lr
 8004faa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004fae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8004fb2:	f1c2 0218 	rsb	r2, r2, #24
 8004fb6:	f1c2 0c20 	rsb	ip, r2, #32
 8004fba:	fa10 f30c 	lsls.w	r3, r0, ip
 8004fbe:	fa20 f002 	lsr.w	r0, r0, r2
 8004fc2:	bf18      	it	ne
 8004fc4:	f040 0001 	orrne.w	r0, r0, #1
 8004fc8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8004fcc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8004fd0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8004fd4:	ea40 000c 	orr.w	r0, r0, ip
 8004fd8:	fa23 f302 	lsr.w	r3, r3, r2
 8004fdc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004fe0:	e7cc      	b.n	8004f7c <__aeabi_d2f+0x14>
 8004fe2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8004fe6:	d107      	bne.n	8004ff8 <__aeabi_d2f+0x90>
 8004fe8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8004fec:	bf1e      	ittt	ne
 8004fee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8004ff2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8004ff6:	4770      	bxne	lr
 8004ff8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8004ffc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8005000:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8005004:	4770      	bx	lr
 8005006:	bf00      	nop

08005008 <__aeabi_frsub>:
 8005008:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800500c:	e002      	b.n	8005014 <__addsf3>
 800500e:	bf00      	nop

08005010 <__aeabi_fsub>:
 8005010:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08005014 <__addsf3>:
 8005014:	0042      	lsls	r2, r0, #1
 8005016:	bf1f      	itttt	ne
 8005018:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800501c:	ea92 0f03 	teqne	r2, r3
 8005020:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8005024:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8005028:	d06a      	beq.n	8005100 <__addsf3+0xec>
 800502a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800502e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8005032:	bfc1      	itttt	gt
 8005034:	18d2      	addgt	r2, r2, r3
 8005036:	4041      	eorgt	r1, r0
 8005038:	4048      	eorgt	r0, r1
 800503a:	4041      	eorgt	r1, r0
 800503c:	bfb8      	it	lt
 800503e:	425b      	neglt	r3, r3
 8005040:	2b19      	cmp	r3, #25
 8005042:	bf88      	it	hi
 8005044:	4770      	bxhi	lr
 8005046:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800504a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800504e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8005052:	bf18      	it	ne
 8005054:	4240      	negne	r0, r0
 8005056:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800505a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800505e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8005062:	bf18      	it	ne
 8005064:	4249      	negne	r1, r1
 8005066:	ea92 0f03 	teq	r2, r3
 800506a:	d03f      	beq.n	80050ec <__addsf3+0xd8>
 800506c:	f1a2 0201 	sub.w	r2, r2, #1
 8005070:	fa41 fc03 	asr.w	ip, r1, r3
 8005074:	eb10 000c 	adds.w	r0, r0, ip
 8005078:	f1c3 0320 	rsb	r3, r3, #32
 800507c:	fa01 f103 	lsl.w	r1, r1, r3
 8005080:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8005084:	d502      	bpl.n	800508c <__addsf3+0x78>
 8005086:	4249      	negs	r1, r1
 8005088:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800508c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8005090:	d313      	bcc.n	80050ba <__addsf3+0xa6>
 8005092:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8005096:	d306      	bcc.n	80050a6 <__addsf3+0x92>
 8005098:	0840      	lsrs	r0, r0, #1
 800509a:	ea4f 0131 	mov.w	r1, r1, rrx
 800509e:	f102 0201 	add.w	r2, r2, #1
 80050a2:	2afe      	cmp	r2, #254	; 0xfe
 80050a4:	d251      	bcs.n	800514a <__addsf3+0x136>
 80050a6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80050aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80050ae:	bf08      	it	eq
 80050b0:	f020 0001 	biceq.w	r0, r0, #1
 80050b4:	ea40 0003 	orr.w	r0, r0, r3
 80050b8:	4770      	bx	lr
 80050ba:	0049      	lsls	r1, r1, #1
 80050bc:	eb40 0000 	adc.w	r0, r0, r0
 80050c0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80050c4:	f1a2 0201 	sub.w	r2, r2, #1
 80050c8:	d1ed      	bne.n	80050a6 <__addsf3+0x92>
 80050ca:	fab0 fc80 	clz	ip, r0
 80050ce:	f1ac 0c08 	sub.w	ip, ip, #8
 80050d2:	ebb2 020c 	subs.w	r2, r2, ip
 80050d6:	fa00 f00c 	lsl.w	r0, r0, ip
 80050da:	bfaa      	itet	ge
 80050dc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80050e0:	4252      	neglt	r2, r2
 80050e2:	4318      	orrge	r0, r3
 80050e4:	bfbc      	itt	lt
 80050e6:	40d0      	lsrlt	r0, r2
 80050e8:	4318      	orrlt	r0, r3
 80050ea:	4770      	bx	lr
 80050ec:	f092 0f00 	teq	r2, #0
 80050f0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80050f4:	bf06      	itte	eq
 80050f6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80050fa:	3201      	addeq	r2, #1
 80050fc:	3b01      	subne	r3, #1
 80050fe:	e7b5      	b.n	800506c <__addsf3+0x58>
 8005100:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8005104:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8005108:	bf18      	it	ne
 800510a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800510e:	d021      	beq.n	8005154 <__addsf3+0x140>
 8005110:	ea92 0f03 	teq	r2, r3
 8005114:	d004      	beq.n	8005120 <__addsf3+0x10c>
 8005116:	f092 0f00 	teq	r2, #0
 800511a:	bf08      	it	eq
 800511c:	4608      	moveq	r0, r1
 800511e:	4770      	bx	lr
 8005120:	ea90 0f01 	teq	r0, r1
 8005124:	bf1c      	itt	ne
 8005126:	2000      	movne	r0, #0
 8005128:	4770      	bxne	lr
 800512a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800512e:	d104      	bne.n	800513a <__addsf3+0x126>
 8005130:	0040      	lsls	r0, r0, #1
 8005132:	bf28      	it	cs
 8005134:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8005138:	4770      	bx	lr
 800513a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800513e:	bf3c      	itt	cc
 8005140:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8005144:	4770      	bxcc	lr
 8005146:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800514a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800514e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8005152:	4770      	bx	lr
 8005154:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8005158:	bf16      	itet	ne
 800515a:	4608      	movne	r0, r1
 800515c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8005160:	4601      	movne	r1, r0
 8005162:	0242      	lsls	r2, r0, #9
 8005164:	bf06      	itte	eq
 8005166:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800516a:	ea90 0f01 	teqeq	r0, r1
 800516e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8005172:	4770      	bx	lr

08005174 <__aeabi_ui2f>:
 8005174:	f04f 0300 	mov.w	r3, #0
 8005178:	e004      	b.n	8005184 <__aeabi_i2f+0x8>
 800517a:	bf00      	nop

0800517c <__aeabi_i2f>:
 800517c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8005180:	bf48      	it	mi
 8005182:	4240      	negmi	r0, r0
 8005184:	ea5f 0c00 	movs.w	ip, r0
 8005188:	bf08      	it	eq
 800518a:	4770      	bxeq	lr
 800518c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8005190:	4601      	mov	r1, r0
 8005192:	f04f 0000 	mov.w	r0, #0
 8005196:	e01c      	b.n	80051d2 <__aeabi_l2f+0x2a>

08005198 <__aeabi_ul2f>:
 8005198:	ea50 0201 	orrs.w	r2, r0, r1
 800519c:	bf08      	it	eq
 800519e:	4770      	bxeq	lr
 80051a0:	f04f 0300 	mov.w	r3, #0
 80051a4:	e00a      	b.n	80051bc <__aeabi_l2f+0x14>
 80051a6:	bf00      	nop

080051a8 <__aeabi_l2f>:
 80051a8:	ea50 0201 	orrs.w	r2, r0, r1
 80051ac:	bf08      	it	eq
 80051ae:	4770      	bxeq	lr
 80051b0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80051b4:	d502      	bpl.n	80051bc <__aeabi_l2f+0x14>
 80051b6:	4240      	negs	r0, r0
 80051b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80051bc:	ea5f 0c01 	movs.w	ip, r1
 80051c0:	bf02      	ittt	eq
 80051c2:	4684      	moveq	ip, r0
 80051c4:	4601      	moveq	r1, r0
 80051c6:	2000      	moveq	r0, #0
 80051c8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80051cc:	bf08      	it	eq
 80051ce:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80051d2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80051d6:	fabc f28c 	clz	r2, ip
 80051da:	3a08      	subs	r2, #8
 80051dc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80051e0:	db10      	blt.n	8005204 <__aeabi_l2f+0x5c>
 80051e2:	fa01 fc02 	lsl.w	ip, r1, r2
 80051e6:	4463      	add	r3, ip
 80051e8:	fa00 fc02 	lsl.w	ip, r0, r2
 80051ec:	f1c2 0220 	rsb	r2, r2, #32
 80051f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80051f4:	fa20 f202 	lsr.w	r2, r0, r2
 80051f8:	eb43 0002 	adc.w	r0, r3, r2
 80051fc:	bf08      	it	eq
 80051fe:	f020 0001 	biceq.w	r0, r0, #1
 8005202:	4770      	bx	lr
 8005204:	f102 0220 	add.w	r2, r2, #32
 8005208:	fa01 fc02 	lsl.w	ip, r1, r2
 800520c:	f1c2 0220 	rsb	r2, r2, #32
 8005210:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8005214:	fa21 f202 	lsr.w	r2, r1, r2
 8005218:	eb43 0002 	adc.w	r0, r3, r2
 800521c:	bf08      	it	eq
 800521e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8005222:	4770      	bx	lr

08005224 <__aeabi_uldivmod>:
 8005224:	b953      	cbnz	r3, 800523c <__aeabi_uldivmod+0x18>
 8005226:	b94a      	cbnz	r2, 800523c <__aeabi_uldivmod+0x18>
 8005228:	2900      	cmp	r1, #0
 800522a:	bf08      	it	eq
 800522c:	2800      	cmpeq	r0, #0
 800522e:	bf1c      	itt	ne
 8005230:	f04f 31ff 	movne.w	r1, #4294967295
 8005234:	f04f 30ff 	movne.w	r0, #4294967295
 8005238:	f000 b972 	b.w	8005520 <__aeabi_idiv0>
 800523c:	f1ad 0c08 	sub.w	ip, sp, #8
 8005240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8005244:	f000 f806 	bl	8005254 <__udivmoddi4>
 8005248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800524c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005250:	b004      	add	sp, #16
 8005252:	4770      	bx	lr

08005254 <__udivmoddi4>:
 8005254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005258:	9e08      	ldr	r6, [sp, #32]
 800525a:	4604      	mov	r4, r0
 800525c:	4688      	mov	r8, r1
 800525e:	2b00      	cmp	r3, #0
 8005260:	d14b      	bne.n	80052fa <__udivmoddi4+0xa6>
 8005262:	428a      	cmp	r2, r1
 8005264:	4615      	mov	r5, r2
 8005266:	d967      	bls.n	8005338 <__udivmoddi4+0xe4>
 8005268:	fab2 f282 	clz	r2, r2
 800526c:	b14a      	cbz	r2, 8005282 <__udivmoddi4+0x2e>
 800526e:	f1c2 0720 	rsb	r7, r2, #32
 8005272:	fa01 f302 	lsl.w	r3, r1, r2
 8005276:	fa20 f707 	lsr.w	r7, r0, r7
 800527a:	4095      	lsls	r5, r2
 800527c:	ea47 0803 	orr.w	r8, r7, r3
 8005280:	4094      	lsls	r4, r2
 8005282:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8005286:	0c23      	lsrs	r3, r4, #16
 8005288:	fbb8 f7fe 	udiv	r7, r8, lr
 800528c:	fa1f fc85 	uxth.w	ip, r5
 8005290:	fb0e 8817 	mls	r8, lr, r7, r8
 8005294:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8005298:	fb07 f10c 	mul.w	r1, r7, ip
 800529c:	4299      	cmp	r1, r3
 800529e:	d909      	bls.n	80052b4 <__udivmoddi4+0x60>
 80052a0:	18eb      	adds	r3, r5, r3
 80052a2:	f107 30ff 	add.w	r0, r7, #4294967295
 80052a6:	f080 811b 	bcs.w	80054e0 <__udivmoddi4+0x28c>
 80052aa:	4299      	cmp	r1, r3
 80052ac:	f240 8118 	bls.w	80054e0 <__udivmoddi4+0x28c>
 80052b0:	3f02      	subs	r7, #2
 80052b2:	442b      	add	r3, r5
 80052b4:	1a5b      	subs	r3, r3, r1
 80052b6:	b2a4      	uxth	r4, r4
 80052b8:	fbb3 f0fe 	udiv	r0, r3, lr
 80052bc:	fb0e 3310 	mls	r3, lr, r0, r3
 80052c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80052c4:	fb00 fc0c 	mul.w	ip, r0, ip
 80052c8:	45a4      	cmp	ip, r4
 80052ca:	d909      	bls.n	80052e0 <__udivmoddi4+0x8c>
 80052cc:	192c      	adds	r4, r5, r4
 80052ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80052d2:	f080 8107 	bcs.w	80054e4 <__udivmoddi4+0x290>
 80052d6:	45a4      	cmp	ip, r4
 80052d8:	f240 8104 	bls.w	80054e4 <__udivmoddi4+0x290>
 80052dc:	3802      	subs	r0, #2
 80052de:	442c      	add	r4, r5
 80052e0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80052e4:	eba4 040c 	sub.w	r4, r4, ip
 80052e8:	2700      	movs	r7, #0
 80052ea:	b11e      	cbz	r6, 80052f4 <__udivmoddi4+0xa0>
 80052ec:	40d4      	lsrs	r4, r2
 80052ee:	2300      	movs	r3, #0
 80052f0:	e9c6 4300 	strd	r4, r3, [r6]
 80052f4:	4639      	mov	r1, r7
 80052f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052fa:	428b      	cmp	r3, r1
 80052fc:	d909      	bls.n	8005312 <__udivmoddi4+0xbe>
 80052fe:	2e00      	cmp	r6, #0
 8005300:	f000 80eb 	beq.w	80054da <__udivmoddi4+0x286>
 8005304:	2700      	movs	r7, #0
 8005306:	e9c6 0100 	strd	r0, r1, [r6]
 800530a:	4638      	mov	r0, r7
 800530c:	4639      	mov	r1, r7
 800530e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005312:	fab3 f783 	clz	r7, r3
 8005316:	2f00      	cmp	r7, #0
 8005318:	d147      	bne.n	80053aa <__udivmoddi4+0x156>
 800531a:	428b      	cmp	r3, r1
 800531c:	d302      	bcc.n	8005324 <__udivmoddi4+0xd0>
 800531e:	4282      	cmp	r2, r0
 8005320:	f200 80fa 	bhi.w	8005518 <__udivmoddi4+0x2c4>
 8005324:	1a84      	subs	r4, r0, r2
 8005326:	eb61 0303 	sbc.w	r3, r1, r3
 800532a:	2001      	movs	r0, #1
 800532c:	4698      	mov	r8, r3
 800532e:	2e00      	cmp	r6, #0
 8005330:	d0e0      	beq.n	80052f4 <__udivmoddi4+0xa0>
 8005332:	e9c6 4800 	strd	r4, r8, [r6]
 8005336:	e7dd      	b.n	80052f4 <__udivmoddi4+0xa0>
 8005338:	b902      	cbnz	r2, 800533c <__udivmoddi4+0xe8>
 800533a:	deff      	udf	#255	; 0xff
 800533c:	fab2 f282 	clz	r2, r2
 8005340:	2a00      	cmp	r2, #0
 8005342:	f040 808f 	bne.w	8005464 <__udivmoddi4+0x210>
 8005346:	1b49      	subs	r1, r1, r5
 8005348:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800534c:	fa1f f885 	uxth.w	r8, r5
 8005350:	2701      	movs	r7, #1
 8005352:	fbb1 fcfe 	udiv	ip, r1, lr
 8005356:	0c23      	lsrs	r3, r4, #16
 8005358:	fb0e 111c 	mls	r1, lr, ip, r1
 800535c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8005360:	fb08 f10c 	mul.w	r1, r8, ip
 8005364:	4299      	cmp	r1, r3
 8005366:	d907      	bls.n	8005378 <__udivmoddi4+0x124>
 8005368:	18eb      	adds	r3, r5, r3
 800536a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800536e:	d202      	bcs.n	8005376 <__udivmoddi4+0x122>
 8005370:	4299      	cmp	r1, r3
 8005372:	f200 80cd 	bhi.w	8005510 <__udivmoddi4+0x2bc>
 8005376:	4684      	mov	ip, r0
 8005378:	1a59      	subs	r1, r3, r1
 800537a:	b2a3      	uxth	r3, r4
 800537c:	fbb1 f0fe 	udiv	r0, r1, lr
 8005380:	fb0e 1410 	mls	r4, lr, r0, r1
 8005384:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8005388:	fb08 f800 	mul.w	r8, r8, r0
 800538c:	45a0      	cmp	r8, r4
 800538e:	d907      	bls.n	80053a0 <__udivmoddi4+0x14c>
 8005390:	192c      	adds	r4, r5, r4
 8005392:	f100 33ff 	add.w	r3, r0, #4294967295
 8005396:	d202      	bcs.n	800539e <__udivmoddi4+0x14a>
 8005398:	45a0      	cmp	r8, r4
 800539a:	f200 80b6 	bhi.w	800550a <__udivmoddi4+0x2b6>
 800539e:	4618      	mov	r0, r3
 80053a0:	eba4 0408 	sub.w	r4, r4, r8
 80053a4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80053a8:	e79f      	b.n	80052ea <__udivmoddi4+0x96>
 80053aa:	f1c7 0c20 	rsb	ip, r7, #32
 80053ae:	40bb      	lsls	r3, r7
 80053b0:	fa22 fe0c 	lsr.w	lr, r2, ip
 80053b4:	ea4e 0e03 	orr.w	lr, lr, r3
 80053b8:	fa01 f407 	lsl.w	r4, r1, r7
 80053bc:	fa20 f50c 	lsr.w	r5, r0, ip
 80053c0:	fa21 f30c 	lsr.w	r3, r1, ip
 80053c4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80053c8:	4325      	orrs	r5, r4
 80053ca:	fbb3 f9f8 	udiv	r9, r3, r8
 80053ce:	0c2c      	lsrs	r4, r5, #16
 80053d0:	fb08 3319 	mls	r3, r8, r9, r3
 80053d4:	fa1f fa8e 	uxth.w	sl, lr
 80053d8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80053dc:	fb09 f40a 	mul.w	r4, r9, sl
 80053e0:	429c      	cmp	r4, r3
 80053e2:	fa02 f207 	lsl.w	r2, r2, r7
 80053e6:	fa00 f107 	lsl.w	r1, r0, r7
 80053ea:	d90b      	bls.n	8005404 <__udivmoddi4+0x1b0>
 80053ec:	eb1e 0303 	adds.w	r3, lr, r3
 80053f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80053f4:	f080 8087 	bcs.w	8005506 <__udivmoddi4+0x2b2>
 80053f8:	429c      	cmp	r4, r3
 80053fa:	f240 8084 	bls.w	8005506 <__udivmoddi4+0x2b2>
 80053fe:	f1a9 0902 	sub.w	r9, r9, #2
 8005402:	4473      	add	r3, lr
 8005404:	1b1b      	subs	r3, r3, r4
 8005406:	b2ad      	uxth	r5, r5
 8005408:	fbb3 f0f8 	udiv	r0, r3, r8
 800540c:	fb08 3310 	mls	r3, r8, r0, r3
 8005410:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8005414:	fb00 fa0a 	mul.w	sl, r0, sl
 8005418:	45a2      	cmp	sl, r4
 800541a:	d908      	bls.n	800542e <__udivmoddi4+0x1da>
 800541c:	eb1e 0404 	adds.w	r4, lr, r4
 8005420:	f100 33ff 	add.w	r3, r0, #4294967295
 8005424:	d26b      	bcs.n	80054fe <__udivmoddi4+0x2aa>
 8005426:	45a2      	cmp	sl, r4
 8005428:	d969      	bls.n	80054fe <__udivmoddi4+0x2aa>
 800542a:	3802      	subs	r0, #2
 800542c:	4474      	add	r4, lr
 800542e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8005432:	fba0 8902 	umull	r8, r9, r0, r2
 8005436:	eba4 040a 	sub.w	r4, r4, sl
 800543a:	454c      	cmp	r4, r9
 800543c:	46c2      	mov	sl, r8
 800543e:	464b      	mov	r3, r9
 8005440:	d354      	bcc.n	80054ec <__udivmoddi4+0x298>
 8005442:	d051      	beq.n	80054e8 <__udivmoddi4+0x294>
 8005444:	2e00      	cmp	r6, #0
 8005446:	d069      	beq.n	800551c <__udivmoddi4+0x2c8>
 8005448:	ebb1 050a 	subs.w	r5, r1, sl
 800544c:	eb64 0403 	sbc.w	r4, r4, r3
 8005450:	fa04 fc0c 	lsl.w	ip, r4, ip
 8005454:	40fd      	lsrs	r5, r7
 8005456:	40fc      	lsrs	r4, r7
 8005458:	ea4c 0505 	orr.w	r5, ip, r5
 800545c:	e9c6 5400 	strd	r5, r4, [r6]
 8005460:	2700      	movs	r7, #0
 8005462:	e747      	b.n	80052f4 <__udivmoddi4+0xa0>
 8005464:	f1c2 0320 	rsb	r3, r2, #32
 8005468:	fa20 f703 	lsr.w	r7, r0, r3
 800546c:	4095      	lsls	r5, r2
 800546e:	fa01 f002 	lsl.w	r0, r1, r2
 8005472:	fa21 f303 	lsr.w	r3, r1, r3
 8005476:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800547a:	4338      	orrs	r0, r7
 800547c:	0c01      	lsrs	r1, r0, #16
 800547e:	fbb3 f7fe 	udiv	r7, r3, lr
 8005482:	fa1f f885 	uxth.w	r8, r5
 8005486:	fb0e 3317 	mls	r3, lr, r7, r3
 800548a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800548e:	fb07 f308 	mul.w	r3, r7, r8
 8005492:	428b      	cmp	r3, r1
 8005494:	fa04 f402 	lsl.w	r4, r4, r2
 8005498:	d907      	bls.n	80054aa <__udivmoddi4+0x256>
 800549a:	1869      	adds	r1, r5, r1
 800549c:	f107 3cff 	add.w	ip, r7, #4294967295
 80054a0:	d22f      	bcs.n	8005502 <__udivmoddi4+0x2ae>
 80054a2:	428b      	cmp	r3, r1
 80054a4:	d92d      	bls.n	8005502 <__udivmoddi4+0x2ae>
 80054a6:	3f02      	subs	r7, #2
 80054a8:	4429      	add	r1, r5
 80054aa:	1acb      	subs	r3, r1, r3
 80054ac:	b281      	uxth	r1, r0
 80054ae:	fbb3 f0fe 	udiv	r0, r3, lr
 80054b2:	fb0e 3310 	mls	r3, lr, r0, r3
 80054b6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80054ba:	fb00 f308 	mul.w	r3, r0, r8
 80054be:	428b      	cmp	r3, r1
 80054c0:	d907      	bls.n	80054d2 <__udivmoddi4+0x27e>
 80054c2:	1869      	adds	r1, r5, r1
 80054c4:	f100 3cff 	add.w	ip, r0, #4294967295
 80054c8:	d217      	bcs.n	80054fa <__udivmoddi4+0x2a6>
 80054ca:	428b      	cmp	r3, r1
 80054cc:	d915      	bls.n	80054fa <__udivmoddi4+0x2a6>
 80054ce:	3802      	subs	r0, #2
 80054d0:	4429      	add	r1, r5
 80054d2:	1ac9      	subs	r1, r1, r3
 80054d4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80054d8:	e73b      	b.n	8005352 <__udivmoddi4+0xfe>
 80054da:	4637      	mov	r7, r6
 80054dc:	4630      	mov	r0, r6
 80054de:	e709      	b.n	80052f4 <__udivmoddi4+0xa0>
 80054e0:	4607      	mov	r7, r0
 80054e2:	e6e7      	b.n	80052b4 <__udivmoddi4+0x60>
 80054e4:	4618      	mov	r0, r3
 80054e6:	e6fb      	b.n	80052e0 <__udivmoddi4+0x8c>
 80054e8:	4541      	cmp	r1, r8
 80054ea:	d2ab      	bcs.n	8005444 <__udivmoddi4+0x1f0>
 80054ec:	ebb8 0a02 	subs.w	sl, r8, r2
 80054f0:	eb69 020e 	sbc.w	r2, r9, lr
 80054f4:	3801      	subs	r0, #1
 80054f6:	4613      	mov	r3, r2
 80054f8:	e7a4      	b.n	8005444 <__udivmoddi4+0x1f0>
 80054fa:	4660      	mov	r0, ip
 80054fc:	e7e9      	b.n	80054d2 <__udivmoddi4+0x27e>
 80054fe:	4618      	mov	r0, r3
 8005500:	e795      	b.n	800542e <__udivmoddi4+0x1da>
 8005502:	4667      	mov	r7, ip
 8005504:	e7d1      	b.n	80054aa <__udivmoddi4+0x256>
 8005506:	4681      	mov	r9, r0
 8005508:	e77c      	b.n	8005404 <__udivmoddi4+0x1b0>
 800550a:	3802      	subs	r0, #2
 800550c:	442c      	add	r4, r5
 800550e:	e747      	b.n	80053a0 <__udivmoddi4+0x14c>
 8005510:	f1ac 0c02 	sub.w	ip, ip, #2
 8005514:	442b      	add	r3, r5
 8005516:	e72f      	b.n	8005378 <__udivmoddi4+0x124>
 8005518:	4638      	mov	r0, r7
 800551a:	e708      	b.n	800532e <__udivmoddi4+0xda>
 800551c:	4637      	mov	r7, r6
 800551e:	e6e9      	b.n	80052f4 <__udivmoddi4+0xa0>

08005520 <__aeabi_idiv0>:
 8005520:	4770      	bx	lr
 8005522:	bf00      	nop

08005524 <arm_dot_prod_f32>:
void arm_dot_prod_f32(
  float32_t * pSrcA,
  float32_t * pSrcB,
  uint32_t blockSize,
  float32_t * result)
{
 8005524:	b480      	push	{r7}
 8005526:	b087      	sub	sp, #28
 8005528:	af00      	add	r7, sp, #0
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	60b9      	str	r1, [r7, #8]
 800552e:	607a      	str	r2, [r7, #4]
 8005530:	603b      	str	r3, [r7, #0]
  float32_t sum = 0.0f;                          /* Temporary result storage */
 8005532:	f04f 0300 	mov.w	r3, #0
 8005536:	617b      	str	r3, [r7, #20]

#if defined (ARM_MATH_DSP)

/* Run the below code for Cortex-M4 and Cortex-M3 */
  /*loop Unrolling */
  blkCnt = blockSize >> 2U;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	089b      	lsrs	r3, r3, #2
 800553c:	613b      	str	r3, [r7, #16]

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 800553e:	e04a      	b.n	80055d6 <arm_dot_prod_f32+0xb2>
  {
    /* C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1] */
    /* Calculate dot product and then store the result in a temporary buffer */
    sum += (*pSrcA++) * (*pSrcB++);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	1d1a      	adds	r2, r3, #4
 8005544:	60fa      	str	r2, [r7, #12]
 8005546:	ed93 7a00 	vldr	s14, [r3]
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	1d1a      	adds	r2, r3, #4
 800554e:	60ba      	str	r2, [r7, #8]
 8005550:	edd3 7a00 	vldr	s15, [r3]
 8005554:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005558:	ed97 7a05 	vldr	s14, [r7, #20]
 800555c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005560:	edc7 7a05 	vstr	s15, [r7, #20]
    sum += (*pSrcA++) * (*pSrcB++);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	1d1a      	adds	r2, r3, #4
 8005568:	60fa      	str	r2, [r7, #12]
 800556a:	ed93 7a00 	vldr	s14, [r3]
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	1d1a      	adds	r2, r3, #4
 8005572:	60ba      	str	r2, [r7, #8]
 8005574:	edd3 7a00 	vldr	s15, [r3]
 8005578:	ee67 7a27 	vmul.f32	s15, s14, s15
 800557c:	ed97 7a05 	vldr	s14, [r7, #20]
 8005580:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005584:	edc7 7a05 	vstr	s15, [r7, #20]
    sum += (*pSrcA++) * (*pSrcB++);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	1d1a      	adds	r2, r3, #4
 800558c:	60fa      	str	r2, [r7, #12]
 800558e:	ed93 7a00 	vldr	s14, [r3]
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	1d1a      	adds	r2, r3, #4
 8005596:	60ba      	str	r2, [r7, #8]
 8005598:	edd3 7a00 	vldr	s15, [r3]
 800559c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055a0:	ed97 7a05 	vldr	s14, [r7, #20]
 80055a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055a8:	edc7 7a05 	vstr	s15, [r7, #20]
    sum += (*pSrcA++) * (*pSrcB++);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	1d1a      	adds	r2, r3, #4
 80055b0:	60fa      	str	r2, [r7, #12]
 80055b2:	ed93 7a00 	vldr	s14, [r3]
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	1d1a      	adds	r2, r3, #4
 80055ba:	60ba      	str	r2, [r7, #8]
 80055bc:	edd3 7a00 	vldr	s15, [r3]
 80055c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055c4:	ed97 7a05 	vldr	s14, [r7, #20]
 80055c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055cc:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Decrement the loop counter */
    blkCnt--;
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	3b01      	subs	r3, #1
 80055d4:	613b      	str	r3, [r7, #16]
  while (blkCnt > 0U)
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d1b1      	bne.n	8005540 <arm_dot_prod_f32+0x1c>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4U;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f003 0303 	and.w	r3, r3, #3
 80055e2:	613b      	str	r3, [r7, #16]
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_DSP) */


  while (blkCnt > 0U)
 80055e4:	e014      	b.n	8005610 <arm_dot_prod_f32+0xec>
  {
    /* C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1] */
    /* Calculate dot product and then store the result in a temporary buffer. */
    sum += (*pSrcA++) * (*pSrcB++);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	1d1a      	adds	r2, r3, #4
 80055ea:	60fa      	str	r2, [r7, #12]
 80055ec:	ed93 7a00 	vldr	s14, [r3]
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	1d1a      	adds	r2, r3, #4
 80055f4:	60ba      	str	r2, [r7, #8]
 80055f6:	edd3 7a00 	vldr	s15, [r3]
 80055fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055fe:	ed97 7a05 	vldr	s14, [r7, #20]
 8005602:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005606:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Decrement the loop counter */
    blkCnt--;
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	3b01      	subs	r3, #1
 800560e:	613b      	str	r3, [r7, #16]
  while (blkCnt > 0U)
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d1e7      	bne.n	80055e6 <arm_dot_prod_f32+0xc2>
  }
  /* Store the result back in the destination buffer */
  *result = sum;
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	697a      	ldr	r2, [r7, #20]
 800561a:	601a      	str	r2, [r3, #0]
}
 800561c:	bf00      	nop
 800561e:	371c      	adds	r7, #28
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 8005628:	b480      	push	{r7}
 800562a:	b085      	sub	sp, #20
 800562c:	af00      	add	r7, sp, #0
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	607b      	str	r3, [r7, #4]
 8005632:	460b      	mov	r3, r1
 8005634:	817b      	strh	r3, [r7, #10]
 8005636:	4613      	mov	r3, r2
 8005638:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	897a      	ldrh	r2, [r7, #10]
 800563e:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	893a      	ldrh	r2, [r7, #8]
 8005644:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	605a      	str	r2, [r3, #4]
}
 800564c:	bf00      	nop
 800564e:	3714      	adds	r7, #20
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800565c:	4b0e      	ldr	r3, [pc, #56]	; (8005698 <HAL_Init+0x40>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a0d      	ldr	r2, [pc, #52]	; (8005698 <HAL_Init+0x40>)
 8005662:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005666:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005668:	4b0b      	ldr	r3, [pc, #44]	; (8005698 <HAL_Init+0x40>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a0a      	ldr	r2, [pc, #40]	; (8005698 <HAL_Init+0x40>)
 800566e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005672:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005674:	4b08      	ldr	r3, [pc, #32]	; (8005698 <HAL_Init+0x40>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a07      	ldr	r2, [pc, #28]	; (8005698 <HAL_Init+0x40>)
 800567a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800567e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005680:	2003      	movs	r0, #3
 8005682:	f000 f953 	bl	800592c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005686:	2000      	movs	r0, #0
 8005688:	f000 f808 	bl	800569c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800568c:	f006 fe28 	bl	800c2e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	40023c00 	.word	0x40023c00

0800569c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b082      	sub	sp, #8
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80056a4:	4b12      	ldr	r3, [pc, #72]	; (80056f0 <HAL_InitTick+0x54>)
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	4b12      	ldr	r3, [pc, #72]	; (80056f4 <HAL_InitTick+0x58>)
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	4619      	mov	r1, r3
 80056ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80056b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80056b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ba:	4618      	mov	r0, r3
 80056bc:	f000 f95d 	bl	800597a <HAL_SYSTICK_Config>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d001      	beq.n	80056ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e00e      	b.n	80056e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2b0f      	cmp	r3, #15
 80056ce:	d80a      	bhi.n	80056e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80056d0:	2200      	movs	r2, #0
 80056d2:	6879      	ldr	r1, [r7, #4]
 80056d4:	f04f 30ff 	mov.w	r0, #4294967295
 80056d8:	f000 f933 	bl	8005942 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80056dc:	4a06      	ldr	r2, [pc, #24]	; (80056f8 <HAL_InitTick+0x5c>)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80056e2:	2300      	movs	r3, #0
 80056e4:	e000      	b.n	80056e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3708      	adds	r7, #8
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	20000574 	.word	0x20000574
 80056f4:	2000000c 	.word	0x2000000c
 80056f8:	20000008 	.word	0x20000008

080056fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80056fc:	b480      	push	{r7}
 80056fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005700:	4b06      	ldr	r3, [pc, #24]	; (800571c <HAL_IncTick+0x20>)
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	461a      	mov	r2, r3
 8005706:	4b06      	ldr	r3, [pc, #24]	; (8005720 <HAL_IncTick+0x24>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4413      	add	r3, r2
 800570c:	4a04      	ldr	r2, [pc, #16]	; (8005720 <HAL_IncTick+0x24>)
 800570e:	6013      	str	r3, [r2, #0]
}
 8005710:	bf00      	nop
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr
 800571a:	bf00      	nop
 800571c:	2000000c 	.word	0x2000000c
 8005720:	20000a8c 	.word	0x20000a8c

08005724 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005724:	b480      	push	{r7}
 8005726:	af00      	add	r7, sp, #0
  return uwTick;
 8005728:	4b03      	ldr	r3, [pc, #12]	; (8005738 <HAL_GetTick+0x14>)
 800572a:	681b      	ldr	r3, [r3, #0]
}
 800572c:	4618      	mov	r0, r3
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr
 8005736:	bf00      	nop
 8005738:	20000a8c 	.word	0x20000a8c

0800573c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005744:	f7ff ffee 	bl	8005724 <HAL_GetTick>
 8005748:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005754:	d005      	beq.n	8005762 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005756:	4b09      	ldr	r3, [pc, #36]	; (800577c <HAL_Delay+0x40>)
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	461a      	mov	r2, r3
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	4413      	add	r3, r2
 8005760:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005762:	bf00      	nop
 8005764:	f7ff ffde 	bl	8005724 <HAL_GetTick>
 8005768:	4602      	mov	r2, r0
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	68fa      	ldr	r2, [r7, #12]
 8005770:	429a      	cmp	r2, r3
 8005772:	d8f7      	bhi.n	8005764 <HAL_Delay+0x28>
  {
  }
}
 8005774:	bf00      	nop
 8005776:	3710      	adds	r7, #16
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}
 800577c:	2000000c 	.word	0x2000000c

08005780 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8005780:	b480      	push	{r7}
 8005782:	af00      	add	r7, sp, #0
  return __STM32F4xx_HAL_VERSION;
 8005784:	4b02      	ldr	r3, [pc, #8]	; (8005790 <HAL_GetHalVersion+0x10>)
}
 8005786:	4618      	mov	r0, r3
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr
 8005790:	01070600 	.word	0x01070600

08005794 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8005794:	b480      	push	{r7}
 8005796:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE) >> 16U);
 8005798:	4b03      	ldr	r3, [pc, #12]	; (80057a8 <HAL_GetREVID+0x14>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	0c1b      	lsrs	r3, r3, #16
}
 800579e:	4618      	mov	r0, r3
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr
 80057a8:	e0042000 	.word	0xe0042000

080057ac <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 80057ac:	b480      	push	{r7}
 80057ae:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 80057b0:	4b04      	ldr	r3, [pc, #16]	; (80057c4 <HAL_GetDEVID+0x18>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr
 80057c2:	bf00      	nop
 80057c4:	e0042000 	.word	0xe0042000

080057c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f003 0307 	and.w	r3, r3, #7
 80057d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80057d8:	4b0c      	ldr	r3, [pc, #48]	; (800580c <__NVIC_SetPriorityGrouping+0x44>)
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80057de:	68ba      	ldr	r2, [r7, #8]
 80057e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80057e4:	4013      	ands	r3, r2
 80057e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80057f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80057f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80057fa:	4a04      	ldr	r2, [pc, #16]	; (800580c <__NVIC_SetPriorityGrouping+0x44>)
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	60d3      	str	r3, [r2, #12]
}
 8005800:	bf00      	nop
 8005802:	3714      	adds	r7, #20
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr
 800580c:	e000ed00 	.word	0xe000ed00

08005810 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005810:	b480      	push	{r7}
 8005812:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005814:	4b04      	ldr	r3, [pc, #16]	; (8005828 <__NVIC_GetPriorityGrouping+0x18>)
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	0a1b      	lsrs	r3, r3, #8
 800581a:	f003 0307 	and.w	r3, r3, #7
}
 800581e:	4618      	mov	r0, r3
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr
 8005828:	e000ed00 	.word	0xe000ed00

0800582c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800582c:	b480      	push	{r7}
 800582e:	b083      	sub	sp, #12
 8005830:	af00      	add	r7, sp, #0
 8005832:	4603      	mov	r3, r0
 8005834:	6039      	str	r1, [r7, #0]
 8005836:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800583c:	2b00      	cmp	r3, #0
 800583e:	db0a      	blt.n	8005856 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	b2da      	uxtb	r2, r3
 8005844:	490c      	ldr	r1, [pc, #48]	; (8005878 <__NVIC_SetPriority+0x4c>)
 8005846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800584a:	0112      	lsls	r2, r2, #4
 800584c:	b2d2      	uxtb	r2, r2
 800584e:	440b      	add	r3, r1
 8005850:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005854:	e00a      	b.n	800586c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	b2da      	uxtb	r2, r3
 800585a:	4908      	ldr	r1, [pc, #32]	; (800587c <__NVIC_SetPriority+0x50>)
 800585c:	79fb      	ldrb	r3, [r7, #7]
 800585e:	f003 030f 	and.w	r3, r3, #15
 8005862:	3b04      	subs	r3, #4
 8005864:	0112      	lsls	r2, r2, #4
 8005866:	b2d2      	uxtb	r2, r2
 8005868:	440b      	add	r3, r1
 800586a:	761a      	strb	r2, [r3, #24]
}
 800586c:	bf00      	nop
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr
 8005878:	e000e100 	.word	0xe000e100
 800587c:	e000ed00 	.word	0xe000ed00

08005880 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005880:	b480      	push	{r7}
 8005882:	b089      	sub	sp, #36	; 0x24
 8005884:	af00      	add	r7, sp, #0
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f003 0307 	and.w	r3, r3, #7
 8005892:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	f1c3 0307 	rsb	r3, r3, #7
 800589a:	2b04      	cmp	r3, #4
 800589c:	bf28      	it	cs
 800589e:	2304      	movcs	r3, #4
 80058a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	3304      	adds	r3, #4
 80058a6:	2b06      	cmp	r3, #6
 80058a8:	d902      	bls.n	80058b0 <NVIC_EncodePriority+0x30>
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	3b03      	subs	r3, #3
 80058ae:	e000      	b.n	80058b2 <NVIC_EncodePriority+0x32>
 80058b0:	2300      	movs	r3, #0
 80058b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058b4:	f04f 32ff 	mov.w	r2, #4294967295
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	fa02 f303 	lsl.w	r3, r2, r3
 80058be:	43da      	mvns	r2, r3
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	401a      	ands	r2, r3
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80058c8:	f04f 31ff 	mov.w	r1, #4294967295
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	fa01 f303 	lsl.w	r3, r1, r3
 80058d2:	43d9      	mvns	r1, r3
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058d8:	4313      	orrs	r3, r2
         );
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3724      	adds	r7, #36	; 0x24
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr
	...

080058e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b082      	sub	sp, #8
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	3b01      	subs	r3, #1
 80058f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80058f8:	d301      	bcc.n	80058fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80058fa:	2301      	movs	r3, #1
 80058fc:	e00f      	b.n	800591e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80058fe:	4a0a      	ldr	r2, [pc, #40]	; (8005928 <SysTick_Config+0x40>)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	3b01      	subs	r3, #1
 8005904:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005906:	210f      	movs	r1, #15
 8005908:	f04f 30ff 	mov.w	r0, #4294967295
 800590c:	f7ff ff8e 	bl	800582c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005910:	4b05      	ldr	r3, [pc, #20]	; (8005928 <SysTick_Config+0x40>)
 8005912:	2200      	movs	r2, #0
 8005914:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005916:	4b04      	ldr	r3, [pc, #16]	; (8005928 <SysTick_Config+0x40>)
 8005918:	2207      	movs	r2, #7
 800591a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800591c:	2300      	movs	r3, #0
}
 800591e:	4618      	mov	r0, r3
 8005920:	3708      	adds	r7, #8
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	e000e010 	.word	0xe000e010

0800592c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b082      	sub	sp, #8
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f7ff ff47 	bl	80057c8 <__NVIC_SetPriorityGrouping>
}
 800593a:	bf00      	nop
 800593c:	3708      	adds	r7, #8
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}

08005942 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005942:	b580      	push	{r7, lr}
 8005944:	b086      	sub	sp, #24
 8005946:	af00      	add	r7, sp, #0
 8005948:	4603      	mov	r3, r0
 800594a:	60b9      	str	r1, [r7, #8]
 800594c:	607a      	str	r2, [r7, #4]
 800594e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005950:	2300      	movs	r3, #0
 8005952:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005954:	f7ff ff5c 	bl	8005810 <__NVIC_GetPriorityGrouping>
 8005958:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	68b9      	ldr	r1, [r7, #8]
 800595e:	6978      	ldr	r0, [r7, #20]
 8005960:	f7ff ff8e 	bl	8005880 <NVIC_EncodePriority>
 8005964:	4602      	mov	r2, r0
 8005966:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800596a:	4611      	mov	r1, r2
 800596c:	4618      	mov	r0, r3
 800596e:	f7ff ff5d 	bl	800582c <__NVIC_SetPriority>
}
 8005972:	bf00      	nop
 8005974:	3718      	adds	r7, #24
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}

0800597a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800597a:	b580      	push	{r7, lr}
 800597c:	b082      	sub	sp, #8
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f7ff ffb0 	bl	80058e8 <SysTick_Config>
 8005988:	4603      	mov	r3, r0
}
 800598a:	4618      	mov	r0, r3
 800598c:	3708      	adds	r7, #8
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}

08005992 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005992:	b580      	push	{r7, lr}
 8005994:	b082      	sub	sp, #8
 8005996:	af00      	add	r7, sp, #0
 8005998:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d101      	bne.n	80059a4 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	e011      	b.n	80059c8 <HAL_CRC_Init+0x36>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	795b      	ldrb	r3, [r3, #5]
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d105      	bne.n	80059ba <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f006 fcbb 	bl	800c330 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2202      	movs	r2, #2
 80059be:	715a      	strb	r2, [r3, #5]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80059c6:	2300      	movs	r3, #0
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3708      	adds	r7, #8
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b089      	sub	sp, #36	; 0x24
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80059da:	2300      	movs	r3, #0
 80059dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80059de:	2300      	movs	r3, #0
 80059e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80059e2:	2300      	movs	r3, #0
 80059e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80059e6:	2300      	movs	r3, #0
 80059e8:	61fb      	str	r3, [r7, #28]
 80059ea:	e165      	b.n	8005cb8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80059ec:	2201      	movs	r2, #1
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	fa02 f303 	lsl.w	r3, r2, r3
 80059f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	697a      	ldr	r2, [r7, #20]
 80059fc:	4013      	ands	r3, r2
 80059fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005a00:	693a      	ldr	r2, [r7, #16]
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	429a      	cmp	r2, r3
 8005a06:	f040 8154 	bne.w	8005cb2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	2b02      	cmp	r3, #2
 8005a10:	d003      	beq.n	8005a1a <HAL_GPIO_Init+0x4a>
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	2b12      	cmp	r3, #18
 8005a18:	d123      	bne.n	8005a62 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	08da      	lsrs	r2, r3, #3
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	3208      	adds	r2, #8
 8005a22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	f003 0307 	and.w	r3, r3, #7
 8005a2e:	009b      	lsls	r3, r3, #2
 8005a30:	220f      	movs	r2, #15
 8005a32:	fa02 f303 	lsl.w	r3, r2, r3
 8005a36:	43db      	mvns	r3, r3
 8005a38:	69ba      	ldr	r2, [r7, #24]
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	691a      	ldr	r2, [r3, #16]
 8005a42:	69fb      	ldr	r3, [r7, #28]
 8005a44:	f003 0307 	and.w	r3, r3, #7
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a4e:	69ba      	ldr	r2, [r7, #24]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	08da      	lsrs	r2, r3, #3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	3208      	adds	r2, #8
 8005a5c:	69b9      	ldr	r1, [r7, #24]
 8005a5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	005b      	lsls	r3, r3, #1
 8005a6c:	2203      	movs	r2, #3
 8005a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a72:	43db      	mvns	r3, r3
 8005a74:	69ba      	ldr	r2, [r7, #24]
 8005a76:	4013      	ands	r3, r2
 8005a78:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	f003 0203 	and.w	r2, r3, #3
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	005b      	lsls	r3, r3, #1
 8005a86:	fa02 f303 	lsl.w	r3, r2, r3
 8005a8a:	69ba      	ldr	r2, [r7, #24]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	69ba      	ldr	r2, [r7, #24]
 8005a94:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d00b      	beq.n	8005ab6 <HAL_GPIO_Init+0xe6>
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	2b02      	cmp	r3, #2
 8005aa4:	d007      	beq.n	8005ab6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005aaa:	2b11      	cmp	r3, #17
 8005aac:	d003      	beq.n	8005ab6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	2b12      	cmp	r3, #18
 8005ab4:	d130      	bne.n	8005b18 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	005b      	lsls	r3, r3, #1
 8005ac0:	2203      	movs	r2, #3
 8005ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac6:	43db      	mvns	r3, r3
 8005ac8:	69ba      	ldr	r2, [r7, #24]
 8005aca:	4013      	ands	r3, r2
 8005acc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	68da      	ldr	r2, [r3, #12]
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	005b      	lsls	r3, r3, #1
 8005ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8005ada:	69ba      	ldr	r2, [r7, #24]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	69ba      	ldr	r2, [r7, #24]
 8005ae4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005aec:	2201      	movs	r2, #1
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	fa02 f303 	lsl.w	r3, r2, r3
 8005af4:	43db      	mvns	r3, r3
 8005af6:	69ba      	ldr	r2, [r7, #24]
 8005af8:	4013      	ands	r3, r2
 8005afa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	091b      	lsrs	r3, r3, #4
 8005b02:	f003 0201 	and.w	r2, r3, #1
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	fa02 f303 	lsl.w	r3, r2, r3
 8005b0c:	69ba      	ldr	r2, [r7, #24]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	69ba      	ldr	r2, [r7, #24]
 8005b16:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	005b      	lsls	r3, r3, #1
 8005b22:	2203      	movs	r2, #3
 8005b24:	fa02 f303 	lsl.w	r3, r2, r3
 8005b28:	43db      	mvns	r3, r3
 8005b2a:	69ba      	ldr	r2, [r7, #24]
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	689a      	ldr	r2, [r3, #8]
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	005b      	lsls	r3, r3, #1
 8005b38:	fa02 f303 	lsl.w	r3, r2, r3
 8005b3c:	69ba      	ldr	r2, [r7, #24]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	69ba      	ldr	r2, [r7, #24]
 8005b46:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	f000 80ae 	beq.w	8005cb2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b56:	2300      	movs	r3, #0
 8005b58:	60fb      	str	r3, [r7, #12]
 8005b5a:	4b5c      	ldr	r3, [pc, #368]	; (8005ccc <HAL_GPIO_Init+0x2fc>)
 8005b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b5e:	4a5b      	ldr	r2, [pc, #364]	; (8005ccc <HAL_GPIO_Init+0x2fc>)
 8005b60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b64:	6453      	str	r3, [r2, #68]	; 0x44
 8005b66:	4b59      	ldr	r3, [pc, #356]	; (8005ccc <HAL_GPIO_Init+0x2fc>)
 8005b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b6e:	60fb      	str	r3, [r7, #12]
 8005b70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005b72:	4a57      	ldr	r2, [pc, #348]	; (8005cd0 <HAL_GPIO_Init+0x300>)
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	089b      	lsrs	r3, r3, #2
 8005b78:	3302      	adds	r3, #2
 8005b7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	f003 0303 	and.w	r3, r3, #3
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	220f      	movs	r2, #15
 8005b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b8e:	43db      	mvns	r3, r3
 8005b90:	69ba      	ldr	r2, [r7, #24]
 8005b92:	4013      	ands	r3, r2
 8005b94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a4e      	ldr	r2, [pc, #312]	; (8005cd4 <HAL_GPIO_Init+0x304>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d025      	beq.n	8005bea <HAL_GPIO_Init+0x21a>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a4d      	ldr	r2, [pc, #308]	; (8005cd8 <HAL_GPIO_Init+0x308>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d01f      	beq.n	8005be6 <HAL_GPIO_Init+0x216>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a4c      	ldr	r2, [pc, #304]	; (8005cdc <HAL_GPIO_Init+0x30c>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d019      	beq.n	8005be2 <HAL_GPIO_Init+0x212>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a4b      	ldr	r2, [pc, #300]	; (8005ce0 <HAL_GPIO_Init+0x310>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d013      	beq.n	8005bde <HAL_GPIO_Init+0x20e>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a4a      	ldr	r2, [pc, #296]	; (8005ce4 <HAL_GPIO_Init+0x314>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d00d      	beq.n	8005bda <HAL_GPIO_Init+0x20a>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a49      	ldr	r2, [pc, #292]	; (8005ce8 <HAL_GPIO_Init+0x318>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d007      	beq.n	8005bd6 <HAL_GPIO_Init+0x206>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a48      	ldr	r2, [pc, #288]	; (8005cec <HAL_GPIO_Init+0x31c>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d101      	bne.n	8005bd2 <HAL_GPIO_Init+0x202>
 8005bce:	2306      	movs	r3, #6
 8005bd0:	e00c      	b.n	8005bec <HAL_GPIO_Init+0x21c>
 8005bd2:	2307      	movs	r3, #7
 8005bd4:	e00a      	b.n	8005bec <HAL_GPIO_Init+0x21c>
 8005bd6:	2305      	movs	r3, #5
 8005bd8:	e008      	b.n	8005bec <HAL_GPIO_Init+0x21c>
 8005bda:	2304      	movs	r3, #4
 8005bdc:	e006      	b.n	8005bec <HAL_GPIO_Init+0x21c>
 8005bde:	2303      	movs	r3, #3
 8005be0:	e004      	b.n	8005bec <HAL_GPIO_Init+0x21c>
 8005be2:	2302      	movs	r3, #2
 8005be4:	e002      	b.n	8005bec <HAL_GPIO_Init+0x21c>
 8005be6:	2301      	movs	r3, #1
 8005be8:	e000      	b.n	8005bec <HAL_GPIO_Init+0x21c>
 8005bea:	2300      	movs	r3, #0
 8005bec:	69fa      	ldr	r2, [r7, #28]
 8005bee:	f002 0203 	and.w	r2, r2, #3
 8005bf2:	0092      	lsls	r2, r2, #2
 8005bf4:	4093      	lsls	r3, r2
 8005bf6:	69ba      	ldr	r2, [r7, #24]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005bfc:	4934      	ldr	r1, [pc, #208]	; (8005cd0 <HAL_GPIO_Init+0x300>)
 8005bfe:	69fb      	ldr	r3, [r7, #28]
 8005c00:	089b      	lsrs	r3, r3, #2
 8005c02:	3302      	adds	r3, #2
 8005c04:	69ba      	ldr	r2, [r7, #24]
 8005c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005c0a:	4b39      	ldr	r3, [pc, #228]	; (8005cf0 <HAL_GPIO_Init+0x320>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	43db      	mvns	r3, r3
 8005c14:	69ba      	ldr	r2, [r7, #24]
 8005c16:	4013      	ands	r3, r2
 8005c18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d003      	beq.n	8005c2e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005c26:	69ba      	ldr	r2, [r7, #24]
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005c2e:	4a30      	ldr	r2, [pc, #192]	; (8005cf0 <HAL_GPIO_Init+0x320>)
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005c34:	4b2e      	ldr	r3, [pc, #184]	; (8005cf0 <HAL_GPIO_Init+0x320>)
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	43db      	mvns	r3, r3
 8005c3e:	69ba      	ldr	r2, [r7, #24]
 8005c40:	4013      	ands	r3, r2
 8005c42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d003      	beq.n	8005c58 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005c50:	69ba      	ldr	r2, [r7, #24]
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005c58:	4a25      	ldr	r2, [pc, #148]	; (8005cf0 <HAL_GPIO_Init+0x320>)
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005c5e:	4b24      	ldr	r3, [pc, #144]	; (8005cf0 <HAL_GPIO_Init+0x320>)
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	43db      	mvns	r3, r3
 8005c68:	69ba      	ldr	r2, [r7, #24]
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d003      	beq.n	8005c82 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005c7a:	69ba      	ldr	r2, [r7, #24]
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005c82:	4a1b      	ldr	r2, [pc, #108]	; (8005cf0 <HAL_GPIO_Init+0x320>)
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005c88:	4b19      	ldr	r3, [pc, #100]	; (8005cf0 <HAL_GPIO_Init+0x320>)
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	43db      	mvns	r3, r3
 8005c92:	69ba      	ldr	r2, [r7, #24]
 8005c94:	4013      	ands	r3, r2
 8005c96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d003      	beq.n	8005cac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005ca4:	69ba      	ldr	r2, [r7, #24]
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005cac:	4a10      	ldr	r2, [pc, #64]	; (8005cf0 <HAL_GPIO_Init+0x320>)
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005cb2:	69fb      	ldr	r3, [r7, #28]
 8005cb4:	3301      	adds	r3, #1
 8005cb6:	61fb      	str	r3, [r7, #28]
 8005cb8:	69fb      	ldr	r3, [r7, #28]
 8005cba:	2b0f      	cmp	r3, #15
 8005cbc:	f67f ae96 	bls.w	80059ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005cc0:	bf00      	nop
 8005cc2:	3724      	adds	r7, #36	; 0x24
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr
 8005ccc:	40023800 	.word	0x40023800
 8005cd0:	40013800 	.word	0x40013800
 8005cd4:	40020000 	.word	0x40020000
 8005cd8:	40020400 	.word	0x40020400
 8005cdc:	40020800 	.word	0x40020800
 8005ce0:	40020c00 	.word	0x40020c00
 8005ce4:	40021000 	.word	0x40021000
 8005ce8:	40021400 	.word	0x40021400
 8005cec:	40021800 	.word	0x40021800
 8005cf0:	40013c00 	.word	0x40013c00

08005cf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	460b      	mov	r3, r1
 8005cfe:	807b      	strh	r3, [r7, #2]
 8005d00:	4613      	mov	r3, r2
 8005d02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005d04:	787b      	ldrb	r3, [r7, #1]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d003      	beq.n	8005d12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005d0a:	887a      	ldrh	r2, [r7, #2]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005d10:	e003      	b.n	8005d1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005d12:	887b      	ldrh	r3, [r7, #2]
 8005d14:	041a      	lsls	r2, r3, #16
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	619a      	str	r2, [r3, #24]
}
 8005d1a:	bf00      	nop
 8005d1c:	370c      	adds	r7, #12
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr
	...

08005d28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b084      	sub	sp, #16
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d101      	bne.n	8005d3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e0ca      	b.n	8005ed2 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d3c:	4b67      	ldr	r3, [pc, #412]	; (8005edc <HAL_RCC_ClockConfig+0x1b4>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 030f 	and.w	r3, r3, #15
 8005d44:	683a      	ldr	r2, [r7, #0]
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d90c      	bls.n	8005d64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d4a:	4b64      	ldr	r3, [pc, #400]	; (8005edc <HAL_RCC_ClockConfig+0x1b4>)
 8005d4c:	683a      	ldr	r2, [r7, #0]
 8005d4e:	b2d2      	uxtb	r2, r2
 8005d50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d52:	4b62      	ldr	r3, [pc, #392]	; (8005edc <HAL_RCC_ClockConfig+0x1b4>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 030f 	and.w	r3, r3, #15
 8005d5a:	683a      	ldr	r2, [r7, #0]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d001      	beq.n	8005d64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	e0b6      	b.n	8005ed2 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 0302 	and.w	r3, r3, #2
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d020      	beq.n	8005db2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f003 0304 	and.w	r3, r3, #4
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d005      	beq.n	8005d88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d7c:	4b58      	ldr	r3, [pc, #352]	; (8005ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	4a57      	ldr	r2, [pc, #348]	; (8005ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8005d82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005d86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 0308 	and.w	r3, r3, #8
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d005      	beq.n	8005da0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d94:	4b52      	ldr	r3, [pc, #328]	; (8005ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	4a51      	ldr	r2, [pc, #324]	; (8005ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8005d9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005d9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005da0:	4b4f      	ldr	r3, [pc, #316]	; (8005ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	494c      	ldr	r1, [pc, #304]	; (8005ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8005dae:	4313      	orrs	r3, r2
 8005db0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 0301 	and.w	r3, r3, #1
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d044      	beq.n	8005e48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d107      	bne.n	8005dd6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dc6:	4b46      	ldr	r3, [pc, #280]	; (8005ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d119      	bne.n	8005e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e07d      	b.n	8005ed2 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d003      	beq.n	8005de6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005de2:	2b03      	cmp	r3, #3
 8005de4:	d107      	bne.n	8005df6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005de6:	4b3e      	ldr	r3, [pc, #248]	; (8005ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d109      	bne.n	8005e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e06d      	b.n	8005ed2 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005df6:	4b3a      	ldr	r3, [pc, #232]	; (8005ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 0302 	and.w	r3, r3, #2
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d101      	bne.n	8005e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e065      	b.n	8005ed2 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e06:	4b36      	ldr	r3, [pc, #216]	; (8005ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	f023 0203 	bic.w	r2, r3, #3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	4933      	ldr	r1, [pc, #204]	; (8005ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8005e14:	4313      	orrs	r3, r2
 8005e16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e18:	f7ff fc84 	bl	8005724 <HAL_GetTick>
 8005e1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e1e:	e00a      	b.n	8005e36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e20:	f7ff fc80 	bl	8005724 <HAL_GetTick>
 8005e24:	4602      	mov	r2, r0
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d901      	bls.n	8005e36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
 8005e34:	e04d      	b.n	8005ed2 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e36:	4b2a      	ldr	r3, [pc, #168]	; (8005ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	f003 020c 	and.w	r2, r3, #12
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d1eb      	bne.n	8005e20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e48:	4b24      	ldr	r3, [pc, #144]	; (8005edc <HAL_RCC_ClockConfig+0x1b4>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f003 030f 	and.w	r3, r3, #15
 8005e50:	683a      	ldr	r2, [r7, #0]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d20c      	bcs.n	8005e70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e56:	4b21      	ldr	r3, [pc, #132]	; (8005edc <HAL_RCC_ClockConfig+0x1b4>)
 8005e58:	683a      	ldr	r2, [r7, #0]
 8005e5a:	b2d2      	uxtb	r2, r2
 8005e5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e5e:	4b1f      	ldr	r3, [pc, #124]	; (8005edc <HAL_RCC_ClockConfig+0x1b4>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 030f 	and.w	r3, r3, #15
 8005e66:	683a      	ldr	r2, [r7, #0]
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d001      	beq.n	8005e70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e030      	b.n	8005ed2 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 0304 	and.w	r3, r3, #4
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d008      	beq.n	8005e8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e7c:	4b18      	ldr	r3, [pc, #96]	; (8005ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	4915      	ldr	r1, [pc, #84]	; (8005ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f003 0308 	and.w	r3, r3, #8
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d009      	beq.n	8005eae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e9a:	4b11      	ldr	r3, [pc, #68]	; (8005ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	00db      	lsls	r3, r3, #3
 8005ea8:	490d      	ldr	r1, [pc, #52]	; (8005ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005eae:	f000 f851 	bl	8005f54 <HAL_RCC_GetSysClockFreq>
 8005eb2:	4601      	mov	r1, r0
 8005eb4:	4b0a      	ldr	r3, [pc, #40]	; (8005ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	091b      	lsrs	r3, r3, #4
 8005eba:	f003 030f 	and.w	r3, r3, #15
 8005ebe:	4a09      	ldr	r2, [pc, #36]	; (8005ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ec0:	5cd3      	ldrb	r3, [r2, r3]
 8005ec2:	fa21 f303 	lsr.w	r3, r1, r3
 8005ec6:	4a08      	ldr	r2, [pc, #32]	; (8005ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8005ec8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8005eca:	2000      	movs	r0, #0
 8005ecc:	f7ff fbe6 	bl	800569c <HAL_InitTick>

  return HAL_OK;
 8005ed0:	2300      	movs	r3, #0
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3710      	adds	r7, #16
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	40023c00 	.word	0x40023c00
 8005ee0:	40023800 	.word	0x40023800
 8005ee4:	0800f888 	.word	0x0800f888
 8005ee8:	20000574 	.word	0x20000574

08005eec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005eec:	b480      	push	{r7}
 8005eee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ef0:	4b03      	ldr	r3, [pc, #12]	; (8005f00 <HAL_RCC_GetHCLKFreq+0x14>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr
 8005efe:	bf00      	nop
 8005f00:	20000574 	.word	0x20000574

08005f04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005f08:	f7ff fff0 	bl	8005eec <HAL_RCC_GetHCLKFreq>
 8005f0c:	4601      	mov	r1, r0
 8005f0e:	4b05      	ldr	r3, [pc, #20]	; (8005f24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	0a9b      	lsrs	r3, r3, #10
 8005f14:	f003 0307 	and.w	r3, r3, #7
 8005f18:	4a03      	ldr	r2, [pc, #12]	; (8005f28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f1a:	5cd3      	ldrb	r3, [r2, r3]
 8005f1c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	bd80      	pop	{r7, pc}
 8005f24:	40023800 	.word	0x40023800
 8005f28:	0800f898 	.word	0x0800f898

08005f2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005f30:	f7ff ffdc 	bl	8005eec <HAL_RCC_GetHCLKFreq>
 8005f34:	4601      	mov	r1, r0
 8005f36:	4b05      	ldr	r3, [pc, #20]	; (8005f4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	0b5b      	lsrs	r3, r3, #13
 8005f3c:	f003 0307 	and.w	r3, r3, #7
 8005f40:	4a03      	ldr	r2, [pc, #12]	; (8005f50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f42:	5cd3      	ldrb	r3, [r2, r3]
 8005f44:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	bd80      	pop	{r7, pc}
 8005f4c:	40023800 	.word	0x40023800
 8005f50:	0800f898 	.word	0x0800f898

08005f54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f56:	b087      	sub	sp, #28
 8005f58:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8005f62:	2300      	movs	r3, #0
 8005f64:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8005f66:	2300      	movs	r3, #0
 8005f68:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f6e:	4bc6      	ldr	r3, [pc, #792]	; (8006288 <HAL_RCC_GetSysClockFreq+0x334>)
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	f003 030c 	and.w	r3, r3, #12
 8005f76:	2b0c      	cmp	r3, #12
 8005f78:	f200 817e 	bhi.w	8006278 <HAL_RCC_GetSysClockFreq+0x324>
 8005f7c:	a201      	add	r2, pc, #4	; (adr r2, 8005f84 <HAL_RCC_GetSysClockFreq+0x30>)
 8005f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f82:	bf00      	nop
 8005f84:	08005fb9 	.word	0x08005fb9
 8005f88:	08006279 	.word	0x08006279
 8005f8c:	08006279 	.word	0x08006279
 8005f90:	08006279 	.word	0x08006279
 8005f94:	08005fbf 	.word	0x08005fbf
 8005f98:	08006279 	.word	0x08006279
 8005f9c:	08006279 	.word	0x08006279
 8005fa0:	08006279 	.word	0x08006279
 8005fa4:	08005fc5 	.word	0x08005fc5
 8005fa8:	08006279 	.word	0x08006279
 8005fac:	08006279 	.word	0x08006279
 8005fb0:	08006279 	.word	0x08006279
 8005fb4:	08006121 	.word	0x08006121
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005fb8:	4bb4      	ldr	r3, [pc, #720]	; (800628c <HAL_RCC_GetSysClockFreq+0x338>)
 8005fba:	613b      	str	r3, [r7, #16]
       break;
 8005fbc:	e15f      	b.n	800627e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005fbe:	4bb4      	ldr	r3, [pc, #720]	; (8006290 <HAL_RCC_GetSysClockFreq+0x33c>)
 8005fc0:	613b      	str	r3, [r7, #16]
      break;
 8005fc2:	e15c      	b.n	800627e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005fc4:	4bb0      	ldr	r3, [pc, #704]	; (8006288 <HAL_RCC_GetSysClockFreq+0x334>)
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fcc:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005fce:	4bae      	ldr	r3, [pc, #696]	; (8006288 <HAL_RCC_GetSysClockFreq+0x334>)
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d04a      	beq.n	8006070 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fda:	4bab      	ldr	r3, [pc, #684]	; (8006288 <HAL_RCC_GetSysClockFreq+0x334>)
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	099b      	lsrs	r3, r3, #6
 8005fe0:	f04f 0400 	mov.w	r4, #0
 8005fe4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005fe8:	f04f 0200 	mov.w	r2, #0
 8005fec:	ea03 0501 	and.w	r5, r3, r1
 8005ff0:	ea04 0602 	and.w	r6, r4, r2
 8005ff4:	4629      	mov	r1, r5
 8005ff6:	4632      	mov	r2, r6
 8005ff8:	f04f 0300 	mov.w	r3, #0
 8005ffc:	f04f 0400 	mov.w	r4, #0
 8006000:	0154      	lsls	r4, r2, #5
 8006002:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006006:	014b      	lsls	r3, r1, #5
 8006008:	4619      	mov	r1, r3
 800600a:	4622      	mov	r2, r4
 800600c:	1b49      	subs	r1, r1, r5
 800600e:	eb62 0206 	sbc.w	r2, r2, r6
 8006012:	f04f 0300 	mov.w	r3, #0
 8006016:	f04f 0400 	mov.w	r4, #0
 800601a:	0194      	lsls	r4, r2, #6
 800601c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006020:	018b      	lsls	r3, r1, #6
 8006022:	1a5b      	subs	r3, r3, r1
 8006024:	eb64 0402 	sbc.w	r4, r4, r2
 8006028:	f04f 0100 	mov.w	r1, #0
 800602c:	f04f 0200 	mov.w	r2, #0
 8006030:	00e2      	lsls	r2, r4, #3
 8006032:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006036:	00d9      	lsls	r1, r3, #3
 8006038:	460b      	mov	r3, r1
 800603a:	4614      	mov	r4, r2
 800603c:	195b      	adds	r3, r3, r5
 800603e:	eb44 0406 	adc.w	r4, r4, r6
 8006042:	f04f 0100 	mov.w	r1, #0
 8006046:	f04f 0200 	mov.w	r2, #0
 800604a:	0262      	lsls	r2, r4, #9
 800604c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8006050:	0259      	lsls	r1, r3, #9
 8006052:	460b      	mov	r3, r1
 8006054:	4614      	mov	r4, r2
 8006056:	4618      	mov	r0, r3
 8006058:	4621      	mov	r1, r4
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f04f 0400 	mov.w	r4, #0
 8006060:	461a      	mov	r2, r3
 8006062:	4623      	mov	r3, r4
 8006064:	f7ff f8de 	bl	8005224 <__aeabi_uldivmod>
 8006068:	4603      	mov	r3, r0
 800606a:	460c      	mov	r4, r1
 800606c:	617b      	str	r3, [r7, #20]
 800606e:	e049      	b.n	8006104 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006070:	4b85      	ldr	r3, [pc, #532]	; (8006288 <HAL_RCC_GetSysClockFreq+0x334>)
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	099b      	lsrs	r3, r3, #6
 8006076:	f04f 0400 	mov.w	r4, #0
 800607a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800607e:	f04f 0200 	mov.w	r2, #0
 8006082:	ea03 0501 	and.w	r5, r3, r1
 8006086:	ea04 0602 	and.w	r6, r4, r2
 800608a:	4629      	mov	r1, r5
 800608c:	4632      	mov	r2, r6
 800608e:	f04f 0300 	mov.w	r3, #0
 8006092:	f04f 0400 	mov.w	r4, #0
 8006096:	0154      	lsls	r4, r2, #5
 8006098:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800609c:	014b      	lsls	r3, r1, #5
 800609e:	4619      	mov	r1, r3
 80060a0:	4622      	mov	r2, r4
 80060a2:	1b49      	subs	r1, r1, r5
 80060a4:	eb62 0206 	sbc.w	r2, r2, r6
 80060a8:	f04f 0300 	mov.w	r3, #0
 80060ac:	f04f 0400 	mov.w	r4, #0
 80060b0:	0194      	lsls	r4, r2, #6
 80060b2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80060b6:	018b      	lsls	r3, r1, #6
 80060b8:	1a5b      	subs	r3, r3, r1
 80060ba:	eb64 0402 	sbc.w	r4, r4, r2
 80060be:	f04f 0100 	mov.w	r1, #0
 80060c2:	f04f 0200 	mov.w	r2, #0
 80060c6:	00e2      	lsls	r2, r4, #3
 80060c8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80060cc:	00d9      	lsls	r1, r3, #3
 80060ce:	460b      	mov	r3, r1
 80060d0:	4614      	mov	r4, r2
 80060d2:	195b      	adds	r3, r3, r5
 80060d4:	eb44 0406 	adc.w	r4, r4, r6
 80060d8:	f04f 0100 	mov.w	r1, #0
 80060dc:	f04f 0200 	mov.w	r2, #0
 80060e0:	02a2      	lsls	r2, r4, #10
 80060e2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80060e6:	0299      	lsls	r1, r3, #10
 80060e8:	460b      	mov	r3, r1
 80060ea:	4614      	mov	r4, r2
 80060ec:	4618      	mov	r0, r3
 80060ee:	4621      	mov	r1, r4
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f04f 0400 	mov.w	r4, #0
 80060f6:	461a      	mov	r2, r3
 80060f8:	4623      	mov	r3, r4
 80060fa:	f7ff f893 	bl	8005224 <__aeabi_uldivmod>
 80060fe:	4603      	mov	r3, r0
 8006100:	460c      	mov	r4, r1
 8006102:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006104:	4b60      	ldr	r3, [pc, #384]	; (8006288 <HAL_RCC_GetSysClockFreq+0x334>)
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	0c1b      	lsrs	r3, r3, #16
 800610a:	f003 0303 	and.w	r3, r3, #3
 800610e:	3301      	adds	r3, #1
 8006110:	005b      	lsls	r3, r3, #1
 8006112:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8006114:	697a      	ldr	r2, [r7, #20]
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	fbb2 f3f3 	udiv	r3, r2, r3
 800611c:	613b      	str	r3, [r7, #16]
      break;
 800611e:	e0ae      	b.n	800627e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006120:	4b59      	ldr	r3, [pc, #356]	; (8006288 <HAL_RCC_GetSysClockFreq+0x334>)
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006128:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800612a:	4b57      	ldr	r3, [pc, #348]	; (8006288 <HAL_RCC_GetSysClockFreq+0x334>)
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006132:	2b00      	cmp	r3, #0
 8006134:	d04a      	beq.n	80061cc <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006136:	4b54      	ldr	r3, [pc, #336]	; (8006288 <HAL_RCC_GetSysClockFreq+0x334>)
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	099b      	lsrs	r3, r3, #6
 800613c:	f04f 0400 	mov.w	r4, #0
 8006140:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006144:	f04f 0200 	mov.w	r2, #0
 8006148:	ea03 0501 	and.w	r5, r3, r1
 800614c:	ea04 0602 	and.w	r6, r4, r2
 8006150:	4629      	mov	r1, r5
 8006152:	4632      	mov	r2, r6
 8006154:	f04f 0300 	mov.w	r3, #0
 8006158:	f04f 0400 	mov.w	r4, #0
 800615c:	0154      	lsls	r4, r2, #5
 800615e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006162:	014b      	lsls	r3, r1, #5
 8006164:	4619      	mov	r1, r3
 8006166:	4622      	mov	r2, r4
 8006168:	1b49      	subs	r1, r1, r5
 800616a:	eb62 0206 	sbc.w	r2, r2, r6
 800616e:	f04f 0300 	mov.w	r3, #0
 8006172:	f04f 0400 	mov.w	r4, #0
 8006176:	0194      	lsls	r4, r2, #6
 8006178:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800617c:	018b      	lsls	r3, r1, #6
 800617e:	1a5b      	subs	r3, r3, r1
 8006180:	eb64 0402 	sbc.w	r4, r4, r2
 8006184:	f04f 0100 	mov.w	r1, #0
 8006188:	f04f 0200 	mov.w	r2, #0
 800618c:	00e2      	lsls	r2, r4, #3
 800618e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006192:	00d9      	lsls	r1, r3, #3
 8006194:	460b      	mov	r3, r1
 8006196:	4614      	mov	r4, r2
 8006198:	195b      	adds	r3, r3, r5
 800619a:	eb44 0406 	adc.w	r4, r4, r6
 800619e:	f04f 0100 	mov.w	r1, #0
 80061a2:	f04f 0200 	mov.w	r2, #0
 80061a6:	0262      	lsls	r2, r4, #9
 80061a8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80061ac:	0259      	lsls	r1, r3, #9
 80061ae:	460b      	mov	r3, r1
 80061b0:	4614      	mov	r4, r2
 80061b2:	4618      	mov	r0, r3
 80061b4:	4621      	mov	r1, r4
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f04f 0400 	mov.w	r4, #0
 80061bc:	461a      	mov	r2, r3
 80061be:	4623      	mov	r3, r4
 80061c0:	f7ff f830 	bl	8005224 <__aeabi_uldivmod>
 80061c4:	4603      	mov	r3, r0
 80061c6:	460c      	mov	r4, r1
 80061c8:	617b      	str	r3, [r7, #20]
 80061ca:	e049      	b.n	8006260 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061cc:	4b2e      	ldr	r3, [pc, #184]	; (8006288 <HAL_RCC_GetSysClockFreq+0x334>)
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	099b      	lsrs	r3, r3, #6
 80061d2:	f04f 0400 	mov.w	r4, #0
 80061d6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80061da:	f04f 0200 	mov.w	r2, #0
 80061de:	ea03 0501 	and.w	r5, r3, r1
 80061e2:	ea04 0602 	and.w	r6, r4, r2
 80061e6:	4629      	mov	r1, r5
 80061e8:	4632      	mov	r2, r6
 80061ea:	f04f 0300 	mov.w	r3, #0
 80061ee:	f04f 0400 	mov.w	r4, #0
 80061f2:	0154      	lsls	r4, r2, #5
 80061f4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80061f8:	014b      	lsls	r3, r1, #5
 80061fa:	4619      	mov	r1, r3
 80061fc:	4622      	mov	r2, r4
 80061fe:	1b49      	subs	r1, r1, r5
 8006200:	eb62 0206 	sbc.w	r2, r2, r6
 8006204:	f04f 0300 	mov.w	r3, #0
 8006208:	f04f 0400 	mov.w	r4, #0
 800620c:	0194      	lsls	r4, r2, #6
 800620e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006212:	018b      	lsls	r3, r1, #6
 8006214:	1a5b      	subs	r3, r3, r1
 8006216:	eb64 0402 	sbc.w	r4, r4, r2
 800621a:	f04f 0100 	mov.w	r1, #0
 800621e:	f04f 0200 	mov.w	r2, #0
 8006222:	00e2      	lsls	r2, r4, #3
 8006224:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006228:	00d9      	lsls	r1, r3, #3
 800622a:	460b      	mov	r3, r1
 800622c:	4614      	mov	r4, r2
 800622e:	195b      	adds	r3, r3, r5
 8006230:	eb44 0406 	adc.w	r4, r4, r6
 8006234:	f04f 0100 	mov.w	r1, #0
 8006238:	f04f 0200 	mov.w	r2, #0
 800623c:	02a2      	lsls	r2, r4, #10
 800623e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006242:	0299      	lsls	r1, r3, #10
 8006244:	460b      	mov	r3, r1
 8006246:	4614      	mov	r4, r2
 8006248:	4618      	mov	r0, r3
 800624a:	4621      	mov	r1, r4
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f04f 0400 	mov.w	r4, #0
 8006252:	461a      	mov	r2, r3
 8006254:	4623      	mov	r3, r4
 8006256:	f7fe ffe5 	bl	8005224 <__aeabi_uldivmod>
 800625a:	4603      	mov	r3, r0
 800625c:	460c      	mov	r4, r1
 800625e:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006260:	4b09      	ldr	r3, [pc, #36]	; (8006288 <HAL_RCC_GetSysClockFreq+0x334>)
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	0f1b      	lsrs	r3, r3, #28
 8006266:	f003 0307 	and.w	r3, r3, #7
 800626a:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 800626c:	697a      	ldr	r2, [r7, #20]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	fbb2 f3f3 	udiv	r3, r2, r3
 8006274:	613b      	str	r3, [r7, #16]
      break;
 8006276:	e002      	b.n	800627e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006278:	4b04      	ldr	r3, [pc, #16]	; (800628c <HAL_RCC_GetSysClockFreq+0x338>)
 800627a:	613b      	str	r3, [r7, #16]
      break;
 800627c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800627e:	693b      	ldr	r3, [r7, #16]
}
 8006280:	4618      	mov	r0, r3
 8006282:	371c      	adds	r7, #28
 8006284:	46bd      	mov	sp, r7
 8006286:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006288:	40023800 	.word	0x40023800
 800628c:	00f42400 	.word	0x00f42400
 8006290:	007a1200 	.word	0x007a1200

08006294 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b086      	sub	sp, #24
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800629c:	2300      	movs	r3, #0
 800629e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 0301 	and.w	r3, r3, #1
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	f000 8083 	beq.w	80063b4 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80062ae:	4b95      	ldr	r3, [pc, #596]	; (8006504 <HAL_RCC_OscConfig+0x270>)
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	f003 030c 	and.w	r3, r3, #12
 80062b6:	2b04      	cmp	r3, #4
 80062b8:	d019      	beq.n	80062ee <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80062ba:	4b92      	ldr	r3, [pc, #584]	; (8006504 <HAL_RCC_OscConfig+0x270>)
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80062c2:	2b08      	cmp	r3, #8
 80062c4:	d106      	bne.n	80062d4 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80062c6:	4b8f      	ldr	r3, [pc, #572]	; (8006504 <HAL_RCC_OscConfig+0x270>)
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062d2:	d00c      	beq.n	80062ee <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062d4:	4b8b      	ldr	r3, [pc, #556]	; (8006504 <HAL_RCC_OscConfig+0x270>)
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80062dc:	2b0c      	cmp	r3, #12
 80062de:	d112      	bne.n	8006306 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062e0:	4b88      	ldr	r3, [pc, #544]	; (8006504 <HAL_RCC_OscConfig+0x270>)
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062ec:	d10b      	bne.n	8006306 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062ee:	4b85      	ldr	r3, [pc, #532]	; (8006504 <HAL_RCC_OscConfig+0x270>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d05b      	beq.n	80063b2 <HAL_RCC_OscConfig+0x11e>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d157      	bne.n	80063b2 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	e216      	b.n	8006734 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800630e:	d106      	bne.n	800631e <HAL_RCC_OscConfig+0x8a>
 8006310:	4b7c      	ldr	r3, [pc, #496]	; (8006504 <HAL_RCC_OscConfig+0x270>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a7b      	ldr	r2, [pc, #492]	; (8006504 <HAL_RCC_OscConfig+0x270>)
 8006316:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800631a:	6013      	str	r3, [r2, #0]
 800631c:	e01d      	b.n	800635a <HAL_RCC_OscConfig+0xc6>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006326:	d10c      	bne.n	8006342 <HAL_RCC_OscConfig+0xae>
 8006328:	4b76      	ldr	r3, [pc, #472]	; (8006504 <HAL_RCC_OscConfig+0x270>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a75      	ldr	r2, [pc, #468]	; (8006504 <HAL_RCC_OscConfig+0x270>)
 800632e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006332:	6013      	str	r3, [r2, #0]
 8006334:	4b73      	ldr	r3, [pc, #460]	; (8006504 <HAL_RCC_OscConfig+0x270>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a72      	ldr	r2, [pc, #456]	; (8006504 <HAL_RCC_OscConfig+0x270>)
 800633a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800633e:	6013      	str	r3, [r2, #0]
 8006340:	e00b      	b.n	800635a <HAL_RCC_OscConfig+0xc6>
 8006342:	4b70      	ldr	r3, [pc, #448]	; (8006504 <HAL_RCC_OscConfig+0x270>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a6f      	ldr	r2, [pc, #444]	; (8006504 <HAL_RCC_OscConfig+0x270>)
 8006348:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800634c:	6013      	str	r3, [r2, #0]
 800634e:	4b6d      	ldr	r3, [pc, #436]	; (8006504 <HAL_RCC_OscConfig+0x270>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a6c      	ldr	r2, [pc, #432]	; (8006504 <HAL_RCC_OscConfig+0x270>)
 8006354:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006358:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d013      	beq.n	800638a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006362:	f7ff f9df 	bl	8005724 <HAL_GetTick>
 8006366:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006368:	e008      	b.n	800637c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800636a:	f7ff f9db 	bl	8005724 <HAL_GetTick>
 800636e:	4602      	mov	r2, r0
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	1ad3      	subs	r3, r2, r3
 8006374:	2b64      	cmp	r3, #100	; 0x64
 8006376:	d901      	bls.n	800637c <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006378:	2303      	movs	r3, #3
 800637a:	e1db      	b.n	8006734 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800637c:	4b61      	ldr	r3, [pc, #388]	; (8006504 <HAL_RCC_OscConfig+0x270>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006384:	2b00      	cmp	r3, #0
 8006386:	d0f0      	beq.n	800636a <HAL_RCC_OscConfig+0xd6>
 8006388:	e014      	b.n	80063b4 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800638a:	f7ff f9cb 	bl	8005724 <HAL_GetTick>
 800638e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006390:	e008      	b.n	80063a4 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006392:	f7ff f9c7 	bl	8005724 <HAL_GetTick>
 8006396:	4602      	mov	r2, r0
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	1ad3      	subs	r3, r2, r3
 800639c:	2b64      	cmp	r3, #100	; 0x64
 800639e:	d901      	bls.n	80063a4 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80063a0:	2303      	movs	r3, #3
 80063a2:	e1c7      	b.n	8006734 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063a4:	4b57      	ldr	r3, [pc, #348]	; (8006504 <HAL_RCC_OscConfig+0x270>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d1f0      	bne.n	8006392 <HAL_RCC_OscConfig+0xfe>
 80063b0:	e000      	b.n	80063b4 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063b2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f003 0302 	and.w	r3, r3, #2
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d06f      	beq.n	80064a0 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80063c0:	4b50      	ldr	r3, [pc, #320]	; (8006504 <HAL_RCC_OscConfig+0x270>)
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	f003 030c 	and.w	r3, r3, #12
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d017      	beq.n	80063fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80063cc:	4b4d      	ldr	r3, [pc, #308]	; (8006504 <HAL_RCC_OscConfig+0x270>)
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80063d4:	2b08      	cmp	r3, #8
 80063d6:	d105      	bne.n	80063e4 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80063d8:	4b4a      	ldr	r3, [pc, #296]	; (8006504 <HAL_RCC_OscConfig+0x270>)
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d00b      	beq.n	80063fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80063e4:	4b47      	ldr	r3, [pc, #284]	; (8006504 <HAL_RCC_OscConfig+0x270>)
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80063ec:	2b0c      	cmp	r3, #12
 80063ee:	d11c      	bne.n	800642a <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80063f0:	4b44      	ldr	r3, [pc, #272]	; (8006504 <HAL_RCC_OscConfig+0x270>)
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d116      	bne.n	800642a <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063fc:	4b41      	ldr	r3, [pc, #260]	; (8006504 <HAL_RCC_OscConfig+0x270>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f003 0302 	and.w	r3, r3, #2
 8006404:	2b00      	cmp	r3, #0
 8006406:	d005      	beq.n	8006414 <HAL_RCC_OscConfig+0x180>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	68db      	ldr	r3, [r3, #12]
 800640c:	2b01      	cmp	r3, #1
 800640e:	d001      	beq.n	8006414 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	e18f      	b.n	8006734 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006414:	4b3b      	ldr	r3, [pc, #236]	; (8006504 <HAL_RCC_OscConfig+0x270>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	691b      	ldr	r3, [r3, #16]
 8006420:	00db      	lsls	r3, r3, #3
 8006422:	4938      	ldr	r1, [pc, #224]	; (8006504 <HAL_RCC_OscConfig+0x270>)
 8006424:	4313      	orrs	r3, r2
 8006426:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006428:	e03a      	b.n	80064a0 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d020      	beq.n	8006474 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006432:	4b35      	ldr	r3, [pc, #212]	; (8006508 <HAL_RCC_OscConfig+0x274>)
 8006434:	2201      	movs	r2, #1
 8006436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006438:	f7ff f974 	bl	8005724 <HAL_GetTick>
 800643c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800643e:	e008      	b.n	8006452 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006440:	f7ff f970 	bl	8005724 <HAL_GetTick>
 8006444:	4602      	mov	r2, r0
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	1ad3      	subs	r3, r2, r3
 800644a:	2b02      	cmp	r3, #2
 800644c:	d901      	bls.n	8006452 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800644e:	2303      	movs	r3, #3
 8006450:	e170      	b.n	8006734 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006452:	4b2c      	ldr	r3, [pc, #176]	; (8006504 <HAL_RCC_OscConfig+0x270>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f003 0302 	and.w	r3, r3, #2
 800645a:	2b00      	cmp	r3, #0
 800645c:	d0f0      	beq.n	8006440 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800645e:	4b29      	ldr	r3, [pc, #164]	; (8006504 <HAL_RCC_OscConfig+0x270>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	691b      	ldr	r3, [r3, #16]
 800646a:	00db      	lsls	r3, r3, #3
 800646c:	4925      	ldr	r1, [pc, #148]	; (8006504 <HAL_RCC_OscConfig+0x270>)
 800646e:	4313      	orrs	r3, r2
 8006470:	600b      	str	r3, [r1, #0]
 8006472:	e015      	b.n	80064a0 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006474:	4b24      	ldr	r3, [pc, #144]	; (8006508 <HAL_RCC_OscConfig+0x274>)
 8006476:	2200      	movs	r2, #0
 8006478:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800647a:	f7ff f953 	bl	8005724 <HAL_GetTick>
 800647e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006480:	e008      	b.n	8006494 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006482:	f7ff f94f 	bl	8005724 <HAL_GetTick>
 8006486:	4602      	mov	r2, r0
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	1ad3      	subs	r3, r2, r3
 800648c:	2b02      	cmp	r3, #2
 800648e:	d901      	bls.n	8006494 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8006490:	2303      	movs	r3, #3
 8006492:	e14f      	b.n	8006734 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006494:	4b1b      	ldr	r3, [pc, #108]	; (8006504 <HAL_RCC_OscConfig+0x270>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f003 0302 	and.w	r3, r3, #2
 800649c:	2b00      	cmp	r3, #0
 800649e:	d1f0      	bne.n	8006482 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 0308 	and.w	r3, r3, #8
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d037      	beq.n	800651c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	695b      	ldr	r3, [r3, #20]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d016      	beq.n	80064e2 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064b4:	4b15      	ldr	r3, [pc, #84]	; (800650c <HAL_RCC_OscConfig+0x278>)
 80064b6:	2201      	movs	r2, #1
 80064b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064ba:	f7ff f933 	bl	8005724 <HAL_GetTick>
 80064be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064c0:	e008      	b.n	80064d4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064c2:	f7ff f92f 	bl	8005724 <HAL_GetTick>
 80064c6:	4602      	mov	r2, r0
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	1ad3      	subs	r3, r2, r3
 80064cc:	2b02      	cmp	r3, #2
 80064ce:	d901      	bls.n	80064d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80064d0:	2303      	movs	r3, #3
 80064d2:	e12f      	b.n	8006734 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064d4:	4b0b      	ldr	r3, [pc, #44]	; (8006504 <HAL_RCC_OscConfig+0x270>)
 80064d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064d8:	f003 0302 	and.w	r3, r3, #2
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d0f0      	beq.n	80064c2 <HAL_RCC_OscConfig+0x22e>
 80064e0:	e01c      	b.n	800651c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80064e2:	4b0a      	ldr	r3, [pc, #40]	; (800650c <HAL_RCC_OscConfig+0x278>)
 80064e4:	2200      	movs	r2, #0
 80064e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064e8:	f7ff f91c 	bl	8005724 <HAL_GetTick>
 80064ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064ee:	e00f      	b.n	8006510 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064f0:	f7ff f918 	bl	8005724 <HAL_GetTick>
 80064f4:	4602      	mov	r2, r0
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	1ad3      	subs	r3, r2, r3
 80064fa:	2b02      	cmp	r3, #2
 80064fc:	d908      	bls.n	8006510 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80064fe:	2303      	movs	r3, #3
 8006500:	e118      	b.n	8006734 <HAL_RCC_OscConfig+0x4a0>
 8006502:	bf00      	nop
 8006504:	40023800 	.word	0x40023800
 8006508:	42470000 	.word	0x42470000
 800650c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006510:	4b8a      	ldr	r3, [pc, #552]	; (800673c <HAL_RCC_OscConfig+0x4a8>)
 8006512:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006514:	f003 0302 	and.w	r3, r3, #2
 8006518:	2b00      	cmp	r3, #0
 800651a:	d1e9      	bne.n	80064f0 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 0304 	and.w	r3, r3, #4
 8006524:	2b00      	cmp	r3, #0
 8006526:	f000 8097 	beq.w	8006658 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800652a:	2300      	movs	r3, #0
 800652c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800652e:	4b83      	ldr	r3, [pc, #524]	; (800673c <HAL_RCC_OscConfig+0x4a8>)
 8006530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006536:	2b00      	cmp	r3, #0
 8006538:	d10f      	bne.n	800655a <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800653a:	2300      	movs	r3, #0
 800653c:	60fb      	str	r3, [r7, #12]
 800653e:	4b7f      	ldr	r3, [pc, #508]	; (800673c <HAL_RCC_OscConfig+0x4a8>)
 8006540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006542:	4a7e      	ldr	r2, [pc, #504]	; (800673c <HAL_RCC_OscConfig+0x4a8>)
 8006544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006548:	6413      	str	r3, [r2, #64]	; 0x40
 800654a:	4b7c      	ldr	r3, [pc, #496]	; (800673c <HAL_RCC_OscConfig+0x4a8>)
 800654c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800654e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006552:	60fb      	str	r3, [r7, #12]
 8006554:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006556:	2301      	movs	r3, #1
 8006558:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800655a:	4b79      	ldr	r3, [pc, #484]	; (8006740 <HAL_RCC_OscConfig+0x4ac>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006562:	2b00      	cmp	r3, #0
 8006564:	d118      	bne.n	8006598 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006566:	4b76      	ldr	r3, [pc, #472]	; (8006740 <HAL_RCC_OscConfig+0x4ac>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a75      	ldr	r2, [pc, #468]	; (8006740 <HAL_RCC_OscConfig+0x4ac>)
 800656c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006570:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006572:	f7ff f8d7 	bl	8005724 <HAL_GetTick>
 8006576:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006578:	e008      	b.n	800658c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800657a:	f7ff f8d3 	bl	8005724 <HAL_GetTick>
 800657e:	4602      	mov	r2, r0
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	1ad3      	subs	r3, r2, r3
 8006584:	2b02      	cmp	r3, #2
 8006586:	d901      	bls.n	800658c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006588:	2303      	movs	r3, #3
 800658a:	e0d3      	b.n	8006734 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800658c:	4b6c      	ldr	r3, [pc, #432]	; (8006740 <HAL_RCC_OscConfig+0x4ac>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006594:	2b00      	cmp	r3, #0
 8006596:	d0f0      	beq.n	800657a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	2b01      	cmp	r3, #1
 800659e:	d106      	bne.n	80065ae <HAL_RCC_OscConfig+0x31a>
 80065a0:	4b66      	ldr	r3, [pc, #408]	; (800673c <HAL_RCC_OscConfig+0x4a8>)
 80065a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065a4:	4a65      	ldr	r2, [pc, #404]	; (800673c <HAL_RCC_OscConfig+0x4a8>)
 80065a6:	f043 0301 	orr.w	r3, r3, #1
 80065aa:	6713      	str	r3, [r2, #112]	; 0x70
 80065ac:	e01c      	b.n	80065e8 <HAL_RCC_OscConfig+0x354>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	2b05      	cmp	r3, #5
 80065b4:	d10c      	bne.n	80065d0 <HAL_RCC_OscConfig+0x33c>
 80065b6:	4b61      	ldr	r3, [pc, #388]	; (800673c <HAL_RCC_OscConfig+0x4a8>)
 80065b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ba:	4a60      	ldr	r2, [pc, #384]	; (800673c <HAL_RCC_OscConfig+0x4a8>)
 80065bc:	f043 0304 	orr.w	r3, r3, #4
 80065c0:	6713      	str	r3, [r2, #112]	; 0x70
 80065c2:	4b5e      	ldr	r3, [pc, #376]	; (800673c <HAL_RCC_OscConfig+0x4a8>)
 80065c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065c6:	4a5d      	ldr	r2, [pc, #372]	; (800673c <HAL_RCC_OscConfig+0x4a8>)
 80065c8:	f043 0301 	orr.w	r3, r3, #1
 80065cc:	6713      	str	r3, [r2, #112]	; 0x70
 80065ce:	e00b      	b.n	80065e8 <HAL_RCC_OscConfig+0x354>
 80065d0:	4b5a      	ldr	r3, [pc, #360]	; (800673c <HAL_RCC_OscConfig+0x4a8>)
 80065d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065d4:	4a59      	ldr	r2, [pc, #356]	; (800673c <HAL_RCC_OscConfig+0x4a8>)
 80065d6:	f023 0301 	bic.w	r3, r3, #1
 80065da:	6713      	str	r3, [r2, #112]	; 0x70
 80065dc:	4b57      	ldr	r3, [pc, #348]	; (800673c <HAL_RCC_OscConfig+0x4a8>)
 80065de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065e0:	4a56      	ldr	r2, [pc, #344]	; (800673c <HAL_RCC_OscConfig+0x4a8>)
 80065e2:	f023 0304 	bic.w	r3, r3, #4
 80065e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d015      	beq.n	800661c <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065f0:	f7ff f898 	bl	8005724 <HAL_GetTick>
 80065f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065f6:	e00a      	b.n	800660e <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065f8:	f7ff f894 	bl	8005724 <HAL_GetTick>
 80065fc:	4602      	mov	r2, r0
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	1ad3      	subs	r3, r2, r3
 8006602:	f241 3288 	movw	r2, #5000	; 0x1388
 8006606:	4293      	cmp	r3, r2
 8006608:	d901      	bls.n	800660e <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800660a:	2303      	movs	r3, #3
 800660c:	e092      	b.n	8006734 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800660e:	4b4b      	ldr	r3, [pc, #300]	; (800673c <HAL_RCC_OscConfig+0x4a8>)
 8006610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006612:	f003 0302 	and.w	r3, r3, #2
 8006616:	2b00      	cmp	r3, #0
 8006618:	d0ee      	beq.n	80065f8 <HAL_RCC_OscConfig+0x364>
 800661a:	e014      	b.n	8006646 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800661c:	f7ff f882 	bl	8005724 <HAL_GetTick>
 8006620:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006622:	e00a      	b.n	800663a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006624:	f7ff f87e 	bl	8005724 <HAL_GetTick>
 8006628:	4602      	mov	r2, r0
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	1ad3      	subs	r3, r2, r3
 800662e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006632:	4293      	cmp	r3, r2
 8006634:	d901      	bls.n	800663a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8006636:	2303      	movs	r3, #3
 8006638:	e07c      	b.n	8006734 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800663a:	4b40      	ldr	r3, [pc, #256]	; (800673c <HAL_RCC_OscConfig+0x4a8>)
 800663c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800663e:	f003 0302 	and.w	r3, r3, #2
 8006642:	2b00      	cmp	r3, #0
 8006644:	d1ee      	bne.n	8006624 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006646:	7dfb      	ldrb	r3, [r7, #23]
 8006648:	2b01      	cmp	r3, #1
 800664a:	d105      	bne.n	8006658 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800664c:	4b3b      	ldr	r3, [pc, #236]	; (800673c <HAL_RCC_OscConfig+0x4a8>)
 800664e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006650:	4a3a      	ldr	r2, [pc, #232]	; (800673c <HAL_RCC_OscConfig+0x4a8>)
 8006652:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006656:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	699b      	ldr	r3, [r3, #24]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d068      	beq.n	8006732 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006660:	4b36      	ldr	r3, [pc, #216]	; (800673c <HAL_RCC_OscConfig+0x4a8>)
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	f003 030c 	and.w	r3, r3, #12
 8006668:	2b08      	cmp	r3, #8
 800666a:	d060      	beq.n	800672e <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	699b      	ldr	r3, [r3, #24]
 8006670:	2b02      	cmp	r3, #2
 8006672:	d145      	bne.n	8006700 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006674:	4b33      	ldr	r3, [pc, #204]	; (8006744 <HAL_RCC_OscConfig+0x4b0>)
 8006676:	2200      	movs	r2, #0
 8006678:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800667a:	f7ff f853 	bl	8005724 <HAL_GetTick>
 800667e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006680:	e008      	b.n	8006694 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006682:	f7ff f84f 	bl	8005724 <HAL_GetTick>
 8006686:	4602      	mov	r2, r0
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	1ad3      	subs	r3, r2, r3
 800668c:	2b02      	cmp	r3, #2
 800668e:	d901      	bls.n	8006694 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8006690:	2303      	movs	r3, #3
 8006692:	e04f      	b.n	8006734 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006694:	4b29      	ldr	r3, [pc, #164]	; (800673c <HAL_RCC_OscConfig+0x4a8>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800669c:	2b00      	cmp	r3, #0
 800669e:	d1f0      	bne.n	8006682 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	69da      	ldr	r2, [r3, #28]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6a1b      	ldr	r3, [r3, #32]
 80066a8:	431a      	orrs	r2, r3
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ae:	019b      	lsls	r3, r3, #6
 80066b0:	431a      	orrs	r2, r3
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066b6:	085b      	lsrs	r3, r3, #1
 80066b8:	3b01      	subs	r3, #1
 80066ba:	041b      	lsls	r3, r3, #16
 80066bc:	431a      	orrs	r2, r3
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c2:	061b      	lsls	r3, r3, #24
 80066c4:	431a      	orrs	r2, r3
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ca:	071b      	lsls	r3, r3, #28
 80066cc:	491b      	ldr	r1, [pc, #108]	; (800673c <HAL_RCC_OscConfig+0x4a8>)
 80066ce:	4313      	orrs	r3, r2
 80066d0:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80066d2:	4b1c      	ldr	r3, [pc, #112]	; (8006744 <HAL_RCC_OscConfig+0x4b0>)
 80066d4:	2201      	movs	r2, #1
 80066d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066d8:	f7ff f824 	bl	8005724 <HAL_GetTick>
 80066dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066de:	e008      	b.n	80066f2 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066e0:	f7ff f820 	bl	8005724 <HAL_GetTick>
 80066e4:	4602      	mov	r2, r0
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	1ad3      	subs	r3, r2, r3
 80066ea:	2b02      	cmp	r3, #2
 80066ec:	d901      	bls.n	80066f2 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80066ee:	2303      	movs	r3, #3
 80066f0:	e020      	b.n	8006734 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066f2:	4b12      	ldr	r3, [pc, #72]	; (800673c <HAL_RCC_OscConfig+0x4a8>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d0f0      	beq.n	80066e0 <HAL_RCC_OscConfig+0x44c>
 80066fe:	e018      	b.n	8006732 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006700:	4b10      	ldr	r3, [pc, #64]	; (8006744 <HAL_RCC_OscConfig+0x4b0>)
 8006702:	2200      	movs	r2, #0
 8006704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006706:	f7ff f80d 	bl	8005724 <HAL_GetTick>
 800670a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800670c:	e008      	b.n	8006720 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800670e:	f7ff f809 	bl	8005724 <HAL_GetTick>
 8006712:	4602      	mov	r2, r0
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	1ad3      	subs	r3, r2, r3
 8006718:	2b02      	cmp	r3, #2
 800671a:	d901      	bls.n	8006720 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 800671c:	2303      	movs	r3, #3
 800671e:	e009      	b.n	8006734 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006720:	4b06      	ldr	r3, [pc, #24]	; (800673c <HAL_RCC_OscConfig+0x4a8>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006728:	2b00      	cmp	r3, #0
 800672a:	d1f0      	bne.n	800670e <HAL_RCC_OscConfig+0x47a>
 800672c:	e001      	b.n	8006732 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	e000      	b.n	8006734 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8006732:	2300      	movs	r3, #0
}
 8006734:	4618      	mov	r0, r3
 8006736:	3718      	adds	r7, #24
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}
 800673c:	40023800 	.word	0x40023800
 8006740:	40007000 	.word	0x40007000
 8006744:	42470060 	.word	0x42470060

08006748 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b082      	sub	sp, #8
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d101      	bne.n	800675a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	e03f      	b.n	80067da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006760:	b2db      	uxtb	r3, r3
 8006762:	2b00      	cmp	r3, #0
 8006764:	d106      	bne.n	8006774 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f005 fe00 	bl	800c374 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2224      	movs	r2, #36	; 0x24
 8006778:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	68da      	ldr	r2, [r3, #12]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800678a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f000 f9b1 	bl	8006af4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	691a      	ldr	r2, [r3, #16]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80067a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	695a      	ldr	r2, [r3, #20]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80067b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	68da      	ldr	r2, [r3, #12]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80067c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2220      	movs	r2, #32
 80067cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2220      	movs	r2, #32
 80067d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80067d8:	2300      	movs	r3, #0
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3708      	adds	r7, #8
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}

080067e2 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067e2:	b580      	push	{r7, lr}
 80067e4:	b088      	sub	sp, #32
 80067e6:	af02      	add	r7, sp, #8
 80067e8:	60f8      	str	r0, [r7, #12]
 80067ea:	60b9      	str	r1, [r7, #8]
 80067ec:	603b      	str	r3, [r7, #0]
 80067ee:	4613      	mov	r3, r2
 80067f0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80067f2:	2300      	movs	r3, #0
 80067f4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	2b20      	cmp	r3, #32
 8006800:	f040 8083 	bne.w	800690a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d002      	beq.n	8006810 <HAL_UART_Transmit+0x2e>
 800680a:	88fb      	ldrh	r3, [r7, #6]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d101      	bne.n	8006814 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8006810:	2301      	movs	r3, #1
 8006812:	e07b      	b.n	800690c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800681a:	2b01      	cmp	r3, #1
 800681c:	d101      	bne.n	8006822 <HAL_UART_Transmit+0x40>
 800681e:	2302      	movs	r3, #2
 8006820:	e074      	b.n	800690c <HAL_UART_Transmit+0x12a>
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2201      	movs	r2, #1
 8006826:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2200      	movs	r2, #0
 800682e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2221      	movs	r2, #33	; 0x21
 8006834:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006838:	f7fe ff74 	bl	8005724 <HAL_GetTick>
 800683c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	88fa      	ldrh	r2, [r7, #6]
 8006842:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	88fa      	ldrh	r2, [r7, #6]
 8006848:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800684a:	e042      	b.n	80068d2 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006850:	b29b      	uxth	r3, r3
 8006852:	3b01      	subs	r3, #1
 8006854:	b29a      	uxth	r2, r3
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006862:	d122      	bne.n	80068aa <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	9300      	str	r3, [sp, #0]
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	2200      	movs	r2, #0
 800686c:	2180      	movs	r1, #128	; 0x80
 800686e:	68f8      	ldr	r0, [r7, #12]
 8006870:	f000 f8f6 	bl	8006a60 <UART_WaitOnFlagUntilTimeout>
 8006874:	4603      	mov	r3, r0
 8006876:	2b00      	cmp	r3, #0
 8006878:	d001      	beq.n	800687e <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800687a:	2303      	movs	r3, #3
 800687c:	e046      	b.n	800690c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	881b      	ldrh	r3, [r3, #0]
 8006886:	461a      	mov	r2, r3
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006890:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	691b      	ldr	r3, [r3, #16]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d103      	bne.n	80068a2 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	3302      	adds	r3, #2
 800689e:	60bb      	str	r3, [r7, #8]
 80068a0:	e017      	b.n	80068d2 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	3301      	adds	r3, #1
 80068a6:	60bb      	str	r3, [r7, #8]
 80068a8:	e013      	b.n	80068d2 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	9300      	str	r3, [sp, #0]
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	2200      	movs	r2, #0
 80068b2:	2180      	movs	r1, #128	; 0x80
 80068b4:	68f8      	ldr	r0, [r7, #12]
 80068b6:	f000 f8d3 	bl	8006a60 <UART_WaitOnFlagUntilTimeout>
 80068ba:	4603      	mov	r3, r0
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d001      	beq.n	80068c4 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80068c0:	2303      	movs	r3, #3
 80068c2:	e023      	b.n	800690c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	1c5a      	adds	r2, r3, #1
 80068c8:	60ba      	str	r2, [r7, #8]
 80068ca:	781a      	ldrb	r2, [r3, #0]
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d1b7      	bne.n	800684c <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	9300      	str	r3, [sp, #0]
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	2200      	movs	r2, #0
 80068e4:	2140      	movs	r1, #64	; 0x40
 80068e6:	68f8      	ldr	r0, [r7, #12]
 80068e8:	f000 f8ba 	bl	8006a60 <UART_WaitOnFlagUntilTimeout>
 80068ec:	4603      	mov	r3, r0
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d001      	beq.n	80068f6 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80068f2:	2303      	movs	r3, #3
 80068f4:	e00a      	b.n	800690c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2220      	movs	r2, #32
 80068fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2200      	movs	r2, #0
 8006902:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8006906:	2300      	movs	r3, #0
 8006908:	e000      	b.n	800690c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800690a:	2302      	movs	r3, #2
  }
}
 800690c:	4618      	mov	r0, r3
 800690e:	3718      	adds	r7, #24
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}

08006914 <HAL_UART_Receive>:
  * @param  Size Amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b088      	sub	sp, #32
 8006918:	af02      	add	r7, sp, #8
 800691a:	60f8      	str	r0, [r7, #12]
 800691c:	60b9      	str	r1, [r7, #8]
 800691e:	603b      	str	r3, [r7, #0]
 8006920:	4613      	mov	r3, r2
 8006922:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8006924:	2300      	movs	r3, #0
 8006926:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800692e:	b2db      	uxtb	r3, r3
 8006930:	2b20      	cmp	r3, #32
 8006932:	f040 8090 	bne.w	8006a56 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d002      	beq.n	8006942 <HAL_UART_Receive+0x2e>
 800693c:	88fb      	ldrh	r3, [r7, #6]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d101      	bne.n	8006946 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	e088      	b.n	8006a58 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800694c:	2b01      	cmp	r3, #1
 800694e:	d101      	bne.n	8006954 <HAL_UART_Receive+0x40>
 8006950:	2302      	movs	r3, #2
 8006952:	e081      	b.n	8006a58 <HAL_UART_Receive+0x144>
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2201      	movs	r2, #1
 8006958:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2200      	movs	r2, #0
 8006960:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2222      	movs	r2, #34	; 0x22
 8006966:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800696a:	f7fe fedb 	bl	8005724 <HAL_GetTick>
 800696e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	88fa      	ldrh	r2, [r7, #6]
 8006974:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	88fa      	ldrh	r2, [r7, #6]
 800697a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800697c:	e05c      	b.n	8006a38 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006982:	b29b      	uxth	r3, r3
 8006984:	3b01      	subs	r3, #1
 8006986:	b29a      	uxth	r2, r3
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006994:	d12b      	bne.n	80069ee <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	9300      	str	r3, [sp, #0]
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	2200      	movs	r2, #0
 800699e:	2120      	movs	r1, #32
 80069a0:	68f8      	ldr	r0, [r7, #12]
 80069a2:	f000 f85d 	bl	8006a60 <UART_WaitOnFlagUntilTimeout>
 80069a6:	4603      	mov	r3, r0
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d001      	beq.n	80069b0 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 80069ac:	2303      	movs	r3, #3
 80069ae:	e053      	b.n	8006a58 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	691b      	ldr	r3, [r3, #16]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d10c      	bne.n	80069d6 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069c8:	b29a      	uxth	r2, r3
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	3302      	adds	r3, #2
 80069d2:	60bb      	str	r3, [r7, #8]
 80069d4:	e030      	b.n	8006a38 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	b29b      	uxth	r3, r3
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	b29a      	uxth	r2, r3
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	3301      	adds	r3, #1
 80069ea:	60bb      	str	r3, [r7, #8]
 80069ec:	e024      	b.n	8006a38 <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	9300      	str	r3, [sp, #0]
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	2200      	movs	r2, #0
 80069f6:	2120      	movs	r1, #32
 80069f8:	68f8      	ldr	r0, [r7, #12]
 80069fa:	f000 f831 	bl	8006a60 <UART_WaitOnFlagUntilTimeout>
 80069fe:	4603      	mov	r3, r0
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d001      	beq.n	8006a08 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8006a04:	2303      	movs	r3, #3
 8006a06:	e027      	b.n	8006a58 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	691b      	ldr	r3, [r3, #16]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d108      	bne.n	8006a22 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	6859      	ldr	r1, [r3, #4]
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	1c5a      	adds	r2, r3, #1
 8006a1a:	60ba      	str	r2, [r7, #8]
 8006a1c:	b2ca      	uxtb	r2, r1
 8006a1e:	701a      	strb	r2, [r3, #0]
 8006a20:	e00a      	b.n	8006a38 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	b2da      	uxtb	r2, r3
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	1c59      	adds	r1, r3, #1
 8006a2e:	60b9      	str	r1, [r7, #8]
 8006a30:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006a34:	b2d2      	uxtb	r2, r2
 8006a36:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d19d      	bne.n	800697e <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2220      	movs	r2, #32
 8006a46:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8006a52:	2300      	movs	r3, #0
 8006a54:	e000      	b.n	8006a58 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8006a56:	2302      	movs	r3, #2
  }
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3718      	adds	r7, #24
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b084      	sub	sp, #16
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	60f8      	str	r0, [r7, #12]
 8006a68:	60b9      	str	r1, [r7, #8]
 8006a6a:	603b      	str	r3, [r7, #0]
 8006a6c:	4613      	mov	r3, r2
 8006a6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a70:	e02c      	b.n	8006acc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a72:	69bb      	ldr	r3, [r7, #24]
 8006a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a78:	d028      	beq.n	8006acc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006a7a:	69bb      	ldr	r3, [r7, #24]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d007      	beq.n	8006a90 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a80:	f7fe fe50 	bl	8005724 <HAL_GetTick>
 8006a84:	4602      	mov	r2, r0
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	1ad3      	subs	r3, r2, r3
 8006a8a:	69ba      	ldr	r2, [r7, #24]
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d21d      	bcs.n	8006acc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	68da      	ldr	r2, [r3, #12]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006a9e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	695a      	ldr	r2, [r3, #20]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f022 0201 	bic.w	r2, r2, #1
 8006aae:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2220      	movs	r2, #32
 8006ab4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2220      	movs	r2, #32
 8006abc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006ac8:	2303      	movs	r3, #3
 8006aca:	e00f      	b.n	8006aec <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	4013      	ands	r3, r2
 8006ad6:	68ba      	ldr	r2, [r7, #8]
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	bf0c      	ite	eq
 8006adc:	2301      	moveq	r3, #1
 8006ade:	2300      	movne	r3, #0
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	79fb      	ldrb	r3, [r7, #7]
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d0c3      	beq.n	8006a72 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006aea:	2300      	movs	r3, #0
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3710      	adds	r7, #16
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006af4:	b5b0      	push	{r4, r5, r7, lr}
 8006af6:	b084      	sub	sp, #16
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	691b      	ldr	r3, [r3, #16]
 8006b02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	68da      	ldr	r2, [r3, #12]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	430a      	orrs	r2, r1
 8006b10:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	689a      	ldr	r2, [r3, #8]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	691b      	ldr	r3, [r3, #16]
 8006b1a:	431a      	orrs	r2, r3
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	695b      	ldr	r3, [r3, #20]
 8006b20:	431a      	orrs	r2, r3
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	69db      	ldr	r3, [r3, #28]
 8006b26:	4313      	orrs	r3, r2
 8006b28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	68db      	ldr	r3, [r3, #12]
 8006b30:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006b34:	f023 030c 	bic.w	r3, r3, #12
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	6812      	ldr	r2, [r2, #0]
 8006b3c:	68f9      	ldr	r1, [r7, #12]
 8006b3e:	430b      	orrs	r3, r1
 8006b40:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	695b      	ldr	r3, [r3, #20]
 8006b48:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	699a      	ldr	r2, [r3, #24]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	430a      	orrs	r2, r1
 8006b56:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	69db      	ldr	r3, [r3, #28]
 8006b5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b60:	f040 80e4 	bne.w	8006d2c <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4aab      	ldr	r2, [pc, #684]	; (8006e18 <UART_SetConfig+0x324>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d004      	beq.n	8006b78 <UART_SetConfig+0x84>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4aaa      	ldr	r2, [pc, #680]	; (8006e1c <UART_SetConfig+0x328>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d16c      	bne.n	8006c52 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8006b78:	f7ff f9d8 	bl	8005f2c <HAL_RCC_GetPCLK2Freq>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	4613      	mov	r3, r2
 8006b80:	009b      	lsls	r3, r3, #2
 8006b82:	4413      	add	r3, r2
 8006b84:	009a      	lsls	r2, r3, #2
 8006b86:	441a      	add	r2, r3
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	005b      	lsls	r3, r3, #1
 8006b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b92:	4aa3      	ldr	r2, [pc, #652]	; (8006e20 <UART_SetConfig+0x32c>)
 8006b94:	fba2 2303 	umull	r2, r3, r2, r3
 8006b98:	095b      	lsrs	r3, r3, #5
 8006b9a:	011c      	lsls	r4, r3, #4
 8006b9c:	f7ff f9c6 	bl	8005f2c <HAL_RCC_GetPCLK2Freq>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	4613      	mov	r3, r2
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	4413      	add	r3, r2
 8006ba8:	009a      	lsls	r2, r3, #2
 8006baa:	441a      	add	r2, r3
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	005b      	lsls	r3, r3, #1
 8006bb2:	fbb2 f5f3 	udiv	r5, r2, r3
 8006bb6:	f7ff f9b9 	bl	8005f2c <HAL_RCC_GetPCLK2Freq>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	4613      	mov	r3, r2
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	4413      	add	r3, r2
 8006bc2:	009a      	lsls	r2, r3, #2
 8006bc4:	441a      	add	r2, r3
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	005b      	lsls	r3, r3, #1
 8006bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bd0:	4a93      	ldr	r2, [pc, #588]	; (8006e20 <UART_SetConfig+0x32c>)
 8006bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8006bd6:	095b      	lsrs	r3, r3, #5
 8006bd8:	2264      	movs	r2, #100	; 0x64
 8006bda:	fb02 f303 	mul.w	r3, r2, r3
 8006bde:	1aeb      	subs	r3, r5, r3
 8006be0:	00db      	lsls	r3, r3, #3
 8006be2:	3332      	adds	r3, #50	; 0x32
 8006be4:	4a8e      	ldr	r2, [pc, #568]	; (8006e20 <UART_SetConfig+0x32c>)
 8006be6:	fba2 2303 	umull	r2, r3, r2, r3
 8006bea:	095b      	lsrs	r3, r3, #5
 8006bec:	005b      	lsls	r3, r3, #1
 8006bee:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006bf2:	441c      	add	r4, r3
 8006bf4:	f7ff f99a 	bl	8005f2c <HAL_RCC_GetPCLK2Freq>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	4613      	mov	r3, r2
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	4413      	add	r3, r2
 8006c00:	009a      	lsls	r2, r3, #2
 8006c02:	441a      	add	r2, r3
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	005b      	lsls	r3, r3, #1
 8006c0a:	fbb2 f5f3 	udiv	r5, r2, r3
 8006c0e:	f7ff f98d 	bl	8005f2c <HAL_RCC_GetPCLK2Freq>
 8006c12:	4602      	mov	r2, r0
 8006c14:	4613      	mov	r3, r2
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	4413      	add	r3, r2
 8006c1a:	009a      	lsls	r2, r3, #2
 8006c1c:	441a      	add	r2, r3
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	005b      	lsls	r3, r3, #1
 8006c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c28:	4a7d      	ldr	r2, [pc, #500]	; (8006e20 <UART_SetConfig+0x32c>)
 8006c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8006c2e:	095b      	lsrs	r3, r3, #5
 8006c30:	2264      	movs	r2, #100	; 0x64
 8006c32:	fb02 f303 	mul.w	r3, r2, r3
 8006c36:	1aeb      	subs	r3, r5, r3
 8006c38:	00db      	lsls	r3, r3, #3
 8006c3a:	3332      	adds	r3, #50	; 0x32
 8006c3c:	4a78      	ldr	r2, [pc, #480]	; (8006e20 <UART_SetConfig+0x32c>)
 8006c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c42:	095b      	lsrs	r3, r3, #5
 8006c44:	f003 0207 	and.w	r2, r3, #7
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4422      	add	r2, r4
 8006c4e:	609a      	str	r2, [r3, #8]
 8006c50:	e154      	b.n	8006efc <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8006c52:	f7ff f957 	bl	8005f04 <HAL_RCC_GetPCLK1Freq>
 8006c56:	4602      	mov	r2, r0
 8006c58:	4613      	mov	r3, r2
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	4413      	add	r3, r2
 8006c5e:	009a      	lsls	r2, r3, #2
 8006c60:	441a      	add	r2, r3
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	005b      	lsls	r3, r3, #1
 8006c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c6c:	4a6c      	ldr	r2, [pc, #432]	; (8006e20 <UART_SetConfig+0x32c>)
 8006c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c72:	095b      	lsrs	r3, r3, #5
 8006c74:	011c      	lsls	r4, r3, #4
 8006c76:	f7ff f945 	bl	8005f04 <HAL_RCC_GetPCLK1Freq>
 8006c7a:	4602      	mov	r2, r0
 8006c7c:	4613      	mov	r3, r2
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	4413      	add	r3, r2
 8006c82:	009a      	lsls	r2, r3, #2
 8006c84:	441a      	add	r2, r3
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	005b      	lsls	r3, r3, #1
 8006c8c:	fbb2 f5f3 	udiv	r5, r2, r3
 8006c90:	f7ff f938 	bl	8005f04 <HAL_RCC_GetPCLK1Freq>
 8006c94:	4602      	mov	r2, r0
 8006c96:	4613      	mov	r3, r2
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	4413      	add	r3, r2
 8006c9c:	009a      	lsls	r2, r3, #2
 8006c9e:	441a      	add	r2, r3
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	005b      	lsls	r3, r3, #1
 8006ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006caa:	4a5d      	ldr	r2, [pc, #372]	; (8006e20 <UART_SetConfig+0x32c>)
 8006cac:	fba2 2303 	umull	r2, r3, r2, r3
 8006cb0:	095b      	lsrs	r3, r3, #5
 8006cb2:	2264      	movs	r2, #100	; 0x64
 8006cb4:	fb02 f303 	mul.w	r3, r2, r3
 8006cb8:	1aeb      	subs	r3, r5, r3
 8006cba:	00db      	lsls	r3, r3, #3
 8006cbc:	3332      	adds	r3, #50	; 0x32
 8006cbe:	4a58      	ldr	r2, [pc, #352]	; (8006e20 <UART_SetConfig+0x32c>)
 8006cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8006cc4:	095b      	lsrs	r3, r3, #5
 8006cc6:	005b      	lsls	r3, r3, #1
 8006cc8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006ccc:	441c      	add	r4, r3
 8006cce:	f7ff f919 	bl	8005f04 <HAL_RCC_GetPCLK1Freq>
 8006cd2:	4602      	mov	r2, r0
 8006cd4:	4613      	mov	r3, r2
 8006cd6:	009b      	lsls	r3, r3, #2
 8006cd8:	4413      	add	r3, r2
 8006cda:	009a      	lsls	r2, r3, #2
 8006cdc:	441a      	add	r2, r3
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	005b      	lsls	r3, r3, #1
 8006ce4:	fbb2 f5f3 	udiv	r5, r2, r3
 8006ce8:	f7ff f90c 	bl	8005f04 <HAL_RCC_GetPCLK1Freq>
 8006cec:	4602      	mov	r2, r0
 8006cee:	4613      	mov	r3, r2
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	4413      	add	r3, r2
 8006cf4:	009a      	lsls	r2, r3, #2
 8006cf6:	441a      	add	r2, r3
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	005b      	lsls	r3, r3, #1
 8006cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d02:	4a47      	ldr	r2, [pc, #284]	; (8006e20 <UART_SetConfig+0x32c>)
 8006d04:	fba2 2303 	umull	r2, r3, r2, r3
 8006d08:	095b      	lsrs	r3, r3, #5
 8006d0a:	2264      	movs	r2, #100	; 0x64
 8006d0c:	fb02 f303 	mul.w	r3, r2, r3
 8006d10:	1aeb      	subs	r3, r5, r3
 8006d12:	00db      	lsls	r3, r3, #3
 8006d14:	3332      	adds	r3, #50	; 0x32
 8006d16:	4a42      	ldr	r2, [pc, #264]	; (8006e20 <UART_SetConfig+0x32c>)
 8006d18:	fba2 2303 	umull	r2, r3, r2, r3
 8006d1c:	095b      	lsrs	r3, r3, #5
 8006d1e:	f003 0207 	and.w	r2, r3, #7
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4422      	add	r2, r4
 8006d28:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8006d2a:	e0e7      	b.n	8006efc <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a39      	ldr	r2, [pc, #228]	; (8006e18 <UART_SetConfig+0x324>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d004      	beq.n	8006d40 <UART_SetConfig+0x24c>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a38      	ldr	r2, [pc, #224]	; (8006e1c <UART_SetConfig+0x328>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d171      	bne.n	8006e24 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8006d40:	f7ff f8f4 	bl	8005f2c <HAL_RCC_GetPCLK2Freq>
 8006d44:	4602      	mov	r2, r0
 8006d46:	4613      	mov	r3, r2
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	4413      	add	r3, r2
 8006d4c:	009a      	lsls	r2, r3, #2
 8006d4e:	441a      	add	r2, r3
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d5a:	4a31      	ldr	r2, [pc, #196]	; (8006e20 <UART_SetConfig+0x32c>)
 8006d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8006d60:	095b      	lsrs	r3, r3, #5
 8006d62:	011c      	lsls	r4, r3, #4
 8006d64:	f7ff f8e2 	bl	8005f2c <HAL_RCC_GetPCLK2Freq>
 8006d68:	4602      	mov	r2, r0
 8006d6a:	4613      	mov	r3, r2
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	4413      	add	r3, r2
 8006d70:	009a      	lsls	r2, r3, #2
 8006d72:	441a      	add	r2, r3
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	fbb2 f5f3 	udiv	r5, r2, r3
 8006d7e:	f7ff f8d5 	bl	8005f2c <HAL_RCC_GetPCLK2Freq>
 8006d82:	4602      	mov	r2, r0
 8006d84:	4613      	mov	r3, r2
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	4413      	add	r3, r2
 8006d8a:	009a      	lsls	r2, r3, #2
 8006d8c:	441a      	add	r2, r3
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d98:	4a21      	ldr	r2, [pc, #132]	; (8006e20 <UART_SetConfig+0x32c>)
 8006d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d9e:	095b      	lsrs	r3, r3, #5
 8006da0:	2264      	movs	r2, #100	; 0x64
 8006da2:	fb02 f303 	mul.w	r3, r2, r3
 8006da6:	1aeb      	subs	r3, r5, r3
 8006da8:	011b      	lsls	r3, r3, #4
 8006daa:	3332      	adds	r3, #50	; 0x32
 8006dac:	4a1c      	ldr	r2, [pc, #112]	; (8006e20 <UART_SetConfig+0x32c>)
 8006dae:	fba2 2303 	umull	r2, r3, r2, r3
 8006db2:	095b      	lsrs	r3, r3, #5
 8006db4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006db8:	441c      	add	r4, r3
 8006dba:	f7ff f8b7 	bl	8005f2c <HAL_RCC_GetPCLK2Freq>
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	4613      	mov	r3, r2
 8006dc2:	009b      	lsls	r3, r3, #2
 8006dc4:	4413      	add	r3, r2
 8006dc6:	009a      	lsls	r2, r3, #2
 8006dc8:	441a      	add	r2, r3
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	fbb2 f5f3 	udiv	r5, r2, r3
 8006dd4:	f7ff f8aa 	bl	8005f2c <HAL_RCC_GetPCLK2Freq>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	4613      	mov	r3, r2
 8006ddc:	009b      	lsls	r3, r3, #2
 8006dde:	4413      	add	r3, r2
 8006de0:	009a      	lsls	r2, r3, #2
 8006de2:	441a      	add	r2, r3
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dee:	4a0c      	ldr	r2, [pc, #48]	; (8006e20 <UART_SetConfig+0x32c>)
 8006df0:	fba2 2303 	umull	r2, r3, r2, r3
 8006df4:	095b      	lsrs	r3, r3, #5
 8006df6:	2264      	movs	r2, #100	; 0x64
 8006df8:	fb02 f303 	mul.w	r3, r2, r3
 8006dfc:	1aeb      	subs	r3, r5, r3
 8006dfe:	011b      	lsls	r3, r3, #4
 8006e00:	3332      	adds	r3, #50	; 0x32
 8006e02:	4a07      	ldr	r2, [pc, #28]	; (8006e20 <UART_SetConfig+0x32c>)
 8006e04:	fba2 2303 	umull	r2, r3, r2, r3
 8006e08:	095b      	lsrs	r3, r3, #5
 8006e0a:	f003 020f 	and.w	r2, r3, #15
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4422      	add	r2, r4
 8006e14:	609a      	str	r2, [r3, #8]
 8006e16:	e071      	b.n	8006efc <UART_SetConfig+0x408>
 8006e18:	40011000 	.word	0x40011000
 8006e1c:	40011400 	.word	0x40011400
 8006e20:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8006e24:	f7ff f86e 	bl	8005f04 <HAL_RCC_GetPCLK1Freq>
 8006e28:	4602      	mov	r2, r0
 8006e2a:	4613      	mov	r3, r2
 8006e2c:	009b      	lsls	r3, r3, #2
 8006e2e:	4413      	add	r3, r2
 8006e30:	009a      	lsls	r2, r3, #2
 8006e32:	441a      	add	r2, r3
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e3e:	4a31      	ldr	r2, [pc, #196]	; (8006f04 <UART_SetConfig+0x410>)
 8006e40:	fba2 2303 	umull	r2, r3, r2, r3
 8006e44:	095b      	lsrs	r3, r3, #5
 8006e46:	011c      	lsls	r4, r3, #4
 8006e48:	f7ff f85c 	bl	8005f04 <HAL_RCC_GetPCLK1Freq>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	4613      	mov	r3, r2
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	4413      	add	r3, r2
 8006e54:	009a      	lsls	r2, r3, #2
 8006e56:	441a      	add	r2, r3
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	fbb2 f5f3 	udiv	r5, r2, r3
 8006e62:	f7ff f84f 	bl	8005f04 <HAL_RCC_GetPCLK1Freq>
 8006e66:	4602      	mov	r2, r0
 8006e68:	4613      	mov	r3, r2
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	4413      	add	r3, r2
 8006e6e:	009a      	lsls	r2, r3, #2
 8006e70:	441a      	add	r2, r3
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e7c:	4a21      	ldr	r2, [pc, #132]	; (8006f04 <UART_SetConfig+0x410>)
 8006e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8006e82:	095b      	lsrs	r3, r3, #5
 8006e84:	2264      	movs	r2, #100	; 0x64
 8006e86:	fb02 f303 	mul.w	r3, r2, r3
 8006e8a:	1aeb      	subs	r3, r5, r3
 8006e8c:	011b      	lsls	r3, r3, #4
 8006e8e:	3332      	adds	r3, #50	; 0x32
 8006e90:	4a1c      	ldr	r2, [pc, #112]	; (8006f04 <UART_SetConfig+0x410>)
 8006e92:	fba2 2303 	umull	r2, r3, r2, r3
 8006e96:	095b      	lsrs	r3, r3, #5
 8006e98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e9c:	441c      	add	r4, r3
 8006e9e:	f7ff f831 	bl	8005f04 <HAL_RCC_GetPCLK1Freq>
 8006ea2:	4602      	mov	r2, r0
 8006ea4:	4613      	mov	r3, r2
 8006ea6:	009b      	lsls	r3, r3, #2
 8006ea8:	4413      	add	r3, r2
 8006eaa:	009a      	lsls	r2, r3, #2
 8006eac:	441a      	add	r2, r3
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	fbb2 f5f3 	udiv	r5, r2, r3
 8006eb8:	f7ff f824 	bl	8005f04 <HAL_RCC_GetPCLK1Freq>
 8006ebc:	4602      	mov	r2, r0
 8006ebe:	4613      	mov	r3, r2
 8006ec0:	009b      	lsls	r3, r3, #2
 8006ec2:	4413      	add	r3, r2
 8006ec4:	009a      	lsls	r2, r3, #2
 8006ec6:	441a      	add	r2, r3
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	009b      	lsls	r3, r3, #2
 8006ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ed2:	4a0c      	ldr	r2, [pc, #48]	; (8006f04 <UART_SetConfig+0x410>)
 8006ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ed8:	095b      	lsrs	r3, r3, #5
 8006eda:	2264      	movs	r2, #100	; 0x64
 8006edc:	fb02 f303 	mul.w	r3, r2, r3
 8006ee0:	1aeb      	subs	r3, r5, r3
 8006ee2:	011b      	lsls	r3, r3, #4
 8006ee4:	3332      	adds	r3, #50	; 0x32
 8006ee6:	4a07      	ldr	r2, [pc, #28]	; (8006f04 <UART_SetConfig+0x410>)
 8006ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8006eec:	095b      	lsrs	r3, r3, #5
 8006eee:	f003 020f 	and.w	r2, r3, #15
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4422      	add	r2, r4
 8006ef8:	609a      	str	r2, [r3, #8]
}
 8006efa:	e7ff      	b.n	8006efc <UART_SetConfig+0x408>
 8006efc:	bf00      	nop
 8006efe:	3710      	adds	r7, #16
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bdb0      	pop	{r4, r5, r7, pc}
 8006f04:	51eb851f 	.word	0x51eb851f

08006f08 <aiPbMgrInit>:
    const aiPbCmdFunc *funcs;
    uint32_t  n_func;
} pbContextMgr;

void aiPbMgrInit(const aiPbCmdFunc *funcs)
{
 8006f08:	b5b0      	push	{r4, r5, r7, lr}
 8006f0a:	b088      	sub	sp, #32
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6178      	str	r0, [r7, #20]
    const aiPbCmdFunc *cfunc;
    pbContextMgr.input = pb_istream_from_uart(0);
 8006f10:	4c1a      	ldr	r4, [pc, #104]	; (8006f7c <aiPbMgrInit+0x74>)
 8006f12:	463b      	mov	r3, r7
 8006f14:	2100      	movs	r1, #0
 8006f16:	4618      	mov	r0, r3
 8006f18:	f001 fa20 	bl	800835c <pb_istream_from_uart>
 8006f1c:	463b      	mov	r3, r7
 8006f1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006f20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    pbContextMgr.output = pb_ostream_to_uart(0);
 8006f24:	4c15      	ldr	r4, [pc, #84]	; (8006f7c <aiPbMgrInit+0x74>)
 8006f26:	463b      	mov	r3, r7
 8006f28:	2100      	movs	r1, #0
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f001 f9f2 	bl	8008314 <pb_ostream_to_uart>
 8006f30:	3410      	adds	r4, #16
 8006f32:	463d      	mov	r5, r7
 8006f34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006f36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f38:	682b      	ldr	r3, [r5, #0]
 8006f3a:	6023      	str	r3, [r4, #0]

    pbContextMgr.n_func = 0;
 8006f3c:	4b0f      	ldr	r3, [pc, #60]	; (8006f7c <aiPbMgrInit+0x74>)
 8006f3e:	2200      	movs	r2, #0
 8006f40:	629a      	str	r2, [r3, #40]	; 0x28
    pbContextMgr.funcs = NULL;
 8006f42:	4b0e      	ldr	r3, [pc, #56]	; (8006f7c <aiPbMgrInit+0x74>)
 8006f44:	2200      	movs	r2, #0
 8006f46:	625a      	str	r2, [r3, #36]	; 0x24

    if (funcs) {
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d011      	beq.n	8006f72 <aiPbMgrInit+0x6a>
        cfunc = funcs;
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	61fb      	str	r3, [r7, #28]
        while (cfunc->process) {
 8006f52:	e007      	b.n	8006f64 <aiPbMgrInit+0x5c>
            pbContextMgr.n_func++;
 8006f54:	4b09      	ldr	r3, [pc, #36]	; (8006f7c <aiPbMgrInit+0x74>)
 8006f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f58:	3301      	adds	r3, #1
 8006f5a:	4a08      	ldr	r2, [pc, #32]	; (8006f7c <aiPbMgrInit+0x74>)
 8006f5c:	6293      	str	r3, [r2, #40]	; 0x28
            cfunc++;
 8006f5e:	69fb      	ldr	r3, [r7, #28]
 8006f60:	330c      	adds	r3, #12
 8006f62:	61fb      	str	r3, [r7, #28]
        while (cfunc->process) {
 8006f64:	69fb      	ldr	r3, [r7, #28]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d1f3      	bne.n	8006f54 <aiPbMgrInit+0x4c>
        }
        pbContextMgr.funcs = funcs;
 8006f6c:	4a03      	ldr	r2, [pc, #12]	; (8006f7c <aiPbMgrInit+0x74>)
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	6253      	str	r3, [r2, #36]	; 0x24
    }
}
 8006f72:	bf00      	nop
 8006f74:	3720      	adds	r7, #32
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bdb0      	pop	{r4, r5, r7, pc}
 8006f7a:	bf00      	nop
 8006f7c:	20000620 	.word	0x20000620

08006f80 <aiPbMgrWaitAndProcess>:

int aiPbMgrWaitAndProcess(void)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af02      	add	r7, sp, #8
    uint32_t idx;
    static reqMsg  req = reqMsg_init_zero;
    static respMsg resp = respMsg_init_default;
    const aiPbCmdFunc *cfunc;

    ioFlushRead();
 8006f86:	f001 f953 	bl	8008230 <ioFlushRead>
    if (pb_decode_delimited(&pbContextMgr.input, reqMsg_fields, &req)) {
 8006f8a:	4a20      	ldr	r2, [pc, #128]	; (800700c <aiPbMgrWaitAndProcess+0x8c>)
 8006f8c:	4920      	ldr	r1, [pc, #128]	; (8007010 <aiPbMgrWaitAndProcess+0x90>)
 8006f8e:	4821      	ldr	r0, [pc, #132]	; (8007014 <aiPbMgrWaitAndProcess+0x94>)
 8006f90:	f003 f80a 	bl	8009fa8 <pb_decode_delimited>
 8006f94:	4603      	mov	r3, r0
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d030      	beq.n	8006ffc <aiPbMgrWaitAndProcess+0x7c>
        ioFlushRead();
 8006f9a:	f001 f949 	bl	8008230 <ioFlushRead>
        for (idx = 0; idx < pbContextMgr.n_func; idx++) {
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	607b      	str	r3, [r7, #4]
 8006fa2:	e019      	b.n	8006fd8 <aiPbMgrWaitAndProcess+0x58>
            cfunc = &pbContextMgr.funcs[idx];
 8006fa4:	4b1b      	ldr	r3, [pc, #108]	; (8007014 <aiPbMgrWaitAndProcess+0x94>)
 8006fa6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006fa8:	687a      	ldr	r2, [r7, #4]
 8006faa:	4613      	mov	r3, r2
 8006fac:	005b      	lsls	r3, r3, #1
 8006fae:	4413      	add	r3, r2
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	440b      	add	r3, r1
 8006fb4:	603b      	str	r3, [r7, #0]
            if (cfunc->cmd == req.cmd) {
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	781a      	ldrb	r2, [r3, #0]
 8006fba:	4b14      	ldr	r3, [pc, #80]	; (800700c <aiPbMgrWaitAndProcess+0x8c>)
 8006fbc:	791b      	ldrb	r3, [r3, #4]
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d107      	bne.n	8006fd2 <aiPbMgrWaitAndProcess+0x52>
                cfunc->process(&req, &resp, cfunc->param);
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	683a      	ldr	r2, [r7, #0]
 8006fc8:	6892      	ldr	r2, [r2, #8]
 8006fca:	4913      	ldr	r1, [pc, #76]	; (8007018 <aiPbMgrWaitAndProcess+0x98>)
 8006fcc:	480f      	ldr	r0, [pc, #60]	; (800700c <aiPbMgrWaitAndProcess+0x8c>)
 8006fce:	4798      	blx	r3
                break;
 8006fd0:	e007      	b.n	8006fe2 <aiPbMgrWaitAndProcess+0x62>
        for (idx = 0; idx < pbContextMgr.n_func; idx++) {
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	3301      	adds	r3, #1
 8006fd6:	607b      	str	r3, [r7, #4]
 8006fd8:	4b0e      	ldr	r3, [pc, #56]	; (8007014 <aiPbMgrWaitAndProcess+0x94>)
 8006fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fdc:	687a      	ldr	r2, [r7, #4]
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d3e0      	bcc.n	8006fa4 <aiPbMgrWaitAndProcess+0x24>
            }
        }
        if (idx == pbContextMgr.n_func) {
 8006fe2:	4b0c      	ldr	r3, [pc, #48]	; (8007014 <aiPbMgrWaitAndProcess+0x94>)
 8006fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d107      	bne.n	8006ffc <aiPbMgrWaitAndProcess+0x7c>
            aiPbMgrSendAck(&req, &resp, EnumState_S_ERROR,
 8006fec:	2304      	movs	r3, #4
 8006fee:	9300      	str	r3, [sp, #0]
 8006ff0:	2304      	movs	r3, #4
 8006ff2:	2204      	movs	r2, #4
 8006ff4:	4908      	ldr	r1, [pc, #32]	; (8007018 <aiPbMgrWaitAndProcess+0x98>)
 8006ff6:	4805      	ldr	r0, [pc, #20]	; (800700c <aiPbMgrWaitAndProcess+0x8c>)
 8006ff8:	f000 f82e 	bl	8007058 <aiPbMgrSendAck>
                    EnumError_E_INVALID_PARAM, EnumError_E_INVALID_PARAM);
        }
    }

    ioFlushRead();
 8006ffc:	f001 f918 	bl	8008230 <ioFlushRead>

    return 0;
 8007000:	2300      	movs	r3, #0
}
 8007002:	4618      	mov	r0, r3
 8007004:	3708      	adds	r7, #8
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
 800700a:	bf00      	nop
 800700c:	2000064c 	.word	0x2000064c
 8007010:	0800f364 	.word	0x0800f364
 8007014:	20000620 	.word	0x20000620
 8007018:	2000069c 	.word	0x2000069c

0800701c <aiPbMgrSendResp>:

/*---------------------------------------------------------------------------*/

void aiPbMgrSendResp(const reqMsg *req, respMsg *resp,
        EnumState state)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b084      	sub	sp, #16
 8007020:	af00      	add	r7, sp, #0
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	60b9      	str	r1, [r7, #8]
 8007026:	4613      	mov	r3, r2
 8007028:	71fb      	strb	r3, [r7, #7]
    resp->reqid = req->reqid;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	601a      	str	r2, [r3, #0]
    resp->state = state;
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	79fa      	ldrb	r2, [r7, #7]
 8007036:	711a      	strb	r2, [r3, #4]
    pb_encode(&pbContextMgr.output, respMsg_fields, resp);
 8007038:	68ba      	ldr	r2, [r7, #8]
 800703a:	4905      	ldr	r1, [pc, #20]	; (8007050 <aiPbMgrSendResp+0x34>)
 800703c:	4805      	ldr	r0, [pc, #20]	; (8007054 <aiPbMgrSendResp+0x38>)
 800703e:	f003 fffd 	bl	800b03c <pb_encode>
    ioFlushWrite();
 8007042:	f001 f887 	bl	8008154 <ioFlushWrite>
}
 8007046:	bf00      	nop
 8007048:	3710      	adds	r7, #16
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}
 800704e:	bf00      	nop
 8007050:	0800f70c 	.word	0x0800f70c
 8007054:	20000630 	.word	0x20000630

08007058 <aiPbMgrSendAck>:

void aiPbMgrSendAck(const reqMsg *req, respMsg *resp,
        EnumState state, uint32_t param, EnumError error)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
 800705e:	60f8      	str	r0, [r7, #12]
 8007060:	60b9      	str	r1, [r7, #8]
 8007062:	603b      	str	r3, [r7, #0]
 8007064:	4613      	mov	r3, r2
 8007066:	71fb      	strb	r3, [r7, #7]
    resp->which_payload = respMsg_ack_tag;
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	220c      	movs	r2, #12
 800706c:	80da      	strh	r2, [r3, #6]
    resp->payload.ack.param = param;
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	683a      	ldr	r2, [r7, #0]
 8007072:	609a      	str	r2, [r3, #8]
    resp->payload.ack.error = error;
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	7e3a      	ldrb	r2, [r7, #24]
 8007078:	731a      	strb	r2, [r3, #12]
    aiPbMgrSendResp(req, resp, state);
 800707a:	79fb      	ldrb	r3, [r7, #7]
 800707c:	461a      	mov	r2, r3
 800707e:	68b9      	ldr	r1, [r7, #8]
 8007080:	68f8      	ldr	r0, [r7, #12]
 8007082:	f7ff ffcb 	bl	800701c <aiPbMgrSendResp>
}
 8007086:	bf00      	nop
 8007088:	3710      	adds	r7, #16
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}
	...

08007090 <aiPbMgrWaitAck>:

bool aiPbMgrWaitAck(void)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af00      	add	r7, sp, #0
    bool res;
    ackMsg ack = ackMsg_init_default;
 8007096:	2300      	movs	r3, #0
 8007098:	607b      	str	r3, [r7, #4]
 800709a:	2300      	movs	r3, #0
 800709c:	723b      	strb	r3, [r7, #8]
    res = pb_decode_delimited(&pbContextMgr.input, ackMsg_fields, &ack);
 800709e:	1d3b      	adds	r3, r7, #4
 80070a0:	461a      	mov	r2, r3
 80070a2:	4906      	ldr	r1, [pc, #24]	; (80070bc <aiPbMgrWaitAck+0x2c>)
 80070a4:	4806      	ldr	r0, [pc, #24]	; (80070c0 <aiPbMgrWaitAck+0x30>)
 80070a6:	f002 ff7f 	bl	8009fa8 <pb_decode_delimited>
 80070aa:	4603      	mov	r3, r0
 80070ac:	73fb      	strb	r3, [r7, #15]
    ioFlushRead();
 80070ae:	f001 f8bf 	bl	8008230 <ioFlushRead>
    return res;
 80070b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3710      	adds	r7, #16
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}
 80070bc:	0800f660 	.word	0x0800f660
 80070c0:	20000620 	.word	0x20000620

080070c4 <aiPbAiBufferSize>:
    uint32_t err;
    void *msg;
};

uint32_t aiPbAiBufferSize(const ai_buffer *buffer)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b083      	sub	sp, #12
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
    if (!buffer)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d101      	bne.n	80070d6 <aiPbAiBufferSize+0x12>
        return 0;
 80070d2:	2300      	movs	r3, #0
 80070d4:	e00d      	b.n	80070f2 <aiPbAiBufferSize+0x2e>
    else
        return buffer->channels * buffer->height
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	68db      	ldr	r3, [r3, #12]
 80070da:	687a      	ldr	r2, [r7, #4]
 80070dc:	88d2      	ldrh	r2, [r2, #6]
 80070de:	fb02 f303 	mul.w	r3, r2, r3
                * buffer->width * buffer->n_batches;
 80070e2:	687a      	ldr	r2, [r7, #4]
 80070e4:	8912      	ldrh	r2, [r2, #8]
 80070e6:	fb02 f303 	mul.w	r3, r2, r3
 80070ea:	687a      	ldr	r2, [r7, #4]
 80070ec:	8892      	ldrh	r2, [r2, #4]
 80070ee:	fb02 f303 	mul.w	r3, r2, r3
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	370c      	adds	r7, #12
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr

080070fe <aiPbMsgFmtToAiFmt>:

static ai_buffer_format aiPbMsgFmtToAiFmt(const uint32_t msgFmt)
{
 80070fe:	b480      	push	{r7}
 8007100:	b083      	sub	sp, #12
 8007102:	af00      	add	r7, sp, #0
 8007104:	6078      	str	r0, [r7, #4]
    return (ai_buffer_format)msgFmt;
 8007106:	687b      	ldr	r3, [r7, #4]
}
 8007108:	4618      	mov	r0, r3
 800710a:	370c      	adds	r7, #12
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr

08007114 <aiPbAiFmtToMsgFmt>:

static uint32_t aiPbAiFmtToMsgFmt(const ai_buffer_format aiFmt)
{
 8007114:	b480      	push	{r7}
 8007116:	b083      	sub	sp, #12
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
    return (uint32_t)aiFmt;
 800711c:	687b      	ldr	r3, [r7, #4]
}
 800711e:	4618      	mov	r0, r3
 8007120:	370c      	adds	r7, #12
 8007122:	46bd      	mov	sp, r7
 8007124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007128:	4770      	bx	lr

0800712a <aiPbBufferGetItemSize>:

static size_t aiPbBufferGetItemSize(ai_buffer_format format)
{
 800712a:	b480      	push	{r7}
 800712c:	b083      	sub	sp, #12
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
    return (size_t)AI_BUFFER_BYTE_SIZE(1,format);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	11db      	asrs	r3, r3, #7
 8007136:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800713a:	3304      	adds	r3, #4
 800713c:	10db      	asrs	r3, r3, #3
}
 800713e:	4618      	mov	r0, r3
 8007140:	370c      	adds	r7, #12
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr

0800714a <aiPbBuffer_read_cb3>:

static bool aiPbBuffer_read_cb3(pb_istream_t *stream, const pb_field_t *field,
        void **arg)
{
 800714a:	b580      	push	{r7, lr}
 800714c:	b08c      	sub	sp, #48	; 0x30
 800714e:	af00      	add	r7, sp, #0
 8007150:	60f8      	str	r0, [r7, #12]
 8007152:	60b9      	str	r1, [r7, #8]
 8007154:	607a      	str	r2, [r7, #4]
    struct aiPbMgrBuffer *bm = (struct aiPbMgrBuffer *)*arg;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	627b      	str	r3, [r7, #36]	; 0x24
    ai_buffer_format format;
    size_t itsize;

    UNUSED(field);

    int maxr = bm->n_max;
 800715c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	62fb      	str	r3, [r7, #44]	; 0x2c
    msg = (aiBufferByteMsg *)bm->msg;
 8007162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007164:	691b      	ldr	r3, [r3, #16]
 8007166:	623b      	str	r3, [r7, #32]
    format = aiPbMsgFmtToAiFmt(msg->shape.format);
 8007168:	6a3b      	ldr	r3, [r7, #32]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4618      	mov	r0, r3
 800716e:	f7ff ffc6 	bl	80070fe <aiPbMsgFmtToAiFmt>
 8007172:	61f8      	str	r0, [r7, #28]

    /* Check shape/format */
    bm->err = EnumError_E_NONE;
 8007174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007176:	2200      	movs	r2, #0
 8007178:	60da      	str	r2, [r3, #12]
    if ((format == AI_BUFFER_FORMAT_NONE) || (format != bm->buffer->format)) {
 800717a:	69fb      	ldr	r3, [r7, #28]
 800717c:	2b40      	cmp	r3, #64	; 0x40
 800717e:	d005      	beq.n	800718c <aiPbBuffer_read_cb3+0x42>
 8007180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	69fa      	ldr	r2, [r7, #28]
 8007188:	429a      	cmp	r2, r3
 800718a:	d005      	beq.n	8007198 <aiPbBuffer_read_cb3+0x4e>
        maxr = 0;
 800718c:	2300      	movs	r3, #0
 800718e:	62fb      	str	r3, [r7, #44]	; 0x2c
        bm->err = EnumError_E_INVALID_FORMAT;
 8007190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007192:	2202      	movs	r2, #2
 8007194:	60da      	str	r2, [r3, #12]
 8007196:	e020      	b.n	80071da <aiPbBuffer_read_cb3+0x90>
    } else if ((msg->shape.channels != bm->buffer->channels) ||
 8007198:	6a3b      	ldr	r3, [r7, #32]
 800719a:	691a      	ldr	r2, [r3, #16]
 800719c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d114      	bne.n	80071d0 <aiPbBuffer_read_cb3+0x86>
            (msg->shape.height != bm->buffer->height) ||
 80071a6:	6a3b      	ldr	r3, [r7, #32]
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071ac:	6812      	ldr	r2, [r2, #0]
 80071ae:	88d2      	ldrh	r2, [r2, #6]
    } else if ((msg->shape.channels != bm->buffer->channels) ||
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d10d      	bne.n	80071d0 <aiPbBuffer_read_cb3+0x86>
            (msg->shape.width != bm->buffer->width) ||
 80071b4:	6a3b      	ldr	r3, [r7, #32]
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071ba:	6812      	ldr	r2, [r2, #0]
 80071bc:	8912      	ldrh	r2, [r2, #8]
            (msg->shape.height != bm->buffer->height) ||
 80071be:	4293      	cmp	r3, r2
 80071c0:	d106      	bne.n	80071d0 <aiPbBuffer_read_cb3+0x86>
            (msg->shape.n_batches != bm->buffer->n_batches)) {
 80071c2:	6a3b      	ldr	r3, [r7, #32]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071c8:	6812      	ldr	r2, [r2, #0]
 80071ca:	8892      	ldrh	r2, [r2, #4]
            (msg->shape.width != bm->buffer->width) ||
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d004      	beq.n	80071da <aiPbBuffer_read_cb3+0x90>
        maxr = 0;
 80071d0:	2300      	movs	r3, #0
 80071d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        bm->err = EnumError_E_INVALID_SHAPE;
 80071d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d6:	2205      	movs	r2, #5
 80071d8:	60da      	str	r2, [r3, #12]
    }

    itsize = aiPbBufferGetItemSize(format);
 80071da:	69f8      	ldr	r0, [r7, #28]
 80071dc:	f7ff ffa5 	bl	800712a <aiPbBufferGetItemSize>
 80071e0:	61b8      	str	r0, [r7, #24]

    /* Read data */
    uint8_t *pw = (uint8_t *)bm->buffer->data;
 80071e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	691b      	ldr	r3, [r3, #16]
 80071e8:	62bb      	str	r3, [r7, #40]	; 0x28
    while (stream->bytes_left) {
 80071ea:	e027      	b.n	800723c <aiPbBuffer_read_cb3+0xf2>
        uint64_t number;
        if (!pb_read(stream, (pb_byte_t *)&number, itsize))
 80071ec:	f107 0310 	add.w	r3, r7, #16
 80071f0:	69ba      	ldr	r2, [r7, #24]
 80071f2:	4619      	mov	r1, r3
 80071f4:	68f8      	ldr	r0, [r7, #12]
 80071f6:	f001 feaf 	bl	8008f58 <pb_read>
 80071fa:	4603      	mov	r3, r0
 80071fc:	f083 0301 	eor.w	r3, r3, #1
 8007200:	b2db      	uxtb	r3, r3
 8007202:	2b00      	cmp	r3, #0
 8007204:	d001      	beq.n	800720a <aiPbBuffer_read_cb3+0xc0>
            return false;
 8007206:	2300      	movs	r3, #0
 8007208:	e02a      	b.n	8007260 <aiPbBuffer_read_cb3+0x116>
        if (maxr > 0) {
 800720a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800720c:	2b00      	cmp	r3, #0
 800720e:	dd10      	ble.n	8007232 <aiPbBuffer_read_cb3+0xe8>
            if (pw) {
 8007210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007212:	2b00      	cmp	r3, #0
 8007214:	d00a      	beq.n	800722c <aiPbBuffer_read_cb3+0xe2>
                memcpy(pw, &number, itsize);
 8007216:	f107 0310 	add.w	r3, r7, #16
 800721a:	69ba      	ldr	r2, [r7, #24]
 800721c:	4619      	mov	r1, r3
 800721e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007220:	f005 fa49 	bl	800c6b6 <memcpy>
                pw += itsize;
 8007224:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007226:	69bb      	ldr	r3, [r7, #24]
 8007228:	4413      	add	r3, r2
 800722a:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            maxr--;
 800722c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800722e:	3b01      	subs	r3, #1
 8007230:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        bm->n_ops++;
 8007232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	1c5a      	adds	r2, r3, #1
 8007238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723a:	609a      	str	r2, [r3, #8]
    while (stream->bytes_left) {
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d1d3      	bne.n	80071ec <aiPbBuffer_read_cb3+0xa2>
    }

    /* Check nb_op */
    if ((bm->err == EnumError_E_NONE) && (bm->n_ops != bm->n_max))
 8007244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007246:	68db      	ldr	r3, [r3, #12]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d108      	bne.n	800725e <aiPbBuffer_read_cb3+0x114>
 800724c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724e:	689a      	ldr	r2, [r3, #8]
 8007250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	429a      	cmp	r2, r3
 8007256:	d002      	beq.n	800725e <aiPbBuffer_read_cb3+0x114>
        bm->err = EnumError_E_INVALID_SIZE;
 8007258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725a:	2201      	movs	r2, #1
 800725c:	60da      	str	r2, [r3, #12]

    return true;
 800725e:	2301      	movs	r3, #1
}
 8007260:	4618      	mov	r0, r3
 8007262:	3730      	adds	r7, #48	; 0x30
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}

08007268 <aiPbBuffer_write_cb3>:

static bool aiPbBuffer_write_cb3(pb_ostream_t *stream, const pb_field_t *field,
        void * const *arg)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b08a      	sub	sp, #40	; 0x28
 800726c:	af00      	add	r7, sp, #0
 800726e:	60f8      	str	r0, [r7, #12]
 8007270:	60b9      	str	r1, [r7, #8]
 8007272:	607a      	str	r2, [r7, #4]
    struct aiPbMgrBuffer *bm = (struct aiPbMgrBuffer *)*arg;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	627b      	str	r3, [r7, #36]	; 0x24
    size_t itsize;

    int maxw = bm->n_max;
 800727a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	623b      	str	r3, [r7, #32]
    ai_buffer_format format;

    if ((maxw == 0) || (!bm->buffer))
 8007280:	6a3b      	ldr	r3, [r7, #32]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d003      	beq.n	800728e <aiPbBuffer_write_cb3+0x26>
 8007286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d101      	bne.n	8007292 <aiPbBuffer_write_cb3+0x2a>
        return true;
 800728e:	2301      	movs	r3, #1
 8007290:	e02c      	b.n	80072ec <aiPbBuffer_write_cb3+0x84>

    format = bm->buffer->format;
 8007292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	61fb      	str	r3, [r7, #28]

    itsize = aiPbBufferGetItemSize(format);
 800729a:	69f8      	ldr	r0, [r7, #28]
 800729c:	f7ff ff45 	bl	800712a <aiPbBufferGetItemSize>
 80072a0:	61b8      	str	r0, [r7, #24]

    /* Write data */
    pb_byte_t *pr = (pb_byte_t *)bm->buffer->data;
 80072a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	691b      	ldr	r3, [r3, #16]
 80072a8:	617b      	str	r3, [r7, #20]

    if (!pb_encode_tag_for_field(stream, field))
 80072aa:	68b9      	ldr	r1, [r7, #8]
 80072ac:	68f8      	ldr	r0, [r7, #12]
 80072ae:	f004 f835 	bl	800b31c <pb_encode_tag_for_field>
 80072b2:	4603      	mov	r3, r0
 80072b4:	f083 0301 	eor.w	r3, r3, #1
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d001      	beq.n	80072c2 <aiPbBuffer_write_cb3+0x5a>
        return false;
 80072be:	2300      	movs	r3, #0
 80072c0:	e014      	b.n	80072ec <aiPbBuffer_write_cb3+0x84>

    if (!pb_encode_string(stream, pr, itsize * maxw))
 80072c2:	6a3b      	ldr	r3, [r7, #32]
 80072c4:	69ba      	ldr	r2, [r7, #24]
 80072c6:	fb02 f303 	mul.w	r3, r2, r3
 80072ca:	461a      	mov	r2, r3
 80072cc:	6979      	ldr	r1, [r7, #20]
 80072ce:	68f8      	ldr	r0, [r7, #12]
 80072d0:	f004 f86e 	bl	800b3b0 <pb_encode_string>
 80072d4:	4603      	mov	r3, r0
 80072d6:	f083 0301 	eor.w	r3, r3, #1
 80072da:	b2db      	uxtb	r3, r3
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d001      	beq.n	80072e4 <aiPbBuffer_write_cb3+0x7c>
        return false;
 80072e0:	2300      	movs	r3, #0
 80072e2:	e003      	b.n	80072ec <aiPbBuffer_write_cb3+0x84>

    bm->n_ops = maxw;
 80072e4:	6a3a      	ldr	r2, [r7, #32]
 80072e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e8:	609a      	str	r2, [r3, #8]

    return true;
 80072ea:	2301      	movs	r3, #1
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3728      	adds	r7, #40	; 0x28
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <aiPbMgrReceiveAiBuffer3>:

bool aiPbMgrReceiveAiBuffer3(const reqMsg *req, respMsg *resp,
        EnumState state, ai_buffer *buffer)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b094      	sub	sp, #80	; 0x50
 80072f8:	af02      	add	r7, sp, #8
 80072fa:	60f8      	str	r0, [r7, #12]
 80072fc:	60b9      	str	r1, [r7, #8]
 80072fe:	603b      	str	r3, [r7, #0]
 8007300:	4613      	mov	r3, r2
 8007302:	71fb      	strb	r3, [r7, #7]
    aiBufferByteMsg msg;
    struct aiPbMgrBuffer hdlb;
    bool res = true;
 8007304:	2301      	movs	r3, #1
 8007306:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    hdlb.n_ops = 0;
 800730a:	2300      	movs	r3, #0
 800730c:	61fb      	str	r3, [r7, #28]
    hdlb.buffer = buffer;
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	617b      	str	r3, [r7, #20]
    hdlb.err = EnumError_E_NONE;
 8007312:	2300      	movs	r3, #0
 8007314:	623b      	str	r3, [r7, #32]
    hdlb.n_max = aiPbAiBufferSize(buffer);
 8007316:	6838      	ldr	r0, [r7, #0]
 8007318:	f7ff fed4 	bl	80070c4 <aiPbAiBufferSize>
 800731c:	4603      	mov	r3, r0
 800731e:	61bb      	str	r3, [r7, #24]
    hdlb.msg = &msg;
 8007320:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007324:	627b      	str	r3, [r7, #36]	; 0x24

    msg.datas.funcs.decode = &aiPbBuffer_read_cb3;
 8007326:	4b1b      	ldr	r3, [pc, #108]	; (8007394 <aiPbMgrReceiveAiBuffer3+0xa0>)
 8007328:	63fb      	str	r3, [r7, #60]	; 0x3c
    msg.datas.arg = &hdlb;
 800732a:	f107 0314 	add.w	r3, r7, #20
 800732e:	643b      	str	r3, [r7, #64]	; 0x40

    /* Waiting buffer message */
    pb_decode_delimited(&pbContextMgr.input, aiBufferByteMsg_fields, &msg);
 8007330:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007334:	461a      	mov	r2, r3
 8007336:	4918      	ldr	r1, [pc, #96]	; (8007398 <aiPbMgrReceiveAiBuffer3+0xa4>)
 8007338:	4818      	ldr	r0, [pc, #96]	; (800739c <aiPbMgrReceiveAiBuffer3+0xa8>)
 800733a:	f002 fe35 	bl	8009fa8 <pb_decode_delimited>
    ioFlushRead();
 800733e:	f000 ff77 	bl	8008230 <ioFlushRead>

    /* Send ACK and wait ACK (or send ACK only if error) */
    if (hdlb.err) {
 8007342:	6a3b      	ldr	r3, [r7, #32]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d00d      	beq.n	8007364 <aiPbMgrReceiveAiBuffer3+0x70>
        aiPbMgrSendAck(req, resp, EnumState_S_ERROR, hdlb.err,
 8007348:	6a3a      	ldr	r2, [r7, #32]
                (EnumError)hdlb.err);
 800734a:	6a3b      	ldr	r3, [r7, #32]
        aiPbMgrSendAck(req, resp, EnumState_S_ERROR, hdlb.err,
 800734c:	b2db      	uxtb	r3, r3
 800734e:	9300      	str	r3, [sp, #0]
 8007350:	4613      	mov	r3, r2
 8007352:	2204      	movs	r2, #4
 8007354:	68b9      	ldr	r1, [r7, #8]
 8007356:	68f8      	ldr	r0, [r7, #12]
 8007358:	f7ff fe7e 	bl	8007058 <aiPbMgrSendAck>
        res = false;
 800735c:	2300      	movs	r3, #0
 800735e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007362:	e010      	b.n	8007386 <aiPbMgrReceiveAiBuffer3+0x92>
    } else {
        aiPbMgrSendAck(req, resp, state, hdlb.n_ops, EnumError_E_NONE);
 8007364:	69f9      	ldr	r1, [r7, #28]
 8007366:	79fa      	ldrb	r2, [r7, #7]
 8007368:	2300      	movs	r3, #0
 800736a:	9300      	str	r3, [sp, #0]
 800736c:	460b      	mov	r3, r1
 800736e:	68b9      	ldr	r1, [r7, #8]
 8007370:	68f8      	ldr	r0, [r7, #12]
 8007372:	f7ff fe71 	bl	8007058 <aiPbMgrSendAck>
        if ((state == EnumState_S_WAITING) ||
 8007376:	79fb      	ldrb	r3, [r7, #7]
 8007378:	2b01      	cmp	r3, #1
 800737a:	d002      	beq.n	8007382 <aiPbMgrReceiveAiBuffer3+0x8e>
 800737c:	79fb      	ldrb	r3, [r7, #7]
 800737e:	2b02      	cmp	r3, #2
 8007380:	d101      	bne.n	8007386 <aiPbMgrReceiveAiBuffer3+0x92>
                (state == EnumState_S_PROCESSING))
            aiPbMgrWaitAck();
 8007382:	f7ff fe85 	bl	8007090 <aiPbMgrWaitAck>
    }

    return res;
 8007386:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800738a:	4618      	mov	r0, r3
 800738c:	3748      	adds	r7, #72	; 0x48
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}
 8007392:	bf00      	nop
 8007394:	0800714b 	.word	0x0800714b
 8007398:	0800f5b4 	.word	0x0800f5b4
 800739c:	20000620 	.word	0x20000620

080073a0 <aiPbMgrSendAiBuffer3>:

bool aiPbMgrSendAiBuffer3(const reqMsg *req, respMsg *resp, EnumState state,
        uint32_t type, uint32_t id, ai_float dur_ms, const ai_buffer *buffer)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b08c      	sub	sp, #48	; 0x30
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6178      	str	r0, [r7, #20]
 80073a8:	6139      	str	r1, [r7, #16]
 80073aa:	60bb      	str	r3, [r7, #8]
 80073ac:	ed87 0a01 	vstr	s0, [r7, #4]
 80073b0:	4613      	mov	r3, r2
 80073b2:	73fb      	strb	r3, [r7, #15]
    struct aiPbMgrBuffer hdlb;

    hdlb.n_ops = 0;
 80073b4:	2300      	movs	r3, #0
 80073b6:	627b      	str	r3, [r7, #36]	; 0x24
    hdlb.buffer = (ai_buffer *)buffer;
 80073b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073ba:	61fb      	str	r3, [r7, #28]
    hdlb.err = EnumError_E_NONE;
 80073bc:	2300      	movs	r3, #0
 80073be:	62bb      	str	r3, [r7, #40]	; 0x28
    hdlb.n_max = aiPbAiBufferSize(buffer);
 80073c0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80073c2:	f7ff fe7f 	bl	80070c4 <aiPbAiBufferSize>
 80073c6:	4603      	mov	r3, r0
 80073c8:	623b      	str	r3, [r7, #32]
    hdlb.msg = NULL;
 80073ca:	2300      	movs	r3, #0
 80073cc:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (type & PB_BUFFER_TYPE_SEND_WITHOUT_DATA) {
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	da05      	bge.n	80073e0 <aiPbMgrSendAiBuffer3+0x40>
        hdlb.n_max  = 0;
 80073d4:	2300      	movs	r3, #0
 80073d6:	623b      	str	r3, [r7, #32]
        type &= (~PB_BUFFER_TYPE_SEND_WITHOUT_DATA);
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80073de:	60bb      	str	r3, [r7, #8]
    }

    /* Fill Node sub-message */
    resp->which_payload = respMsg_node_tag;
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	220e      	movs	r2, #14
 80073e4:	80da      	strh	r2, [r3, #6]
    resp->payload.node.type = type;
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	68ba      	ldr	r2, [r7, #8]
 80073ea:	609a      	str	r2, [r3, #8]
    resp->payload.node.id = id;
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073f0:	60da      	str	r2, [r3, #12]
    resp->payload.node.duration = dur_ms;
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	611a      	str	r2, [r3, #16]
    resp->payload.node.buffer.shape.format = aiPbAiFmtToMsgFmt(buffer->format);
 80073f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4618      	mov	r0, r3
 80073fe:	f7ff fe89 	bl	8007114 <aiPbAiFmtToMsgFmt>
 8007402:	4602      	mov	r2, r0
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	615a      	str	r2, [r3, #20]
    resp->payload.node.buffer.shape.n_batches = buffer->n_batches;
 8007408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800740a:	889b      	ldrh	r3, [r3, #4]
 800740c:	461a      	mov	r2, r3
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	619a      	str	r2, [r3, #24]
    resp->payload.node.buffer.shape.height = buffer->height;
 8007412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007414:	88db      	ldrh	r3, [r3, #6]
 8007416:	461a      	mov	r2, r3
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	61da      	str	r2, [r3, #28]
    resp->payload.node.buffer.shape.width = buffer->width;
 800741c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800741e:	891b      	ldrh	r3, [r3, #8]
 8007420:	461a      	mov	r2, r3
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	621a      	str	r2, [r3, #32]
    resp->payload.node.buffer.shape.channels = buffer->channels;
 8007426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007428:	68da      	ldr	r2, [r3, #12]
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	625a      	str	r2, [r3, #36]	; 0x24
    resp->payload.node.buffer.datas.funcs.encode = &aiPbBuffer_write_cb3;
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	4a0b      	ldr	r2, [pc, #44]	; (8007460 <aiPbMgrSendAiBuffer3+0xc0>)
 8007432:	629a      	str	r2, [r3, #40]	; 0x28
    resp->payload.node.buffer.datas.arg = &hdlb;
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	f107 021c 	add.w	r2, r7, #28
 800743a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send msg */
    aiPbMgrSendResp(req, resp, state);
 800743c:	7bfb      	ldrb	r3, [r7, #15]
 800743e:	461a      	mov	r2, r3
 8007440:	6939      	ldr	r1, [r7, #16]
 8007442:	6978      	ldr	r0, [r7, #20]
 8007444:	f7ff fdea 	bl	800701c <aiPbMgrSendResp>

    /* Waiting ACK */
    if (state == EnumState_S_PROCESSING)
 8007448:	7bfb      	ldrb	r3, [r7, #15]
 800744a:	2b02      	cmp	r3, #2
 800744c:	d103      	bne.n	8007456 <aiPbMgrSendAiBuffer3+0xb6>
        return aiPbMgrWaitAck();
 800744e:	f7ff fe1f 	bl	8007090 <aiPbMgrWaitAck>
 8007452:	4603      	mov	r3, r0
 8007454:	e000      	b.n	8007458 <aiPbMgrSendAiBuffer3+0xb8>
    else
        return true;
 8007456:	2301      	movs	r3, #1
}
 8007458:	4618      	mov	r0, r3
 800745a:	3730      	adds	r7, #48	; 0x30
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}
 8007460:	08007269 	.word	0x08007269

08007464 <aiPbCmdSync>:

/*---------------------------------------------------------------------------*/

void aiPbCmdSync(const reqMsg *req, respMsg *resp, void *param)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b084      	sub	sp, #16
 8007468:	af00      	add	r7, sp, #0
 800746a:	60f8      	str	r0, [r7, #12]
 800746c:	60b9      	str	r1, [r7, #8]
 800746e:	607a      	str	r2, [r7, #4]
    resp->which_payload = respMsg_sync_tag;
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	220a      	movs	r2, #10
 8007474:	80da      	strh	r2, [r3, #6]
    resp->payload.sync.version =
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	f44f 7200 	mov.w	r2, #512	; 0x200
 800747c:	609a      	str	r2, [r3, #8]
            EnumVersion_P_VERSION_MAJOR << 8 |
            EnumVersion_P_VERSION_MINOR;

    resp->payload.sync.capability = EnumCapability_CAP_FIXED_POINT;
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	2202      	movs	r2, #2
 8007482:	60da      	str	r2, [r3, #12]

#if defined(AI_PB_TEST) && (AI_PB_TEST == 1)
    resp->payload.sync.capability |= EnumCapability_CAP_SELF_TEST;
#endif

    if (param)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d005      	beq.n	8007496 <aiPbCmdSync+0x32>
        resp->payload.sync.capability |= (uint32_t)param;
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	68da      	ldr	r2, [r3, #12]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	431a      	orrs	r2, r3
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	60da      	str	r2, [r3, #12]

    aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 8007496:	2200      	movs	r2, #0
 8007498:	68b9      	ldr	r1, [r7, #8]
 800749a:	68f8      	ldr	r0, [r7, #12]
 800749c:	f7ff fdbe 	bl	800701c <aiPbMgrSendResp>
}
 80074a0:	bf00      	nop
 80074a2:	3710      	adds	r7, #16
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <aiPbCmdSysInfo>:

void aiPbCmdSysInfo(const reqMsg *req, respMsg *resp, void *param)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b084      	sub	sp, #16
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	60f8      	str	r0, [r7, #12]
 80074b0:	60b9      	str	r1, [r7, #8]
 80074b2:	607a      	str	r2, [r7, #4]
    UNUSED(param);
    resp->which_payload = respMsg_sinfo_tag;
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	220b      	movs	r2, #11
 80074b8:	80da      	strh	r2, [r3, #6]
    resp->payload.sinfo.devid = HAL_GetDEVID();
 80074ba:	f7fe f977 	bl	80057ac <HAL_GetDEVID>
 80074be:	4602      	mov	r2, r0
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	609a      	str	r2, [r3, #8]
    resp->payload.sinfo.sclock = HAL_RCC_GetSysClockFreq();
 80074c4:	f7fe fd46 	bl	8005f54 <HAL_RCC_GetSysClockFreq>
 80074c8:	4602      	mov	r2, r0
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	60da      	str	r2, [r3, #12]
    resp->payload.sinfo.hclock = HAL_RCC_GetHCLKFreq();
 80074ce:	f7fe fd0d 	bl	8005eec <HAL_RCC_GetHCLKFreq>
 80074d2:	4602      	mov	r2, r0
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	611a      	str	r2, [r3, #16]
    resp->payload.sinfo.cache = getFlashCacheConf();
 80074d8:	f000 fb5e 	bl	8007b98 <getFlashCacheConf>
 80074dc:	4602      	mov	r2, r0
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	615a      	str	r2, [r3, #20]

    aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 80074e2:	2200      	movs	r2, #0
 80074e4:	68b9      	ldr	r1, [r7, #8]
 80074e6:	68f8      	ldr	r0, [r7, #12]
 80074e8:	f7ff fd98 	bl	800701c <aiPbMgrSendResp>
}
 80074ec:	bf00      	nop
 80074ee:	3710      	adds	r7, #16
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <init_aibuffer_msg>:


static void init_aibuffer_msg(const ai_buffer *aibuffer, aiBufferShapeMsg *msg)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b082      	sub	sp, #8
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	6039      	str	r1, [r7, #0]
    if ((!aibuffer) || (!msg))
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d01e      	beq.n	8007542 <init_aibuffer_msg+0x4e>
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d01b      	beq.n	8007542 <init_aibuffer_msg+0x4e>
        return;

    msg->format = aiPbAiFmtToMsgFmt(aibuffer->format);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4618      	mov	r0, r3
 8007510:	f7ff fe00 	bl	8007114 <aiPbAiFmtToMsgFmt>
 8007514:	4602      	mov	r2, r0
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	601a      	str	r2, [r3, #0]
    msg->channels = aibuffer->channels;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	68da      	ldr	r2, [r3, #12]
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	611a      	str	r2, [r3, #16]
    msg->height = aibuffer->height;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	88db      	ldrh	r3, [r3, #6]
 8007526:	461a      	mov	r2, r3
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	609a      	str	r2, [r3, #8]
    msg->width = aibuffer->width;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	891b      	ldrh	r3, [r3, #8]
 8007530:	461a      	mov	r2, r3
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	60da      	str	r2, [r3, #12]
    msg->n_batches = aibuffer->n_batches;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	889b      	ldrh	r3, [r3, #4]
 800753a:	461a      	mov	r2, r3
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	605a      	str	r2, [r3, #4]
 8007540:	e000      	b.n	8007544 <init_aibuffer_msg+0x50>
        return;
 8007542:	bf00      	nop
}
 8007544:	3708      	adds	r7, #8
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
	...

0800754c <nn_shape_w_cb>:

static bool nn_shape_w_cb(pb_ostream_t *stream, const pb_field_t *field,
        const ai_buffer *aibuffer, int maxw)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b08a      	sub	sp, #40	; 0x28
 8007550:	af00      	add	r7, sp, #0
 8007552:	60f8      	str	r0, [r7, #12]
 8007554:	60b9      	str	r1, [r7, #8]
 8007556:	607a      	str	r2, [r7, #4]
 8007558:	603b      	str	r3, [r7, #0]
    aiBufferShapeMsg msg;

    for (int i = 0; i < maxw; i++) {
 800755a:	2300      	movs	r3, #0
 800755c:	627b      	str	r3, [r7, #36]	; 0x24
 800755e:	e02b      	b.n	80075b8 <nn_shape_w_cb+0x6c>
        if (!pb_encode_tag_for_field(stream, field))
 8007560:	68b9      	ldr	r1, [r7, #8]
 8007562:	68f8      	ldr	r0, [r7, #12]
 8007564:	f003 feda 	bl	800b31c <pb_encode_tag_for_field>
 8007568:	4603      	mov	r3, r0
 800756a:	f083 0301 	eor.w	r3, r3, #1
 800756e:	b2db      	uxtb	r3, r3
 8007570:	2b00      	cmp	r3, #0
 8007572:	d001      	beq.n	8007578 <nn_shape_w_cb+0x2c>
            return false;
 8007574:	2300      	movs	r3, #0
 8007576:	e024      	b.n	80075c2 <nn_shape_w_cb+0x76>

        init_aibuffer_msg(&aibuffer[i], &msg);
 8007578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800757a:	4613      	mov	r3, r2
 800757c:	009b      	lsls	r3, r3, #2
 800757e:	4413      	add	r3, r2
 8007580:	009b      	lsls	r3, r3, #2
 8007582:	461a      	mov	r2, r3
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	4413      	add	r3, r2
 8007588:	f107 0210 	add.w	r2, r7, #16
 800758c:	4611      	mov	r1, r2
 800758e:	4618      	mov	r0, r3
 8007590:	f7ff ffb0 	bl	80074f4 <init_aibuffer_msg>

        if (!pb_encode_submessage(stream, aiBufferShapeMsg_fields, &msg))
 8007594:	f107 0310 	add.w	r3, r7, #16
 8007598:	461a      	mov	r2, r3
 800759a:	490c      	ldr	r1, [pc, #48]	; (80075cc <nn_shape_w_cb+0x80>)
 800759c:	68f8      	ldr	r0, [r7, #12]
 800759e:	f003 ff27 	bl	800b3f0 <pb_encode_submessage>
 80075a2:	4603      	mov	r3, r0
 80075a4:	f083 0301 	eor.w	r3, r3, #1
 80075a8:	b2db      	uxtb	r3, r3
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d001      	beq.n	80075b2 <nn_shape_w_cb+0x66>
            return false;
 80075ae:	2300      	movs	r3, #0
 80075b0:	e007      	b.n	80075c2 <nn_shape_w_cb+0x76>
    for (int i = 0; i < maxw; i++) {
 80075b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b4:	3301      	adds	r3, #1
 80075b6:	627b      	str	r3, [r7, #36]	; 0x24
 80075b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	429a      	cmp	r2, r3
 80075be:	dbcf      	blt.n	8007560 <nn_shape_w_cb+0x14>
    }
    return true;
 80075c0:	2301      	movs	r3, #1
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3728      	adds	r7, #40	; 0x28
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}
 80075ca:	bf00      	nop
 80075cc:	0800f41c 	.word	0x0800f41c

080075d0 <nn_inputs_w_cb>:

static bool nn_inputs_w_cb(pb_ostream_t *stream, const pb_field_t *field,
        void * const *arg)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b086      	sub	sp, #24
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	60b9      	str	r1, [r7, #8]
 80075da:	607a      	str	r2, [r7, #4]
    ai_network_report *report = (ai_network_report *)*arg;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	617b      	str	r3, [r7, #20]

    if (!report)
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d101      	bne.n	80075ec <nn_inputs_w_cb+0x1c>
        return true;
 80075e8:	2301      	movs	r3, #1
 80075ea:	e007      	b.n	80075fc <nn_inputs_w_cb+0x2c>

    return nn_shape_w_cb(stream, field, &report->inputs[0], 1);
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075f0:	2301      	movs	r3, #1
 80075f2:	68b9      	ldr	r1, [r7, #8]
 80075f4:	68f8      	ldr	r0, [r7, #12]
 80075f6:	f7ff ffa9 	bl	800754c <nn_shape_w_cb>
 80075fa:	4603      	mov	r3, r0
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3718      	adds	r7, #24
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <nn_outputs_w_cb>:

static bool nn_outputs_w_cb(pb_ostream_t *stream, const pb_field_t *field,
        void * const *arg)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b086      	sub	sp, #24
 8007608:	af00      	add	r7, sp, #0
 800760a:	60f8      	str	r0, [r7, #12]
 800760c:	60b9      	str	r1, [r7, #8]
 800760e:	607a      	str	r2, [r7, #4]
    ai_network_report *report = (ai_network_report *)*arg;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	617b      	str	r3, [r7, #20]

    if (!report)
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d101      	bne.n	8007620 <nn_outputs_w_cb+0x1c>
        return true;
 800761c:	2301      	movs	r3, #1
 800761e:	e007      	b.n	8007630 <nn_outputs_w_cb+0x2c>

    return nn_shape_w_cb(stream, field, &report->outputs[0], 1);
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007624:	2301      	movs	r3, #1
 8007626:	68b9      	ldr	r1, [r7, #8]
 8007628:	68f8      	ldr	r0, [r7, #12]
 800762a:	f7ff ff8f 	bl	800754c <nn_shape_w_cb>
 800762e:	4603      	mov	r3, r0
}
 8007630:	4618      	mov	r0, r3
 8007632:	3718      	adds	r7, #24
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}

08007638 <aiPbStrCopy>:

void aiPbStrCopy(const char *src, char *dst, uint32_t max)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b088      	sub	sp, #32
 800763c:	af00      	add	r7, sp, #0
 800763e:	60f8      	str	r0, [r7, #12]
 8007640:	60b9      	str	r1, [r7, #8]
 8007642:	607a      	str	r2, [r7, #4]
    const char undef[] = "UNDEFINED";
 8007644:	4a19      	ldr	r2, [pc, #100]	; (80076ac <aiPbStrCopy+0x74>)
 8007646:	f107 0310 	add.w	r3, r7, #16
 800764a:	ca07      	ldmia	r2, {r0, r1, r2}
 800764c:	c303      	stmia	r3!, {r0, r1}
 800764e:	801a      	strh	r2, [r3, #0]
    size_t l = strlen(src);
 8007650:	68f8      	ldr	r0, [r7, #12]
 8007652:	f7fd fa6e 	bl	8004b32 <strlen>
 8007656:	61f8      	str	r0, [r7, #28]

    if (l > max)
 8007658:	69fa      	ldr	r2, [r7, #28]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	429a      	cmp	r2, r3
 800765e:	d902      	bls.n	8007666 <aiPbStrCopy+0x2e>
        l = max-1;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	3b01      	subs	r3, #1
 8007664:	61fb      	str	r3, [r7, #28]

    if (!dst)
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d01b      	beq.n	80076a4 <aiPbStrCopy+0x6c>
        return;

    if (src && l)
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d00a      	beq.n	8007688 <aiPbStrCopy+0x50>
 8007672:	69fb      	ldr	r3, [r7, #28]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d007      	beq.n	8007688 <aiPbStrCopy+0x50>
        memcpy(dst, src, l+1);
 8007678:	69fb      	ldr	r3, [r7, #28]
 800767a:	3301      	adds	r3, #1
 800767c:	461a      	mov	r2, r3
 800767e:	68f9      	ldr	r1, [r7, #12]
 8007680:	68b8      	ldr	r0, [r7, #8]
 8007682:	f005 f818 	bl	800c6b6 <memcpy>
 8007686:	e00e      	b.n	80076a6 <aiPbStrCopy+0x6e>
    else
        memcpy(dst, undef, strlen(undef)+1);
 8007688:	f107 0310 	add.w	r3, r7, #16
 800768c:	4618      	mov	r0, r3
 800768e:	f7fd fa50 	bl	8004b32 <strlen>
 8007692:	4603      	mov	r3, r0
 8007694:	1c5a      	adds	r2, r3, #1
 8007696:	f107 0310 	add.w	r3, r7, #16
 800769a:	4619      	mov	r1, r3
 800769c:	68b8      	ldr	r0, [r7, #8]
 800769e:	f005 f80a 	bl	800c6b6 <memcpy>
 80076a2:	e000      	b.n	80076a6 <aiPbStrCopy+0x6e>
        return;
 80076a4:	bf00      	nop
}
 80076a6:	3720      	adds	r7, #32
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}
 80076ac:	0800e894 	.word	0x0800e894

080076b0 <aiPbVersionToUint32>:

uint32_t aiPbVersionToUint32(const ai_platform_version *ver)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b083      	sub	sp, #12
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
    if (!ver)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d101      	bne.n	80076c2 <aiPbVersionToUint32+0x12>
        return 0;
 80076be:	2300      	movs	r3, #0
 80076c0:	e00d      	b.n	80076de <aiPbVersionToUint32+0x2e>

    return ver->major << 24 | ver->minor << 16
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	061a      	lsls	r2, r3, #24
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	785b      	ldrb	r3, [r3, #1]
 80076cc:	041b      	lsls	r3, r3, #16
 80076ce:	431a      	orrs	r2, r3
            | ver->micro << 8 | ver->reserved;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	789b      	ldrb	r3, [r3, #2]
 80076d4:	021b      	lsls	r3, r3, #8
 80076d6:	4313      	orrs	r3, r2
 80076d8:	687a      	ldr	r2, [r7, #4]
 80076da:	78d2      	ldrb	r2, [r2, #3]
 80076dc:	4313      	orrs	r3, r2
}
 80076de:	4618      	mov	r0, r3
 80076e0:	370c      	adds	r7, #12
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr
	...

080076ec <aiPbMgrSendNNInfo>:

void aiPbMgrSendNNInfo(const reqMsg *req, respMsg *resp,
        EnumState state, const ai_network_report *nn)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b084      	sub	sp, #16
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	60f8      	str	r0, [r7, #12]
 80076f4:	60b9      	str	r1, [r7, #8]
 80076f6:	603b      	str	r3, [r7, #0]
 80076f8:	4613      	mov	r3, r2
 80076fa:	71fb      	strb	r3, [r7, #7]
    resp->which_payload = respMsg_ninfo_tag;
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	2214      	movs	r2, #20
 8007700:	80da      	strh	r2, [r3, #6]

    aiPbStrCopy(nn->model_name,
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	6818      	ldr	r0, [r3, #0]
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	3308      	adds	r3, #8
 800770a:	2240      	movs	r2, #64	; 0x40
 800770c:	4619      	mov	r1, r3
 800770e:	f7ff ff93 	bl	8007638 <aiPbStrCopy>
            &resp->payload.ninfo.model_name[0],
            sizeof(resp->payload.ninfo.model_name));
    aiPbStrCopy(nn->model_signature,
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	6858      	ldr	r0, [r3, #4]
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	3348      	adds	r3, #72	; 0x48
 800771a:	2240      	movs	r2, #64	; 0x40
 800771c:	4619      	mov	r1, r3
 800771e:	f7ff ff8b 	bl	8007638 <aiPbStrCopy>
            &resp->payload.ninfo.model_signature[0],
            sizeof(resp->payload.ninfo.model_signature));
    aiPbStrCopy(nn->model_datetime,
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	6898      	ldr	r0, [r3, #8]
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	3388      	adds	r3, #136	; 0x88
 800772a:	2240      	movs	r2, #64	; 0x40
 800772c:	4619      	mov	r1, r3
 800772e:	f7ff ff83 	bl	8007638 <aiPbStrCopy>
            &resp->payload.ninfo.model_datetime[0],
            sizeof(resp->payload.ninfo.model_datetime));
    aiPbStrCopy(nn->compile_datetime,
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	68d8      	ldr	r0, [r3, #12]
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	33c8      	adds	r3, #200	; 0xc8
 800773a:	2240      	movs	r2, #64	; 0x40
 800773c:	4619      	mov	r1, r3
 800773e:	f7ff ff7b 	bl	8007638 <aiPbStrCopy>
            &resp->payload.ninfo.compile_datetime[0],
            sizeof(resp->payload.ninfo.compile_datetime));
    aiPbStrCopy(nn->runtime_revision,
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	6918      	ldr	r0, [r3, #16]
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800774c:	2240      	movs	r2, #64	; 0x40
 800774e:	4619      	mov	r1, r3
 8007750:	f7ff ff72 	bl	8007638 <aiPbStrCopy>
            &resp->payload.ninfo.runtime_revision[0],
            sizeof(resp->payload.ninfo.runtime_revision));
    aiPbStrCopy(nn->tool_revision,
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	6998      	ldr	r0, [r3, #24]
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 800775e:	2240      	movs	r2, #64	; 0x40
 8007760:	4619      	mov	r1, r3
 8007762:	f7ff ff69 	bl	8007638 <aiPbStrCopy>
            &resp->payload.ninfo.tool_revision[0],
            sizeof(resp->payload.ninfo.tool_revision));

    resp->payload.ninfo.n_inputs = nn->n_inputs;
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800776a:	461a      	mov	r2, r3
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    resp->payload.ninfo.n_outputs = nn->n_outputs;
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007776:	461a      	mov	r2, r3
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
    resp->payload.ninfo.n_nodes = nn->n_nodes;
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
    resp->payload.ninfo.n_macc = nn->n_macc;
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c

    resp->payload.ninfo.signature = nn->signature;
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
    resp->payload.ninfo.api_version =
            aiPbVersionToUint32(&nn->api_version);
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	3324      	adds	r3, #36	; 0x24
 80077a0:	4618      	mov	r0, r3
 80077a2:	f7ff ff85 	bl	80076b0 <aiPbVersionToUint32>
 80077a6:	4602      	mov	r2, r0
    resp->payload.ninfo.api_version =
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    resp->payload.ninfo.interface_api_version =
            aiPbVersionToUint32(&nn->interface_api_version);
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	3328      	adds	r3, #40	; 0x28
 80077b2:	4618      	mov	r0, r3
 80077b4:	f7ff ff7c 	bl	80076b0 <aiPbVersionToUint32>
 80077b8:	4602      	mov	r2, r0
    resp->payload.ninfo.interface_api_version =
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    resp->payload.ninfo.runtime_version =
            aiPbVersionToUint32(&nn->runtime_version);
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	3314      	adds	r3, #20
 80077c4:	4618      	mov	r0, r3
 80077c6:	f7ff ff73 	bl	80076b0 <aiPbVersionToUint32>
 80077ca:	4602      	mov	r2, r0
    resp->payload.ninfo.runtime_version =
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    resp->payload.ninfo.tool_version =
            aiPbVersionToUint32(&nn->tool_version);
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	331c      	adds	r3, #28
 80077d6:	4618      	mov	r0, r3
 80077d8:	f7ff ff6a 	bl	80076b0 <aiPbVersionToUint32>
 80077dc:	4602      	mov	r2, r0
    resp->payload.ninfo.tool_version =
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    resp->payload.ninfo.tool_api_version =
            aiPbVersionToUint32(&nn->tool_api_version);
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	3320      	adds	r3, #32
 80077e8:	4618      	mov	r0, r3
 80077ea:	f7ff ff61 	bl	80076b0 <aiPbVersionToUint32>
 80077ee:	4602      	mov	r2, r0
    resp->payload.ninfo.tool_api_version =
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190

    init_aibuffer_msg(&nn->activations, &resp->payload.ninfo.activations);
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007802:	4619      	mov	r1, r3
 8007804:	4610      	mov	r0, r2
 8007806:	f7ff fe75 	bl	80074f4 <init_aibuffer_msg>
    init_aibuffer_msg(&nn->params, &resp->payload.ninfo.weights);
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8007816:	4619      	mov	r1, r3
 8007818:	4610      	mov	r0, r2
 800781a:	f7ff fe6b 	bl	80074f4 <init_aibuffer_msg>

    resp->payload.ninfo.inputs.funcs.encode = nn_inputs_w_cb;
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	4a0c      	ldr	r2, [pc, #48]	; (8007854 <aiPbMgrSendNNInfo+0x168>)
 8007822:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    resp->payload.ninfo.inputs.arg = (void *)nn;
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	683a      	ldr	r2, [r7, #0]
 800782a:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0

    resp->payload.ninfo.outputs.funcs.encode = nn_outputs_w_cb;
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	4a09      	ldr	r2, [pc, #36]	; (8007858 <aiPbMgrSendNNInfo+0x16c>)
 8007832:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
    resp->payload.ninfo.outputs.arg = (void *)nn;
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	683a      	ldr	r2, [r7, #0]
 800783a:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8

    aiPbMgrSendResp(req, resp, state);
 800783e:	79fb      	ldrb	r3, [r7, #7]
 8007840:	461a      	mov	r2, r3
 8007842:	68b9      	ldr	r1, [r7, #8]
 8007844:	68f8      	ldr	r0, [r7, #12]
 8007846:	f7ff fbe9 	bl	800701c <aiPbMgrSendResp>
}
 800784a:	bf00      	nop
 800784c:	3710      	adds	r7, #16
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}
 8007852:	bf00      	nop
 8007854:	080075d1 	.word	0x080075d1
 8007858:	08007605 	.word	0x08007605

0800785c <crcIpInit>:
#error Only STM32H7, STM32F7, STM32F4, STM32L4 or STM32F3 device are supported
#endif
#endif

void crcIpInit(void)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b082      	sub	sp, #8
 8007860:	af00      	add	r7, sp, #0
#if defined(STM32H7)
    /* By default the CRC IP clock is enabled */
    __HAL_RCC_CRC_CLK_ENABLE();
#else
    if (!__HAL_RCC_CRC_IS_CLK_ENABLED())
 8007862:	4b0d      	ldr	r3, [pc, #52]	; (8007898 <crcIpInit+0x3c>)
 8007864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007866:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800786a:	2b00      	cmp	r3, #0
 800786c:	d102      	bne.n	8007874 <crcIpInit+0x18>
        printf("W: CRC IP clock is NOT enabled\r\n");
 800786e:	480b      	ldr	r0, [pc, #44]	; (800789c <crcIpInit+0x40>)
 8007870:	f005 f850 	bl	800c914 <puts>

    /* By default the CRC IP clock is enabled */
    __HAL_RCC_CRC_CLK_ENABLE();
 8007874:	2300      	movs	r3, #0
 8007876:	607b      	str	r3, [r7, #4]
 8007878:	4b07      	ldr	r3, [pc, #28]	; (8007898 <crcIpInit+0x3c>)
 800787a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800787c:	4a06      	ldr	r2, [pc, #24]	; (8007898 <crcIpInit+0x3c>)
 800787e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007882:	6313      	str	r3, [r2, #48]	; 0x30
 8007884:	4b04      	ldr	r3, [pc, #16]	; (8007898 <crcIpInit+0x3c>)
 8007886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007888:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800788c:	607b      	str	r3, [r7, #4]
 800788e:	687b      	ldr	r3, [r7, #4]
#endif
}
 8007890:	bf00      	nop
 8007892:	3708      	adds	r7, #8
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}
 8007898:	40023800 	.word	0x40023800
 800789c:	0800e8a0 	.word	0x0800e8a0

080078a0 <dwtIpInit>:

void dwtIpInit(void)
{
 80078a0:	b480      	push	{r7}
 80078a2:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80078a4:	4b0a      	ldr	r3, [pc, #40]	; (80078d0 <dwtIpInit+0x30>)
 80078a6:	68db      	ldr	r3, [r3, #12]
 80078a8:	4a09      	ldr	r2, [pc, #36]	; (80078d0 <dwtIpInit+0x30>)
 80078aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80078ae:	60d3      	str	r3, [r2, #12]

#ifdef STM32F7
    DWT->LAR = 0xC5ACCE55;
#endif

    DWT->CYCCNT = 0;
 80078b0:	4b08      	ldr	r3, [pc, #32]	; (80078d4 <dwtIpInit+0x34>)
 80078b2:	2200      	movs	r2, #0
 80078b4:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk | DWT_CTRL_CPIEVTENA_Msk;
 80078b6:	4b07      	ldr	r3, [pc, #28]	; (80078d4 <dwtIpInit+0x34>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a06      	ldr	r2, [pc, #24]	; (80078d4 <dwtIpInit+0x34>)
 80078bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078c0:	f043 0301 	orr.w	r3, r3, #1
 80078c4:	6013      	str	r3, [r2, #0]
}
 80078c6:	bf00      	nop
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr
 80078d0:	e000edf0 	.word	0xe000edf0
 80078d4:	e0001000 	.word	0xe0001000

080078d8 <dwtReset>:

void dwtReset(void)
{
 80078d8:	b480      	push	{r7}
 80078da:	af00      	add	r7, sp, #0
    DWT->CYCCNT = 0; /* Clear DWT cycle counter */
 80078dc:	4b03      	ldr	r3, [pc, #12]	; (80078ec <dwtReset+0x14>)
 80078de:	2200      	movs	r2, #0
 80078e0:	605a      	str	r2, [r3, #4]
}
 80078e2:	bf00      	nop
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr
 80078ec:	e0001000 	.word	0xe0001000

080078f0 <dwtGetCycles>:

uint32_t dwtGetCycles(void)
{
 80078f0:	b480      	push	{r7}
 80078f2:	af00      	add	r7, sp, #0
    return DWT->CYCCNT;
 80078f4:	4b03      	ldr	r3, [pc, #12]	; (8007904 <dwtGetCycles+0x14>)
 80078f6:	685b      	ldr	r3, [r3, #4]
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	46bd      	mov	sp, r7
 80078fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007900:	4770      	bx	lr
 8007902:	bf00      	nop
 8007904:	e0001000 	.word	0xe0001000

08007908 <systemCoreClock>:

uint32_t systemCoreClock(void)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	af00      	add	r7, sp, #0
#if !defined(STM32H7)
    return HAL_RCC_GetHCLKFreq();
 800790c:	f7fe faee 	bl	8005eec <HAL_RCC_GetHCLKFreq>
 8007910:	4603      	mov	r3, r0
#else
    return HAL_RCC_GetSysClockFreq();
#endif
}
 8007912:	4618      	mov	r0, r3
 8007914:	bd80      	pop	{r7, pc}
	...

08007918 <dwtCyclesToFloatMs>:
    return 0;
}


float dwtCyclesToFloatMs(uint64_t clks)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b084      	sub	sp, #16
 800791c:	af00      	add	r7, sp, #0
 800791e:	e9c7 0100 	strd	r0, r1, [r7]
    float res;
    float fcpu = (float)systemCoreClock();
 8007922:	f7ff fff1 	bl	8007908 <systemCoreClock>
 8007926:	ee07 0a90 	vmov	s15, r0
 800792a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800792e:	edc7 7a03 	vstr	s15, [r7, #12]
    res = ((float)clks * (float)1000.0) / fcpu;
 8007932:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007936:	f7fd fc2f 	bl	8005198 <__aeabi_ul2f>
 800793a:	ee07 0a10 	vmov	s14, r0
 800793e:	eddf 7a09 	vldr	s15, [pc, #36]	; 8007964 <dwtCyclesToFloatMs+0x4c>
 8007942:	ee67 6a27 	vmul.f32	s13, s14, s15
 8007946:	ed97 7a03 	vldr	s14, [r7, #12]
 800794a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800794e:	edc7 7a02 	vstr	s15, [r7, #8]
    return res;
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	ee07 3a90 	vmov	s15, r3
}
 8007958:	eeb0 0a67 	vmov.f32	s0, s15
 800795c:	3710      	adds	r7, #16
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}
 8007962:	bf00      	nop
 8007964:	447a0000 	.word	0x447a0000

08007968 <devIdToStr>:


__STATIC_INLINE const char *devIdToStr(uint16_t dev_id)
{
 8007968:	b480      	push	{r7}
 800796a:	b085      	sub	sp, #20
 800796c:	af00      	add	r7, sp, #0
 800796e:	4603      	mov	r3, r0
 8007970:	80fb      	strh	r3, [r7, #6]
    const char *str;
    switch (dev_id) {
 8007972:	88fb      	ldrh	r3, [r7, #6]
 8007974:	f2a3 4315 	subw	r3, r3, #1045	; 0x415
 8007978:	2b5b      	cmp	r3, #91	; 0x5b
 800797a:	f200 80d9 	bhi.w	8007b30 <devIdToStr+0x1c8>
 800797e:	a201      	add	r2, pc, #4	; (adr r2, 8007984 <devIdToStr+0x1c>)
 8007980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007984:	08007b19 	.word	0x08007b19
 8007988:	08007b31 	.word	0x08007b31
 800798c:	08007b31 	.word	0x08007b31
 8007990:	08007b31 	.word	0x08007b31
 8007994:	08007b31 	.word	0x08007b31
 8007998:	08007b31 	.word	0x08007b31
 800799c:	08007b31 	.word	0x08007b31
 80079a0:	08007b31 	.word	0x08007b31
 80079a4:	08007b31 	.word	0x08007b31
 80079a8:	08007b31 	.word	0x08007b31
 80079ac:	08007b31 	.word	0x08007b31
 80079b0:	08007b31 	.word	0x08007b31
 80079b4:	08007b31 	.word	0x08007b31
 80079b8:	08007af5 	.word	0x08007af5
 80079bc:	08007b31 	.word	0x08007b31
 80079c0:	08007b31 	.word	0x08007b31
 80079c4:	08007b31 	.word	0x08007b31
 80079c8:	08007b31 	.word	0x08007b31
 80079cc:	08007b31 	.word	0x08007b31
 80079d0:	08007b31 	.word	0x08007b31
 80079d4:	08007b31 	.word	0x08007b31
 80079d8:	08007b31 	.word	0x08007b31
 80079dc:	08007b31 	.word	0x08007b31
 80079e0:	08007b31 	.word	0x08007b31
 80079e4:	08007b31 	.word	0x08007b31
 80079e8:	08007b31 	.word	0x08007b31
 80079ec:	08007b31 	.word	0x08007b31
 80079f0:	08007b31 	.word	0x08007b31
 80079f4:	08007b07 	.word	0x08007b07
 80079f8:	08007b31 	.word	0x08007b31
 80079fc:	08007b31 	.word	0x08007b31
 8007a00:	08007b31 	.word	0x08007b31
 8007a04:	08007b0d 	.word	0x08007b0d
 8007a08:	08007b31 	.word	0x08007b31
 8007a0c:	08007b31 	.word	0x08007b31
 8007a10:	08007afb 	.word	0x08007afb
 8007a14:	08007b31 	.word	0x08007b31
 8007a18:	08007b31 	.word	0x08007b31
 8007a1c:	08007b31 	.word	0x08007b31
 8007a20:	08007b31 	.word	0x08007b31
 8007a24:	08007b31 	.word	0x08007b31
 8007a28:	08007b31 	.word	0x08007b31
 8007a2c:	08007b31 	.word	0x08007b31
 8007a30:	08007b31 	.word	0x08007b31
 8007a34:	08007b31 	.word	0x08007b31
 8007a38:	08007b31 	.word	0x08007b31
 8007a3c:	08007b31 	.word	0x08007b31
 8007a40:	08007b31 	.word	0x08007b31
 8007a44:	08007b31 	.word	0x08007b31
 8007a48:	08007b01 	.word	0x08007b01
 8007a4c:	08007b31 	.word	0x08007b31
 8007a50:	08007b31 	.word	0x08007b31
 8007a54:	08007b25 	.word	0x08007b25
 8007a58:	08007b31 	.word	0x08007b31
 8007a5c:	08007b31 	.word	0x08007b31
 8007a60:	08007b31 	.word	0x08007b31
 8007a64:	08007b31 	.word	0x08007b31
 8007a68:	08007b31 	.word	0x08007b31
 8007a6c:	08007b31 	.word	0x08007b31
 8007a70:	08007b2b 	.word	0x08007b2b
 8007a74:	08007b31 	.word	0x08007b31
 8007a78:	08007b31 	.word	0x08007b31
 8007a7c:	08007b31 	.word	0x08007b31
 8007a80:	08007b31 	.word	0x08007b31
 8007a84:	08007b31 	.word	0x08007b31
 8007a88:	08007b31 	.word	0x08007b31
 8007a8c:	08007b31 	.word	0x08007b31
 8007a90:	08007b31 	.word	0x08007b31
 8007a94:	08007b31 	.word	0x08007b31
 8007a98:	08007b31 	.word	0x08007b31
 8007a9c:	08007b31 	.word	0x08007b31
 8007aa0:	08007b31 	.word	0x08007b31
 8007aa4:	08007b31 	.word	0x08007b31
 8007aa8:	08007b31 	.word	0x08007b31
 8007aac:	08007b31 	.word	0x08007b31
 8007ab0:	08007b31 	.word	0x08007b31
 8007ab4:	08007b31 	.word	0x08007b31
 8007ab8:	08007b13 	.word	0x08007b13
 8007abc:	08007b31 	.word	0x08007b31
 8007ac0:	08007b31 	.word	0x08007b31
 8007ac4:	08007b31 	.word	0x08007b31
 8007ac8:	08007b31 	.word	0x08007b31
 8007acc:	08007b31 	.word	0x08007b31
 8007ad0:	08007b31 	.word	0x08007b31
 8007ad4:	08007b31 	.word	0x08007b31
 8007ad8:	08007b31 	.word	0x08007b31
 8007adc:	08007b31 	.word	0x08007b31
 8007ae0:	08007b31 	.word	0x08007b31
 8007ae4:	08007b31 	.word	0x08007b31
 8007ae8:	08007b31 	.word	0x08007b31
 8007aec:	08007b31 	.word	0x08007b31
 8007af0:	08007b1f 	.word	0x08007b1f
    case 0x422: str = "STM32F303xB/C"; break;
 8007af4:	4b13      	ldr	r3, [pc, #76]	; (8007b44 <devIdToStr+0x1dc>)
 8007af6:	60fb      	str	r3, [r7, #12]
 8007af8:	e01c      	b.n	8007b34 <devIdToStr+0x1cc>
    case 0x438: str = "STM32F303x6/8"; break;
 8007afa:	4b13      	ldr	r3, [pc, #76]	; (8007b48 <devIdToStr+0x1e0>)
 8007afc:	60fb      	str	r3, [r7, #12]
 8007afe:	e019      	b.n	8007b34 <devIdToStr+0x1cc>
    case 0x446: str = "STM32F303xD/E"; break;
 8007b00:	4b12      	ldr	r3, [pc, #72]	; (8007b4c <devIdToStr+0x1e4>)
 8007b02:	60fb      	str	r3, [r7, #12]
 8007b04:	e016      	b.n	8007b34 <devIdToStr+0x1cc>
    case 0x431: str = "STM32F411xC/E"; break;
 8007b06:	4b12      	ldr	r3, [pc, #72]	; (8007b50 <devIdToStr+0x1e8>)
 8007b08:	60fb      	str	r3, [r7, #12]
 8007b0a:	e013      	b.n	8007b34 <devIdToStr+0x1cc>
    case 0x435: str = "STM32L43xxx"; break;
 8007b0c:	4b11      	ldr	r3, [pc, #68]	; (8007b54 <devIdToStr+0x1ec>)
 8007b0e:	60fb      	str	r3, [r7, #12]
 8007b10:	e010      	b.n	8007b34 <devIdToStr+0x1cc>
    case 0x462: str = "STM32L45xxx"; break;
 8007b12:	4b11      	ldr	r3, [pc, #68]	; (8007b58 <devIdToStr+0x1f0>)
 8007b14:	60fb      	str	r3, [r7, #12]
 8007b16:	e00d      	b.n	8007b34 <devIdToStr+0x1cc>
    case 0x415: str = "STM32L4x6xx"; break;
 8007b18:	4b10      	ldr	r3, [pc, #64]	; (8007b5c <devIdToStr+0x1f4>)
 8007b1a:	60fb      	str	r3, [r7, #12]
 8007b1c:	e00a      	b.n	8007b34 <devIdToStr+0x1cc>
    case 0x470: str = "STM32L4Rxxx"; break;
 8007b1e:	4b10      	ldr	r3, [pc, #64]	; (8007b60 <devIdToStr+0x1f8>)
 8007b20:	60fb      	str	r3, [r7, #12]
 8007b22:	e007      	b.n	8007b34 <devIdToStr+0x1cc>
    case 0x449: str = "STM32F74xxx"; break;
 8007b24:	4b0f      	ldr	r3, [pc, #60]	; (8007b64 <devIdToStr+0x1fc>)
 8007b26:	60fb      	str	r3, [r7, #12]
 8007b28:	e004      	b.n	8007b34 <devIdToStr+0x1cc>
    case 0x450: str = "STM32H743/753 and STM32H750"; break;
 8007b2a:	4b0f      	ldr	r3, [pc, #60]	; (8007b68 <devIdToStr+0x200>)
 8007b2c:	60fb      	str	r3, [r7, #12]
 8007b2e:	e001      	b.n	8007b34 <devIdToStr+0x1cc>
    default:    str = "UNKNOWN";
 8007b30:	4b0e      	ldr	r3, [pc, #56]	; (8007b6c <devIdToStr+0x204>)
 8007b32:	60fb      	str	r3, [r7, #12]
    }
    return str;
 8007b34:	68fb      	ldr	r3, [r7, #12]
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3714      	adds	r7, #20
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr
 8007b42:	bf00      	nop
 8007b44:	0800e8c0 	.word	0x0800e8c0
 8007b48:	0800e8d0 	.word	0x0800e8d0
 8007b4c:	0800e8e0 	.word	0x0800e8e0
 8007b50:	0800e8f0 	.word	0x0800e8f0
 8007b54:	0800e900 	.word	0x0800e900
 8007b58:	0800e90c 	.word	0x0800e90c
 8007b5c:	0800e918 	.word	0x0800e918
 8007b60:	0800e924 	.word	0x0800e924
 8007b64:	0800e930 	.word	0x0800e930
 8007b68:	0800e93c 	.word	0x0800e93c
 8007b6c:	0800e958 	.word	0x0800e958

08007b70 <bitToStr>:

#if !defined(STM32F3)
__STATIC_INLINE const char* bitToStr(uint32_t val)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b083      	sub	sp, #12
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
    if (val)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d001      	beq.n	8007b82 <bitToStr+0x12>
        return "True";
 8007b7e:	4b04      	ldr	r3, [pc, #16]	; (8007b90 <bitToStr+0x20>)
 8007b80:	e000      	b.n	8007b84 <bitToStr+0x14>
    else
        return "False";
 8007b82:	4b04      	ldr	r3, [pc, #16]	; (8007b94 <bitToStr+0x24>)
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	370c      	adds	r7, #12
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr
 8007b90:	0800e960 	.word	0x0800e960
 8007b94:	0800e968 	.word	0x0800e968

08007b98 <getFlashCacheConf>:


static uint32_t mconf;

uint32_t getFlashCacheConf(void)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	af00      	add	r7, sp, #0
    return mconf;
 8007b9c:	4b03      	ldr	r3, [pc, #12]	; (8007bac <getFlashCacheConf+0x14>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba8:	4770      	bx	lr
 8007baa:	bf00      	nop
 8007bac:	20000884 	.word	0x20000884

08007bb0 <logDeviceConf>:

void logDeviceConf(void)
{
 8007bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007bb2:	b085      	sub	sp, #20
 8007bb4:	af02      	add	r7, sp, #8
    uint32_t acr = FLASH->ACR ;
 8007bb6:	4b47      	ldr	r3, [pc, #284]	; (8007cd4 <logDeviceConf+0x124>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	607b      	str	r3, [r7, #4]
    uint32_t val;

    printf("STM32 Runtime configuration...\r\n");
 8007bbc:	4846      	ldr	r0, [pc, #280]	; (8007cd8 <logDeviceConf+0x128>)
 8007bbe:	f004 fea9 	bl	800c914 <puts>

    printf(" Device       : DevID:0x%08x (%s) RevID:0x%08x\r\n",
            (int)HAL_GetDEVID(),
 8007bc2:	f7fd fdf3 	bl	80057ac <HAL_GetDEVID>
 8007bc6:	4603      	mov	r3, r0
    printf(" Device       : DevID:0x%08x (%s) RevID:0x%08x\r\n",
 8007bc8:	461c      	mov	r4, r3
            devIdToStr(HAL_GetDEVID()),
 8007bca:	f7fd fdef 	bl	80057ac <HAL_GetDEVID>
 8007bce:	4603      	mov	r3, r0
    printf(" Device       : DevID:0x%08x (%s) RevID:0x%08x\r\n",
 8007bd0:	b29b      	uxth	r3, r3
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f7ff fec8 	bl	8007968 <devIdToStr>
 8007bd8:	4605      	mov	r5, r0
            (int)HAL_GetREVID()
 8007bda:	f7fd fddb 	bl	8005794 <HAL_GetREVID>
 8007bde:	4603      	mov	r3, r0
    printf(" Device       : DevID:0x%08x (%s) RevID:0x%08x\r\n",
 8007be0:	462a      	mov	r2, r5
 8007be2:	4621      	mov	r1, r4
 8007be4:	483d      	ldr	r0, [pc, #244]	; (8007cdc <logDeviceConf+0x12c>)
 8007be6:	f004 fe21 	bl	800c82c <iprintf>
    );

    printf(" Core Arch.   : M%d - %s %s\r\n",
 8007bea:	4b3d      	ldr	r3, [pc, #244]	; (8007ce0 <logDeviceConf+0x130>)
 8007bec:	4a3d      	ldr	r2, [pc, #244]	; (8007ce4 <logDeviceConf+0x134>)
 8007bee:	2104      	movs	r1, #4
 8007bf0:	483d      	ldr	r0, [pc, #244]	; (8007ce8 <logDeviceConf+0x138>)
 8007bf2:	f004 fe1b 	bl	800c82c <iprintf>
            ""
#endif
    );

#if (__FPU_PRESENT == 1) && __FPU_USED
    mconf = (1 << 16);  /* FPU present and used */
 8007bf6:	4b3d      	ldr	r3, [pc, #244]	; (8007cec <logDeviceConf+0x13c>)
 8007bf8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007bfc:	601a      	str	r2, [r3, #0]
#endif

    printf(" HAL version  : 0x%08x\r\n", (int)HAL_GetHalVersion());
 8007bfe:	f7fd fdbf 	bl	8005780 <HAL_GetHalVersion>
 8007c02:	4603      	mov	r3, r0
 8007c04:	4619      	mov	r1, r3
 8007c06:	483a      	ldr	r0, [pc, #232]	; (8007cf0 <logDeviceConf+0x140>)
 8007c08:	f004 fe10 	bl	800c82c <iprintf>

    val = systemCoreClock()/1000000;
 8007c0c:	f7ff fe7c 	bl	8007908 <systemCoreClock>
 8007c10:	4602      	mov	r2, r0
 8007c12:	4b38      	ldr	r3, [pc, #224]	; (8007cf4 <logDeviceConf+0x144>)
 8007c14:	fba3 2302 	umull	r2, r3, r3, r2
 8007c18:	0c9b      	lsrs	r3, r3, #18
 8007c1a:	603b      	str	r3, [r7, #0]

#if !defined(STM32H7)
    printf(" system clock : %u MHz\r\n", (int)val);
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	4619      	mov	r1, r3
 8007c20:	4835      	ldr	r0, [pc, #212]	; (8007cf8 <logDeviceConf+0x148>)
 8007c22:	f004 fe03 	bl	800c82c <iprintf>
    printf(" CACHE conf.  : $I/$D=(%s,%s)\r\n",
            bitToStr(val & SCB_CCR_IC_Msk),
            bitToStr(val & SCB_CCR_DC_Msk));
#else
#if !defined(STM32F3)
    mconf |= (1 << 24);  /* F4/L4 conf. */
 8007c26:	4b31      	ldr	r3, [pc, #196]	; (8007cec <logDeviceConf+0x13c>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007c2e:	4a2f      	ldr	r2, [pc, #188]	; (8007cec <logDeviceConf+0x13c>)
 8007c30:	6013      	str	r3, [r2, #0]
    mconf |= ((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f003 020f 	and.w	r2, r3, #15
 8007c38:	4b2c      	ldr	r3, [pc, #176]	; (8007cec <logDeviceConf+0x13c>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	4a2b      	ldr	r2, [pc, #172]	; (8007cec <logDeviceConf+0x13c>)
 8007c40:	6013      	str	r3, [r2, #0]
    if ((acr & FLASH_ACR_PRFTEN_Msk) >> FLASH_ACR_PRFTEN_Pos)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d005      	beq.n	8007c58 <logDeviceConf+0xa8>
        mconf |= (1 << 8);
 8007c4c:	4b27      	ldr	r3, [pc, #156]	; (8007cec <logDeviceConf+0x13c>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c54:	4a25      	ldr	r2, [pc, #148]	; (8007cec <logDeviceConf+0x13c>)
 8007c56:	6013      	str	r3, [r2, #0]
    if ((acr & FLASH_ACR_ICEN_Msk) >> FLASH_ACR_ICEN_Pos)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d005      	beq.n	8007c6e <logDeviceConf+0xbe>
        mconf |= (1 << 9);
 8007c62:	4b22      	ldr	r3, [pc, #136]	; (8007cec <logDeviceConf+0x13c>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007c6a:	4a20      	ldr	r2, [pc, #128]	; (8007cec <logDeviceConf+0x13c>)
 8007c6c:	6013      	str	r3, [r2, #0]
    if ((acr & FLASH_ACR_DCEN_Msk) >> FLASH_ACR_DCEN_Pos)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d005      	beq.n	8007c84 <logDeviceConf+0xd4>
        mconf |= (1 << 10);
 8007c78:	4b1c      	ldr	r3, [pc, #112]	; (8007cec <logDeviceConf+0x13c>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007c80:	4a1a      	ldr	r2, [pc, #104]	; (8007cec <logDeviceConf+0x13c>)
 8007c82:	6013      	str	r3, [r2, #0]
    printf(" FLASH conf.  : ACR=0x%08x - Prefetch=%s $I/$D=(%s,%s) latency=%d\r\n",
 8007c84:	687c      	ldr	r4, [r7, #4]
            (int)acr,
            bitToStr((acr & FLASH_ACR_PRFTEN_Msk) >> FLASH_ACR_PRFTEN_Pos),
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	0a1b      	lsrs	r3, r3, #8
    printf(" FLASH conf.  : ACR=0x%08x - Prefetch=%s $I/$D=(%s,%s) latency=%d\r\n",
 8007c8a:	f003 0301 	and.w	r3, r3, #1
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f7ff ff6e 	bl	8007b70 <bitToStr>
 8007c94:	4605      	mov	r5, r0
            bitToStr((acr & FLASH_ACR_ICEN_Msk) >> FLASH_ACR_ICEN_Pos),
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	0a5b      	lsrs	r3, r3, #9
    printf(" FLASH conf.  : ACR=0x%08x - Prefetch=%s $I/$D=(%s,%s) latency=%d\r\n",
 8007c9a:	f003 0301 	and.w	r3, r3, #1
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f7ff ff66 	bl	8007b70 <bitToStr>
 8007ca4:	4606      	mov	r6, r0
            bitToStr((acr & FLASH_ACR_DCEN_Msk) >> FLASH_ACR_DCEN_Pos),
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	0a9b      	lsrs	r3, r3, #10
    printf(" FLASH conf.  : ACR=0x%08x - Prefetch=%s $I/$D=(%s,%s) latency=%d\r\n",
 8007caa:	f003 0301 	and.w	r3, r3, #1
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f7ff ff5e 	bl	8007b70 <bitToStr>
 8007cb4:	4602      	mov	r2, r0
            (int)((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos));
 8007cb6:	687b      	ldr	r3, [r7, #4]
    printf(" FLASH conf.  : ACR=0x%08x - Prefetch=%s $I/$D=(%s,%s) latency=%d\r\n",
 8007cb8:	f003 030f 	and.w	r3, r3, #15
 8007cbc:	9301      	str	r3, [sp, #4]
 8007cbe:	9200      	str	r2, [sp, #0]
 8007cc0:	4633      	mov	r3, r6
 8007cc2:	462a      	mov	r2, r5
 8007cc4:	4621      	mov	r1, r4
 8007cc6:	480d      	ldr	r0, [pc, #52]	; (8007cfc <logDeviceConf+0x14c>)
 8007cc8:	f004 fdb0 	bl	800c82c <iprintf>
#endif
#endif
}
 8007ccc:	bf00      	nop
 8007cce:	370c      	adds	r7, #12
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cd4:	40023c00 	.word	0x40023c00
 8007cd8:	0800e970 	.word	0x0800e970
 8007cdc:	0800e990 	.word	0x0800e990
 8007ce0:	0800e9c4 	.word	0x0800e9c4
 8007ce4:	0800e9d0 	.word	0x0800e9d0
 8007ce8:	0800e9dc 	.word	0x0800e9dc
 8007cec:	20000884 	.word	0x20000884
 8007cf0:	0800e9fc 	.word	0x0800e9fc
 8007cf4:	431bde83 	.word	0x431bde83
 8007cf8:	0800ea18 	.word	0x0800ea18
 8007cfc:	0800ea34 	.word	0x0800ea34

08007d00 <disableInts>:

uint32_t disableInts(void)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b083      	sub	sp, #12
 8007d04:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d06:	f3ef 8310 	mrs	r3, PRIMASK
 8007d0a:	603b      	str	r3, [r7, #0]
  return(result);
 8007d0c:	683b      	ldr	r3, [r7, #0]
    uint32_t state;

    state = __get_PRIMASK();
 8007d0e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8007d10:	b672      	cpsid	i
    __disable_irq();

    return state;
 8007d12:	687b      	ldr	r3, [r7, #4]
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	370c      	adds	r7, #12
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr

08007d20 <restoreInts>:

void restoreInts(uint32_t state)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b085      	sub	sp, #20
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f383 8810 	msr	PRIMASK, r3
   __set_PRIMASK(state);
}
 8007d32:	bf00      	nop
 8007d34:	3714      	adds	r7, #20
 8007d36:	46bd      	mov	sp, r7
 8007d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3c:	4770      	bx	lr
	...

08007d40 <ioDisableWrite>:
 */

bool _ioWriteAllowed = true;

void ioDisableWrite(void)
{
 8007d40:	b480      	push	{r7}
 8007d42:	af00      	add	r7, sp, #0
    _ioWriteAllowed = false;
 8007d44:	4b03      	ldr	r3, [pc, #12]	; (8007d54 <ioDisableWrite+0x14>)
 8007d46:	2200      	movs	r2, #0
 8007d48:	701a      	strb	r2, [r3, #0]
}
 8007d4a:	bf00      	nop
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d52:	4770      	bx	lr
 8007d54:	2000000d 	.word	0x2000000d

08007d58 <_write>:
#if defined(__GNUC__)

int _write(int fd, const void *buff, int count);

int _write(int fd, const void *buff, int count)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b086      	sub	sp, #24
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	60f8      	str	r0, [r7, #12]
 8007d60:	60b9      	str	r1, [r7, #8]
 8007d62:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef status;

    if ((count < 0) && (fd != STDOUT_FILENO) && (fd != STDERR_FILENO)) {
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	da0d      	bge.n	8007d86 <_write+0x2e>
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	d00a      	beq.n	8007d86 <_write+0x2e>
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	2b02      	cmp	r3, #2
 8007d74:	d007      	beq.n	8007d86 <_write+0x2e>
        errno = EBADF;
 8007d76:	f004 fc55 	bl	800c624 <__errno>
 8007d7a:	4602      	mov	r2, r0
 8007d7c:	2309      	movs	r3, #9
 8007d7e:	6013      	str	r3, [r2, #0]
        return -1;
 8007d80:	f04f 33ff 	mov.w	r3, #4294967295
 8007d84:	e016      	b.n	8007db4 <_write+0x5c>
    }

    if (_ioWriteAllowed)
 8007d86:	4b0d      	ldr	r3, [pc, #52]	; (8007dbc <_write+0x64>)
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d00a      	beq.n	8007da4 <_write+0x4c>
        status = HAL_UART_Transmit(&UartHandle, (uint8_t *)buff, count,
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	b29a      	uxth	r2, r3
 8007d92:	f04f 33ff 	mov.w	r3, #4294967295
 8007d96:	68b9      	ldr	r1, [r7, #8]
 8007d98:	4809      	ldr	r0, [pc, #36]	; (8007dc0 <_write+0x68>)
 8007d9a:	f7fe fd22 	bl	80067e2 <HAL_UART_Transmit>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	75fb      	strb	r3, [r7, #23]
 8007da2:	e001      	b.n	8007da8 <_write+0x50>
                HAL_MAX_DELAY);
    else
        status = HAL_OK;
 8007da4:	2300      	movs	r3, #0
 8007da6:	75fb      	strb	r3, [r7, #23]

    return (status == HAL_OK ? count : 0);
 8007da8:	7dfb      	ldrb	r3, [r7, #23]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d101      	bne.n	8007db2 <_write+0x5a>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	e000      	b.n	8007db4 <_write+0x5c>
 8007db2:	2300      	movs	r3, #0
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3718      	adds	r7, #24
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}
 8007dbc:	2000000d 	.word	0x2000000d
 8007dc0:	20000a98 	.word	0x20000a98

08007dc4 <aiLogErr>:
 * AI-related functions
 * -----------------------------------------------------------------------------
 */

void aiLogErr(const ai_error err, const char *fct)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b082      	sub	sp, #8
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
 8007dcc:	6039      	str	r1, [r7, #0]
    if (fct)
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d009      	beq.n	8007de8 <aiLogErr+0x24>
        printf("E: AI error (%s) - type=%d code=%d\r\n", fct,
                err.type, err.code);
 8007dd4:	793b      	ldrb	r3, [r7, #4]
        printf("E: AI error (%s) - type=%d code=%d\r\n", fct,
 8007dd6:	461a      	mov	r2, r3
                err.type, err.code);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f3c3 2317 	ubfx	r3, r3, #8, #24
        printf("E: AI error (%s) - type=%d code=%d\r\n", fct,
 8007dde:	6839      	ldr	r1, [r7, #0]
 8007de0:	4808      	ldr	r0, [pc, #32]	; (8007e04 <aiLogErr+0x40>)
 8007de2:	f004 fd23 	bl	800c82c <iprintf>
    else
        printf("E: AI error - type=%d code=%d\r\n", err.type, err.code);
}
 8007de6:	e008      	b.n	8007dfa <aiLogErr+0x36>
        printf("E: AI error - type=%d code=%d\r\n", err.type, err.code);
 8007de8:	793b      	ldrb	r3, [r7, #4]
 8007dea:	4619      	mov	r1, r3
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8007df2:	461a      	mov	r2, r3
 8007df4:	4804      	ldr	r0, [pc, #16]	; (8007e08 <aiLogErr+0x44>)
 8007df6:	f004 fd19 	bl	800c82c <iprintf>
}
 8007dfa:	bf00      	nop
 8007dfc:	3708      	adds	r7, #8
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}
 8007e02:	bf00      	nop
 8007e04:	0800ea78 	.word	0x0800ea78
 8007e08:	0800eaa0 	.word	0x0800eaa0

08007e0c <aiBufferSize>:

ai_u32 aiBufferSize(const ai_buffer* buffer)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b083      	sub	sp, #12
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
    return buffer->height * buffer->width * buffer->channels;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	88db      	ldrh	r3, [r3, #6]
 8007e18:	461a      	mov	r2, r3
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	891b      	ldrh	r3, [r3, #8]
 8007e1e:	fb03 f302 	mul.w	r3, r3, r2
 8007e22:	461a      	mov	r2, r3
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	68db      	ldr	r3, [r3, #12]
 8007e28:	fb03 f302 	mul.w	r3, r3, r2
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	370c      	adds	r7, #12
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr

08007e38 <aiPrintLayoutBuffer>:

__STATIC_INLINE void aiPrintLayoutBuffer(const char *msg, int idx,
        const ai_buffer* buffer)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b088      	sub	sp, #32
 8007e3c:	af02      	add	r7, sp, #8
 8007e3e:	60f8      	str	r0, [r7, #12]
 8007e40:	60b9      	str	r1, [r7, #8]
 8007e42:	607a      	str	r2, [r7, #4]
    uint32_t type_id = AI_BUFFER_FMT_GET_TYPE(buffer->format);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	145b      	asrs	r3, r3, #17
 8007e4a:	f003 030f 	and.w	r3, r3, #15
 8007e4e:	617b      	str	r3, [r7, #20]
    printf("%s [%d]          : shape(HWC):(%d,%d,%ld) format=",
            msg, idx, buffer->height, buffer->width, buffer->channels);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	88db      	ldrh	r3, [r3, #6]
    printf("%s [%d]          : shape(HWC):(%d,%d,%ld) format=",
 8007e54:	4619      	mov	r1, r3
            msg, idx, buffer->height, buffer->width, buffer->channels);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	891b      	ldrh	r3, [r3, #8]
    printf("%s [%d]          : shape(HWC):(%d,%d,%ld) format=",
 8007e5a:	461a      	mov	r2, r3
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	68db      	ldr	r3, [r3, #12]
 8007e60:	9301      	str	r3, [sp, #4]
 8007e62:	9200      	str	r2, [sp, #0]
 8007e64:	460b      	mov	r3, r1
 8007e66:	68ba      	ldr	r2, [r7, #8]
 8007e68:	68f9      	ldr	r1, [r7, #12]
 8007e6a:	4835      	ldr	r0, [pc, #212]	; (8007f40 <aiPrintLayoutBuffer+0x108>)
 8007e6c:	f004 fcde 	bl	800c82c <iprintf>
    if (type_id == AI_BUFFER_FMT_TYPE_Q)
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	2b02      	cmp	r3, #2
 8007e74:	d12d      	bne.n	8007ed2 <aiPrintLayoutBuffer+0x9a>
        printf("Q%d.%d (%dbits, %s)",
                (int)AI_BUFFER_FMT_GET_BITS(buffer->format)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	11db      	asrs	r3, r3, #7
 8007e7c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
                - ((int)AI_BUFFER_FMT_GET_FBITS(buffer->format) +
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	b2db      	uxtb	r3, r3
 8007e86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e8a:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
                   (int)AI_BUFFER_FMT_GET_SIGN(buffer->format)),
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	15db      	asrs	r3, r3, #23
 8007e94:	f003 0301 	and.w	r3, r3, #1
                - ((int)AI_BUFFER_FMT_GET_FBITS(buffer->format) +
 8007e98:	440b      	add	r3, r1
        printf("Q%d.%d (%dbits, %s)",
 8007e9a:	1ad1      	subs	r1, r2, r3
                AI_BUFFER_FMT_GET_FBITS(buffer->format),
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	b2db      	uxtb	r3, r3
 8007ea2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
        printf("Q%d.%d (%dbits, %s)",
 8007ea6:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
                (int)AI_BUFFER_FMT_GET_BITS(buffer->format),
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	11db      	asrs	r3, r3, #7
        printf("Q%d.%d (%dbits, %s)",
 8007eb0:	f003 007f 	and.w	r0, r3, #127	; 0x7f
                AI_BUFFER_FMT_GET_SIGN(buffer->format)?"signed":"unsigned");
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        printf("Q%d.%d (%dbits, %s)",
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d001      	beq.n	8007ec4 <aiPrintLayoutBuffer+0x8c>
 8007ec0:	4b20      	ldr	r3, [pc, #128]	; (8007f44 <aiPrintLayoutBuffer+0x10c>)
 8007ec2:	e000      	b.n	8007ec6 <aiPrintLayoutBuffer+0x8e>
 8007ec4:	4b20      	ldr	r3, [pc, #128]	; (8007f48 <aiPrintLayoutBuffer+0x110>)
 8007ec6:	9300      	str	r3, [sp, #0]
 8007ec8:	4603      	mov	r3, r0
 8007eca:	4820      	ldr	r0, [pc, #128]	; (8007f4c <aiPrintLayoutBuffer+0x114>)
 8007ecc:	f004 fcae 	bl	800c82c <iprintf>
 8007ed0:	e018      	b.n	8007f04 <aiPrintLayoutBuffer+0xcc>
    else if (type_id == AI_BUFFER_FMT_TYPE_FLOAT)
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d112      	bne.n	8007efe <aiPrintLayoutBuffer+0xc6>
        printf("FLOAT (%dbits, %s)",
                (int)AI_BUFFER_FMT_GET_BITS(buffer->format),
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	11db      	asrs	r3, r3, #7
        printf("FLOAT (%dbits, %s)",
 8007ede:	f003 017f 	and.w	r1, r3, #127	; 0x7f
                AI_BUFFER_FMT_GET_SIGN(buffer->format)?"signed":"unsigned");
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        printf("FLOAT (%dbits, %s)",
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d001      	beq.n	8007ef2 <aiPrintLayoutBuffer+0xba>
 8007eee:	4b15      	ldr	r3, [pc, #84]	; (8007f44 <aiPrintLayoutBuffer+0x10c>)
 8007ef0:	e000      	b.n	8007ef4 <aiPrintLayoutBuffer+0xbc>
 8007ef2:	4b15      	ldr	r3, [pc, #84]	; (8007f48 <aiPrintLayoutBuffer+0x110>)
 8007ef4:	461a      	mov	r2, r3
 8007ef6:	4816      	ldr	r0, [pc, #88]	; (8007f50 <aiPrintLayoutBuffer+0x118>)
 8007ef8:	f004 fc98 	bl	800c82c <iprintf>
 8007efc:	e002      	b.n	8007f04 <aiPrintLayoutBuffer+0xcc>
    else
        printf("NONE");
 8007efe:	4815      	ldr	r0, [pc, #84]	; (8007f54 <aiPrintLayoutBuffer+0x11c>)
 8007f00:	f004 fc94 	bl	800c82c <iprintf>
    printf(" size=%ldbytes\r\n", AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer),
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	891b      	ldrh	r3, [r3, #8]
 8007f08:	461a      	mov	r2, r3
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	88db      	ldrh	r3, [r3, #6]
 8007f0e:	fb03 f302 	mul.w	r3, r3, r2
 8007f12:	461a      	mov	r2, r3
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	68db      	ldr	r3, [r3, #12]
 8007f18:	fb03 f302 	mul.w	r3, r3, r2
 8007f1c:	687a      	ldr	r2, [r7, #4]
 8007f1e:	6812      	ldr	r2, [r2, #0]
 8007f20:	11d2      	asrs	r2, r2, #7
 8007f22:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007f26:	fb02 f303 	mul.w	r3, r2, r3
 8007f2a:	3304      	adds	r3, #4
 8007f2c:	08db      	lsrs	r3, r3, #3
 8007f2e:	4619      	mov	r1, r3
 8007f30:	4809      	ldr	r0, [pc, #36]	; (8007f58 <aiPrintLayoutBuffer+0x120>)
 8007f32:	f004 fc7b 	bl	800c82c <iprintf>
            buffer->format));
}
 8007f36:	bf00      	nop
 8007f38:	3718      	adds	r7, #24
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}
 8007f3e:	bf00      	nop
 8007f40:	0800eac0 	.word	0x0800eac0
 8007f44:	0800eaf4 	.word	0x0800eaf4
 8007f48:	0800eafc 	.word	0x0800eafc
 8007f4c:	0800eb08 	.word	0x0800eb08
 8007f50:	0800eb1c 	.word	0x0800eb1c
 8007f54:	0800eb30 	.word	0x0800eb30
 8007f58:	0800eb38 	.word	0x0800eb38

08007f5c <aiPrintNetworkInfo>:

void aiPrintNetworkInfo(const ai_network_report* report)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b086      	sub	sp, #24
 8007f60:	af02      	add	r7, sp, #8
 8007f62:	6078      	str	r0, [r7, #4]
    int i;
    printf("Network configuration...\r\n");
 8007f64:	484d      	ldr	r0, [pc, #308]	; (800809c <aiPrintNetworkInfo+0x140>)
 8007f66:	f004 fcd5 	bl	800c914 <puts>
    printf(" Model name         : %s\r\n", report->model_name);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4619      	mov	r1, r3
 8007f70:	484b      	ldr	r0, [pc, #300]	; (80080a0 <aiPrintNetworkInfo+0x144>)
 8007f72:	f004 fc5b 	bl	800c82c <iprintf>
    printf(" Model signature    : %s\r\n", report->model_signature);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	4619      	mov	r1, r3
 8007f7c:	4849      	ldr	r0, [pc, #292]	; (80080a4 <aiPrintNetworkInfo+0x148>)
 8007f7e:	f004 fc55 	bl	800c82c <iprintf>
    printf(" Model datetime     : %s\r\n", report->model_datetime);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	689b      	ldr	r3, [r3, #8]
 8007f86:	4619      	mov	r1, r3
 8007f88:	4847      	ldr	r0, [pc, #284]	; (80080a8 <aiPrintNetworkInfo+0x14c>)
 8007f8a:	f004 fc4f 	bl	800c82c <iprintf>
    printf(" Compile datetime   : %s\r\n", report->compile_datetime);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	68db      	ldr	r3, [r3, #12]
 8007f92:	4619      	mov	r1, r3
 8007f94:	4845      	ldr	r0, [pc, #276]	; (80080ac <aiPrintNetworkInfo+0x150>)
 8007f96:	f004 fc49 	bl	800c82c <iprintf>
    printf(" Runtime revision   : %s (%d.%d.%d)\r\n", report->runtime_revision,
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6919      	ldr	r1, [r3, #16]
            report->runtime_version.major,
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	7d1b      	ldrb	r3, [r3, #20]
    printf(" Runtime revision   : %s (%d.%d.%d)\r\n", report->runtime_revision,
 8007fa2:	461a      	mov	r2, r3
            report->runtime_version.minor,
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	7d5b      	ldrb	r3, [r3, #21]
    printf(" Runtime revision   : %s (%d.%d.%d)\r\n", report->runtime_revision,
 8007fa8:	4618      	mov	r0, r3
            report->runtime_version.micro);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	7d9b      	ldrb	r3, [r3, #22]
    printf(" Runtime revision   : %s (%d.%d.%d)\r\n", report->runtime_revision,
 8007fae:	9300      	str	r3, [sp, #0]
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	483f      	ldr	r0, [pc, #252]	; (80080b0 <aiPrintNetworkInfo+0x154>)
 8007fb4:	f004 fc3a 	bl	800c82c <iprintf>
    printf(" Tool revision      : %s (%d.%d.%d)\r\n", report->tool_revision,
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6999      	ldr	r1, [r3, #24]
            report->tool_version.major,
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	7f1b      	ldrb	r3, [r3, #28]
    printf(" Tool revision      : %s (%d.%d.%d)\r\n", report->tool_revision,
 8007fc0:	461a      	mov	r2, r3
            report->tool_version.minor,
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	7f5b      	ldrb	r3, [r3, #29]
    printf(" Tool revision      : %s (%d.%d.%d)\r\n", report->tool_revision,
 8007fc6:	4618      	mov	r0, r3
            report->tool_version.micro);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	7f9b      	ldrb	r3, [r3, #30]
    printf(" Tool revision      : %s (%d.%d.%d)\r\n", report->tool_revision,
 8007fcc:	9300      	str	r3, [sp, #0]
 8007fce:	4603      	mov	r3, r0
 8007fd0:	4838      	ldr	r0, [pc, #224]	; (80080b4 <aiPrintNetworkInfo+0x158>)
 8007fd2:	f004 fc2b 	bl	800c82c <iprintf>
    printf("Network info...\r\n");
 8007fd6:	4838      	ldr	r0, [pc, #224]	; (80080b8 <aiPrintNetworkInfo+0x15c>)
 8007fd8:	f004 fc9c 	bl	800c914 <puts>
    printf("  nodes             : %ld\r\n", report->n_nodes);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fe0:	4619      	mov	r1, r3
 8007fe2:	4836      	ldr	r0, [pc, #216]	; (80080bc <aiPrintNetworkInfo+0x160>)
 8007fe4:	f004 fc22 	bl	800c82c <iprintf>
    printf("  complexity        : %ld MACC\r\n", report->n_macc);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fec:	4619      	mov	r1, r3
 8007fee:	4834      	ldr	r0, [pc, #208]	; (80080c0 <aiPrintNetworkInfo+0x164>)
 8007ff0:	f004 fc1c 	bl	800c82c <iprintf>
    printf("  activation        : %ld bytes\r\n",
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	333c      	adds	r3, #60	; 0x3c
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f7ff ff07 	bl	8007e0c <aiBufferSize>
 8007ffe:	4603      	mov	r3, r0
 8008000:	4619      	mov	r1, r3
 8008002:	4830      	ldr	r0, [pc, #192]	; (80080c4 <aiPrintNetworkInfo+0x168>)
 8008004:	f004 fc12 	bl	800c82c <iprintf>
            aiBufferSize(&report->activations));
    printf("  params            : %ld bytes\r\n",
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	3350      	adds	r3, #80	; 0x50
 800800c:	4618      	mov	r0, r3
 800800e:	f7ff fefd 	bl	8007e0c <aiBufferSize>
 8008012:	4603      	mov	r3, r0
 8008014:	4619      	mov	r1, r3
 8008016:	482c      	ldr	r0, [pc, #176]	; (80080c8 <aiPrintNetworkInfo+0x16c>)
 8008018:	f004 fc08 	bl	800c82c <iprintf>
            aiBufferSize(&report->params));
    printf("  inputs/outputs    : %u/%u\r\n",
            report->n_inputs, report->n_outputs);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    printf("  inputs/outputs    : %u/%u\r\n",
 8008020:	4619      	mov	r1, r3
            report->n_inputs, report->n_outputs);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    printf("  inputs/outputs    : %u/%u\r\n",
 8008026:	461a      	mov	r2, r3
 8008028:	4828      	ldr	r0, [pc, #160]	; (80080cc <aiPrintNetworkInfo+0x170>)
 800802a:	f004 fbff 	bl	800c82c <iprintf>
    for (i=0; i<report->n_inputs; i++)
 800802e:	2300      	movs	r3, #0
 8008030:	60fb      	str	r3, [r7, #12]
 8008032:	e00f      	b.n	8008054 <aiPrintNetworkInfo+0xf8>
        aiPrintLayoutBuffer("   IN ", i, &report->inputs[i]);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008038:	68fa      	ldr	r2, [r7, #12]
 800803a:	4613      	mov	r3, r2
 800803c:	009b      	lsls	r3, r3, #2
 800803e:	4413      	add	r3, r2
 8008040:	009b      	lsls	r3, r3, #2
 8008042:	440b      	add	r3, r1
 8008044:	461a      	mov	r2, r3
 8008046:	68f9      	ldr	r1, [r7, #12]
 8008048:	4821      	ldr	r0, [pc, #132]	; (80080d0 <aiPrintNetworkInfo+0x174>)
 800804a:	f7ff fef5 	bl	8007e38 <aiPrintLayoutBuffer>
    for (i=0; i<report->n_inputs; i++)
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	3301      	adds	r3, #1
 8008052:	60fb      	str	r3, [r7, #12]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8008058:	461a      	mov	r2, r3
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	4293      	cmp	r3, r2
 800805e:	dbe9      	blt.n	8008034 <aiPrintNetworkInfo+0xd8>
    for (i=0; i<report->n_outputs; i++)
 8008060:	2300      	movs	r3, #0
 8008062:	60fb      	str	r3, [r7, #12]
 8008064:	e00f      	b.n	8008086 <aiPrintNetworkInfo+0x12a>
        aiPrintLayoutBuffer("   OUT", i, &report->outputs[i]);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800806a:	68fa      	ldr	r2, [r7, #12]
 800806c:	4613      	mov	r3, r2
 800806e:	009b      	lsls	r3, r3, #2
 8008070:	4413      	add	r3, r2
 8008072:	009b      	lsls	r3, r3, #2
 8008074:	440b      	add	r3, r1
 8008076:	461a      	mov	r2, r3
 8008078:	68f9      	ldr	r1, [r7, #12]
 800807a:	4816      	ldr	r0, [pc, #88]	; (80080d4 <aiPrintNetworkInfo+0x178>)
 800807c:	f7ff fedc 	bl	8007e38 <aiPrintLayoutBuffer>
    for (i=0; i<report->n_outputs; i++)
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	3301      	adds	r3, #1
 8008084:	60fb      	str	r3, [r7, #12]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800808a:	461a      	mov	r2, r3
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	4293      	cmp	r3, r2
 8008090:	dbe9      	blt.n	8008066 <aiPrintNetworkInfo+0x10a>
}
 8008092:	bf00      	nop
 8008094:	3710      	adds	r7, #16
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}
 800809a:	bf00      	nop
 800809c:	0800eb4c 	.word	0x0800eb4c
 80080a0:	0800eb68 	.word	0x0800eb68
 80080a4:	0800eb84 	.word	0x0800eb84
 80080a8:	0800eba0 	.word	0x0800eba0
 80080ac:	0800ebbc 	.word	0x0800ebbc
 80080b0:	0800ebd8 	.word	0x0800ebd8
 80080b4:	0800ec00 	.word	0x0800ec00
 80080b8:	0800ec28 	.word	0x0800ec28
 80080bc:	0800ec3c 	.word	0x0800ec3c
 80080c0:	0800ec58 	.word	0x0800ec58
 80080c4:	0800ec7c 	.word	0x0800ec7c
 80080c8:	0800eca0 	.word	0x0800eca0
 80080cc:	0800ecc4 	.word	0x0800ecc4
 80080d0:	0800ece4 	.word	0x0800ece4
 80080d4:	0800ecec 	.word	0x0800ecec

080080d8 <aiTestHeader>:
 * Test-related functions
 * -----------------------------------------------------------------------------
 */

void aiTestHeader(const char* tname, int major, int minor)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b084      	sub	sp, #16
 80080dc:	af00      	add	r7, sp, #0
 80080de:	60f8      	str	r0, [r7, #12]
 80080e0:	60b9      	str	r1, [r7, #8]
 80080e2:	607a      	str	r2, [r7, #4]
    printf("\r\n#\r\n");
 80080e4:	480a      	ldr	r0, [pc, #40]	; (8008110 <aiTestHeader+0x38>)
 80080e6:	f004 fc15 	bl	800c914 <puts>
    printf("# %s %d.%d\r\n", tname , major, minor);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	68ba      	ldr	r2, [r7, #8]
 80080ee:	68f9      	ldr	r1, [r7, #12]
 80080f0:	4808      	ldr	r0, [pc, #32]	; (8008114 <aiTestHeader+0x3c>)
 80080f2:	f004 fb9b 	bl	800c82c <iprintf>
    printf("#\r\n");
 80080f6:	4808      	ldr	r0, [pc, #32]	; (8008118 <aiTestHeader+0x40>)
 80080f8:	f004 fc0c 	bl	800c914 <puts>

#if defined(__GNUC__)
    printf("Compiled with GCC %d.%d.%d\r\n", __GNUC__, __GNUC_MINOR__,
 80080fc:	2301      	movs	r3, #1
 80080fe:	2203      	movs	r2, #3
 8008100:	2107      	movs	r1, #7
 8008102:	4806      	ldr	r0, [pc, #24]	; (800811c <aiTestHeader+0x44>)
 8008104:	f004 fb92 	bl	800c82c <iprintf>
            __BUILD_NUMBER__
    );
#elif defined (__CC_ARM)
    printf("Compiled with MDK-ARM Keil %d\r\n", __ARMCC_VERSION);
#endif
}
 8008108:	bf00      	nop
 800810a:	3710      	adds	r7, #16
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}
 8008110:	0800ecf4 	.word	0x0800ecf4
 8008114:	0800ecfc 	.word	0x0800ecfc
 8008118:	0800ed0c 	.word	0x0800ed0c
 800811c:	0800ed10 	.word	0x0800ed10

08008120 <write_packet>:
static struct o_packet {
    uint8_t pw;
    uint8_t payload[_PACKET_PAYLOAD_IN_SIZE];
} o_packet;

static bool write_packet(void) {
 8008120:	b580      	push	{r7, lr}
 8008122:	b082      	sub	sp, #8
 8008124:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef status;

    status = HAL_UART_Transmit(&UartHandle, (uint8_t *)&o_packet,
 8008126:	f04f 33ff 	mov.w	r3, #4294967295
 800812a:	2221      	movs	r2, #33	; 0x21
 800812c:	4907      	ldr	r1, [pc, #28]	; (800814c <write_packet+0x2c>)
 800812e:	4808      	ldr	r0, [pc, #32]	; (8008150 <write_packet+0x30>)
 8008130:	f7fe fb57 	bl	80067e2 <HAL_UART_Transmit>
 8008134:	4603      	mov	r3, r0
 8008136:	71fb      	strb	r3, [r7, #7]
            _PACKET_PAYLOAD_IN_SIZE + 1,
            HAL_MAX_DELAY);

    return (status == HAL_OK);
 8008138:	79fb      	ldrb	r3, [r7, #7]
 800813a:	2b00      	cmp	r3, #0
 800813c:	bf0c      	ite	eq
 800813e:	2301      	moveq	r3, #1
 8008140:	2300      	movne	r3, #0
 8008142:	b2db      	uxtb	r3, r3
}
 8008144:	4618      	mov	r0, r3
 8008146:	3708      	adds	r7, #8
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}
 800814c:	20000888 	.word	0x20000888
 8008150:	20000a98 	.word	0x20000a98

08008154 <ioFlushWrite>:

void ioFlushWrite(void)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	af00      	add	r7, sp, #0
    o_packet.pw |= (1 << 7); /* Indicate last packet */
 8008158:	4b06      	ldr	r3, [pc, #24]	; (8008174 <ioFlushWrite+0x20>)
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008160:	b2da      	uxtb	r2, r3
 8008162:	4b04      	ldr	r3, [pc, #16]	; (8008174 <ioFlushWrite+0x20>)
 8008164:	701a      	strb	r2, [r3, #0]
    write_packet();
 8008166:	f7ff ffdb 	bl	8008120 <write_packet>
    o_packet.pw = 0;
 800816a:	4b02      	ldr	r3, [pc, #8]	; (8008174 <ioFlushWrite+0x20>)
 800816c:	2200      	movs	r2, #0
 800816e:	701a      	strb	r2, [r3, #0]
}
 8008170:	bf00      	nop
 8008172:	bd80      	pop	{r7, pc}
 8008174:	20000888 	.word	0x20000888

08008178 <write_callback>:

static bool write_callback(pb_ostream_t *stream, const uint8_t *buf,
        size_t count)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b086      	sub	sp, #24
 800817c:	af00      	add	r7, sp, #0
 800817e:	60f8      	str	r0, [r7, #12]
 8008180:	60b9      	str	r1, [r7, #8]
 8008182:	607a      	str	r2, [r7, #4]
    bool res = true;
 8008184:	2301      	movs	r3, #1
 8008186:	75fb      	strb	r3, [r7, #23]
    uint8_t *pr = (uint8_t *)buf;
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	613b      	str	r3, [r7, #16]

    UNUSED(stream);

    while (count) {
 800818c:	e025      	b.n	80081da <write_callback+0x62>
        for (; o_packet.pw < _PACKET_PAYLOAD_IN_SIZE && count; o_packet.pw++) {
            o_packet.payload[o_packet.pw] = *pr;
 800818e:	4b17      	ldr	r3, [pc, #92]	; (80081ec <write_callback+0x74>)
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	4619      	mov	r1, r3
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	781a      	ldrb	r2, [r3, #0]
 8008198:	4b14      	ldr	r3, [pc, #80]	; (80081ec <write_callback+0x74>)
 800819a:	440b      	add	r3, r1
 800819c:	705a      	strb	r2, [r3, #1]
            pr++;
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	3301      	adds	r3, #1
 80081a2:	613b      	str	r3, [r7, #16]
            count--;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	3b01      	subs	r3, #1
 80081a8:	607b      	str	r3, [r7, #4]
        for (; o_packet.pw < _PACKET_PAYLOAD_IN_SIZE && count; o_packet.pw++) {
 80081aa:	4b10      	ldr	r3, [pc, #64]	; (80081ec <write_callback+0x74>)
 80081ac:	781b      	ldrb	r3, [r3, #0]
 80081ae:	3301      	adds	r3, #1
 80081b0:	b2da      	uxtb	r2, r3
 80081b2:	4b0e      	ldr	r3, [pc, #56]	; (80081ec <write_callback+0x74>)
 80081b4:	701a      	strb	r2, [r3, #0]
 80081b6:	4b0d      	ldr	r3, [pc, #52]	; (80081ec <write_callback+0x74>)
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	2b1f      	cmp	r3, #31
 80081bc:	d802      	bhi.n	80081c4 <write_callback+0x4c>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d1e4      	bne.n	800818e <write_callback+0x16>
        }
        if (o_packet.pw == _PACKET_PAYLOAD_IN_SIZE) {
 80081c4:	4b09      	ldr	r3, [pc, #36]	; (80081ec <write_callback+0x74>)
 80081c6:	781b      	ldrb	r3, [r3, #0]
 80081c8:	2b20      	cmp	r3, #32
 80081ca:	d106      	bne.n	80081da <write_callback+0x62>
                res = write_packet();
 80081cc:	f7ff ffa8 	bl	8008120 <write_packet>
 80081d0:	4603      	mov	r3, r0
 80081d2:	75fb      	strb	r3, [r7, #23]
                o_packet.pw = 0;
 80081d4:	4b05      	ldr	r3, [pc, #20]	; (80081ec <write_callback+0x74>)
 80081d6:	2200      	movs	r2, #0
 80081d8:	701a      	strb	r2, [r3, #0]
    while (count) {
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d1ea      	bne.n	80081b6 <write_callback+0x3e>
        }
    }
    return res;
 80081e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3718      	adds	r7, #24
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
 80081ea:	bf00      	nop
 80081ec:	20000888 	.word	0x20000888

080081f0 <read_packet>:
    uint8_t payload[_PACKET_PAYLOAD_OUT_SIZE];
} i_packet;

static int i_ridx = 0;

static bool read_packet(void) {
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b082      	sub	sp, #8
 80081f4:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef status;

    status = HAL_UART_Receive(&UartHandle, (uint8_t *)&i_packet,
 80081f6:	f04f 33ff 	mov.w	r3, #4294967295
 80081fa:	2221      	movs	r2, #33	; 0x21
 80081fc:	4909      	ldr	r1, [pc, #36]	; (8008224 <read_packet+0x34>)
 80081fe:	480a      	ldr	r0, [pc, #40]	; (8008228 <read_packet+0x38>)
 8008200:	f7fe fb88 	bl	8006914 <HAL_UART_Receive>
 8008204:	4603      	mov	r3, r0
 8008206:	71fb      	strb	r3, [r7, #7]
            _PACKET_PAYLOAD_OUT_SIZE + 1,
            HAL_MAX_DELAY);

    i_ridx = 0;
 8008208:	4b08      	ldr	r3, [pc, #32]	; (800822c <read_packet+0x3c>)
 800820a:	2200      	movs	r2, #0
 800820c:	601a      	str	r2, [r3, #0]

    return (status == HAL_OK);
 800820e:	79fb      	ldrb	r3, [r7, #7]
 8008210:	2b00      	cmp	r3, #0
 8008212:	bf0c      	ite	eq
 8008214:	2301      	moveq	r3, #1
 8008216:	2300      	movne	r3, #0
 8008218:	b2db      	uxtb	r3, r3
}
 800821a:	4618      	mov	r0, r3
 800821c:	3708      	adds	r7, #8
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}
 8008222:	bf00      	nop
 8008224:	200008ac 	.word	0x200008ac
 8008228:	20000a98 	.word	0x20000a98
 800822c:	200008d0 	.word	0x200008d0

08008230 <ioFlushRead>:

void ioFlushRead(void)
{
 8008230:	b480      	push	{r7}
 8008232:	af00      	add	r7, sp, #0
    i_packet.pr = 0xFF;
 8008234:	4b05      	ldr	r3, [pc, #20]	; (800824c <ioFlushRead+0x1c>)
 8008236:	22ff      	movs	r2, #255	; 0xff
 8008238:	701a      	strb	r2, [r3, #0]
    i_ridx = 0;
 800823a:	4b05      	ldr	r3, [pc, #20]	; (8008250 <ioFlushRead+0x20>)
 800823c:	2200      	movs	r2, #0
 800823e:	601a      	str	r2, [r3, #0]
}
 8008240:	bf00      	nop
 8008242:	46bd      	mov	sp, r7
 8008244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008248:	4770      	bx	lr
 800824a:	bf00      	nop
 800824c:	200008ac 	.word	0x200008ac
 8008250:	200008d0 	.word	0x200008d0

08008254 <read_callback>:

static bool read_callback(pb_istream_t *stream, uint8_t *buf, size_t count)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b088      	sub	sp, #32
 8008258:	af00      	add	r7, sp, #0
 800825a:	60f8      	str	r0, [r7, #12]
 800825c:	60b9      	str	r1, [r7, #8]
 800825e:	607a      	str	r2, [r7, #4]
    bool res = true;
 8008260:	2301      	movs	r3, #1
 8008262:	77fb      	strb	r3, [r7, #31]
    uint8_t *pw = (uint8_t *)buf;
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	61bb      	str	r3, [r7, #24]

    UNUSED(stream);

    if (count == 0)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d101      	bne.n	8008272 <read_callback+0x1e>
        return true;
 800826e:	2301      	movs	r3, #1
 8008270:	e045      	b.n	80082fe <read_callback+0xaa>

    if (i_packet.pr == 0xFF)
 8008272:	4b25      	ldr	r3, [pc, #148]	; (8008308 <read_callback+0xb4>)
 8008274:	781b      	ldrb	r3, [r3, #0]
 8008276:	2bff      	cmp	r3, #255	; 0xff
 8008278:	d103      	bne.n	8008282 <read_callback+0x2e>
        res = read_packet();
 800827a:	f7ff ffb9 	bl	80081f0 <read_packet>
 800827e:	4603      	mov	r3, r0
 8008280:	77fb      	strb	r3, [r7, #31]

    if (res == false)
 8008282:	7ffb      	ldrb	r3, [r7, #31]
 8008284:	f083 0301 	eor.w	r3, r3, #1
 8008288:	b2db      	uxtb	r3, r3
 800828a:	2b00      	cmp	r3, #0
 800828c:	d033      	beq.n	80082f6 <read_callback+0xa2>
        return res;
 800828e:	7ffb      	ldrb	r3, [r7, #31]
 8008290:	e035      	b.n	80082fe <read_callback+0xaa>

    while (count) {
        for (; i_packet.pr > 0 && count; i_packet.pr--) {
            *pw = i_packet.payload[i_ridx];
 8008292:	4b1e      	ldr	r3, [pc, #120]	; (800830c <read_callback+0xb8>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a1c      	ldr	r2, [pc, #112]	; (8008308 <read_callback+0xb4>)
 8008298:	4413      	add	r3, r2
 800829a:	785a      	ldrb	r2, [r3, #1]
 800829c:	69bb      	ldr	r3, [r7, #24]
 800829e:	701a      	strb	r2, [r3, #0]
            pw++;
 80082a0:	69bb      	ldr	r3, [r7, #24]
 80082a2:	3301      	adds	r3, #1
 80082a4:	61bb      	str	r3, [r7, #24]
            count--;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	3b01      	subs	r3, #1
 80082aa:	607b      	str	r3, [r7, #4]
            i_ridx++;
 80082ac:	4b17      	ldr	r3, [pc, #92]	; (800830c <read_callback+0xb8>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	3301      	adds	r3, #1
 80082b2:	4a16      	ldr	r2, [pc, #88]	; (800830c <read_callback+0xb8>)
 80082b4:	6013      	str	r3, [r2, #0]
        for (; i_packet.pr > 0 && count; i_packet.pr--) {
 80082b6:	4b14      	ldr	r3, [pc, #80]	; (8008308 <read_callback+0xb4>)
 80082b8:	781b      	ldrb	r3, [r3, #0]
 80082ba:	3b01      	subs	r3, #1
 80082bc:	b2da      	uxtb	r2, r3
 80082be:	4b12      	ldr	r3, [pc, #72]	; (8008308 <read_callback+0xb4>)
 80082c0:	701a      	strb	r2, [r3, #0]
 80082c2:	4b11      	ldr	r3, [pc, #68]	; (8008308 <read_callback+0xb4>)
 80082c4:	781b      	ldrb	r3, [r3, #0]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d002      	beq.n	80082d0 <read_callback+0x7c>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d1e0      	bne.n	8008292 <read_callback+0x3e>
        }
        if (count && i_packet.pr == 0) {
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d00f      	beq.n	80082f6 <read_callback+0xa2>
 80082d6:	4b0c      	ldr	r3, [pc, #48]	; (8008308 <read_callback+0xb4>)
 80082d8:	781b      	ldrb	r3, [r3, #0]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d10b      	bne.n	80082f6 <read_callback+0xa2>
            uint8_t sync = 0xAA;
 80082de:	23aa      	movs	r3, #170	; 0xaa
 80082e0:	75fb      	strb	r3, [r7, #23]
            HAL_UART_Transmit(&UartHandle, &sync, 1,
 80082e2:	f107 0117 	add.w	r1, r7, #23
 80082e6:	f04f 33ff 	mov.w	r3, #4294967295
 80082ea:	2201      	movs	r2, #1
 80082ec:	4808      	ldr	r0, [pc, #32]	; (8008310 <read_callback+0xbc>)
 80082ee:	f7fe fa78 	bl	80067e2 <HAL_UART_Transmit>
                        HAL_MAX_DELAY);
            read_packet();
 80082f2:	f7ff ff7d 	bl	80081f0 <read_packet>
    while (count) {
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d1e2      	bne.n	80082c2 <read_callback+0x6e>
        }
    }

    return res;
 80082fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3720      	adds	r7, #32
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
 8008306:	bf00      	nop
 8008308:	200008ac 	.word	0x200008ac
 800830c:	200008d0 	.word	0x200008d0
 8008310:	20000a98 	.word	0x20000a98

08008314 <pb_ostream_to_uart>:
}
#endif


pb_ostream_t pb_ostream_to_uart(int fd)
{
 8008314:	b4b0      	push	{r4, r5, r7}
 8008316:	b089      	sub	sp, #36	; 0x24
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	6039      	str	r1, [r7, #0]
    pb_ostream_t stream = {&write_callback, (void*)(intptr_t)fd, SIZE_MAX, 0};
 800831e:	f107 030c 	add.w	r3, r7, #12
 8008322:	2200      	movs	r2, #0
 8008324:	601a      	str	r2, [r3, #0]
 8008326:	605a      	str	r2, [r3, #4]
 8008328:	609a      	str	r2, [r3, #8]
 800832a:	60da      	str	r2, [r3, #12]
 800832c:	611a      	str	r2, [r3, #16]
 800832e:	4b0a      	ldr	r3, [pc, #40]	; (8008358 <pb_ostream_to_uart+0x44>)
 8008330:	60fb      	str	r3, [r7, #12]
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	613b      	str	r3, [r7, #16]
 8008336:	f04f 33ff 	mov.w	r3, #4294967295
 800833a:	617b      	str	r3, [r7, #20]
    return stream;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	461d      	mov	r5, r3
 8008340:	f107 040c 	add.w	r4, r7, #12
 8008344:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008346:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008348:	6823      	ldr	r3, [r4, #0]
 800834a:	602b      	str	r3, [r5, #0]
}
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	3724      	adds	r7, #36	; 0x24
 8008350:	46bd      	mov	sp, r7
 8008352:	bcb0      	pop	{r4, r5, r7}
 8008354:	4770      	bx	lr
 8008356:	bf00      	nop
 8008358:	08008179 	.word	0x08008179

0800835c <pb_istream_from_uart>:

pb_istream_t pb_istream_from_uart(int fd)
{
 800835c:	b490      	push	{r4, r7}
 800835e:	b086      	sub	sp, #24
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	6039      	str	r1, [r7, #0]
    pb_istream_t stream = {&read_callback, (void*)(intptr_t)fd, SIZE_MAX};
 8008366:	f107 0308 	add.w	r3, r7, #8
 800836a:	2200      	movs	r2, #0
 800836c:	601a      	str	r2, [r3, #0]
 800836e:	605a      	str	r2, [r3, #4]
 8008370:	609a      	str	r2, [r3, #8]
 8008372:	60da      	str	r2, [r3, #12]
 8008374:	4b09      	ldr	r3, [pc, #36]	; (800839c <pb_istream_from_uart+0x40>)
 8008376:	60bb      	str	r3, [r7, #8]
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	60fb      	str	r3, [r7, #12]
 800837c:	f04f 33ff 	mov.w	r3, #4294967295
 8008380:	613b      	str	r3, [r7, #16]
    return stream;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	461c      	mov	r4, r3
 8008386:	f107 0308 	add.w	r3, r7, #8
 800838a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800838c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	3718      	adds	r7, #24
 8008394:	46bd      	mov	sp, r7
 8008396:	bc90      	pop	{r4, r7}
 8008398:	4770      	bx	lr
 800839a:	bf00      	nop
 800839c:	08008255 	.word	0x08008255

080083a0 <aiOnExecNode_cb>:
#endif

#ifdef HAS_INSPECTOR
static void aiOnExecNode_cb(const ai_handle cookie,
        const ai_inspect_node_info* node_info,
        ai_node_exec_stage stage) {
 80083a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083a4:	b08a      	sub	sp, #40	; 0x28
 80083a6:	af02      	add	r7, sp, #8
 80083a8:	60f8      	str	r0, [r7, #12]
 80083aa:	60b9      	str	r1, [r7, #8]
 80083ac:	4613      	mov	r3, r2
 80083ae:	71fb      	strb	r3, [r7, #7]

    struct ai_network_exec_ctx *ctx = (struct ai_network_exec_ctx*)cookie;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	61bb      	str	r3, [r7, #24]

    if (stage == AI_NODE_EXEC_PRE_FORWARD_STAGE) {
 80083b4:	79fb      	ldrb	r3, [r7, #7]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d117      	bne.n	80083ea <aiOnExecNode_cb+0x4a>
        ctx->n_cb_in++;
 80083ba:	69bb      	ldr	r3, [r7, #24]
 80083bc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80083c0:	1c5a      	adds	r2, r3, #1
 80083c2:	69bb      	ldr	r3, [r7, #24]
 80083c4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        ctx->tcom += dwtGetCycles();
 80083c8:	f7ff fa92 	bl	80078f0 <dwtGetCycles>
 80083cc:	69bb      	ldr	r3, [r7, #24]
 80083ce:	e9d3 1236 	ldrd	r1, r2, [r3, #216]	; 0xd8
 80083d2:	4605      	mov	r5, r0
 80083d4:	f04f 0600 	mov.w	r6, #0
 80083d8:	186b      	adds	r3, r5, r1
 80083da:	eb46 0402 	adc.w	r4, r6, r2
 80083de:	69ba      	ldr	r2, [r7, #24]
 80083e0:	e9c2 3436 	strd	r3, r4, [r2, #216]	; 0xd8
        dwtReset();
 80083e4:	f7ff fa78 	bl	80078d8 <dwtReset>
                type | node_info->type,
                node_info->id,
                dwtCyclesToFloatMs(dur),
                &node_info->out[0]);
    }
}
 80083e8:	e058      	b.n	800849c <aiOnExecNode_cb+0xfc>
    } else if (stage == AI_NODE_EXEC_POST_FORWARD_STAGE) {
 80083ea:	79fb      	ldrb	r3, [r7, #7]
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	d155      	bne.n	800849c <aiOnExecNode_cb+0xfc>
        uint32_t dur = dwtGetCycles();
 80083f0:	f7ff fa7e 	bl	80078f0 <dwtGetCycles>
 80083f4:	6178      	str	r0, [r7, #20]
        dwtReset();
 80083f6:	f7ff fa6f 	bl	80078d8 <dwtReset>
        ctx->tnodes += dur;
 80083fa:	69bb      	ldr	r3, [r7, #24]
 80083fc:	e9d3 1238 	ldrd	r1, r2, [r3, #224]	; 0xe0
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	461d      	mov	r5, r3
 8008404:	f04f 0600 	mov.w	r6, #0
 8008408:	186b      	adds	r3, r5, r1
 800840a:	eb46 0402 	adc.w	r4, r6, r2
 800840e:	69ba      	ldr	r2, [r7, #24]
 8008410:	e9c2 3438 	strd	r3, r4, [r2, #224]	; 0xe0
        ctx->n_cb_out++;
 8008414:	69bb      	ldr	r3, [r7, #24]
 8008416:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800841a:	1c5a      	adds	r2, r3, #1
 800841c:	69bb      	ldr	r3, [r7, #24]
 800841e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
        if (ctx->n_cb_out == ctx->report.n_nodes)
 8008422:	69bb      	ldr	r3, [r7, #24]
 8008424:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8008428:	69bb      	ldr	r3, [r7, #24]
 800842a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800842c:	429a      	cmp	r2, r3
 800842e:	d102      	bne.n	8008436 <aiOnExecNode_cb+0x96>
            type = EnumLayerType_LAYER_TYPE_INTERNAL_LAST;
 8008430:	2302      	movs	r3, #2
 8008432:	61fb      	str	r3, [r7, #28]
 8008434:	e001      	b.n	800843a <aiOnExecNode_cb+0x9a>
            type = EnumLayerType_LAYER_TYPE_INTERNAL;
 8008436:	2301      	movs	r3, #1
 8008438:	61fb      	str	r3, [r7, #28]
        type = type << 16;
 800843a:	69fb      	ldr	r3, [r7, #28]
 800843c:	041b      	lsls	r3, r3, #16
 800843e:	61fb      	str	r3, [r7, #28]
        if (ctx->no_data)
 8008440:	69bb      	ldr	r3, [r7, #24]
 8008442:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
 8008446:	2b00      	cmp	r3, #0
 8008448:	d003      	beq.n	8008452 <aiOnExecNode_cb+0xb2>
            type |= PB_BUFFER_TYPE_SEND_WITHOUT_DATA;
 800844a:	69fb      	ldr	r3, [r7, #28]
 800844c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008450:	61fb      	str	r3, [r7, #28]
        aiPbMgrSendAiBuffer3(ctx->creq, ctx->cresp, EnumState_S_PROCESSING,
 8008452:	69bb      	ldr	r3, [r7, #24]
 8008454:	f8d3 50c8 	ldr.w	r5, [r3, #200]	; 0xc8
 8008458:	69bb      	ldr	r3, [r7, #24]
 800845a:	f8d3 60cc 	ldr.w	r6, [r3, #204]	; 0xcc
                type | node_info->type,
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	881b      	ldrh	r3, [r3, #0]
 8008462:	461a      	mov	r2, r3
        aiPbMgrSendAiBuffer3(ctx->creq, ctx->cresp, EnumState_S_PROCESSING,
 8008464:	69fb      	ldr	r3, [r7, #28]
 8008466:	ea42 0803 	orr.w	r8, r2, r3
                node_info->id,
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	885b      	ldrh	r3, [r3, #2]
        aiPbMgrSendAiBuffer3(ctx->creq, ctx->cresp, EnumState_S_PROCESSING,
 800846e:	603b      	str	r3, [r7, #0]
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	f04f 0400 	mov.w	r4, #0
 8008476:	4618      	mov	r0, r3
 8008478:	4621      	mov	r1, r4
 800847a:	f7ff fa4d 	bl	8007918 <dwtCyclesToFloatMs>
 800847e:	eef0 7a40 	vmov.f32	s15, s0
                &node_info->out[0]);
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	695b      	ldr	r3, [r3, #20]
        aiPbMgrSendAiBuffer3(ctx->creq, ctx->cresp, EnumState_S_PROCESSING,
 8008486:	9301      	str	r3, [sp, #4]
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	9300      	str	r3, [sp, #0]
 800848c:	eeb0 0a67 	vmov.f32	s0, s15
 8008490:	4643      	mov	r3, r8
 8008492:	2202      	movs	r2, #2
 8008494:	4631      	mov	r1, r6
 8008496:	4628      	mov	r0, r5
 8008498:	f7fe ff82 	bl	80073a0 <aiPbMgrSendAiBuffer3>
}
 800849c:	bf00      	nop
 800849e:	3720      	adds	r7, #32
 80084a0:	46bd      	mov	sp, r7
 80084a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080084a8 <aiExecCtx>:
#endif


static struct ai_network_exec_ctx *aiExecCtx(const char *nn_name, int pos)
{
 80084a8:	b590      	push	{r4, r7, lr}
 80084aa:	b085      	sub	sp, #20
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	6039      	str	r1, [r7, #0]
    struct ai_network_exec_ctx *cur = NULL;
 80084b2:	2300      	movs	r3, #0
 80084b4:	60fb      	str	r3, [r7, #12]

    if (!nn_name)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d101      	bne.n	80084c0 <aiExecCtx+0x18>
        return NULL;
 80084bc:	2300      	movs	r3, #0
 80084be:	e046      	b.n	800854e <aiExecCtx+0xa6>

    if (!nn_name[0]) {
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	781b      	ldrb	r3, [r3, #0]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d10d      	bne.n	80084e4 <aiExecCtx+0x3c>
        if ((pos >= 0) && (pos < AI_MNETWORK_NUMBER))
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	db3e      	blt.n	800854c <aiExecCtx+0xa4>
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	dc3b      	bgt.n	800854c <aiExecCtx+0xa4>
            cur = &net_exec_ctx[pos];
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	22e8      	movs	r2, #232	; 0xe8
 80084d8:	fb02 f303 	mul.w	r3, r2, r3
 80084dc:	4a1e      	ldr	r2, [pc, #120]	; (8008558 <aiExecCtx+0xb0>)
 80084de:	4413      	add	r3, r2
 80084e0:	60fb      	str	r3, [r7, #12]
 80084e2:	e033      	b.n	800854c <aiExecCtx+0xa4>
    } else {
        int idx;
        for (idx=0; idx < AI_MNETWORK_NUMBER; idx++) {
 80084e4:	2300      	movs	r3, #0
 80084e6:	60bb      	str	r3, [r7, #8]
 80084e8:	e02b      	b.n	8008542 <aiExecCtx+0x9a>
            cur = &net_exec_ctx[idx];
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	22e8      	movs	r2, #232	; 0xe8
 80084ee:	fb02 f303 	mul.w	r3, r2, r3
 80084f2:	4a19      	ldr	r2, [pc, #100]	; (8008558 <aiExecCtx+0xb0>)
 80084f4:	4413      	add	r3, r2
 80084f6:	60fb      	str	r3, [r7, #12]
            if (cur->network &&
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d01b      	beq.n	8008538 <aiExecCtx+0x90>
                    (strlen(cur->report.model_name) == strlen(nn_name)) &&
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	4618      	mov	r0, r3
 8008506:	f7fc fb14 	bl	8004b32 <strlen>
 800850a:	4604      	mov	r4, r0
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f7fc fb10 	bl	8004b32 <strlen>
 8008512:	4603      	mov	r3, r0
            if (cur->network &&
 8008514:	429c      	cmp	r4, r3
 8008516:	d10f      	bne.n	8008538 <aiExecCtx+0x90>
                    (strncmp(cur->report.model_name, nn_name,
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	685c      	ldr	r4, [r3, #4]
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	4618      	mov	r0, r3
 8008522:	f7fc fb06 	bl	8004b32 <strlen>
 8008526:	4603      	mov	r3, r0
 8008528:	461a      	mov	r2, r3
 800852a:	6879      	ldr	r1, [r7, #4]
 800852c:	4620      	mov	r0, r4
 800852e:	f004 fa11 	bl	800c954 <strncmp>
 8008532:	4603      	mov	r3, r0
                    (strlen(cur->report.model_name) == strlen(nn_name)) &&
 8008534:	2b00      	cmp	r3, #0
 8008536:	d008      	beq.n	800854a <aiExecCtx+0xa2>
                            strlen(cur->report.model_name)) == 0)) {
                break;
            }
            cur = NULL;
 8008538:	2300      	movs	r3, #0
 800853a:	60fb      	str	r3, [r7, #12]
        for (idx=0; idx < AI_MNETWORK_NUMBER; idx++) {
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	3301      	adds	r3, #1
 8008540:	60bb      	str	r3, [r7, #8]
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	2b00      	cmp	r3, #0
 8008546:	ddd0      	ble.n	80084ea <aiExecCtx+0x42>
 8008548:	e000      	b.n	800854c <aiExecCtx+0xa4>
                break;
 800854a:	bf00      	nop
        }
    }
    return cur;
 800854c:	68fb      	ldr	r3, [r7, #12]
}
 800854e:	4618      	mov	r0, r3
 8008550:	3714      	adds	r7, #20
 8008552:	46bd      	mov	sp, r7
 8008554:	bd90      	pop	{r4, r7, pc}
 8008556:	bf00      	nop
 8008558:	200008d8 	.word	0x200008d8

0800855c <aiSetPbContext>:

__STATIC_INLINE
void aiSetPbContext(struct ai_network_exec_ctx *ctx,
        const reqMsg *creq, respMsg *cresp)
{
 800855c:	b480      	push	{r7}
 800855e:	b085      	sub	sp, #20
 8008560:	af00      	add	r7, sp, #0
 8008562:	60f8      	str	r0, [r7, #12]
 8008564:	60b9      	str	r1, [r7, #8]
 8008566:	607a      	str	r2, [r7, #4]
#ifdef HAS_INSPECTOR
    if (!ctx)
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d008      	beq.n	8008580 <aiSetPbContext+0x24>
        return;

    ctx->creq = creq;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	68ba      	ldr	r2, [r7, #8]
 8008572:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    ctx->cresp = cresp;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	687a      	ldr	r2, [r7, #4]
 800857a:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 800857e:	e000      	b.n	8008582 <aiSetPbContext+0x26>
        return;
 8008580:	bf00      	nop
#endif
}
 8008582:	3714      	adds	r7, #20
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr

0800858c <aiBootstrap>:

static int aiBootstrap(const char *nn_name, const int idx)
{
 800858c:	b5b0      	push	{r4, r5, r7, lr}
 800858e:	b08e      	sub	sp, #56	; 0x38
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	6039      	str	r1, [r7, #0]
    ai_error err;

    /* Creating the network */
    printf("Creating the network \"%s\"..\r\n", nn_name);
 8008596:	6879      	ldr	r1, [r7, #4]
 8008598:	4855      	ldr	r0, [pc, #340]	; (80086f0 <aiBootstrap+0x164>)
 800859a:	f004 f947 	bl	800c82c <iprintf>
    err = ai_mnetwork_create(nn_name, &net_exec_ctx[idx].network, NULL);
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	22e8      	movs	r2, #232	; 0xe8
 80085a2:	fb02 f303 	mul.w	r3, r2, r3
 80085a6:	4a53      	ldr	r2, [pc, #332]	; (80086f4 <aiBootstrap+0x168>)
 80085a8:	4413      	add	r3, r2
 80085aa:	2200      	movs	r2, #0
 80085ac:	4619      	mov	r1, r3
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f003 fa5c 	bl	800ba6c <ai_mnetwork_create>
 80085b4:	4603      	mov	r3, r0
 80085b6:	637b      	str	r3, [r7, #52]	; 0x34
    if (err.type) {
 80085b8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d006      	beq.n	80085ce <aiBootstrap+0x42>
        aiLogErr(err, "ai_mnetwork_create");
 80085c0:	494d      	ldr	r1, [pc, #308]	; (80086f8 <aiBootstrap+0x16c>)
 80085c2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80085c4:	f7ff fbfe 	bl	8007dc4 <aiLogErr>
        return -1;
 80085c8:	f04f 33ff 	mov.w	r3, #4294967295
 80085cc:	e08b      	b.n	80086e6 <aiBootstrap+0x15a>
    }

    /* Query the created network to get relevant info from it */
    if (ai_mnetwork_get_info(net_exec_ctx[idx].network,
 80085ce:	4a49      	ldr	r2, [pc, #292]	; (80086f4 <aiBootstrap+0x168>)
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	21e8      	movs	r1, #232	; 0xe8
 80085d4:	fb01 f303 	mul.w	r3, r1, r3
 80085d8:	4413      	add	r3, r2
 80085da:	6818      	ldr	r0, [r3, #0]
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	22e8      	movs	r2, #232	; 0xe8
 80085e0:	fb02 f303 	mul.w	r3, r2, r3
 80085e4:	4a43      	ldr	r2, [pc, #268]	; (80086f4 <aiBootstrap+0x168>)
 80085e6:	4413      	add	r3, r2
 80085e8:	3304      	adds	r3, #4
 80085ea:	4619      	mov	r1, r3
 80085ec:	f003 facc 	bl	800bb88 <ai_mnetwork_get_info>
 80085f0:	4603      	mov	r3, r0
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d02c      	beq.n	8008650 <aiBootstrap+0xc4>
            &net_exec_ctx[idx].report)) {
        aiPrintNetworkInfo(&net_exec_ctx[idx].report);
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	22e8      	movs	r2, #232	; 0xe8
 80085fa:	fb02 f303 	mul.w	r3, r2, r3
 80085fe:	4a3d      	ldr	r2, [pc, #244]	; (80086f4 <aiBootstrap+0x168>)
 8008600:	4413      	add	r3, r2
 8008602:	3304      	adds	r3, #4
 8008604:	4618      	mov	r0, r3
 8008606:	f7ff fca9 	bl	8007f5c <aiPrintNetworkInfo>
        net_exec_ctx[idx].network = AI_HANDLE_NULL;
        return -2;
    }

    /* Initialize the instance */
    printf("Initializing the network\r\n");
 800860a:	483c      	ldr	r0, [pc, #240]	; (80086fc <aiBootstrap+0x170>)
 800860c:	f004 f982 	bl	800c914 <puts>
    /* build params structure to provide the reference of the
     * activation and weight buffers */
    const ai_network_params params = {
 8008610:	4b3b      	ldr	r3, [pc, #236]	; (8008700 <aiBootstrap+0x174>)
 8008612:	f107 040c 	add.w	r4, r7, #12
 8008616:	461d      	mov	r5, r3
 8008618:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800861a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800861c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800861e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008620:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008624:	e884 0003 	stmia.w	r4, {r0, r1}
            AI_BUFFER_NULL(NULL),
            AI_BUFFER_NULL(activations) };

    if (!ai_mnetwork_init(net_exec_ctx[idx].network, &params)) {
 8008628:	4a32      	ldr	r2, [pc, #200]	; (80086f4 <aiBootstrap+0x168>)
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	21e8      	movs	r1, #232	; 0xe8
 800862e:	fb01 f303 	mul.w	r3, r1, r3
 8008632:	4413      	add	r3, r2
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f107 020c 	add.w	r2, r7, #12
 800863a:	4611      	mov	r1, r2
 800863c:	4618      	mov	r0, r3
 800863e:	f003 fade 	bl	800bbfe <ai_mnetwork_init>
 8008642:	4603      	mov	r3, r0
 8008644:	f083 0301 	eor.w	r3, r3, #1
 8008648:	b2db      	uxtb	r3, r3
 800864a:	2b00      	cmp	r3, #0
 800864c:	d04a      	beq.n	80086e4 <aiBootstrap+0x158>
 800864e:	e024      	b.n	800869a <aiBootstrap+0x10e>
        err = ai_mnetwork_get_error(net_exec_ctx[idx].network);
 8008650:	4a28      	ldr	r2, [pc, #160]	; (80086f4 <aiBootstrap+0x168>)
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	21e8      	movs	r1, #232	; 0xe8
 8008656:	fb01 f303 	mul.w	r3, r1, r3
 800865a:	4413      	add	r3, r2
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4618      	mov	r0, r3
 8008660:	f003 faad 	bl	800bbbe <ai_mnetwork_get_error>
 8008664:	4603      	mov	r3, r0
 8008666:	637b      	str	r3, [r7, #52]	; 0x34
        aiLogErr(err, "ai_mnetwork_get_info");
 8008668:	4926      	ldr	r1, [pc, #152]	; (8008704 <aiBootstrap+0x178>)
 800866a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800866c:	f7ff fbaa 	bl	8007dc4 <aiLogErr>
        ai_mnetwork_destroy(net_exec_ctx[idx].network);
 8008670:	4a20      	ldr	r2, [pc, #128]	; (80086f4 <aiBootstrap+0x168>)
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	21e8      	movs	r1, #232	; 0xe8
 8008676:	fb01 f303 	mul.w	r3, r1, r3
 800867a:	4413      	add	r3, r2
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	4618      	mov	r0, r3
 8008680:	f003 fa60 	bl	800bb44 <ai_mnetwork_destroy>
        net_exec_ctx[idx].network = AI_HANDLE_NULL;
 8008684:	4a1b      	ldr	r2, [pc, #108]	; (80086f4 <aiBootstrap+0x168>)
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	21e8      	movs	r1, #232	; 0xe8
 800868a:	fb01 f303 	mul.w	r3, r1, r3
 800868e:	4413      	add	r3, r2
 8008690:	2200      	movs	r2, #0
 8008692:	601a      	str	r2, [r3, #0]
        return -2;
 8008694:	f06f 0301 	mvn.w	r3, #1
 8008698:	e025      	b.n	80086e6 <aiBootstrap+0x15a>
        err = ai_mnetwork_get_error(net_exec_ctx[idx].network);
 800869a:	4a16      	ldr	r2, [pc, #88]	; (80086f4 <aiBootstrap+0x168>)
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	21e8      	movs	r1, #232	; 0xe8
 80086a0:	fb01 f303 	mul.w	r3, r1, r3
 80086a4:	4413      	add	r3, r2
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4618      	mov	r0, r3
 80086aa:	f003 fa88 	bl	800bbbe <ai_mnetwork_get_error>
 80086ae:	4603      	mov	r3, r0
 80086b0:	637b      	str	r3, [r7, #52]	; 0x34
        aiLogErr(err, "ai_mnetwork_init");
 80086b2:	4915      	ldr	r1, [pc, #84]	; (8008708 <aiBootstrap+0x17c>)
 80086b4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80086b6:	f7ff fb85 	bl	8007dc4 <aiLogErr>
        ai_mnetwork_destroy(net_exec_ctx[idx].network);
 80086ba:	4a0e      	ldr	r2, [pc, #56]	; (80086f4 <aiBootstrap+0x168>)
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	21e8      	movs	r1, #232	; 0xe8
 80086c0:	fb01 f303 	mul.w	r3, r1, r3
 80086c4:	4413      	add	r3, r2
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4618      	mov	r0, r3
 80086ca:	f003 fa3b 	bl	800bb44 <ai_mnetwork_destroy>
        net_exec_ctx[idx].network = AI_HANDLE_NULL;
 80086ce:	4a09      	ldr	r2, [pc, #36]	; (80086f4 <aiBootstrap+0x168>)
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	21e8      	movs	r1, #232	; 0xe8
 80086d4:	fb01 f303 	mul.w	r3, r1, r3
 80086d8:	4413      	add	r3, r2
 80086da:	2200      	movs	r2, #0
 80086dc:	601a      	str	r2, [r3, #0]
        return -4;
 80086de:	f06f 0303 	mvn.w	r3, #3
 80086e2:	e000      	b.n	80086e6 <aiBootstrap+0x15a>
    }
    return 0;
 80086e4:	2300      	movs	r3, #0
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3738      	adds	r7, #56	; 0x38
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bdb0      	pop	{r4, r5, r7, pc}
 80086ee:	bf00      	nop
 80086f0:	0800ed30 	.word	0x0800ed30
 80086f4:	200008d8 	.word	0x200008d8
 80086f8:	0800ed50 	.word	0x0800ed50
 80086fc:	0800ed7c 	.word	0x0800ed7c
 8008700:	0800edac 	.word	0x0800edac
 8008704:	0800ed64 	.word	0x0800ed64
 8008708:	0800ed98 	.word	0x0800ed98

0800870c <aiInspectorGetReport>:

#ifdef HAS_INSPECTOR
static int aiInspectorGetReport(struct ai_network_exec_ctx *ctx)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b084      	sub	sp, #16
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
    int res = 0;
 8008714:	2300      	movs	r3, #0
 8008716:	60fb      	str	r3, [r7, #12]
    if (!ctx)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d102      	bne.n	8008724 <aiInspectorGetReport+0x18>
        return -1;
 800871e:	f04f 33ff 	mov.w	r3, #4294967295
 8008722:	e01c      	b.n	800875e <aiInspectorGetReport+0x52>

    if ((ctx->inspector != AI_HANDLE_NULL) &&
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008728:	2b00      	cmp	r3, #0
 800872a:	d017      	beq.n	800875c <aiInspectorGetReport+0x50>
            (ctx->net_id != AI_INSPECTOR_NETWORK_BIND_FAILED))
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
    if ((ctx->inspector != AI_HANDLE_NULL) &&
 8008732:	2b00      	cmp	r3, #0
 8008734:	d012      	beq.n	800875c <aiInspectorGetReport+0x50>
    {
        if (ai_inspector_get_report(ctx->inspector,
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f8b3 1074 	ldrh.w	r1, [r3, #116]	; 0x74
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	3378      	adds	r3, #120	; 0x78
 8008744:	461a      	mov	r2, r3
 8008746:	f7f7 fe5f 	bl	8000408 <ai_inspector_get_report>
 800874a:	4603      	mov	r3, r0
                ctx->net_id, &ctx->inspector_report) != true)
 800874c:	f083 0301 	eor.w	r3, r3, #1
 8008750:	b2db      	uxtb	r3, r3
        if (ai_inspector_get_report(ctx->inspector,
 8008752:	2b00      	cmp	r3, #0
 8008754:	d002      	beq.n	800875c <aiInspectorGetReport+0x50>
            res = -2;
 8008756:	f06f 0301 	mvn.w	r3, #1
 800875a:	60fb      	str	r3, [r7, #12]
    }
    return res;
 800875c:	68fb      	ldr	r3, [r7, #12]
}
 800875e:	4618      	mov	r0, r3
 8008760:	3710      	adds	r7, #16
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}

08008766 <aiInspectorSendReport>:


static void aiInspectorSendReport(const reqMsg *req, respMsg *resp,
        EnumState state, struct ai_network_exec_ctx *ctx,
        const ai_float dur_ms)
{
 8008766:	b580      	push	{r7, lr}
 8008768:	b088      	sub	sp, #32
 800876a:	af02      	add	r7, sp, #8
 800876c:	6178      	str	r0, [r7, #20]
 800876e:	6139      	str	r1, [r7, #16]
 8008770:	60bb      	str	r3, [r7, #8]
 8008772:	ed87 0a01 	vstr	s0, [r7, #4]
 8008776:	4613      	mov	r3, r2
 8008778:	73fb      	strb	r3, [r7, #15]
#ifdef HAS_INSPECTOR
    if (aiInspectorGetReport(ctx) == 0) {
 800877a:	68b8      	ldr	r0, [r7, #8]
 800877c:	f7ff ffc6 	bl	800870c <aiInspectorGetReport>
 8008780:	4603      	mov	r3, r0
 8008782:	2b00      	cmp	r3, #0
 8008784:	d120      	bne.n	80087c8 <aiInspectorSendReport+0x62>
        resp->which_payload = respMsg_report_tag;
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	2215      	movs	r2, #21
 800878a:	80da      	strh	r2, [r3, #6]
        resp->payload.report.id = ctx->inspector_report.id;
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	609a      	str	r2, [r3, #8]
        resp->payload.report.elapsed_ms = dur_ms;
 8008794:	693b      	ldr	r3, [r7, #16]
 8008796:	687a      	ldr	r2, [r7, #4]
 8008798:	619a      	str	r2, [r3, #24]
        resp->payload.report.n_nodes = ctx->inspector_report.n_nodes;
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	615a      	str	r2, [r3, #20]
        resp->payload.report.signature = ctx->inspector_report.signature;
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80087a8:	693b      	ldr	r3, [r7, #16]
 80087aa:	60da      	str	r2, [r3, #12]
        resp->payload.report.num_inferences = ctx->inspector_report.num_inferences;
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	611a      	str	r2, [r3, #16]
        aiPbMgrSendResp(req, resp, state);
 80087b6:	7bfb      	ldrb	r3, [r7, #15]
 80087b8:	461a      	mov	r2, r3
 80087ba:	6939      	ldr	r1, [r7, #16]
 80087bc:	6978      	ldr	r0, [r7, #20]
 80087be:	f7fe fc2d 	bl	800701c <aiPbMgrSendResp>
        aiPbMgrWaitAck();
 80087c2:	f7fe fc65 	bl	8007090 <aiPbMgrWaitAck>
    } else {
        aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
                EnumError_E_GENERIC, EnumError_E_GENERIC);
    }
#endif
}
 80087c6:	e007      	b.n	80087d8 <aiInspectorSendReport+0x72>
        aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 80087c8:	230a      	movs	r3, #10
 80087ca:	9300      	str	r3, [sp, #0]
 80087cc:	230a      	movs	r3, #10
 80087ce:	2204      	movs	r2, #4
 80087d0:	6939      	ldr	r1, [r7, #16]
 80087d2:	6978      	ldr	r0, [r7, #20]
 80087d4:	f7fe fc40 	bl	8007058 <aiPbMgrSendAck>
}
 80087d8:	bf00      	nop
 80087da:	3718      	adds	r7, #24
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}

080087e0 <aiInspectorUnBind>:


static void aiInspectorUnBind(struct ai_network_exec_ctx *ctx)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b082      	sub	sp, #8
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
#ifdef HAS_INSPECTOR
    if (!ctx)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d016      	beq.n	800881c <aiInspectorUnBind+0x3c>
        return;

    if ((ctx->inspector != AI_HANDLE_NULL) &&
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d00d      	beq.n	8008812 <aiInspectorUnBind+0x32>
            (ctx->net_id != AI_INSPECTOR_NETWORK_BIND_FAILED))
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
    if ((ctx->inspector != AI_HANDLE_NULL) &&
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d008      	beq.n	8008812 <aiInspectorUnBind+0x32>
        ai_inspector_unbind_network(ctx->inspector,
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800880a:	4619      	mov	r1, r3
 800880c:	4610      	mov	r0, r2
 800880e:	f7f7 fdb1 	bl	8000374 <ai_inspector_unbind_network>
                ctx->net_id);

    ctx->net_id = AI_INSPECTOR_NETWORK_BIND_FAILED;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2200      	movs	r2, #0
 8008816:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 800881a:	e000      	b.n	800881e <aiInspectorUnBind+0x3e>
        return;
 800881c:	bf00      	nop
#endif
}
 800881e:	3708      	adds	r7, #8
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}

08008824 <aiInspectorBind>:

static int aiInspectorBind(struct ai_network_exec_ctx *ctx)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b084      	sub	sp, #16
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
    int res = 0;
 800882c:	2300      	movs	r3, #0
 800882e:	60fb      	str	r3, [r7, #12]
#ifdef HAS_INSPECTOR
    if (!ctx)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d101      	bne.n	800883a <aiInspectorBind+0x16>
        return 0;
 8008836:	2300      	movs	r3, #0
 8008838:	e024      	b.n	8008884 <aiInspectorBind+0x60>

    aiInspectorUnBind(ctx);
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f7ff ffd0 	bl	80087e0 <aiInspectorUnBind>

    ctx->n_cb_in  = 0;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2200      	movs	r2, #0
 8008844:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    ctx->n_cb_out = 0;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2200      	movs	r2, #0
 800884c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

    if (ctx->inspector) {
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008854:	2b00      	cmp	r3, #0
 8008856:	d014      	beq.n	8008882 <aiInspectorBind+0x5e>
        ctx->net_id = ai_inspector_bind_network(
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
                ctx->inspector,
                &ctx->entry);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	3390      	adds	r3, #144	; 0x90
        ctx->net_id = ai_inspector_bind_network(
 8008860:	4619      	mov	r1, r3
 8008862:	4610      	mov	r0, r2
 8008864:	f7f7 fd45 	bl	80002f2 <ai_inspector_bind_network>
 8008868:	4603      	mov	r3, r0
 800886a:	461a      	mov	r2, r3
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74

        if (ctx->net_id == AI_INSPECTOR_NETWORK_BIND_FAILED)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8008878:	2b00      	cmp	r3, #0
 800887a:	d102      	bne.n	8008882 <aiInspectorBind+0x5e>
            res = -1;
 800887c:	f04f 33ff 	mov.w	r3, #4294967295
 8008880:	60fb      	str	r3, [r7, #12]
    }

#endif
    return res;
 8008882:	68fb      	ldr	r3, [r7, #12]
}
 8008884:	4618      	mov	r0, r3
 8008886:	3710      	adds	r7, #16
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}

0800888c <aiInspectorInitAndBind>:

static int aiInspectorInitAndBind(struct ai_network_exec_ctx *ctx)
{
 800888c:	b5b0      	push	{r4, r5, r7, lr}
 800888e:	b092      	sub	sp, #72	; 0x48
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
#ifdef HAS_INSPECTOR
    ctx->n_cb_in  = 0;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2200      	movs	r2, #0
 8008898:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    ctx->n_cb_out = 0;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2200      	movs	r2, #0
 80088a0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

    ai_inspector_config cfg = ai_inspector_default_config();
 80088a4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80088a8:	4618      	mov	r0, r3
 80088aa:	f7f7 fcb1 	bl	8000210 <ai_inspector_default_config>

    cfg.log_level = LOG_SUDO;
 80088ae:	2300      	movs	r3, #0
 80088b0:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    cfg.log_quiet = false;
 80088b4:	2300      	movs	r3, #0
 80088b6:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
    cfg.on_report_destroy = NULL;
 80088ba:	2300      	movs	r3, #0
 80088bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    cfg.on_exec_node = &aiOnExecNode_cb;
 80088be:	4b1d      	ldr	r3, [pc, #116]	; (8008934 <aiInspectorInitAndBind+0xa8>)
 80088c0:	643b      	str	r3, [r7, #64]	; 0x40
    cfg.cookie = NULL;
 80088c2:	2300      	movs	r3, #0
 80088c4:	647b      	str	r3, [r7, #68]	; 0x44
#endif

    ai_handle phandle;
    ai_network_params pparams;

    if (ctx->network == AI_HANDLE_NULL)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d102      	bne.n	80088d4 <aiInspectorInitAndBind+0x48>
        return -1;
 80088ce:	f04f 33ff 	mov.w	r3, #4294967295
 80088d2:	e02a      	b.n	800892a <aiInspectorInitAndBind+0x9e>

    ai_mnetwork_get_private_handle(ctx->network,
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f107 020c 	add.w	r2, r7, #12
 80088dc:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80088e0:	4618      	mov	r0, r3
 80088e2:	f003 f9f5 	bl	800bcd0 <ai_mnetwork_get_private_handle>
            &phandle,
            &pparams);

    cfg.cookie = (ai_handle)ctx;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	647b      	str	r3, [r7, #68]	; 0x44

    if (ai_inspector_create(&ctx->inspector, &cfg) )
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	3370      	adds	r3, #112	; 0x70
 80088ee:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80088f2:	4611      	mov	r1, r2
 80088f4:	4618      	mov	r0, r3
 80088f6:	f7f7 fca1 	bl	800023c <ai_inspector_create>
 80088fa:	4603      	mov	r3, r0
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d013      	beq.n	8008928 <aiInspectorInitAndBind+0x9c>
    {
        ctx->entry.handle = phandle;
 8008900:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        ctx->entry.params = pparams;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f103 0494 	add.w	r4, r3, #148	; 0x94
 800890e:	f107 050c 	add.w	r5, r7, #12
 8008912:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008914:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008916:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008918:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800891a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800891e:	e884 0003 	stmia.w	r4, {r0, r1}
        aiInspectorBind(ctx);
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f7ff ff7e 	bl	8008824 <aiInspectorBind>
    }


#endif
    return 0;
 8008928:	2300      	movs	r3, #0
}
 800892a:	4618      	mov	r0, r3
 800892c:	3748      	adds	r7, #72	; 0x48
 800892e:	46bd      	mov	sp, r7
 8008930:	bdb0      	pop	{r4, r5, r7, pc}
 8008932:	bf00      	nop
 8008934:	080083a1 	.word	0x080083a1

08008938 <aiInspectorUnbindAndDestroy>:

static int aiInspectorUnbindAndDestroy(struct ai_network_exec_ctx *ctx)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b082      	sub	sp, #8
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
#ifdef HAS_INSPECTOR
    aiInspectorUnBind(ctx);
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f7ff ff4d 	bl	80087e0 <aiInspectorUnBind>
    if (ctx->inspector != AI_HANDLE_NULL)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800894a:	2b00      	cmp	r3, #0
 800894c:	d004      	beq.n	8008958 <aiInspectorUnbindAndDestroy+0x20>
        ai_inspector_destroy(ctx->inspector);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008952:	4618      	mov	r0, r3
 8008954:	f7f7 fca4 	bl	80002a0 <ai_inspector_destroy>
    ctx->inspector = AI_HANDLE_NULL;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2200      	movs	r2, #0
 800895c:	671a      	str	r2, [r3, #112]	; 0x70
#endif
    return 0;
 800895e:	2300      	movs	r3, #0
}
 8008960:	4618      	mov	r0, r3
 8008962:	3708      	adds	r7, #8
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}

08008968 <aiInit>:


static int aiInit(void)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b088      	sub	sp, #32
 800896c:	af04      	add	r7, sp, #16
    int res = -1;
 800896e:	f04f 33ff 	mov.w	r3, #4294967295
 8008972:	60fb      	str	r3, [r7, #12]
    const char *nn_name;
    int idx;

    printf("\r\nAI platform (API %d.%d.%d - RUNTIME %d.%d.%d)\r\n",
 8008974:	2300      	movs	r3, #0
 8008976:	9302      	str	r3, [sp, #8]
 8008978:	2300      	movs	r3, #0
 800897a:	9301      	str	r3, [sp, #4]
 800897c:	2304      	movs	r3, #4
 800897e:	9300      	str	r3, [sp, #0]
 8008980:	2300      	movs	r3, #0
 8008982:	2201      	movs	r2, #1
 8008984:	2101      	movs	r1, #1
 8008986:	4824      	ldr	r0, [pc, #144]	; (8008a18 <aiInit+0xb0>)
 8008988:	f003 ff50 	bl	800c82c <iprintf>
            AI_PLATFORM_RUNTIME_MAJOR,
            AI_PLATFORM_RUNTIME_MINOR,
            AI_PLATFORM_RUNTIME_MICRO);

    /* Clean all network exec context */
    for (idx=0; idx < AI_MNETWORK_NUMBER; idx++) {
 800898c:	2300      	movs	r3, #0
 800898e:	607b      	str	r3, [r7, #4]
 8008990:	e01c      	b.n	80089cc <aiInit+0x64>
        net_exec_ctx[idx].network = AI_HANDLE_NULL;
 8008992:	4a22      	ldr	r2, [pc, #136]	; (8008a1c <aiInit+0xb4>)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	21e8      	movs	r1, #232	; 0xe8
 8008998:	fb01 f303 	mul.w	r3, r1, r3
 800899c:	4413      	add	r3, r2
 800899e:	2200      	movs	r2, #0
 80089a0:	601a      	str	r2, [r3, #0]
#ifdef HAS_INSPECTOR
        net_exec_ctx[idx].inspector = AI_HANDLE_NULL;
 80089a2:	4a1e      	ldr	r2, [pc, #120]	; (8008a1c <aiInit+0xb4>)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	21e8      	movs	r1, #232	; 0xe8
 80089a8:	fb01 f303 	mul.w	r3, r1, r3
 80089ac:	4413      	add	r3, r2
 80089ae:	3370      	adds	r3, #112	; 0x70
 80089b0:	2200      	movs	r2, #0
 80089b2:	601a      	str	r2, [r3, #0]
        net_exec_ctx[idx].net_id = AI_INSPECTOR_NETWORK_BIND_FAILED;
 80089b4:	4a19      	ldr	r2, [pc, #100]	; (8008a1c <aiInit+0xb4>)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	21e8      	movs	r1, #232	; 0xe8
 80089ba:	fb01 f303 	mul.w	r3, r1, r3
 80089be:	4413      	add	r3, r2
 80089c0:	3374      	adds	r3, #116	; 0x74
 80089c2:	2200      	movs	r2, #0
 80089c4:	801a      	strh	r2, [r3, #0]
    for (idx=0; idx < AI_MNETWORK_NUMBER; idx++) {
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	3301      	adds	r3, #1
 80089ca:	607b      	str	r3, [r7, #4]
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	dddf      	ble.n	8008992 <aiInit+0x2a>
#endif
    }

    /* Discover and init the embedded network */
    idx = 0;
 80089d2:	2300      	movs	r3, #0
 80089d4:	607b      	str	r3, [r7, #4]
    do {
        nn_name = ai_mnetwork_find(NULL, idx);
 80089d6:	6879      	ldr	r1, [r7, #4]
 80089d8:	2000      	movs	r0, #0
 80089da:	f003 f817 	bl	800ba0c <ai_mnetwork_find>
 80089de:	60b8      	str	r0, [r7, #8]
        if (nn_name) {
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d00d      	beq.n	8008a02 <aiInit+0x9a>
            printf("\r\nFound network \"%s\"\r\n", nn_name);
 80089e6:	68b9      	ldr	r1, [r7, #8]
 80089e8:	480d      	ldr	r0, [pc, #52]	; (8008a20 <aiInit+0xb8>)
 80089ea:	f003 ff1f 	bl	800c82c <iprintf>
            res = aiBootstrap(nn_name, idx);
 80089ee:	6879      	ldr	r1, [r7, #4]
 80089f0:	68b8      	ldr	r0, [r7, #8]
 80089f2:	f7ff fdcb 	bl	800858c <aiBootstrap>
 80089f6:	60f8      	str	r0, [r7, #12]
            if (res)
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d001      	beq.n	8008a02 <aiInit+0x9a>
                nn_name = NULL;
 80089fe:	2300      	movs	r3, #0
 8008a00:	60bb      	str	r3, [r7, #8]
        }
        idx++;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	3301      	adds	r3, #1
 8008a06:	607b      	str	r3, [r7, #4]
    } while (nn_name);
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d1e3      	bne.n	80089d6 <aiInit+0x6e>

    return res;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3710      	adds	r7, #16
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}
 8008a18:	0800edd4 	.word	0x0800edd4
 8008a1c:	200008d8 	.word	0x200008d8
 8008a20:	0800ee08 	.word	0x0800ee08

08008a24 <aiPbCmdNNInfo>:
 * Specific APP/test functions
 * -----------------------------------------------------------------------------
 */

void aiPbCmdNNInfo(const reqMsg *req, respMsg *resp, void *param)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b088      	sub	sp, #32
 8008a28:	af02      	add	r7, sp, #8
 8008a2a:	60f8      	str	r0, [r7, #12]
 8008a2c:	60b9      	str	r1, [r7, #8]
 8008a2e:	607a      	str	r2, [r7, #4]
    struct ai_network_exec_ctx *ctx;

    UNUSED(param);

    ctx = aiExecCtx(req->name, req->param);
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f103 020c 	add.w	r2, r3, #12
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	689b      	ldr	r3, [r3, #8]
 8008a3a:	4619      	mov	r1, r3
 8008a3c:	4610      	mov	r0, r2
 8008a3e:	f7ff fd33 	bl	80084a8 <aiExecCtx>
 8008a42:	6178      	str	r0, [r7, #20]
    if (ctx)
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d007      	beq.n	8008a5a <aiPbCmdNNInfo+0x36>
        aiPbMgrSendNNInfo(req, resp, EnumState_S_IDLE,
                &ctx->report);
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	3304      	adds	r3, #4
        aiPbMgrSendNNInfo(req, resp, EnumState_S_IDLE,
 8008a4e:	2200      	movs	r2, #0
 8008a50:	68b9      	ldr	r1, [r7, #8]
 8008a52:	68f8      	ldr	r0, [r7, #12]
 8008a54:	f7fe fe4a 	bl	80076ec <aiPbMgrSendNNInfo>
    else
        aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
                EnumError_E_INVALID_PARAM, EnumError_E_INVALID_PARAM);
}
 8008a58:	e007      	b.n	8008a6a <aiPbCmdNNInfo+0x46>
        aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 8008a5a:	2304      	movs	r3, #4
 8008a5c:	9300      	str	r3, [sp, #0]
 8008a5e:	2304      	movs	r3, #4
 8008a60:	2204      	movs	r2, #4
 8008a62:	68b9      	ldr	r1, [r7, #8]
 8008a64:	68f8      	ldr	r0, [r7, #12]
 8008a66:	f7fe faf7 	bl	8007058 <aiPbMgrSendAck>
}
 8008a6a:	bf00      	nop
 8008a6c:	3718      	adds	r7, #24
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}
	...

08008a74 <aiPbCmdNNRun>:

void aiPbCmdNNRun(const reqMsg *req, respMsg *resp, void *param)
{
 8008a74:	b5b0      	push	{r4, r5, r7, lr}
 8008a76:	b096      	sub	sp, #88	; 0x58
 8008a78:	af02      	add	r7, sp, #8
 8008a7a:	60f8      	str	r0, [r7, #12]
 8008a7c:	60b9      	str	r1, [r7, #8]
 8008a7e:	607a      	str	r2, [r7, #4]
    ai_i32 batch;
    uint32_t tend;
    bool res;
    struct ai_network_exec_ctx *ctx;
    bool inspector_mode = false;
 8008a80:	2300      	movs	r3, #0
 8008a82:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    ai_buffer ai_input[1];
    ai_buffer ai_output[1];

    UNUSED(param);

    ctx = aiExecCtx(req->name, -1);
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	330c      	adds	r3, #12
 8008a8a:	f04f 31ff 	mov.w	r1, #4294967295
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f7ff fd0a 	bl	80084a8 <aiExecCtx>
 8008a94:	64b8      	str	r0, [r7, #72]	; 0x48
    if (!ctx) {
 8008a96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d108      	bne.n	8008aae <aiPbCmdNNRun+0x3a>
        aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 8008a9c:	2304      	movs	r3, #4
 8008a9e:	9300      	str	r3, [sp, #0]
 8008aa0:	2304      	movs	r3, #4
 8008aa2:	2204      	movs	r2, #4
 8008aa4:	68b9      	ldr	r1, [r7, #8]
 8008aa6:	68f8      	ldr	r0, [r7, #12]
 8008aa8:	f7fe fad6 	bl	8007058 <aiPbMgrSendAck>
                EnumError_E_INVALID_PARAM, EnumError_E_INVALID_PARAM);
        return;
 8008aac:	e0d6      	b.n	8008c5c <aiPbCmdNNRun+0x1e8>
    }

#ifdef HAS_INSPECTOR
    ctx->no_data = false;
 8008aae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
    if ((req->param & EnumRunParam_P_RUN_MODE_INSPECTOR) ==
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	689b      	ldr	r3, [r3, #8]
 8008aba:	f003 0301 	and.w	r3, r3, #1
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d002      	beq.n	8008ac8 <aiPbCmdNNRun+0x54>
            EnumRunParam_P_RUN_MODE_INSPECTOR)
        inspector_mode = true;
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

    if ((req->param & EnumRunParam_P_RUN_MODE_INSPECTOR_WITHOUT_DATA) ==
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	689b      	ldr	r3, [r3, #8]
 8008acc:	f003 0302 	and.w	r3, r3, #2
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d006      	beq.n	8008ae2 <aiPbCmdNNRun+0x6e>
            EnumRunParam_P_RUN_MODE_INSPECTOR_WITHOUT_DATA) {
        inspector_mode = true;
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        ctx->no_data = true;
 8008ada:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008adc:	2201      	movs	r2, #1
 8008ade:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
    }

    ctx->tcom = 0ULL;
 8008ae2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ae4:	f04f 0300 	mov.w	r3, #0
 8008ae8:	f04f 0400 	mov.w	r4, #0
 8008aec:	e9c2 3436 	strd	r3, r4, [r2, #216]	; 0xd8
    ctx->tnodes = 0ULL;
 8008af0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008af2:	f04f 0300 	mov.w	r3, #0
 8008af6:	f04f 0400 	mov.w	r4, #0
 8008afa:	e9c2 3438 	strd	r3, r4, [r2, #224]	; 0xe0
#endif

    ai_input[0] = ctx->report.inputs[0];
 8008afe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b02:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8008b06:	461d      	mov	r5, r3
 8008b08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008b0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008b0c:	682b      	ldr	r3, [r5, #0]
 8008b0e:	6023      	str	r3, [r4, #0]
    ai_output[0] = ctx->report.outputs[0];
 8008b10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b14:	f107 0410 	add.w	r4, r7, #16
 8008b18:	461d      	mov	r5, r3
 8008b1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008b1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008b1e:	682b      	ldr	r3, [r5, #0]
 8008b20:	6023      	str	r3, [r4, #0]

    ai_input[0].n_batches  = 1;
 8008b22:	2301      	movs	r3, #1
 8008b24:	853b      	strh	r3, [r7, #40]	; 0x28
    ai_input[0].data = AI_HANDLE_PTR(in_data);
 8008b26:	4b4f      	ldr	r3, [pc, #316]	; (8008c64 <aiPbCmdNNRun+0x1f0>)
 8008b28:	637b      	str	r3, [r7, #52]	; 0x34
    ai_output[0].n_batches = 1;
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	82bb      	strh	r3, [r7, #20]
    ai_output[0].data = AI_HANDLE_PTR(out_data);
 8008b2e:	4b4e      	ldr	r3, [pc, #312]	; (8008c68 <aiPbCmdNNRun+0x1f4>)
 8008b30:	623b      	str	r3, [r7, #32]

    /* 1 Send a ACK (ready to receive a buffer) */
    aiPbMgrSendAck(req, resp, EnumState_S_WAITING,
 8008b32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b36:	4618      	mov	r0, r3
 8008b38:	f7fe fac4 	bl	80070c4 <aiPbAiBufferSize>
 8008b3c:	4602      	mov	r2, r0
 8008b3e:	2300      	movs	r3, #0
 8008b40:	9300      	str	r3, [sp, #0]
 8008b42:	4613      	mov	r3, r2
 8008b44:	2201      	movs	r2, #1
 8008b46:	68b9      	ldr	r1, [r7, #8]
 8008b48:	68f8      	ldr	r0, [r7, #12]
 8008b4a:	f7fe fa85 	bl	8007058 <aiPbMgrSendAck>
            aiPbAiBufferSize(&ai_input[0]), EnumError_E_NONE);

    /* 2 Read buffer */
    res = aiPbMgrReceiveAiBuffer3(req, resp, EnumState_S_PROCESSING,
 8008b4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b52:	2202      	movs	r2, #2
 8008b54:	68b9      	ldr	r1, [r7, #8]
 8008b56:	68f8      	ldr	r0, [r7, #12]
 8008b58:	f7fe fbcc 	bl	80072f4 <aiPbMgrReceiveAiBuffer3>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            &ai_input[0]);
    if (res != true)
 8008b62:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008b66:	f083 0301 	eor.w	r3, r3, #1
 8008b6a:	b2db      	uxtb	r3, r3
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d174      	bne.n	8008c5a <aiPbCmdNNRun+0x1e6>
        return;

    ints = disableInts();
 8008b70:	f7ff f8c6 	bl	8007d00 <disableInts>
 8008b74:	6438      	str	r0, [r7, #64]	; 0x40

    /* Update the PN context for inspector callbacks */
    aiSetPbContext(ctx, req, resp);
 8008b76:	68ba      	ldr	r2, [r7, #8]
 8008b78:	68f9      	ldr	r1, [r7, #12]
 8008b7a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8008b7c:	f7ff fcee 	bl	800855c <aiSetPbContext>

    if (inspector_mode)
 8008b80:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d002      	beq.n	8008b8e <aiPbCmdNNRun+0x11a>
        aiInspectorInitAndBind(ctx);
 8008b88:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8008b8a:	f7ff fe7f 	bl	800888c <aiInspectorInitAndBind>

    /* Processing */
    dwtReset();
 8008b8e:	f7fe fea3 	bl	80078d8 <dwtReset>

    batch = ai_mnetwork_run(ctx->network,
 8008b92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f107 0210 	add.w	r2, r7, #16
 8008b9a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f003 f87a 	bl	800bc98 <ai_mnetwork_run>
 8008ba4:	63f8      	str	r0, [r7, #60]	; 0x3c
            &ai_input[0], &ai_output[0]);
    if (batch != 1) {
 8008ba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ba8:	2b01      	cmp	r3, #1
 8008baa:	d012      	beq.n	8008bd2 <aiPbCmdNNRun+0x15e>
        aiLogErr(ai_mnetwork_get_error(ctx->network),
 8008bac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f003 f804 	bl	800bbbe <ai_mnetwork_get_error>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	492c      	ldr	r1, [pc, #176]	; (8008c6c <aiPbCmdNNRun+0x1f8>)
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f7ff f902 	bl	8007dc4 <aiLogErr>
                "ai_mnetwork_run");
        aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 8008bc0:	230a      	movs	r3, #10
 8008bc2:	9300      	str	r3, [sp, #0]
 8008bc4:	230a      	movs	r3, #10
 8008bc6:	2204      	movs	r2, #4
 8008bc8:	68b9      	ldr	r1, [r7, #8]
 8008bca:	68f8      	ldr	r0, [r7, #12]
 8008bcc:	f7fe fa44 	bl	8007058 <aiPbMgrSendAck>
                EnumError_E_GENERIC, EnumError_E_GENERIC);
        return;
 8008bd0:	e044      	b.n	8008c5c <aiPbCmdNNRun+0x1e8>
    }
    tend = dwtGetCycles();
 8008bd2:	f7fe fe8d 	bl	80078f0 <dwtGetCycles>
 8008bd6:	63b8      	str	r0, [r7, #56]	; 0x38

#ifdef HAS_INSPECTOR
    tend = ctx->tcom + ctx->tnodes + tend;
 8008bd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bda:	e9d3 3436 	ldrd	r3, r4, [r3, #216]	; 0xd8
 8008bde:	461a      	mov	r2, r3
 8008be0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008be2:	e9d3 3438 	ldrd	r3, r4, [r3, #224]	; 0xe0
 8008be6:	4413      	add	r3, r2
 8008be8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008bea:	4413      	add	r3, r2
 8008bec:	63bb      	str	r3, [r7, #56]	; 0x38
#endif

    if (inspector_mode)
 8008bee:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d010      	beq.n	8008c18 <aiPbCmdNNRun+0x1a4>
        aiInspectorSendReport(req, resp, EnumState_S_PROCESSING, ctx,
 8008bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bf8:	f04f 0400 	mov.w	r4, #0
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	4621      	mov	r1, r4
 8008c00:	f7fe fe8a 	bl	8007918 <dwtCyclesToFloatMs>
 8008c04:	eef0 7a40 	vmov.f32	s15, s0
 8008c08:	eeb0 0a67 	vmov.f32	s0, s15
 8008c0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c0e:	2202      	movs	r2, #2
 8008c10:	68b9      	ldr	r1, [r7, #8]
 8008c12:	68f8      	ldr	r0, [r7, #12]
 8008c14:	f7ff fda7 	bl	8008766 <aiInspectorSendReport>
                dwtCyclesToFloatMs(tend));

    /* 3 Write buffer */
    aiPbMgrSendAiBuffer3(req, resp, EnumState_S_DONE,
 8008c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c1a:	f04f 0400 	mov.w	r4, #0
 8008c1e:	4618      	mov	r0, r3
 8008c20:	4621      	mov	r1, r4
 8008c22:	f7fe fe79 	bl	8007918 <dwtCyclesToFloatMs>
 8008c26:	eef0 7a40 	vmov.f32	s15, s0
 8008c2a:	f107 0310 	add.w	r3, r7, #16
 8008c2e:	9301      	str	r3, [sp, #4]
 8008c30:	2300      	movs	r3, #0
 8008c32:	9300      	str	r3, [sp, #0]
 8008c34:	eeb0 0a67 	vmov.f32	s0, s15
 8008c38:	2300      	movs	r3, #0
 8008c3a:	2203      	movs	r2, #3
 8008c3c:	68b9      	ldr	r1, [r7, #8]
 8008c3e:	68f8      	ldr	r0, [r7, #12]
 8008c40:	f7fe fbae 	bl	80073a0 <aiPbMgrSendAiBuffer3>
            EnumLayerType_LAYER_TYPE_OUTPUT << 16 | 0,
            0, dwtCyclesToFloatMs(tend),
            &ai_output[0]);

    if (inspector_mode)
 8008c44:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d002      	beq.n	8008c52 <aiPbCmdNNRun+0x1de>
        aiInspectorUnbindAndDestroy(ctx);
 8008c4c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8008c4e:	f7ff fe73 	bl	8008938 <aiInspectorUnbindAndDestroy>

    restoreInts(ints);
 8008c52:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008c54:	f7ff f864 	bl	8007d20 <restoreInts>
 8008c58:	e000      	b.n	8008c5c <aiPbCmdNNRun+0x1e8>
        return;
 8008c5a:	bf00      	nop
}
 8008c5c:	3750      	adds	r7, #80	; 0x50
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bdb0      	pop	{r4, r5, r7, pc}
 8008c62:	bf00      	nop
 8008c64:	200009d8 	.word	0x200009d8
 8008c68:	200009e0 	.word	0x200009e0
 8008c6c:	0800ee54 	.word	0x0800ee54

08008c70 <aiValidationCore>:

static int aiValidationCore(void)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	af00      	add	r7, sp, #0
    return aiPbMgrWaitAndProcess();
 8008c74:	f7fe f984 	bl	8006f80 <aiPbMgrWaitAndProcess>
 8008c78:	4603      	mov	r3, r0
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	bd80      	pop	{r7, pc}
	...

08008c80 <aiValidationInit>:
#endif
        AI_PB_CMD_END,
};

int aiValidationInit(void)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	af00      	add	r7, sp, #0
    aiPbMgrInit(pbCmdFuncTab);
 8008c84:	4808      	ldr	r0, [pc, #32]	; (8008ca8 <aiValidationInit+0x28>)
 8008c86:	f7fe f93f 	bl	8006f08 <aiPbMgrInit>

    aiTestHeader(_APP_NAME_, _APP_VERSION_MAJOR_, _APP_VERSION_MINOR_);
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	2102      	movs	r1, #2
 8008c8e:	4807      	ldr	r0, [pc, #28]	; (8008cac <aiValidationInit+0x2c>)
 8008c90:	f7ff fa22 	bl	80080d8 <aiTestHeader>

    dwtIpInit();
 8008c94:	f7fe fe04 	bl	80078a0 <dwtIpInit>
    crcIpInit();
 8008c98:	f7fe fde0 	bl	800785c <crcIpInit>
    logDeviceConf();
 8008c9c:	f7fe ff88 	bl	8007bb0 <logDeviceConf>

    return 0;
 8008ca0:	2300      	movs	r3, #0
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	bd80      	pop	{r7, pc}
 8008ca6:	bf00      	nop
 8008ca8:	20000010 	.word	0x20000010
 8008cac:	0800ee64 	.word	0x0800ee64

08008cb0 <aiValidationProcess>:

int aiValidationProcess(void)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b082      	sub	sp, #8
 8008cb4:	af00      	add	r7, sp, #0
    int r;

    r = aiInit();
 8008cb6:	f7ff fe57 	bl	8008968 <aiInit>
 8008cba:	6078      	str	r0, [r7, #4]
    if (r) {
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d009      	beq.n	8008cd6 <aiValidationProcess+0x26>
        printf("\r\nE:  aiInit() r=%d\r\n", r);
 8008cc2:	6879      	ldr	r1, [r7, #4]
 8008cc4:	4817      	ldr	r0, [pc, #92]	; (8008d24 <aiValidationProcess+0x74>)
 8008cc6:	f003 fdb1 	bl	800c82c <iprintf>
        HAL_Delay(2000);
 8008cca:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008cce:	f7fc fd35 	bl	800573c <HAL_Delay>
        return r;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	e022      	b.n	8008d1c <aiValidationProcess+0x6c>
    } else {
        printf("\r\n");
 8008cd6:	4814      	ldr	r0, [pc, #80]	; (8008d28 <aiValidationProcess+0x78>)
 8008cd8:	f003 fe1c 	bl	800c914 <puts>
        printf("-------------------------------------------\r\n");
 8008cdc:	4813      	ldr	r0, [pc, #76]	; (8008d2c <aiValidationProcess+0x7c>)
 8008cde:	f003 fe19 	bl	800c914 <puts>
        printf("| READY to receive a CMD from the HOST... |\r\n");
 8008ce2:	4813      	ldr	r0, [pc, #76]	; (8008d30 <aiValidationProcess+0x80>)
 8008ce4:	f003 fe16 	bl	800c914 <puts>
        printf("-------------------------------------------\r\n");
 8008ce8:	4810      	ldr	r0, [pc, #64]	; (8008d2c <aiValidationProcess+0x7c>)
 8008cea:	f003 fe13 	bl	800c914 <puts>
        printf("\r\n");
 8008cee:	480e      	ldr	r0, [pc, #56]	; (8008d28 <aiValidationProcess+0x78>)
 8008cf0:	f003 fe10 	bl	800c914 <puts>
        printf("# Note: At this point, default ASCII-base terminal should be closed\r\n");
 8008cf4:	480f      	ldr	r0, [pc, #60]	; (8008d34 <aiValidationProcess+0x84>)
 8008cf6:	f003 fe0d 	bl	800c914 <puts>
        printf("# and a stm32com-base interface should be used\r\n");
 8008cfa:	480f      	ldr	r0, [pc, #60]	; (8008d38 <aiValidationProcess+0x88>)
 8008cfc:	f003 fe0a 	bl	800c914 <puts>
        printf("# (i.e. Python stm32com module). Protocol version = %d.%d\r\n",
 8008d00:	2200      	movs	r2, #0
 8008d02:	2102      	movs	r1, #2
 8008d04:	480d      	ldr	r0, [pc, #52]	; (8008d3c <aiValidationProcess+0x8c>)
 8008d06:	f003 fd91 	bl	800c82c <iprintf>
                EnumVersion_P_VERSION_MAJOR,
                EnumVersion_P_VERSION_MINOR);
    }

    ioDisableWrite();
 8008d0a:	f7ff f819 	bl	8007d40 <ioDisableWrite>

    do {
        r = aiValidationCore();
 8008d0e:	f7ff ffaf 	bl	8008c70 <aiValidationCore>
 8008d12:	6078      	str	r0, [r7, #4]
    } while (r==0);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d0f9      	beq.n	8008d0e <aiValidationProcess+0x5e>

    return r;
 8008d1a:	687b      	ldr	r3, [r7, #4]
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3708      	adds	r7, #8
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}
 8008d24:	0800ee74 	.word	0x0800ee74
 8008d28:	0800ee8c 	.word	0x0800ee8c
 8008d2c:	0800ee90 	.word	0x0800ee90
 8008d30:	0800eec0 	.word	0x0800eec0
 8008d34:	0800eef0 	.word	0x0800eef0
 8008d38:	0800ef38 	.word	0x0800ef38
 8008d3c:	0800ef68 	.word	0x0800ef68

08008d40 <pb_field_iter_begin>:
 */

#include "pb_common.h"

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_field_t *fields, void *dest_struct)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b085      	sub	sp, #20
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	60f8      	str	r0, [r7, #12]
 8008d48:	60b9      	str	r1, [r7, #8]
 8008d4a:	607a      	str	r2, [r7, #4]
    iter->start = fields;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	68ba      	ldr	r2, [r7, #8]
 8008d50:	601a      	str	r2, [r3, #0]
    iter->pos = fields;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	68ba      	ldr	r2, [r7, #8]
 8008d56:	605a      	str	r2, [r3, #4]
    iter->required_field_index = 0;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	609a      	str	r2, [r3, #8]
    iter->dest_struct = dest_struct;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	687a      	ldr	r2, [r7, #4]
 8008d62:	60da      	str	r2, [r3, #12]
    iter->pData = (char*)dest_struct + iter->pos->data_offset;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	685b      	ldr	r3, [r3, #4]
 8008d68:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8008d6c:	b29b      	uxth	r3, r3
 8008d6e:	461a      	mov	r2, r3
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	441a      	add	r2, r3
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	611a      	str	r2, [r3, #16]
    iter->pSize = (char*)iter->pData + iter->pos->size_offset;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	691b      	ldr	r3, [r3, #16]
 8008d7c:	68fa      	ldr	r2, [r7, #12]
 8008d7e:	6852      	ldr	r2, [r2, #4]
 8008d80:	f9b2 2005 	ldrsh.w	r2, [r2, #5]
 8008d84:	b212      	sxth	r2, r2
 8008d86:	441a      	add	r2, r3
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	615a      	str	r2, [r3, #20]
    
    return (iter->pos->tag != 0);
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	881b      	ldrh	r3, [r3, #0]
 8008d92:	b29b      	uxth	r3, r3
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	bf14      	ite	ne
 8008d98:	2301      	movne	r3, #1
 8008d9a:	2300      	moveq	r3, #0
 8008d9c:	b2db      	uxtb	r3, r3
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3714      	adds	r7, #20
 8008da2:	46bd      	mov	sp, r7
 8008da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da8:	4770      	bx	lr

08008daa <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
 8008daa:	b580      	push	{r7, lr}
 8008dac:	b084      	sub	sp, #16
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	6078      	str	r0, [r7, #4]
    const pb_field_t *prev_field = iter->pos;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	685b      	ldr	r3, [r3, #4]
 8008db6:	60bb      	str	r3, [r7, #8]

    if (prev_field->tag == 0)
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	881b      	ldrh	r3, [r3, #0]
 8008dbc:	b29b      	uxth	r3, r3
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d101      	bne.n	8008dc6 <pb_field_iter_next+0x1c>
    {
        /* Handle empty message types, where the first field is already the terminator.
         * In other cases, the iter->pos never points to the terminator. */
        return false;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	e073      	b.n	8008eae <pb_field_iter_next+0x104>
    }
    
    iter->pos++;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	685b      	ldr	r3, [r3, #4]
 8008dca:	f103 020f 	add.w	r2, r3, #15
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	605a      	str	r2, [r3, #4]
    
    if (iter->pos->tag == 0)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	685b      	ldr	r3, [r3, #4]
 8008dd6:	881b      	ldrh	r3, [r3, #0]
 8008dd8:	b29b      	uxth	r3, r3
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d109      	bne.n	8008df2 <pb_field_iter_next+0x48>
    {
        /* Wrapped back to beginning, reinitialize */
        (void)pb_field_iter_begin(iter, iter->start, iter->dest_struct);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6819      	ldr	r1, [r3, #0]
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	68db      	ldr	r3, [r3, #12]
 8008de6:	461a      	mov	r2, r3
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f7ff ffa9 	bl	8008d40 <pb_field_iter_begin>
        return false;
 8008dee:	2300      	movs	r3, #0
 8008df0:	e05d      	b.n	8008eae <pb_field_iter_next+0x104>
    }
    else
    {
        /* Increment the pointers based on previous field size */
        size_t prev_size = prev_field->data_size;
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8008df8:	b29b      	uxth	r3, r3
 8008dfa:	60fb      	str	r3, [r7, #12]
    
        if (PB_HTYPE(prev_field->type) == PB_HTYPE_ONEOF &&
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	789b      	ldrb	r3, [r3, #2]
 8008e00:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008e04:	2b30      	cmp	r3, #48	; 0x30
 8008e06:	d111      	bne.n	8008e2c <pb_field_iter_next+0x82>
            PB_HTYPE(iter->pos->type) == PB_HTYPE_ONEOF &&
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	685b      	ldr	r3, [r3, #4]
 8008e0c:	789b      	ldrb	r3, [r3, #2]
 8008e0e:	f003 0330 	and.w	r3, r3, #48	; 0x30
        if (PB_HTYPE(prev_field->type) == PB_HTYPE_ONEOF &&
 8008e12:	2b30      	cmp	r3, #48	; 0x30
 8008e14:	d10a      	bne.n	8008e2c <pb_field_iter_next+0x82>
            iter->pos->data_offset == PB_SIZE_MAX)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	685b      	ldr	r3, [r3, #4]
 8008e1a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8008e1e:	b29b      	uxth	r3, r3
            PB_HTYPE(iter->pos->type) == PB_HTYPE_ONEOF &&
 8008e20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d101      	bne.n	8008e2c <pb_field_iter_next+0x82>
        {
            /* Don't advance pointers inside unions */
            return true;
 8008e28:	2301      	movs	r3, #1
 8008e2a:	e040      	b.n	8008eae <pb_field_iter_next+0x104>
        }
        else if (PB_ATYPE(prev_field->type) == PB_ATYPE_STATIC &&
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	789b      	ldrb	r3, [r3, #2]
 8008e30:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d10f      	bne.n	8008e58 <pb_field_iter_next+0xae>
                 PB_HTYPE(prev_field->type) == PB_HTYPE_REPEATED)
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	789b      	ldrb	r3, [r3, #2]
 8008e3c:	f003 0330 	and.w	r3, r3, #48	; 0x30
        else if (PB_ATYPE(prev_field->type) == PB_ATYPE_STATIC &&
 8008e40:	2b20      	cmp	r3, #32
 8008e42:	d109      	bne.n	8008e58 <pb_field_iter_next+0xae>
        {
            /* In static arrays, the data_size tells the size of a single entry and
             * array_size is the number of entries */
            prev_size *= prev_field->array_size;
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8008e4a:	b29b      	uxth	r3, r3
 8008e4c:	461a      	mov	r2, r3
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	fb02 f303 	mul.w	r3, r2, r3
 8008e54:	60fb      	str	r3, [r7, #12]
 8008e56:	e007      	b.n	8008e68 <pb_field_iter_next+0xbe>
        }
        else if (PB_ATYPE(prev_field->type) == PB_ATYPE_POINTER)
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	789b      	ldrb	r3, [r3, #2]
 8008e5c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008e60:	2b80      	cmp	r3, #128	; 0x80
 8008e62:	d101      	bne.n	8008e68 <pb_field_iter_next+0xbe>
        {
            /* Pointer fields always have a constant size in the main structure.
             * The data_size only applies to the dynamically allocated area. */
            prev_size = sizeof(void*);
 8008e64:	2304      	movs	r3, #4
 8008e66:	60fb      	str	r3, [r7, #12]
        }

        if (PB_HTYPE(prev_field->type) == PB_HTYPE_REQUIRED)
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	789b      	ldrb	r3, [r3, #2]
 8008e6c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d104      	bne.n	8008e7e <pb_field_iter_next+0xd4>
        {
            /* Count the required fields, in order to check their presence in the
             * decoder. */
            iter->required_field_index++;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	689b      	ldr	r3, [r3, #8]
 8008e78:	1c5a      	adds	r2, r3, #1
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	609a      	str	r2, [r3, #8]
        }
    
        iter->pData = (char*)iter->pData + prev_size + iter->pos->data_offset;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	691a      	ldr	r2, [r3, #16]
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	685b      	ldr	r3, [r3, #4]
 8008e86:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8008e8a:	b29b      	uxth	r3, r3
 8008e8c:	4619      	mov	r1, r3
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	440b      	add	r3, r1
 8008e92:	441a      	add	r2, r3
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	611a      	str	r2, [r3, #16]
        iter->pSize = (char*)iter->pData + iter->pos->size_offset;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	691b      	ldr	r3, [r3, #16]
 8008e9c:	687a      	ldr	r2, [r7, #4]
 8008e9e:	6852      	ldr	r2, [r2, #4]
 8008ea0:	f9b2 2005 	ldrsh.w	r2, [r2, #5]
 8008ea4:	b212      	sxth	r2, r2
 8008ea6:	441a      	add	r2, r3
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	615a      	str	r2, [r3, #20]
        return true;
 8008eac:	2301      	movs	r3, #1
    }
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3710      	adds	r7, #16
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}

08008eb6 <pb_field_iter_find>:

bool pb_field_iter_find(pb_field_iter_t *iter, uint32_t tag)
{
 8008eb6:	b580      	push	{r7, lr}
 8008eb8:	b084      	sub	sp, #16
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	6078      	str	r0, [r7, #4]
 8008ebe:	6039      	str	r1, [r7, #0]
    const pb_field_t *start = iter->pos;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	60fb      	str	r3, [r7, #12]
    
    do {
        if (iter->pos->tag == tag &&
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	685b      	ldr	r3, [r3, #4]
 8008eca:	881b      	ldrh	r3, [r3, #0]
 8008ecc:	b29b      	uxth	r3, r3
 8008ece:	461a      	mov	r2, r3
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d108      	bne.n	8008ee8 <pb_field_iter_find+0x32>
            PB_LTYPE(iter->pos->type) != PB_LTYPE_EXTENSION)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	685b      	ldr	r3, [r3, #4]
 8008eda:	789b      	ldrb	r3, [r3, #2]
 8008edc:	f003 030f 	and.w	r3, r3, #15
        if (iter->pos->tag == tag &&
 8008ee0:	2b08      	cmp	r3, #8
 8008ee2:	d001      	beq.n	8008ee8 <pb_field_iter_find+0x32>
        {
            /* Found the wanted field */
            return true;
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	e008      	b.n	8008efa <pb_field_iter_find+0x44>
        }
        
        (void)pb_field_iter_next(iter);
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f7ff ff5e 	bl	8008daa <pb_field_iter_next>
    } while (iter->pos != start);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	685b      	ldr	r3, [r3, #4]
 8008ef2:	68fa      	ldr	r2, [r7, #12]
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	d1e6      	bne.n	8008ec6 <pb_field_iter_find+0x10>
    
    /* Searched all the way back to start, and found nothing. */
    return false;
 8008ef8:	2300      	movs	r3, #0
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3710      	adds	r7, #16
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}

08008f02 <buf_read>:
/*******************************
 * pb_istream_t implementation *
 *******************************/

static bool checkreturn buf_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 8008f02:	b480      	push	{r7}
 8008f04:	b087      	sub	sp, #28
 8008f06:	af00      	add	r7, sp, #0
 8008f08:	60f8      	str	r0, [r7, #12]
 8008f0a:	60b9      	str	r1, [r7, #8]
 8008f0c:	607a      	str	r2, [r7, #4]
    size_t i;
    const pb_byte_t *source = (const pb_byte_t*)stream->state;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	685b      	ldr	r3, [r3, #4]
 8008f12:	613b      	str	r3, [r7, #16]
    stream->state = (pb_byte_t*)stream->state + count;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	685a      	ldr	r2, [r3, #4]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	441a      	add	r2, r3
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	605a      	str	r2, [r3, #4]
    
    if (buf != NULL)
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d011      	beq.n	8008f4a <buf_read+0x48>
    {
        for (i = 0; i < count; i++)
 8008f26:	2300      	movs	r3, #0
 8008f28:	617b      	str	r3, [r7, #20]
 8008f2a:	e00a      	b.n	8008f42 <buf_read+0x40>
            buf[i] = source[i];
 8008f2c:	693a      	ldr	r2, [r7, #16]
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	441a      	add	r2, r3
 8008f32:	68b9      	ldr	r1, [r7, #8]
 8008f34:	697b      	ldr	r3, [r7, #20]
 8008f36:	440b      	add	r3, r1
 8008f38:	7812      	ldrb	r2, [r2, #0]
 8008f3a:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < count; i++)
 8008f3c:	697b      	ldr	r3, [r7, #20]
 8008f3e:	3301      	adds	r3, #1
 8008f40:	617b      	str	r3, [r7, #20]
 8008f42:	697a      	ldr	r2, [r7, #20]
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	429a      	cmp	r2, r3
 8008f48:	d3f0      	bcc.n	8008f2c <buf_read+0x2a>
    }
    
    return true;
 8008f4a:	2301      	movs	r3, #1
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	371c      	adds	r7, #28
 8008f50:	46bd      	mov	sp, r7
 8008f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f56:	4770      	bx	lr

08008f58 <pb_read>:

bool checkreturn pb_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b088      	sub	sp, #32
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	60f8      	str	r0, [r7, #12]
 8008f60:	60b9      	str	r1, [r7, #8]
 8008f62:	607a      	str	r2, [r7, #4]
#ifndef PB_BUFFER_ONLY
	if (buf == NULL && stream->callback != buf_read)
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d123      	bne.n	8008fb2 <pb_read+0x5a>
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	4a2b      	ldr	r2, [pc, #172]	; (800901c <pb_read+0xc4>)
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d01e      	beq.n	8008fb2 <pb_read+0x5a>
	{
		/* Skip input bytes */
		pb_byte_t tmp[16];
		while (count > 16)
 8008f74:	e011      	b.n	8008f9a <pb_read+0x42>
		{
			if (!pb_read(stream, tmp, 16))
 8008f76:	f107 0310 	add.w	r3, r7, #16
 8008f7a:	2210      	movs	r2, #16
 8008f7c:	4619      	mov	r1, r3
 8008f7e:	68f8      	ldr	r0, [r7, #12]
 8008f80:	f7ff ffea 	bl	8008f58 <pb_read>
 8008f84:	4603      	mov	r3, r0
 8008f86:	f083 0301 	eor.w	r3, r3, #1
 8008f8a:	b2db      	uxtb	r3, r3
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d001      	beq.n	8008f94 <pb_read+0x3c>
				return false;
 8008f90:	2300      	movs	r3, #0
 8008f92:	e03e      	b.n	8009012 <pb_read+0xba>
			
			count -= 16;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	3b10      	subs	r3, #16
 8008f98:	607b      	str	r3, [r7, #4]
		while (count > 16)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2b10      	cmp	r3, #16
 8008f9e:	d8ea      	bhi.n	8008f76 <pb_read+0x1e>
		}
		
		return pb_read(stream, tmp, count);
 8008fa0:	f107 0310 	add.w	r3, r7, #16
 8008fa4:	687a      	ldr	r2, [r7, #4]
 8008fa6:	4619      	mov	r1, r3
 8008fa8:	68f8      	ldr	r0, [r7, #12]
 8008faa:	f7ff ffd5 	bl	8008f58 <pb_read>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	e02f      	b.n	8009012 <pb_read+0xba>
	}
#endif

    if (stream->bytes_left < count)
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	689b      	ldr	r3, [r3, #8]
 8008fb6:	687a      	ldr	r2, [r7, #4]
 8008fb8:	429a      	cmp	r2, r3
 8008fba:	d90b      	bls.n	8008fd4 <pb_read+0x7c>
        PB_RETURN_ERROR(stream, "end-of-stream");
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	68db      	ldr	r3, [r3, #12]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d002      	beq.n	8008fca <pb_read+0x72>
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	68db      	ldr	r3, [r3, #12]
 8008fc8:	e000      	b.n	8008fcc <pb_read+0x74>
 8008fca:	4b15      	ldr	r3, [pc, #84]	; (8009020 <pb_read+0xc8>)
 8008fcc:	68fa      	ldr	r2, [r7, #12]
 8008fce:	60d3      	str	r3, [r2, #12]
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	e01e      	b.n	8009012 <pb_read+0xba>
    
#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, count))
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	687a      	ldr	r2, [r7, #4]
 8008fda:	68b9      	ldr	r1, [r7, #8]
 8008fdc:	68f8      	ldr	r0, [r7, #12]
 8008fde:	4798      	blx	r3
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	f083 0301 	eor.w	r3, r3, #1
 8008fe6:	b2db      	uxtb	r3, r3
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d00b      	beq.n	8009004 <pb_read+0xac>
        PB_RETURN_ERROR(stream, "io error");
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	68db      	ldr	r3, [r3, #12]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d002      	beq.n	8008ffa <pb_read+0xa2>
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	68db      	ldr	r3, [r3, #12]
 8008ff8:	e000      	b.n	8008ffc <pb_read+0xa4>
 8008ffa:	4b0a      	ldr	r3, [pc, #40]	; (8009024 <pb_read+0xcc>)
 8008ffc:	68fa      	ldr	r2, [r7, #12]
 8008ffe:	60d3      	str	r3, [r2, #12]
 8009000:	2300      	movs	r3, #0
 8009002:	e006      	b.n	8009012 <pb_read+0xba>
#else
    if (!buf_read(stream, buf, count))
        return false;
#endif
    
    stream->bytes_left -= count;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	689a      	ldr	r2, [r3, #8]
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	1ad2      	subs	r2, r2, r3
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	609a      	str	r2, [r3, #8]
    return true;
 8009010:	2301      	movs	r3, #1
}
 8009012:	4618      	mov	r0, r3
 8009014:	3720      	adds	r7, #32
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}
 800901a:	bf00      	nop
 800901c:	08008f03 	.word	0x08008f03
 8009020:	0800efb4 	.word	0x0800efb4
 8009024:	0800efc4 	.word	0x0800efc4

08009028 <pb_readbyte>:

/* Read a single byte from input stream. buf may not be NULL.
 * This is an optimization for the varint decoding. */
static bool checkreturn pb_readbyte(pb_istream_t *stream, pb_byte_t *buf)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b082      	sub	sp, #8
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	6039      	str	r1, [r7, #0]
    if (stream->bytes_left == 0)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	689b      	ldr	r3, [r3, #8]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d10b      	bne.n	8009052 <pb_readbyte+0x2a>
        PB_RETURN_ERROR(stream, "end-of-stream");
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	68db      	ldr	r3, [r3, #12]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d002      	beq.n	8009048 <pb_readbyte+0x20>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	68db      	ldr	r3, [r3, #12]
 8009046:	e000      	b.n	800904a <pb_readbyte+0x22>
 8009048:	4b13      	ldr	r3, [pc, #76]	; (8009098 <pb_readbyte+0x70>)
 800904a:	687a      	ldr	r2, [r7, #4]
 800904c:	60d3      	str	r3, [r2, #12]
 800904e:	2300      	movs	r3, #0
 8009050:	e01d      	b.n	800908e <pb_readbyte+0x66>

#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, 1))
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	2201      	movs	r2, #1
 8009058:	6839      	ldr	r1, [r7, #0]
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	4798      	blx	r3
 800905e:	4603      	mov	r3, r0
 8009060:	f083 0301 	eor.w	r3, r3, #1
 8009064:	b2db      	uxtb	r3, r3
 8009066:	2b00      	cmp	r3, #0
 8009068:	d00b      	beq.n	8009082 <pb_readbyte+0x5a>
        PB_RETURN_ERROR(stream, "io error");
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	68db      	ldr	r3, [r3, #12]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d002      	beq.n	8009078 <pb_readbyte+0x50>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	68db      	ldr	r3, [r3, #12]
 8009076:	e000      	b.n	800907a <pb_readbyte+0x52>
 8009078:	4b08      	ldr	r3, [pc, #32]	; (800909c <pb_readbyte+0x74>)
 800907a:	687a      	ldr	r2, [r7, #4]
 800907c:	60d3      	str	r3, [r2, #12]
 800907e:	2300      	movs	r3, #0
 8009080:	e005      	b.n	800908e <pb_readbyte+0x66>
#else
    *buf = *(const pb_byte_t*)stream->state;
    stream->state = (pb_byte_t*)stream->state + 1;
#endif

    stream->bytes_left--;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	689b      	ldr	r3, [r3, #8]
 8009086:	1e5a      	subs	r2, r3, #1
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	609a      	str	r2, [r3, #8]
    
    return true;    
 800908c:	2301      	movs	r3, #1
}
 800908e:	4618      	mov	r0, r3
 8009090:	3708      	adds	r7, #8
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}
 8009096:	bf00      	nop
 8009098:	0800efb4 	.word	0x0800efb4
 800909c:	0800efc4 	.word	0x0800efc4

080090a0 <pb_istream_from_buffer>:

pb_istream_t pb_istream_from_buffer(const pb_byte_t *buf, size_t bufsize)
{
 80090a0:	b490      	push	{r4, r7}
 80090a2:	b08a      	sub	sp, #40	; 0x28
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	60f8      	str	r0, [r7, #12]
 80090a8:	60b9      	str	r1, [r7, #8]
 80090aa:	607a      	str	r2, [r7, #4]
        const void *c_state;
    } state;
#ifdef PB_BUFFER_ONLY
    stream.callback = NULL;
#else
    stream.callback = &buf_read;
 80090ac:	4b0a      	ldr	r3, [pc, #40]	; (80090d8 <pb_istream_from_buffer+0x38>)
 80090ae:	61bb      	str	r3, [r7, #24]
#endif
    state.c_state = buf;
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	617b      	str	r3, [r7, #20]
    stream.state = state.state;
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	61fb      	str	r3, [r7, #28]
    stream.bytes_left = bufsize;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    stream.errmsg = NULL;
 80090bc:	2300      	movs	r3, #0
 80090be:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    return stream;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	461c      	mov	r4, r3
 80090c4:	f107 0318 	add.w	r3, r7, #24
 80090c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80090ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80090ce:	68f8      	ldr	r0, [r7, #12]
 80090d0:	3728      	adds	r7, #40	; 0x28
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bc90      	pop	{r4, r7}
 80090d6:	4770      	bx	lr
 80090d8:	08008f03 	.word	0x08008f03

080090dc <pb_decode_varint32_eof>:
/********************
 * Helper functions *
 ********************/

static bool checkreturn pb_decode_varint32_eof(pb_istream_t *stream, uint32_t *dest, bool *eof)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b088      	sub	sp, #32
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	60f8      	str	r0, [r7, #12]
 80090e4:	60b9      	str	r1, [r7, #8]
 80090e6:	607a      	str	r2, [r7, #4]
    pb_byte_t byte;
    uint32_t result;
    
    if (!pb_readbyte(stream, &byte))
 80090e8:	f107 0316 	add.w	r3, r7, #22
 80090ec:	4619      	mov	r1, r3
 80090ee:	68f8      	ldr	r0, [r7, #12]
 80090f0:	f7ff ff9a 	bl	8009028 <pb_readbyte>
 80090f4:	4603      	mov	r3, r0
 80090f6:	f083 0301 	eor.w	r3, r3, #1
 80090fa:	b2db      	uxtb	r3, r3
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d00b      	beq.n	8009118 <pb_decode_varint32_eof+0x3c>
    {
        if (stream->bytes_left == 0)
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	689b      	ldr	r3, [r3, #8]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d105      	bne.n	8009114 <pb_decode_varint32_eof+0x38>
        {
            if (eof)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d002      	beq.n	8009114 <pb_decode_varint32_eof+0x38>
            {
                *eof = true;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2201      	movs	r2, #1
 8009112:	701a      	strb	r2, [r3, #0]
            }
        }

        return false;
 8009114:	2300      	movs	r3, #0
 8009116:	e064      	b.n	80091e2 <pb_decode_varint32_eof+0x106>
    }
    
    if ((byte & 0x80) == 0)
 8009118:	7dbb      	ldrb	r3, [r7, #22]
 800911a:	b25b      	sxtb	r3, r3
 800911c:	2b00      	cmp	r3, #0
 800911e:	db02      	blt.n	8009126 <pb_decode_varint32_eof+0x4a>
    {
        /* Quick case, 1 byte value */
        result = byte;
 8009120:	7dbb      	ldrb	r3, [r7, #22]
 8009122:	61fb      	str	r3, [r7, #28]
 8009124:	e059      	b.n	80091da <pb_decode_varint32_eof+0xfe>
    }
    else
    {
        /* Multibyte case */
        uint_fast8_t bitpos = 7;
 8009126:	2307      	movs	r3, #7
 8009128:	61bb      	str	r3, [r7, #24]
        result = byte & 0x7F;
 800912a:	7dbb      	ldrb	r3, [r7, #22]
 800912c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009130:	61fb      	str	r3, [r7, #28]
        
        do
        {
            if (!pb_readbyte(stream, &byte))
 8009132:	f107 0316 	add.w	r3, r7, #22
 8009136:	4619      	mov	r1, r3
 8009138:	68f8      	ldr	r0, [r7, #12]
 800913a:	f7ff ff75 	bl	8009028 <pb_readbyte>
 800913e:	4603      	mov	r3, r0
 8009140:	f083 0301 	eor.w	r3, r3, #1
 8009144:	b2db      	uxtb	r3, r3
 8009146:	2b00      	cmp	r3, #0
 8009148:	d001      	beq.n	800914e <pb_decode_varint32_eof+0x72>
                return false;
 800914a:	2300      	movs	r3, #0
 800914c:	e049      	b.n	80091e2 <pb_decode_varint32_eof+0x106>
            
            if (bitpos >= 32)
 800914e:	69bb      	ldr	r3, [r7, #24]
 8009150:	2b1f      	cmp	r3, #31
 8009152:	d91e      	bls.n	8009192 <pb_decode_varint32_eof+0xb6>
            {
                /* Note: The varint could have trailing 0x80 bytes, or 0xFF for negative. */
                uint8_t sign_extension = (bitpos < 63) ? 0xFF : 0x01;
 8009154:	69bb      	ldr	r3, [r7, #24]
 8009156:	2b3e      	cmp	r3, #62	; 0x3e
 8009158:	d801      	bhi.n	800915e <pb_decode_varint32_eof+0x82>
 800915a:	23ff      	movs	r3, #255	; 0xff
 800915c:	e000      	b.n	8009160 <pb_decode_varint32_eof+0x84>
 800915e:	2301      	movs	r3, #1
 8009160:	75fb      	strb	r3, [r7, #23]
                
                if ((byte & 0x7F) != 0x00 && ((result >> 31) == 0 || byte != sign_extension))
 8009162:	7dbb      	ldrb	r3, [r7, #22]
 8009164:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009168:	2b00      	cmp	r3, #0
 800916a:	d01b      	beq.n	80091a4 <pb_decode_varint32_eof+0xc8>
 800916c:	69fb      	ldr	r3, [r7, #28]
 800916e:	2b00      	cmp	r3, #0
 8009170:	da03      	bge.n	800917a <pb_decode_varint32_eof+0x9e>
 8009172:	7dbb      	ldrb	r3, [r7, #22]
 8009174:	7dfa      	ldrb	r2, [r7, #23]
 8009176:	429a      	cmp	r2, r3
 8009178:	d014      	beq.n	80091a4 <pb_decode_varint32_eof+0xc8>
                {
                    PB_RETURN_ERROR(stream, "varint overflow");
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	68db      	ldr	r3, [r3, #12]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d002      	beq.n	8009188 <pb_decode_varint32_eof+0xac>
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	68db      	ldr	r3, [r3, #12]
 8009186:	e000      	b.n	800918a <pb_decode_varint32_eof+0xae>
 8009188:	4b18      	ldr	r3, [pc, #96]	; (80091ec <pb_decode_varint32_eof+0x110>)
 800918a:	68fa      	ldr	r2, [r7, #12]
 800918c:	60d3      	str	r3, [r2, #12]
 800918e:	2300      	movs	r3, #0
 8009190:	e027      	b.n	80091e2 <pb_decode_varint32_eof+0x106>
                }
            }
            else
            {
                result |= (uint32_t)(byte & 0x7F) << bitpos;
 8009192:	7dbb      	ldrb	r3, [r7, #22]
 8009194:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009198:	69bb      	ldr	r3, [r7, #24]
 800919a:	fa02 f303 	lsl.w	r3, r2, r3
 800919e:	69fa      	ldr	r2, [r7, #28]
 80091a0:	4313      	orrs	r3, r2
 80091a2:	61fb      	str	r3, [r7, #28]
            }
            bitpos = (uint_fast8_t)(bitpos + 7);
 80091a4:	69bb      	ldr	r3, [r7, #24]
 80091a6:	3307      	adds	r3, #7
 80091a8:	61bb      	str	r3, [r7, #24]
        } while (byte & 0x80);
 80091aa:	7dbb      	ldrb	r3, [r7, #22]
 80091ac:	b25b      	sxtb	r3, r3
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	dbbf      	blt.n	8009132 <pb_decode_varint32_eof+0x56>
        
        if (bitpos == 35 && (byte & 0x70) != 0)
 80091b2:	69bb      	ldr	r3, [r7, #24]
 80091b4:	2b23      	cmp	r3, #35	; 0x23
 80091b6:	d110      	bne.n	80091da <pb_decode_varint32_eof+0xfe>
 80091b8:	7dbb      	ldrb	r3, [r7, #22]
 80091ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d00b      	beq.n	80091da <pb_decode_varint32_eof+0xfe>
        {
            /* The last byte was at bitpos=28, so only bottom 4 bits fit. */
            PB_RETURN_ERROR(stream, "varint overflow");
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	68db      	ldr	r3, [r3, #12]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d002      	beq.n	80091d0 <pb_decode_varint32_eof+0xf4>
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	68db      	ldr	r3, [r3, #12]
 80091ce:	e000      	b.n	80091d2 <pb_decode_varint32_eof+0xf6>
 80091d0:	4b06      	ldr	r3, [pc, #24]	; (80091ec <pb_decode_varint32_eof+0x110>)
 80091d2:	68fa      	ldr	r2, [r7, #12]
 80091d4:	60d3      	str	r3, [r2, #12]
 80091d6:	2300      	movs	r3, #0
 80091d8:	e003      	b.n	80091e2 <pb_decode_varint32_eof+0x106>
        }
   }
   
   *dest = result;
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	69fa      	ldr	r2, [r7, #28]
 80091de:	601a      	str	r2, [r3, #0]
   return true;
 80091e0:	2301      	movs	r3, #1
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3720      	adds	r7, #32
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}
 80091ea:	bf00      	nop
 80091ec:	0800efd0 	.word	0x0800efd0

080091f0 <pb_decode_varint32>:

bool checkreturn pb_decode_varint32(pb_istream_t *stream, uint32_t *dest)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b082      	sub	sp, #8
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
 80091f8:	6039      	str	r1, [r7, #0]
    return pb_decode_varint32_eof(stream, dest, NULL);
 80091fa:	2200      	movs	r2, #0
 80091fc:	6839      	ldr	r1, [r7, #0]
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f7ff ff6c 	bl	80090dc <pb_decode_varint32_eof>
 8009204:	4603      	mov	r3, r0
}
 8009206:	4618      	mov	r0, r3
 8009208:	3708      	adds	r7, #8
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}
	...

08009210 <pb_decode_varint>:

#ifndef PB_WITHOUT_64BIT
bool checkreturn pb_decode_varint(pb_istream_t *stream, uint64_t *dest)
{
 8009210:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8009214:	b088      	sub	sp, #32
 8009216:	af00      	add	r7, sp, #0
 8009218:	6078      	str	r0, [r7, #4]
 800921a:	6039      	str	r1, [r7, #0]
    pb_byte_t byte;
    uint_fast8_t bitpos = 0;
 800921c:	2300      	movs	r3, #0
 800921e:	61fb      	str	r3, [r7, #28]
    uint64_t result = 0;
 8009220:	f04f 0200 	mov.w	r2, #0
 8009224:	f04f 0300 	mov.w	r3, #0
 8009228:	e9c7 2304 	strd	r2, r3, [r7, #16]
    
    do
    {
        if (bitpos >= 64)
 800922c:	69fb      	ldr	r3, [r7, #28]
 800922e:	2b3f      	cmp	r3, #63	; 0x3f
 8009230:	d90b      	bls.n	800924a <pb_decode_varint+0x3a>
            PB_RETURN_ERROR(stream, "varint overflow");
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	68db      	ldr	r3, [r3, #12]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d002      	beq.n	8009240 <pb_decode_varint+0x30>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	68db      	ldr	r3, [r3, #12]
 800923e:	e000      	b.n	8009242 <pb_decode_varint+0x32>
 8009240:	4b23      	ldr	r3, [pc, #140]	; (80092d0 <pb_decode_varint+0xc0>)
 8009242:	687a      	ldr	r2, [r7, #4]
 8009244:	60d3      	str	r3, [r2, #12]
 8009246:	2300      	movs	r3, #0
 8009248:	e03d      	b.n	80092c6 <pb_decode_varint+0xb6>
        
        if (!pb_readbyte(stream, &byte))
 800924a:	f107 030f 	add.w	r3, r7, #15
 800924e:	4619      	mov	r1, r3
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f7ff fee9 	bl	8009028 <pb_readbyte>
 8009256:	4603      	mov	r3, r0
 8009258:	f083 0301 	eor.w	r3, r3, #1
 800925c:	b2db      	uxtb	r3, r3
 800925e:	2b00      	cmp	r3, #0
 8009260:	d001      	beq.n	8009266 <pb_decode_varint+0x56>
            return false;
 8009262:	2300      	movs	r3, #0
 8009264:	e02f      	b.n	80092c6 <pb_decode_varint+0xb6>

        result |= (uint64_t)(byte & 0x7F) << bitpos;
 8009266:	7bfb      	ldrb	r3, [r7, #15]
 8009268:	b2da      	uxtb	r2, r3
 800926a:	f04f 0300 	mov.w	r3, #0
 800926e:	f04f 007f 	mov.w	r0, #127	; 0x7f
 8009272:	f04f 0100 	mov.w	r1, #0
 8009276:	ea02 0b00 	and.w	fp, r2, r0
 800927a:	ea03 0c01 	and.w	ip, r3, r1
 800927e:	69f9      	ldr	r1, [r7, #28]
 8009280:	f1a1 0620 	sub.w	r6, r1, #32
 8009284:	f1c1 0020 	rsb	r0, r1, #32
 8009288:	fa0c f501 	lsl.w	r5, ip, r1
 800928c:	fa0b f606 	lsl.w	r6, fp, r6
 8009290:	4335      	orrs	r5, r6
 8009292:	fa2b f000 	lsr.w	r0, fp, r0
 8009296:	4305      	orrs	r5, r0
 8009298:	fa0b f401 	lsl.w	r4, fp, r1
 800929c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80092a0:	ea42 0004 	orr.w	r0, r2, r4
 80092a4:	ea43 0105 	orr.w	r1, r3, r5
 80092a8:	e9c7 0104 	strd	r0, r1, [r7, #16]
        bitpos = (uint_fast8_t)(bitpos + 7);
 80092ac:	69fb      	ldr	r3, [r7, #28]
 80092ae:	3307      	adds	r3, #7
 80092b0:	61fb      	str	r3, [r7, #28]
    } while (byte & 0x80);
 80092b2:	7bfb      	ldrb	r3, [r7, #15]
 80092b4:	b25b      	sxtb	r3, r3
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	dbb8      	blt.n	800922c <pb_decode_varint+0x1c>
    
    *dest = result;
 80092ba:	683a      	ldr	r2, [r7, #0]
 80092bc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80092c0:	e9c2 3400 	strd	r3, r4, [r2]
    return true;
 80092c4:	2301      	movs	r3, #1
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3720      	adds	r7, #32
 80092ca:	46bd      	mov	sp, r7
 80092cc:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 80092d0:	0800efd0 	.word	0x0800efd0

080092d4 <pb_skip_varint>:
#endif

bool checkreturn pb_skip_varint(pb_istream_t *stream)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b084      	sub	sp, #16
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
    pb_byte_t byte;
    do
    {
        if (!pb_read(stream, &byte, 1))
 80092dc:	f107 030f 	add.w	r3, r7, #15
 80092e0:	2201      	movs	r2, #1
 80092e2:	4619      	mov	r1, r3
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f7ff fe37 	bl	8008f58 <pb_read>
 80092ea:	4603      	mov	r3, r0
 80092ec:	f083 0301 	eor.w	r3, r3, #1
 80092f0:	b2db      	uxtb	r3, r3
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d001      	beq.n	80092fa <pb_skip_varint+0x26>
            return false;
 80092f6:	2300      	movs	r3, #0
 80092f8:	e004      	b.n	8009304 <pb_skip_varint+0x30>
    } while (byte & 0x80);
 80092fa:	7bfb      	ldrb	r3, [r7, #15]
 80092fc:	b25b      	sxtb	r3, r3
 80092fe:	2b00      	cmp	r3, #0
 8009300:	dbec      	blt.n	80092dc <pb_skip_varint+0x8>
    return true;
 8009302:	2301      	movs	r3, #1
}
 8009304:	4618      	mov	r0, r3
 8009306:	3710      	adds	r7, #16
 8009308:	46bd      	mov	sp, r7
 800930a:	bd80      	pop	{r7, pc}

0800930c <pb_skip_string>:

bool checkreturn pb_skip_string(pb_istream_t *stream)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b084      	sub	sp, #16
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
    uint32_t length;
    if (!pb_decode_varint32(stream, &length))
 8009314:	f107 030c 	add.w	r3, r7, #12
 8009318:	4619      	mov	r1, r3
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f7ff ff68 	bl	80091f0 <pb_decode_varint32>
 8009320:	4603      	mov	r3, r0
 8009322:	f083 0301 	eor.w	r3, r3, #1
 8009326:	b2db      	uxtb	r3, r3
 8009328:	2b00      	cmp	r3, #0
 800932a:	d001      	beq.n	8009330 <pb_skip_string+0x24>
        return false;
 800932c:	2300      	movs	r3, #0
 800932e:	e006      	b.n	800933e <pb_skip_string+0x32>
    
    return pb_read(stream, NULL, length);
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	461a      	mov	r2, r3
 8009334:	2100      	movs	r1, #0
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f7ff fe0e 	bl	8008f58 <pb_read>
 800933c:	4603      	mov	r3, r0
}
 800933e:	4618      	mov	r0, r3
 8009340:	3710      	adds	r7, #16
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}

08009346 <pb_decode_tag>:

bool checkreturn pb_decode_tag(pb_istream_t *stream, pb_wire_type_t *wire_type, uint32_t *tag, bool *eof)
{
 8009346:	b580      	push	{r7, lr}
 8009348:	b086      	sub	sp, #24
 800934a:	af00      	add	r7, sp, #0
 800934c:	60f8      	str	r0, [r7, #12]
 800934e:	60b9      	str	r1, [r7, #8]
 8009350:	607a      	str	r2, [r7, #4]
 8009352:	603b      	str	r3, [r7, #0]
    uint32_t temp;
    *eof = false;
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	2200      	movs	r2, #0
 8009358:	701a      	strb	r2, [r3, #0]
    *wire_type = (pb_wire_type_t) 0;
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	2200      	movs	r2, #0
 800935e:	701a      	strb	r2, [r3, #0]
    *tag = 0;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2200      	movs	r2, #0
 8009364:	601a      	str	r2, [r3, #0]
    
    if (!pb_decode_varint32_eof(stream, &temp, eof))
 8009366:	f107 0314 	add.w	r3, r7, #20
 800936a:	683a      	ldr	r2, [r7, #0]
 800936c:	4619      	mov	r1, r3
 800936e:	68f8      	ldr	r0, [r7, #12]
 8009370:	f7ff feb4 	bl	80090dc <pb_decode_varint32_eof>
 8009374:	4603      	mov	r3, r0
 8009376:	f083 0301 	eor.w	r3, r3, #1
 800937a:	b2db      	uxtb	r3, r3
 800937c:	2b00      	cmp	r3, #0
 800937e:	d001      	beq.n	8009384 <pb_decode_tag+0x3e>
    {
        return false;
 8009380:	2300      	movs	r3, #0
 8009382:	e013      	b.n	80093ac <pb_decode_tag+0x66>
    }
    
    if (temp == 0)
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d104      	bne.n	8009394 <pb_decode_tag+0x4e>
    {
        *eof = true; /* Special feature: allow 0-terminated messages. */
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	2201      	movs	r2, #1
 800938e:	701a      	strb	r2, [r3, #0]
        return false;
 8009390:	2300      	movs	r3, #0
 8009392:	e00b      	b.n	80093ac <pb_decode_tag+0x66>
    }
    
    *tag = temp >> 3;
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	08da      	lsrs	r2, r3, #3
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	601a      	str	r2, [r3, #0]
    *wire_type = (pb_wire_type_t)(temp & 7);
 800939c:	697b      	ldr	r3, [r7, #20]
 800939e:	b2db      	uxtb	r3, r3
 80093a0:	f003 0307 	and.w	r3, r3, #7
 80093a4:	b2da      	uxtb	r2, r3
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	701a      	strb	r2, [r3, #0]
    return true;
 80093aa:	2301      	movs	r3, #1
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	3718      	adds	r7, #24
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}

080093b4 <pb_skip_field>:

bool checkreturn pb_skip_field(pb_istream_t *stream, pb_wire_type_t wire_type)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b082      	sub	sp, #8
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	460b      	mov	r3, r1
 80093be:	70fb      	strb	r3, [r7, #3]
    switch (wire_type)
 80093c0:	78fb      	ldrb	r3, [r7, #3]
 80093c2:	2b05      	cmp	r3, #5
 80093c4:	d826      	bhi.n	8009414 <pb_skip_field+0x60>
 80093c6:	a201      	add	r2, pc, #4	; (adr r2, 80093cc <pb_skip_field+0x18>)
 80093c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093cc:	080093e5 	.word	0x080093e5
 80093d0:	080093ef 	.word	0x080093ef
 80093d4:	080093fd 	.word	0x080093fd
 80093d8:	08009415 	.word	0x08009415
 80093dc:	08009415 	.word	0x08009415
 80093e0:	08009407 	.word	0x08009407
    {
        case PB_WT_VARINT: return pb_skip_varint(stream);
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f7ff ff75 	bl	80092d4 <pb_skip_varint>
 80093ea:	4603      	mov	r3, r0
 80093ec:	e01d      	b.n	800942a <pb_skip_field+0x76>
        case PB_WT_64BIT: return pb_read(stream, NULL, 8);
 80093ee:	2208      	movs	r2, #8
 80093f0:	2100      	movs	r1, #0
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f7ff fdb0 	bl	8008f58 <pb_read>
 80093f8:	4603      	mov	r3, r0
 80093fa:	e016      	b.n	800942a <pb_skip_field+0x76>
        case PB_WT_STRING: return pb_skip_string(stream);
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f7ff ff85 	bl	800930c <pb_skip_string>
 8009402:	4603      	mov	r3, r0
 8009404:	e011      	b.n	800942a <pb_skip_field+0x76>
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 8009406:	2204      	movs	r2, #4
 8009408:	2100      	movs	r1, #0
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f7ff fda4 	bl	8008f58 <pb_read>
 8009410:	4603      	mov	r3, r0
 8009412:	e00a      	b.n	800942a <pb_skip_field+0x76>
        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	68db      	ldr	r3, [r3, #12]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d002      	beq.n	8009422 <pb_skip_field+0x6e>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	68db      	ldr	r3, [r3, #12]
 8009420:	e000      	b.n	8009424 <pb_skip_field+0x70>
 8009422:	4b04      	ldr	r3, [pc, #16]	; (8009434 <pb_skip_field+0x80>)
 8009424:	687a      	ldr	r2, [r7, #4]
 8009426:	60d3      	str	r3, [r2, #12]
 8009428:	2300      	movs	r3, #0
    }
}
 800942a:	4618      	mov	r0, r3
 800942c:	3708      	adds	r7, #8
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}
 8009432:	bf00      	nop
 8009434:	0800efe0 	.word	0x0800efe0

08009438 <read_raw_value>:

/* Read a raw value to buffer, for the purpose of passing it to callback as
 * a substream. Size is maximum size on call, and actual size on return.
 */
static bool checkreturn read_raw_value(pb_istream_t *stream, pb_wire_type_t wire_type, pb_byte_t *buf, size_t *size)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b086      	sub	sp, #24
 800943c:	af00      	add	r7, sp, #0
 800943e:	60f8      	str	r0, [r7, #12]
 8009440:	607a      	str	r2, [r7, #4]
 8009442:	603b      	str	r3, [r7, #0]
 8009444:	460b      	mov	r3, r1
 8009446:	72fb      	strb	r3, [r7, #11]
    size_t max_size = *size;
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	617b      	str	r3, [r7, #20]
    switch (wire_type)
 800944e:	7afb      	ldrb	r3, [r7, #11]
 8009450:	2b01      	cmp	r3, #1
 8009452:	d028      	beq.n	80094a6 <read_raw_value+0x6e>
 8009454:	2b05      	cmp	r3, #5
 8009456:	d030      	beq.n	80094ba <read_raw_value+0x82>
 8009458:	2b00      	cmp	r3, #0
 800945a:	d138      	bne.n	80094ce <read_raw_value+0x96>
    {
        case PB_WT_VARINT:
            *size = 0;
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	2200      	movs	r2, #0
 8009460:	601a      	str	r2, [r3, #0]
            do
            {
                (*size)++;
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	1c5a      	adds	r2, r3, #1
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	601a      	str	r2, [r3, #0]
                if (*size > max_size) return false;
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	697a      	ldr	r2, [r7, #20]
 8009472:	429a      	cmp	r2, r3
 8009474:	d201      	bcs.n	800947a <read_raw_value+0x42>
 8009476:	2300      	movs	r3, #0
 8009478:	e034      	b.n	80094e4 <read_raw_value+0xac>
                if (!pb_read(stream, buf, 1)) return false;
 800947a:	2201      	movs	r2, #1
 800947c:	6879      	ldr	r1, [r7, #4]
 800947e:	68f8      	ldr	r0, [r7, #12]
 8009480:	f7ff fd6a 	bl	8008f58 <pb_read>
 8009484:	4603      	mov	r3, r0
 8009486:	f083 0301 	eor.w	r3, r3, #1
 800948a:	b2db      	uxtb	r3, r3
 800948c:	2b00      	cmp	r3, #0
 800948e:	d001      	beq.n	8009494 <read_raw_value+0x5c>
 8009490:	2300      	movs	r3, #0
 8009492:	e027      	b.n	80094e4 <read_raw_value+0xac>
            } while (*buf++ & 0x80);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	1c5a      	adds	r2, r3, #1
 8009498:	607a      	str	r2, [r7, #4]
 800949a:	781b      	ldrb	r3, [r3, #0]
 800949c:	b25b      	sxtb	r3, r3
 800949e:	2b00      	cmp	r3, #0
 80094a0:	dbdf      	blt.n	8009462 <read_raw_value+0x2a>
            return true;
 80094a2:	2301      	movs	r3, #1
 80094a4:	e01e      	b.n	80094e4 <read_raw_value+0xac>
            
        case PB_WT_64BIT:
            *size = 8;
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	2208      	movs	r2, #8
 80094aa:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 8);
 80094ac:	2208      	movs	r2, #8
 80094ae:	6879      	ldr	r1, [r7, #4]
 80094b0:	68f8      	ldr	r0, [r7, #12]
 80094b2:	f7ff fd51 	bl	8008f58 <pb_read>
 80094b6:	4603      	mov	r3, r0
 80094b8:	e014      	b.n	80094e4 <read_raw_value+0xac>
        
        case PB_WT_32BIT:
            *size = 4;
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	2204      	movs	r2, #4
 80094be:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 4);
 80094c0:	2204      	movs	r2, #4
 80094c2:	6879      	ldr	r1, [r7, #4]
 80094c4:	68f8      	ldr	r0, [r7, #12]
 80094c6:	f7ff fd47 	bl	8008f58 <pb_read>
 80094ca:	4603      	mov	r3, r0
 80094cc:	e00a      	b.n	80094e4 <read_raw_value+0xac>
            /* Calling read_raw_value with a PB_WT_STRING is an error.
             * Explicitly handle this case and fallthrough to default to avoid
             * compiler warnings.
             */

        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	68db      	ldr	r3, [r3, #12]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d002      	beq.n	80094dc <read_raw_value+0xa4>
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	68db      	ldr	r3, [r3, #12]
 80094da:	e000      	b.n	80094de <read_raw_value+0xa6>
 80094dc:	4b03      	ldr	r3, [pc, #12]	; (80094ec <read_raw_value+0xb4>)
 80094de:	68fa      	ldr	r2, [r7, #12]
 80094e0:	60d3      	str	r3, [r2, #12]
 80094e2:	2300      	movs	r3, #0
    }
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3718      	adds	r7, #24
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}
 80094ec:	0800efe0 	.word	0x0800efe0

080094f0 <pb_make_string_substream>:

/* Decode string length from stream and return a substream with limited length.
 * Remember to close the substream using pb_close_string_substream().
 */
bool checkreturn pb_make_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 80094f0:	b590      	push	{r4, r7, lr}
 80094f2:	b085      	sub	sp, #20
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
 80094f8:	6039      	str	r1, [r7, #0]
    uint32_t size;
    if (!pb_decode_varint32(stream, &size))
 80094fa:	f107 030c 	add.w	r3, r7, #12
 80094fe:	4619      	mov	r1, r3
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f7ff fe75 	bl	80091f0 <pb_decode_varint32>
 8009506:	4603      	mov	r3, r0
 8009508:	f083 0301 	eor.w	r3, r3, #1
 800950c:	b2db      	uxtb	r3, r3
 800950e:	2b00      	cmp	r3, #0
 8009510:	d001      	beq.n	8009516 <pb_make_string_substream+0x26>
        return false;
 8009512:	2300      	movs	r3, #0
 8009514:	e020      	b.n	8009558 <pb_make_string_substream+0x68>
    
    *substream = *stream;
 8009516:	683a      	ldr	r2, [r7, #0]
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	4614      	mov	r4, r2
 800951c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800951e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (substream->bytes_left < size)
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	689a      	ldr	r2, [r3, #8]
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	429a      	cmp	r2, r3
 800952a:	d20b      	bcs.n	8009544 <pb_make_string_substream+0x54>
        PB_RETURN_ERROR(stream, "parent stream too short");
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	68db      	ldr	r3, [r3, #12]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d002      	beq.n	800953a <pb_make_string_substream+0x4a>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	68db      	ldr	r3, [r3, #12]
 8009538:	e000      	b.n	800953c <pb_make_string_substream+0x4c>
 800953a:	4b09      	ldr	r3, [pc, #36]	; (8009560 <pb_make_string_substream+0x70>)
 800953c:	687a      	ldr	r2, [r7, #4]
 800953e:	60d3      	str	r3, [r2, #12]
 8009540:	2300      	movs	r3, #0
 8009542:	e009      	b.n	8009558 <pb_make_string_substream+0x68>
    
    substream->bytes_left = size;
 8009544:	68fa      	ldr	r2, [r7, #12]
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	609a      	str	r2, [r3, #8]
    stream->bytes_left -= size;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	689a      	ldr	r2, [r3, #8]
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	1ad2      	subs	r2, r2, r3
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	609a      	str	r2, [r3, #8]
    return true;
 8009556:	2301      	movs	r3, #1
}
 8009558:	4618      	mov	r0, r3
 800955a:	3714      	adds	r7, #20
 800955c:	46bd      	mov	sp, r7
 800955e:	bd90      	pop	{r4, r7, pc}
 8009560:	0800eff4 	.word	0x0800eff4

08009564 <pb_close_string_substream>:

bool checkreturn pb_close_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b082      	sub	sp, #8
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
 800956c:	6039      	str	r1, [r7, #0]
    if (substream->bytes_left) {
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	689b      	ldr	r3, [r3, #8]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d00e      	beq.n	8009594 <pb_close_string_substream+0x30>
        if (!pb_read(substream, NULL, substream->bytes_left))
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	689b      	ldr	r3, [r3, #8]
 800957a:	461a      	mov	r2, r3
 800957c:	2100      	movs	r1, #0
 800957e:	6838      	ldr	r0, [r7, #0]
 8009580:	f7ff fcea 	bl	8008f58 <pb_read>
 8009584:	4603      	mov	r3, r0
 8009586:	f083 0301 	eor.w	r3, r3, #1
 800958a:	b2db      	uxtb	r3, r3
 800958c:	2b00      	cmp	r3, #0
 800958e:	d001      	beq.n	8009594 <pb_close_string_substream+0x30>
            return false;
 8009590:	2300      	movs	r3, #0
 8009592:	e008      	b.n	80095a6 <pb_close_string_substream+0x42>
    }

    stream->state = substream->state;
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	685a      	ldr	r2, [r3, #4]
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	605a      	str	r2, [r3, #4]

#ifndef PB_NO_ERRMSG
    stream->errmsg = substream->errmsg;
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	68da      	ldr	r2, [r3, #12]
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	60da      	str	r2, [r3, #12]
#endif
    return true;
 80095a4:	2301      	movs	r3, #1
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3708      	adds	r7, #8
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}
	...

080095b0 <decode_static_field>:
/*************************
 * Decode a single field *
 *************************/

static bool checkreturn decode_static_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *iter)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b08e      	sub	sp, #56	; 0x38
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	60f8      	str	r0, [r7, #12]
 80095b8:	460b      	mov	r3, r1
 80095ba:	607a      	str	r2, [r7, #4]
 80095bc:	72fb      	strb	r3, [r7, #11]
    pb_type_t type;
    pb_decoder_t func;
    
    type = iter->pos->type;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	685b      	ldr	r3, [r3, #4]
 80095c2:	789b      	ldrb	r3, [r3, #2]
 80095c4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    func = PB_DECODERS[PB_LTYPE(type)];
 80095c8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80095cc:	f003 030f 	and.w	r3, r3, #15
 80095d0:	4a85      	ldr	r2, [pc, #532]	; (80097e8 <decode_static_field+0x238>)
 80095d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80095d6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (PB_HTYPE(type))
 80095d8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80095dc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80095e0:	2b10      	cmp	r3, #16
 80095e2:	d013      	beq.n	800960c <decode_static_field+0x5c>
 80095e4:	2b10      	cmp	r3, #16
 80095e6:	dc02      	bgt.n	80095ee <decode_static_field+0x3e>
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d006      	beq.n	80095fa <decode_static_field+0x4a>
 80095ec:	e0ec      	b.n	80097c8 <decode_static_field+0x218>
 80095ee:	2b20      	cmp	r3, #32
 80095f0:	d01f      	beq.n	8009632 <decode_static_field+0x82>
 80095f2:	2b30      	cmp	r3, #48	; 0x30
 80095f4:	f000 80bd 	beq.w	8009772 <decode_static_field+0x1c2>
 80095f8:	e0e6      	b.n	80097c8 <decode_static_field+0x218>
    {
        case PB_HTYPE_REQUIRED:
            return func(stream, iter->pos, iter->pData);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6859      	ldr	r1, [r3, #4]
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	691a      	ldr	r2, [r3, #16]
 8009602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009604:	68f8      	ldr	r0, [r7, #12]
 8009606:	4798      	blx	r3
 8009608:	4603      	mov	r3, r0
 800960a:	e0e8      	b.n	80097de <decode_static_field+0x22e>
            
        case PB_HTYPE_OPTIONAL:
            if (iter->pSize != iter->pData)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	695a      	ldr	r2, [r3, #20]
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	691b      	ldr	r3, [r3, #16]
 8009614:	429a      	cmp	r2, r3
 8009616:	d003      	beq.n	8009620 <decode_static_field+0x70>
                *(bool*)iter->pSize = true;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	695b      	ldr	r3, [r3, #20]
 800961c:	2201      	movs	r2, #1
 800961e:	701a      	strb	r2, [r3, #0]
            return func(stream, iter->pos, iter->pData);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6859      	ldr	r1, [r3, #4]
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	691a      	ldr	r2, [r3, #16]
 8009628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800962a:	68f8      	ldr	r0, [r7, #12]
 800962c:	4798      	blx	r3
 800962e:	4603      	mov	r3, r0
 8009630:	e0d5      	b.n	80097de <decode_static_field+0x22e>
    
        case PB_HTYPE_REPEATED:
            if (wire_type == PB_WT_STRING
 8009632:	7afb      	ldrb	r3, [r7, #11]
 8009634:	2b02      	cmp	r3, #2
 8009636:	d16a      	bne.n	800970e <decode_static_field+0x15e>
                && PB_LTYPE(type) <= PB_LTYPE_LAST_PACKABLE)
 8009638:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800963c:	f003 030f 	and.w	r3, r3, #15
 8009640:	2b04      	cmp	r3, #4
 8009642:	dc64      	bgt.n	800970e <decode_static_field+0x15e>
            {
                /* Packed array */
                bool status = true;
 8009644:	2301      	movs	r3, #1
 8009646:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                pb_size_t *size = (pb_size_t*)iter->pSize;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	695b      	ldr	r3, [r3, #20]
 800964e:	62fb      	str	r3, [r7, #44]	; 0x2c

                pb_istream_t substream;
                if (!pb_make_string_substream(stream, &substream))
 8009650:	f107 0310 	add.w	r3, r7, #16
 8009654:	4619      	mov	r1, r3
 8009656:	68f8      	ldr	r0, [r7, #12]
 8009658:	f7ff ff4a 	bl	80094f0 <pb_make_string_substream>
 800965c:	4603      	mov	r3, r0
 800965e:	f083 0301 	eor.w	r3, r3, #1
 8009662:	b2db      	uxtb	r3, r3
 8009664:	2b00      	cmp	r3, #0
 8009666:	d026      	beq.n	80096b6 <decode_static_field+0x106>
                    return false;
 8009668:	2300      	movs	r3, #0
 800966a:	e0b8      	b.n	80097de <decode_static_field+0x22e>

                while (substream.bytes_left > 0 && *size < iter->pos->array_size)
                {
                    void *pItem = (char*)iter->pData + iter->pos->data_size * (*size);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	691b      	ldr	r3, [r3, #16]
 8009670:	687a      	ldr	r2, [r7, #4]
 8009672:	6852      	ldr	r2, [r2, #4]
 8009674:	f8b2 2007 	ldrh.w	r2, [r2, #7]
 8009678:	b292      	uxth	r2, r2
 800967a:	4611      	mov	r1, r2
 800967c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800967e:	8812      	ldrh	r2, [r2, #0]
 8009680:	fb02 f201 	mul.w	r2, r2, r1
 8009684:	4413      	add	r3, r2
 8009686:	62bb      	str	r3, [r7, #40]	; 0x28
                    if (!func(&substream, iter->pos, pItem))
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6859      	ldr	r1, [r3, #4]
 800968c:	f107 0010 	add.w	r0, r7, #16
 8009690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009692:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009694:	4798      	blx	r3
 8009696:	4603      	mov	r3, r0
 8009698:	f083 0301 	eor.w	r3, r3, #1
 800969c:	b2db      	uxtb	r3, r3
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d003      	beq.n	80096aa <decode_static_field+0xfa>
                    {
                        status = false;
 80096a2:	2300      	movs	r3, #0
 80096a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                        break;
 80096a8:	e011      	b.n	80096ce <decode_static_field+0x11e>
                    }
                    (*size)++;
 80096aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ac:	881b      	ldrh	r3, [r3, #0]
 80096ae:	3301      	adds	r3, #1
 80096b0:	b29a      	uxth	r2, r3
 80096b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096b4:	801a      	strh	r2, [r3, #0]
                while (substream.bytes_left > 0 && *size < iter->pos->array_size)
 80096b6:	69bb      	ldr	r3, [r7, #24]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d008      	beq.n	80096ce <decode_static_field+0x11e>
 80096bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096be:	881a      	ldrh	r2, [r3, #0]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	685b      	ldr	r3, [r3, #4]
 80096c4:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80096c8:	b29b      	uxth	r3, r3
 80096ca:	429a      	cmp	r2, r3
 80096cc:	d3ce      	bcc.n	800966c <decode_static_field+0xbc>
                }

                if (substream.bytes_left != 0)
 80096ce:	69bb      	ldr	r3, [r7, #24]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d00b      	beq.n	80096ec <decode_static_field+0x13c>
                    PB_RETURN_ERROR(stream, "array overflow");
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	68db      	ldr	r3, [r3, #12]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d002      	beq.n	80096e2 <decode_static_field+0x132>
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	68db      	ldr	r3, [r3, #12]
 80096e0:	e000      	b.n	80096e4 <decode_static_field+0x134>
 80096e2:	4b42      	ldr	r3, [pc, #264]	; (80097ec <decode_static_field+0x23c>)
 80096e4:	68fa      	ldr	r2, [r7, #12]
 80096e6:	60d3      	str	r3, [r2, #12]
 80096e8:	2300      	movs	r3, #0
 80096ea:	e078      	b.n	80097de <decode_static_field+0x22e>
                if (!pb_close_string_substream(stream, &substream))
 80096ec:	f107 0310 	add.w	r3, r7, #16
 80096f0:	4619      	mov	r1, r3
 80096f2:	68f8      	ldr	r0, [r7, #12]
 80096f4:	f7ff ff36 	bl	8009564 <pb_close_string_substream>
 80096f8:	4603      	mov	r3, r0
 80096fa:	f083 0301 	eor.w	r3, r3, #1
 80096fe:	b2db      	uxtb	r3, r3
 8009700:	2b00      	cmp	r3, #0
 8009702:	d001      	beq.n	8009708 <decode_static_field+0x158>
                    return false;
 8009704:	2300      	movs	r3, #0
 8009706:	e06a      	b.n	80097de <decode_static_field+0x22e>

                return status;
 8009708:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800970c:	e067      	b.n	80097de <decode_static_field+0x22e>
            }
            else
            {
                /* Repeated field */
                pb_size_t *size = (pb_size_t*)iter->pSize;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	695b      	ldr	r3, [r3, #20]
 8009712:	627b      	str	r3, [r7, #36]	; 0x24
                char *pItem = (char*)iter->pData + iter->pos->data_size * (*size);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	691b      	ldr	r3, [r3, #16]
 8009718:	687a      	ldr	r2, [r7, #4]
 800971a:	6852      	ldr	r2, [r2, #4]
 800971c:	f8b2 2007 	ldrh.w	r2, [r2, #7]
 8009720:	b292      	uxth	r2, r2
 8009722:	4611      	mov	r1, r2
 8009724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009726:	8812      	ldrh	r2, [r2, #0]
 8009728:	fb02 f201 	mul.w	r2, r2, r1
 800972c:	4413      	add	r3, r2
 800972e:	623b      	str	r3, [r7, #32]

                if ((*size)++ >= iter->pos->array_size)
 8009730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009732:	881b      	ldrh	r3, [r3, #0]
 8009734:	1c5a      	adds	r2, r3, #1
 8009736:	b291      	uxth	r1, r2
 8009738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800973a:	8011      	strh	r1, [r2, #0]
 800973c:	687a      	ldr	r2, [r7, #4]
 800973e:	6852      	ldr	r2, [r2, #4]
 8009740:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 8009744:	b292      	uxth	r2, r2
 8009746:	4293      	cmp	r3, r2
 8009748:	d30b      	bcc.n	8009762 <decode_static_field+0x1b2>
                    PB_RETURN_ERROR(stream, "array overflow");
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	68db      	ldr	r3, [r3, #12]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d002      	beq.n	8009758 <decode_static_field+0x1a8>
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	68db      	ldr	r3, [r3, #12]
 8009756:	e000      	b.n	800975a <decode_static_field+0x1aa>
 8009758:	4b24      	ldr	r3, [pc, #144]	; (80097ec <decode_static_field+0x23c>)
 800975a:	68fa      	ldr	r2, [r7, #12]
 800975c:	60d3      	str	r3, [r2, #12]
 800975e:	2300      	movs	r3, #0
 8009760:	e03d      	b.n	80097de <decode_static_field+0x22e>

                return func(stream, iter->pos, pItem);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6859      	ldr	r1, [r3, #4]
 8009766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009768:	6a3a      	ldr	r2, [r7, #32]
 800976a:	68f8      	ldr	r0, [r7, #12]
 800976c:	4798      	blx	r3
 800976e:	4603      	mov	r3, r0
 8009770:	e035      	b.n	80097de <decode_static_field+0x22e>
            }

        case PB_HTYPE_ONEOF:
            *(pb_size_t*)iter->pSize = iter->pos->tag;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	685a      	ldr	r2, [r3, #4]
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	695b      	ldr	r3, [r3, #20]
 800977a:	8812      	ldrh	r2, [r2, #0]
 800977c:	b292      	uxth	r2, r2
 800977e:	801a      	strh	r2, [r3, #0]
            if (PB_LTYPE(type) == PB_LTYPE_SUBMESSAGE)
 8009780:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8009784:	f003 030f 	and.w	r3, r3, #15
 8009788:	2b07      	cmp	r3, #7
 800978a:	d114      	bne.n	80097b6 <decode_static_field+0x206>
            {
                /* We memset to zero so that any callbacks are set to NULL.
                 * Then set any default values. */
                memset(iter->pData, 0, iter->pos->data_size);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6918      	ldr	r0, [r3, #16]
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	685b      	ldr	r3, [r3, #4]
 8009794:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8009798:	b29b      	uxth	r3, r3
 800979a:	461a      	mov	r2, r3
 800979c:	2100      	movs	r1, #0
 800979e:	f002 ff95 	bl	800c6cc <memset>
                pb_message_set_to_defaults((const pb_field_t*)iter->pos->ptr, iter->pData);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	685b      	ldr	r3, [r3, #4]
 80097a6:	f8d3 200b 	ldr.w	r2, [r3, #11]
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	691b      	ldr	r3, [r3, #16]
 80097ae:	4619      	mov	r1, r3
 80097b0:	4610      	mov	r0, r2
 80097b2:	f000 fa55 	bl	8009c60 <pb_message_set_to_defaults>
            }
            return func(stream, iter->pos, iter->pData);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6859      	ldr	r1, [r3, #4]
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	691a      	ldr	r2, [r3, #16]
 80097be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097c0:	68f8      	ldr	r0, [r7, #12]
 80097c2:	4798      	blx	r3
 80097c4:	4603      	mov	r3, r0
 80097c6:	e00a      	b.n	80097de <decode_static_field+0x22e>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	68db      	ldr	r3, [r3, #12]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d002      	beq.n	80097d6 <decode_static_field+0x226>
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	68db      	ldr	r3, [r3, #12]
 80097d4:	e000      	b.n	80097d8 <decode_static_field+0x228>
 80097d6:	4b06      	ldr	r3, [pc, #24]	; (80097f0 <decode_static_field+0x240>)
 80097d8:	68fa      	ldr	r2, [r7, #12]
 80097da:	60d3      	str	r3, [r2, #12]
 80097dc:	2300      	movs	r3, #0
    }
}
 80097de:	4618      	mov	r0, r3
 80097e0:	3738      	adds	r7, #56	; 0x38
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}
 80097e6:	bf00      	nop
 80097e8:	0800f2fc 	.word	0x0800f2fc
 80097ec:	0800f00c 	.word	0x0800f00c
 80097f0:	0800f01c 	.word	0x0800f01c

080097f4 <decode_pointer_field>:
    }
}
#endif

static bool checkreturn decode_pointer_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *iter)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b085      	sub	sp, #20
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	60f8      	str	r0, [r7, #12]
 80097fc:	460b      	mov	r3, r1
 80097fe:	607a      	str	r2, [r7, #4]
 8009800:	72fb      	strb	r3, [r7, #11]
#ifndef PB_ENABLE_MALLOC
    PB_UNUSED(wire_type);
    PB_UNUSED(iter);
    PB_RETURN_ERROR(stream, "no malloc support");
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	68db      	ldr	r3, [r3, #12]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d002      	beq.n	8009810 <decode_pointer_field+0x1c>
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	68db      	ldr	r3, [r3, #12]
 800980e:	e000      	b.n	8009812 <decode_pointer_field+0x1e>
 8009810:	4b04      	ldr	r3, [pc, #16]	; (8009824 <decode_pointer_field+0x30>)
 8009812:	68fa      	ldr	r2, [r7, #12]
 8009814:	60d3      	str	r3, [r2, #12]
 8009816:	2300      	movs	r3, #0

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
    }
#endif
}
 8009818:	4618      	mov	r0, r3
 800981a:	3714      	adds	r7, #20
 800981c:	46bd      	mov	sp, r7
 800981e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009822:	4770      	bx	lr
 8009824:	0800f030 	.word	0x0800f030

08009828 <decode_callback_field>:

static bool checkreturn decode_callback_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *iter)
{
 8009828:	b590      	push	{r4, r7, lr}
 800982a:	b097      	sub	sp, #92	; 0x5c
 800982c:	af00      	add	r7, sp, #0
 800982e:	61f8      	str	r0, [r7, #28]
 8009830:	460b      	mov	r3, r1
 8009832:	617a      	str	r2, [r7, #20]
 8009834:	76fb      	strb	r3, [r7, #27]
    pb_callback_t *pCallback = (pb_callback_t*)iter->pData;
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	691b      	ldr	r3, [r3, #16]
 800983a:	657b      	str	r3, [r7, #84]	; 0x54
    
#ifdef PB_OLD_CALLBACK_STYLE
    void *arg = pCallback->arg;
#else
    void **arg = &(pCallback->arg);
 800983c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800983e:	3304      	adds	r3, #4
 8009840:	653b      	str	r3, [r7, #80]	; 0x50
#endif
    
    if (pCallback == NULL || pCallback->funcs.decode == NULL)
 8009842:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009844:	2b00      	cmp	r3, #0
 8009846:	d003      	beq.n	8009850 <decode_callback_field+0x28>
 8009848:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d106      	bne.n	800985e <decode_callback_field+0x36>
        return pb_skip_field(stream, wire_type);
 8009850:	7efb      	ldrb	r3, [r7, #27]
 8009852:	4619      	mov	r1, r3
 8009854:	69f8      	ldr	r0, [r7, #28]
 8009856:	f7ff fdad 	bl	80093b4 <pb_skip_field>
 800985a:	4603      	mov	r3, r0
 800985c:	e065      	b.n	800992a <decode_callback_field+0x102>
    
    if (wire_type == PB_WT_STRING)
 800985e:	7efb      	ldrb	r3, [r7, #27]
 8009860:	2b02      	cmp	r3, #2
 8009862:	d13a      	bne.n	80098da <decode_callback_field+0xb2>
    {
        pb_istream_t substream;
        
        if (!pb_make_string_substream(stream, &substream))
 8009864:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009868:	4619      	mov	r1, r3
 800986a:	69f8      	ldr	r0, [r7, #28]
 800986c:	f7ff fe40 	bl	80094f0 <pb_make_string_substream>
 8009870:	4603      	mov	r3, r0
 8009872:	f083 0301 	eor.w	r3, r3, #1
 8009876:	b2db      	uxtb	r3, r3
 8009878:	2b00      	cmp	r3, #0
 800987a:	d001      	beq.n	8009880 <decode_callback_field+0x58>
            return false;
 800987c:	2300      	movs	r3, #0
 800987e:	e054      	b.n	800992a <decode_callback_field+0x102>
        
        do
        {
            if (!pCallback->funcs.decode(&substream, iter->pos, arg))
 8009880:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	697a      	ldr	r2, [r7, #20]
 8009886:	6851      	ldr	r1, [r2, #4]
 8009888:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800988c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800988e:	4798      	blx	r3
 8009890:	4603      	mov	r3, r0
 8009892:	f083 0301 	eor.w	r3, r3, #1
 8009896:	b2db      	uxtb	r3, r3
 8009898:	2b00      	cmp	r3, #0
 800989a:	d00b      	beq.n	80098b4 <decode_callback_field+0x8c>
                PB_RETURN_ERROR(stream, "callback failed");
 800989c:	69fb      	ldr	r3, [r7, #28]
 800989e:	68db      	ldr	r3, [r3, #12]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d002      	beq.n	80098aa <decode_callback_field+0x82>
 80098a4:	69fb      	ldr	r3, [r7, #28]
 80098a6:	68db      	ldr	r3, [r3, #12]
 80098a8:	e000      	b.n	80098ac <decode_callback_field+0x84>
 80098aa:	4b22      	ldr	r3, [pc, #136]	; (8009934 <decode_callback_field+0x10c>)
 80098ac:	69fa      	ldr	r2, [r7, #28]
 80098ae:	60d3      	str	r3, [r2, #12]
 80098b0:	2300      	movs	r3, #0
 80098b2:	e03a      	b.n	800992a <decode_callback_field+0x102>
        } while (substream.bytes_left);
 80098b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d1e2      	bne.n	8009880 <decode_callback_field+0x58>
        
        if (!pb_close_string_substream(stream, &substream))
 80098ba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80098be:	4619      	mov	r1, r3
 80098c0:	69f8      	ldr	r0, [r7, #28]
 80098c2:	f7ff fe4f 	bl	8009564 <pb_close_string_substream>
 80098c6:	4603      	mov	r3, r0
 80098c8:	f083 0301 	eor.w	r3, r3, #1
 80098cc:	b2db      	uxtb	r3, r3
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d001      	beq.n	80098d6 <decode_callback_field+0xae>
            return false;
 80098d2:	2300      	movs	r3, #0
 80098d4:	e029      	b.n	800992a <decode_callback_field+0x102>

        return true;
 80098d6:	2301      	movs	r3, #1
 80098d8:	e027      	b.n	800992a <decode_callback_field+0x102>
         * This is required so that we can limit the stream length,
         * which in turn allows to use same callback for packed and
         * not-packed fields. */
        pb_istream_t substream;
        pb_byte_t buffer[10];
        size_t size = sizeof(buffer);
 80098da:	230a      	movs	r3, #10
 80098dc:	623b      	str	r3, [r7, #32]
        
        if (!read_raw_value(stream, wire_type, buffer, &size))
 80098de:	f107 0320 	add.w	r3, r7, #32
 80098e2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80098e6:	7ef9      	ldrb	r1, [r7, #27]
 80098e8:	69f8      	ldr	r0, [r7, #28]
 80098ea:	f7ff fda5 	bl	8009438 <read_raw_value>
 80098ee:	4603      	mov	r3, r0
 80098f0:	f083 0301 	eor.w	r3, r3, #1
 80098f4:	b2db      	uxtb	r3, r3
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d001      	beq.n	80098fe <decode_callback_field+0xd6>
            return false;
 80098fa:	2300      	movs	r3, #0
 80098fc:	e015      	b.n	800992a <decode_callback_field+0x102>
        substream = pb_istream_from_buffer(buffer, size);
 80098fe:	6a3a      	ldr	r2, [r7, #32]
 8009900:	463b      	mov	r3, r7
 8009902:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8009906:	4618      	mov	r0, r3
 8009908:	f7ff fbca 	bl	80090a0 <pb_istream_from_buffer>
 800990c:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8009910:	463b      	mov	r3, r7
 8009912:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009914:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        
        return pCallback->funcs.decode(&substream, iter->pos, arg);
 8009918:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	697a      	ldr	r2, [r7, #20]
 800991e:	6851      	ldr	r1, [r2, #4]
 8009920:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8009924:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009926:	4798      	blx	r3
 8009928:	4603      	mov	r3, r0
    }
}
 800992a:	4618      	mov	r0, r3
 800992c:	375c      	adds	r7, #92	; 0x5c
 800992e:	46bd      	mov	sp, r7
 8009930:	bd90      	pop	{r4, r7, pc}
 8009932:	bf00      	nop
 8009934:	0800f044 	.word	0x0800f044

08009938 <decode_field>:

static bool checkreturn decode_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *iter)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b084      	sub	sp, #16
 800993c:	af00      	add	r7, sp, #0
 800993e:	60f8      	str	r0, [r7, #12]
 8009940:	460b      	mov	r3, r1
 8009942:	607a      	str	r2, [r7, #4]
 8009944:	72fb      	strb	r3, [r7, #11]
        if (!pb_release_union_field(stream, iter))
            return false;
    }
#endif

    switch (PB_ATYPE(iter->pos->type))
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	685b      	ldr	r3, [r3, #4]
 800994a:	789b      	ldrb	r3, [r3, #2]
 800994c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009950:	2b40      	cmp	r3, #64	; 0x40
 8009952:	d013      	beq.n	800997c <decode_field+0x44>
 8009954:	2b80      	cmp	r3, #128	; 0x80
 8009956:	d009      	beq.n	800996c <decode_field+0x34>
 8009958:	2b00      	cmp	r3, #0
 800995a:	d117      	bne.n	800998c <decode_field+0x54>
    {
        case PB_ATYPE_STATIC:
            return decode_static_field(stream, wire_type, iter);
 800995c:	7afb      	ldrb	r3, [r7, #11]
 800995e:	687a      	ldr	r2, [r7, #4]
 8009960:	4619      	mov	r1, r3
 8009962:	68f8      	ldr	r0, [r7, #12]
 8009964:	f7ff fe24 	bl	80095b0 <decode_static_field>
 8009968:	4603      	mov	r3, r0
 800996a:	e01a      	b.n	80099a2 <decode_field+0x6a>
        
        case PB_ATYPE_POINTER:
            return decode_pointer_field(stream, wire_type, iter);
 800996c:	7afb      	ldrb	r3, [r7, #11]
 800996e:	687a      	ldr	r2, [r7, #4]
 8009970:	4619      	mov	r1, r3
 8009972:	68f8      	ldr	r0, [r7, #12]
 8009974:	f7ff ff3e 	bl	80097f4 <decode_pointer_field>
 8009978:	4603      	mov	r3, r0
 800997a:	e012      	b.n	80099a2 <decode_field+0x6a>
        
        case PB_ATYPE_CALLBACK:
            return decode_callback_field(stream, wire_type, iter);
 800997c:	7afb      	ldrb	r3, [r7, #11]
 800997e:	687a      	ldr	r2, [r7, #4]
 8009980:	4619      	mov	r1, r3
 8009982:	68f8      	ldr	r0, [r7, #12]
 8009984:	f7ff ff50 	bl	8009828 <decode_callback_field>
 8009988:	4603      	mov	r3, r0
 800998a:	e00a      	b.n	80099a2 <decode_field+0x6a>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	68db      	ldr	r3, [r3, #12]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d002      	beq.n	800999a <decode_field+0x62>
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	68db      	ldr	r3, [r3, #12]
 8009998:	e000      	b.n	800999c <decode_field+0x64>
 800999a:	4b04      	ldr	r3, [pc, #16]	; (80099ac <decode_field+0x74>)
 800999c:	68fa      	ldr	r2, [r7, #12]
 800999e:	60d3      	str	r3, [r2, #12]
 80099a0:	2300      	movs	r3, #0
    }
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3710      	adds	r7, #16
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}
 80099aa:	bf00      	nop
 80099ac:	0800f01c 	.word	0x0800f01c

080099b0 <iter_from_extension>:

static void iter_from_extension(pb_field_iter_t *iter, pb_extension_t *extension)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b084      	sub	sp, #16
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
 80099b8:	6039      	str	r1, [r7, #0]
    /* Fake a field iterator for the extension field.
     * It is not actually safe to advance this iterator, but decode_field
     * will not even try to. */
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	689b      	ldr	r3, [r3, #8]
 80099c0:	60fb      	str	r3, [r7, #12]
    (void)pb_field_iter_begin(iter, field, extension->dest);
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	685b      	ldr	r3, [r3, #4]
 80099c6:	461a      	mov	r2, r3
 80099c8:	68f9      	ldr	r1, [r7, #12]
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f7ff f9b8 	bl	8008d40 <pb_field_iter_begin>
    iter->pData = extension->dest;
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	685a      	ldr	r2, [r3, #4]
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	611a      	str	r2, [r3, #16]
    iter->pSize = &extension->found;
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	f103 020c 	add.w	r2, r3, #12
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	615a      	str	r2, [r3, #20]
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	789b      	ldrb	r3, [r3, #2]
 80099e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80099ea:	2b80      	cmp	r3, #128	; 0x80
 80099ec:	d103      	bne.n	80099f6 <iter_from_extension+0x46>
    {
        /* For pointer extensions, the pointer is stored directly
         * in the extension structure. This avoids having an extra
         * indirection. */
        iter->pData = &extension->dest;
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	1d1a      	adds	r2, r3, #4
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	611a      	str	r2, [r3, #16]
    }
}
 80099f6:	bf00      	nop
 80099f8:	3710      	adds	r7, #16
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}

080099fe <default_extension_decoder>:

/* Default handler for extension fields. Expects a pb_field_t structure
 * in extension->type->arg. */
static bool checkreturn default_extension_decoder(pb_istream_t *stream,
    pb_extension_t *extension, uint32_t tag, pb_wire_type_t wire_type)
{
 80099fe:	b580      	push	{r7, lr}
 8009a00:	b08c      	sub	sp, #48	; 0x30
 8009a02:	af00      	add	r7, sp, #0
 8009a04:	60f8      	str	r0, [r7, #12]
 8009a06:	60b9      	str	r1, [r7, #8]
 8009a08:	607a      	str	r2, [r7, #4]
 8009a0a:	70fb      	strb	r3, [r7, #3]
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	689b      	ldr	r3, [r3, #8]
 8009a12:	62fb      	str	r3, [r7, #44]	; 0x2c
    pb_field_iter_t iter;
    
    if (field->tag != tag)
 8009a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a16:	881b      	ldrh	r3, [r3, #0]
 8009a18:	b29b      	uxth	r3, r3
 8009a1a:	461a      	mov	r2, r3
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	d001      	beq.n	8009a26 <default_extension_decoder+0x28>
        return true;
 8009a22:	2301      	movs	r3, #1
 8009a24:	e010      	b.n	8009a48 <default_extension_decoder+0x4a>
    
    iter_from_extension(&iter, extension);
 8009a26:	f107 0314 	add.w	r3, r7, #20
 8009a2a:	68b9      	ldr	r1, [r7, #8]
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f7ff ffbf 	bl	80099b0 <iter_from_extension>
    extension->found = true;
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	2201      	movs	r2, #1
 8009a36:	731a      	strb	r2, [r3, #12]
    return decode_field(stream, wire_type, &iter);
 8009a38:	f107 0214 	add.w	r2, r7, #20
 8009a3c:	78fb      	ldrb	r3, [r7, #3]
 8009a3e:	4619      	mov	r1, r3
 8009a40:	68f8      	ldr	r0, [r7, #12]
 8009a42:	f7ff ff79 	bl	8009938 <decode_field>
 8009a46:	4603      	mov	r3, r0
}
 8009a48:	4618      	mov	r0, r3
 8009a4a:	3730      	adds	r7, #48	; 0x30
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bd80      	pop	{r7, pc}

08009a50 <decode_extension>:

/* Try to decode an unknown field as an extension field. Tries each extension
 * decoder in turn, until one of them handles the field or loop ends. */
static bool checkreturn decode_extension(pb_istream_t *stream,
    uint32_t tag, pb_wire_type_t wire_type, pb_field_iter_t *iter)
{
 8009a50:	b590      	push	{r4, r7, lr}
 8009a52:	b089      	sub	sp, #36	; 0x24
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	60f8      	str	r0, [r7, #12]
 8009a58:	60b9      	str	r1, [r7, #8]
 8009a5a:	603b      	str	r3, [r7, #0]
 8009a5c:	4613      	mov	r3, r2
 8009a5e:	71fb      	strb	r3, [r7, #7]
    pb_extension_t *extension = *(pb_extension_t* const *)iter->pData;
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	691b      	ldr	r3, [r3, #16]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	61fb      	str	r3, [r7, #28]
    size_t pos = stream->bytes_left;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	689b      	ldr	r3, [r3, #8]
 8009a6c:	617b      	str	r3, [r7, #20]
    
    while (extension != NULL && pos == stream->bytes_left)
 8009a6e:	e022      	b.n	8009ab6 <decode_extension+0x66>
    {
        bool status;
        if (extension->type->decode)
 8009a70:	69fb      	ldr	r3, [r7, #28]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d00a      	beq.n	8009a90 <decode_extension+0x40>
            status = extension->type->decode(stream, extension, tag, wire_type);
 8009a7a:	69fb      	ldr	r3, [r7, #28]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	681c      	ldr	r4, [r3, #0]
 8009a80:	79fb      	ldrb	r3, [r7, #7]
 8009a82:	68ba      	ldr	r2, [r7, #8]
 8009a84:	69f9      	ldr	r1, [r7, #28]
 8009a86:	68f8      	ldr	r0, [r7, #12]
 8009a88:	47a0      	blx	r4
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	76fb      	strb	r3, [r7, #27]
 8009a8e:	e007      	b.n	8009aa0 <decode_extension+0x50>
        else
            status = default_extension_decoder(stream, extension, tag, wire_type);
 8009a90:	79fb      	ldrb	r3, [r7, #7]
 8009a92:	68ba      	ldr	r2, [r7, #8]
 8009a94:	69f9      	ldr	r1, [r7, #28]
 8009a96:	68f8      	ldr	r0, [r7, #12]
 8009a98:	f7ff ffb1 	bl	80099fe <default_extension_decoder>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	76fb      	strb	r3, [r7, #27]

        if (!status)
 8009aa0:	7efb      	ldrb	r3, [r7, #27]
 8009aa2:	f083 0301 	eor.w	r3, r3, #1
 8009aa6:	b2db      	uxtb	r3, r3
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d001      	beq.n	8009ab0 <decode_extension+0x60>
            return false;
 8009aac:	2300      	movs	r3, #0
 8009aae:	e00b      	b.n	8009ac8 <decode_extension+0x78>
        
        extension = extension->next;
 8009ab0:	69fb      	ldr	r3, [r7, #28]
 8009ab2:	689b      	ldr	r3, [r3, #8]
 8009ab4:	61fb      	str	r3, [r7, #28]
    while (extension != NULL && pos == stream->bytes_left)
 8009ab6:	69fb      	ldr	r3, [r7, #28]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d004      	beq.n	8009ac6 <decode_extension+0x76>
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	689b      	ldr	r3, [r3, #8]
 8009ac0:	697a      	ldr	r2, [r7, #20]
 8009ac2:	429a      	cmp	r2, r3
 8009ac4:	d0d4      	beq.n	8009a70 <decode_extension+0x20>
    }
    
    return true;
 8009ac6:	2301      	movs	r3, #1
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	3724      	adds	r7, #36	; 0x24
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd90      	pop	{r4, r7, pc}

08009ad0 <find_extension_field>:

/* Step through the iterator until an extension field is found or until all
 * entries have been checked. There can be only one extension field per
 * message. Returns false if no extension field is found. */
static bool checkreturn find_extension_field(pb_field_iter_t *iter)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b084      	sub	sp, #16
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
    const pb_field_t *start = iter->pos;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	685b      	ldr	r3, [r3, #4]
 8009adc:	60fb      	str	r3, [r7, #12]
    
    do {
        if (PB_LTYPE(iter->pos->type) == PB_LTYPE_EXTENSION)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	685b      	ldr	r3, [r3, #4]
 8009ae2:	789b      	ldrb	r3, [r3, #2]
 8009ae4:	f003 030f 	and.w	r3, r3, #15
 8009ae8:	2b08      	cmp	r3, #8
 8009aea:	d101      	bne.n	8009af0 <find_extension_field+0x20>
            return true;
 8009aec:	2301      	movs	r3, #1
 8009aee:	e008      	b.n	8009b02 <find_extension_field+0x32>
        (void)pb_field_iter_next(iter);
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f7ff f95a 	bl	8008daa <pb_field_iter_next>
    } while (iter->pos != start);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	685b      	ldr	r3, [r3, #4]
 8009afa:	68fa      	ldr	r2, [r7, #12]
 8009afc:	429a      	cmp	r2, r3
 8009afe:	d1ee      	bne.n	8009ade <find_extension_field+0xe>
    
    return false;
 8009b00:	2300      	movs	r3, #0
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	3710      	adds	r7, #16
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}

08009b0a <pb_field_set_to_default>:

/* Initialize message fields to default values, recursively */
static void pb_field_set_to_default(pb_field_iter_t *iter)
{
 8009b0a:	b580      	push	{r7, lr}
 8009b0c:	b08a      	sub	sp, #40	; 0x28
 8009b0e:	af00      	add	r7, sp, #0
 8009b10:	6078      	str	r0, [r7, #4]
    pb_type_t type;
    type = iter->pos->type;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	685b      	ldr	r3, [r3, #4]
 8009b16:	789b      	ldrb	r3, [r3, #2]
 8009b18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    
    if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 8009b1c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009b20:	f003 030f 	and.w	r3, r3, #15
 8009b24:	2b08      	cmp	r3, #8
 8009b26:	d119      	bne.n	8009b5c <pb_field_set_to_default+0x52>
    {
        pb_extension_t *ext = *(pb_extension_t* const *)iter->pData;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	691b      	ldr	r3, [r3, #16]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	627b      	str	r3, [r7, #36]	; 0x24
        while (ext != NULL)
 8009b30:	e010      	b.n	8009b54 <pb_field_set_to_default+0x4a>
        {
            pb_field_iter_t ext_iter;
            ext->found = false;
 8009b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b34:	2200      	movs	r2, #0
 8009b36:	731a      	strb	r2, [r3, #12]
            iter_from_extension(&ext_iter, ext);
 8009b38:	f107 0308 	add.w	r3, r7, #8
 8009b3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f7ff ff36 	bl	80099b0 <iter_from_extension>
            pb_field_set_to_default(&ext_iter);
 8009b44:	f107 0308 	add.w	r3, r7, #8
 8009b48:	4618      	mov	r0, r3
 8009b4a:	f7ff ffde 	bl	8009b0a <pb_field_set_to_default>
            ext = ext->next;
 8009b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b50:	689b      	ldr	r3, [r3, #8]
 8009b52:	627b      	str	r3, [r7, #36]	; 0x24
        while (ext != NULL)
 8009b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d1eb      	bne.n	8009b32 <pb_field_set_to_default+0x28>
    }
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    {
        /* Don't overwrite callback */
    }
}
 8009b5a:	e07d      	b.n	8009c58 <pb_field_set_to_default+0x14e>
    else if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 8009b5c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009b60:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d15d      	bne.n	8009c24 <pb_field_set_to_default+0x11a>
        bool init_data = true;
 8009b68:	2301      	movs	r3, #1
 8009b6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && iter->pSize != iter->pData)
 8009b6e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009b72:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009b76:	2b10      	cmp	r3, #16
 8009b78:	d10a      	bne.n	8009b90 <pb_field_set_to_default+0x86>
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	695a      	ldr	r2, [r3, #20]
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	691b      	ldr	r3, [r3, #16]
 8009b82:	429a      	cmp	r2, r3
 8009b84:	d004      	beq.n	8009b90 <pb_field_set_to_default+0x86>
            *(bool*)iter->pSize = false;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	695b      	ldr	r3, [r3, #20]
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	701a      	strb	r2, [r3, #0]
 8009b8e:	e012      	b.n	8009bb6 <pb_field_set_to_default+0xac>
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8009b90:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009b94:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009b98:	2b20      	cmp	r3, #32
 8009b9a:	d005      	beq.n	8009ba8 <pb_field_set_to_default+0x9e>
                 PB_HTYPE(type) == PB_HTYPE_ONEOF)
 8009b9c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009ba0:	f003 0330 	and.w	r3, r3, #48	; 0x30
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8009ba4:	2b30      	cmp	r3, #48	; 0x30
 8009ba6:	d106      	bne.n	8009bb6 <pb_field_set_to_default+0xac>
            *(pb_size_t*)iter->pSize = 0;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	695b      	ldr	r3, [r3, #20]
 8009bac:	2200      	movs	r2, #0
 8009bae:	801a      	strh	r2, [r3, #0]
            init_data = false;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if (init_data)
 8009bb6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d04c      	beq.n	8009c58 <pb_field_set_to_default+0x14e>
            if (PB_LTYPE(iter->pos->type) == PB_LTYPE_SUBMESSAGE)
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	685b      	ldr	r3, [r3, #4]
 8009bc2:	789b      	ldrb	r3, [r3, #2]
 8009bc4:	f003 030f 	and.w	r3, r3, #15
 8009bc8:	2b07      	cmp	r3, #7
 8009bca:	d10a      	bne.n	8009be2 <pb_field_set_to_default+0xd8>
                pb_message_set_to_defaults((const pb_field_t *) iter->pos->ptr, iter->pData);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	685b      	ldr	r3, [r3, #4]
 8009bd0:	f8d3 200b 	ldr.w	r2, [r3, #11]
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	691b      	ldr	r3, [r3, #16]
 8009bd8:	4619      	mov	r1, r3
 8009bda:	4610      	mov	r0, r2
 8009bdc:	f000 f840 	bl	8009c60 <pb_message_set_to_defaults>
}
 8009be0:	e03a      	b.n	8009c58 <pb_field_set_to_default+0x14e>
            else if (iter->pos->ptr != NULL)
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	685b      	ldr	r3, [r3, #4]
 8009be6:	f8d3 300b 	ldr.w	r3, [r3, #11]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d00e      	beq.n	8009c0c <pb_field_set_to_default+0x102>
                memcpy(iter->pData, iter->pos->ptr, iter->pos->data_size);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6918      	ldr	r0, [r3, #16]
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	685b      	ldr	r3, [r3, #4]
 8009bf6:	f8d3 100b 	ldr.w	r1, [r3, #11]
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	685b      	ldr	r3, [r3, #4]
 8009bfe:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8009c02:	b29b      	uxth	r3, r3
 8009c04:	461a      	mov	r2, r3
 8009c06:	f002 fd56 	bl	800c6b6 <memcpy>
}
 8009c0a:	e025      	b.n	8009c58 <pb_field_set_to_default+0x14e>
                memset(iter->pData, 0, iter->pos->data_size);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6918      	ldr	r0, [r3, #16]
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	685b      	ldr	r3, [r3, #4]
 8009c14:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8009c18:	b29b      	uxth	r3, r3
 8009c1a:	461a      	mov	r2, r3
 8009c1c:	2100      	movs	r1, #0
 8009c1e:	f002 fd55 	bl	800c6cc <memset>
}
 8009c22:	e019      	b.n	8009c58 <pb_field_set_to_default+0x14e>
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 8009c24:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009c28:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009c2c:	2b80      	cmp	r3, #128	; 0x80
 8009c2e:	d113      	bne.n	8009c58 <pb_field_set_to_default+0x14e>
        *(void**)iter->pData = NULL;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	691b      	ldr	r3, [r3, #16]
 8009c34:	2200      	movs	r2, #0
 8009c36:	601a      	str	r2, [r3, #0]
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8009c38:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009c3c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009c40:	2b20      	cmp	r3, #32
 8009c42:	d005      	beq.n	8009c50 <pb_field_set_to_default+0x146>
            PB_HTYPE(type) == PB_HTYPE_ONEOF)
 8009c44:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009c48:	f003 0330 	and.w	r3, r3, #48	; 0x30
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8009c4c:	2b30      	cmp	r3, #48	; 0x30
 8009c4e:	d103      	bne.n	8009c58 <pb_field_set_to_default+0x14e>
            *(pb_size_t*)iter->pSize = 0;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	695b      	ldr	r3, [r3, #20]
 8009c54:	2200      	movs	r2, #0
 8009c56:	801a      	strh	r2, [r3, #0]
}
 8009c58:	bf00      	nop
 8009c5a:	3728      	adds	r7, #40	; 0x28
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}

08009c60 <pb_message_set_to_defaults>:

static void pb_message_set_to_defaults(const pb_field_t fields[], void *dest_struct)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b088      	sub	sp, #32
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
 8009c68:	6039      	str	r1, [r7, #0]
    pb_field_iter_t iter;

    if (!pb_field_iter_begin(&iter, fields, dest_struct))
 8009c6a:	f107 0308 	add.w	r3, r7, #8
 8009c6e:	683a      	ldr	r2, [r7, #0]
 8009c70:	6879      	ldr	r1, [r7, #4]
 8009c72:	4618      	mov	r0, r3
 8009c74:	f7ff f864 	bl	8008d40 <pb_field_iter_begin>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	f083 0301 	eor.w	r3, r3, #1
 8009c7e:	b2db      	uxtb	r3, r3
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d10d      	bne.n	8009ca0 <pb_message_set_to_defaults+0x40>
        return; /* Empty message type */
    
    do
    {
        pb_field_set_to_default(&iter);
 8009c84:	f107 0308 	add.w	r3, r7, #8
 8009c88:	4618      	mov	r0, r3
 8009c8a:	f7ff ff3e 	bl	8009b0a <pb_field_set_to_default>
    } while (pb_field_iter_next(&iter));
 8009c8e:	f107 0308 	add.w	r3, r7, #8
 8009c92:	4618      	mov	r0, r3
 8009c94:	f7ff f889 	bl	8008daa <pb_field_iter_next>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d1f2      	bne.n	8009c84 <pb_message_set_to_defaults+0x24>
 8009c9e:	e000      	b.n	8009ca2 <pb_message_set_to_defaults+0x42>
        return; /* Empty message type */
 8009ca0:	bf00      	nop
}
 8009ca2:	3720      	adds	r7, #32
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}

08009ca8 <pb_decode_noinit>:
/*********************
 * Decode all fields *
 *********************/

bool checkreturn pb_decode_noinit(pb_istream_t *stream, const pb_field_t fields[], void *dest_struct)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b098      	sub	sp, #96	; 0x60
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	60f8      	str	r0, [r7, #12]
 8009cb0:	60b9      	str	r1, [r7, #8]
 8009cb2:	607a      	str	r2, [r7, #4]
    uint32_t fields_seen[(PB_MAX_REQUIRED_FIELDS + 31) / 32] = {0, 0};
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	63bb      	str	r3, [r7, #56]	; 0x38
 8009cb8:	2300      	movs	r3, #0
 8009cba:	63fb      	str	r3, [r7, #60]	; 0x3c
    const uint32_t allbits = ~(uint32_t)0;
 8009cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8009cc0:	64fb      	str	r3, [r7, #76]	; 0x4c
    uint32_t extension_range_start = 0;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	65fb      	str	r3, [r7, #92]	; 0x5c

    /* 'fixed_count_field' and 'fixed_count_size' track position of a repeated fixed
     * count field. This can only handle _one_ repeated fixed count field that
     * is unpacked and unordered among other (non repeated fixed count) fields.
     */
    const pb_field_t *fixed_count_field = NULL;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	65bb      	str	r3, [r7, #88]	; 0x58
    pb_size_t fixed_count_size = 0;
 8009cca:	2300      	movs	r3, #0
 8009ccc:	83fb      	strh	r3, [r7, #30]

    /* Return value ignored, as empty message types will be correctly handled by
     * pb_field_iter_find() anyway. */
    (void)pb_field_iter_begin(&iter, fields, dest_struct);
 8009cce:	f107 0320 	add.w	r3, r7, #32
 8009cd2:	687a      	ldr	r2, [r7, #4]
 8009cd4:	68b9      	ldr	r1, [r7, #8]
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	f7ff f832 	bl	8008d40 <pb_field_iter_begin>

    while (stream->bytes_left)
 8009cdc:	e0bf      	b.n	8009e5e <pb_decode_noinit+0x1b6>
    {
        uint32_t tag;
        pb_wire_type_t wire_type;
        bool eof;

        if (!pb_decode_tag(stream, &wire_type, &tag, &eof))
 8009cde:	f107 0316 	add.w	r3, r7, #22
 8009ce2:	f107 0218 	add.w	r2, r7, #24
 8009ce6:	f107 0117 	add.w	r1, r7, #23
 8009cea:	68f8      	ldr	r0, [r7, #12]
 8009cec:	f7ff fb2b 	bl	8009346 <pb_decode_tag>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	f083 0301 	eor.w	r3, r3, #1
 8009cf6:	b2db      	uxtb	r3, r3
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d005      	beq.n	8009d08 <pb_decode_noinit+0x60>
        {
            if (eof)
 8009cfc:	7dbb      	ldrb	r3, [r7, #22]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	f040 80b3 	bne.w	8009e6a <pb_decode_noinit+0x1c2>
                break;
            else
                return false;
 8009d04:	2300      	movs	r3, #0
 8009d06:	e130      	b.n	8009f6a <pb_decode_noinit+0x2c2>
        }

        if (!pb_field_iter_find(&iter, tag))
 8009d08:	69ba      	ldr	r2, [r7, #24]
 8009d0a:	f107 0320 	add.w	r3, r7, #32
 8009d0e:	4611      	mov	r1, r2
 8009d10:	4618      	mov	r0, r3
 8009d12:	f7ff f8d0 	bl	8008eb6 <pb_field_iter_find>
 8009d16:	4603      	mov	r3, r0
 8009d18:	f083 0301 	eor.w	r3, r3, #1
 8009d1c:	b2db      	uxtb	r3, r3
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d03e      	beq.n	8009da0 <pb_decode_noinit+0xf8>
        {
            /* No match found, check if it matches an extension. */
            if (tag >= extension_range_start)
 8009d22:	69bb      	ldr	r3, [r7, #24]
 8009d24:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009d26:	429a      	cmp	r2, r3
 8009d28:	d82d      	bhi.n	8009d86 <pb_decode_noinit+0xde>
            {
                if (!find_extension_field(&iter))
 8009d2a:	f107 0320 	add.w	r3, r7, #32
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f7ff fece 	bl	8009ad0 <find_extension_field>
 8009d34:	4603      	mov	r3, r0
 8009d36:	f083 0301 	eor.w	r3, r3, #1
 8009d3a:	b2db      	uxtb	r3, r3
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d003      	beq.n	8009d48 <pb_decode_noinit+0xa0>
                    extension_range_start = (uint32_t)-1;
 8009d40:	f04f 33ff 	mov.w	r3, #4294967295
 8009d44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009d46:	e003      	b.n	8009d50 <pb_decode_noinit+0xa8>
                else
                    extension_range_start = iter.pos->tag;
 8009d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d4a:	881b      	ldrh	r3, [r3, #0]
 8009d4c:	b29b      	uxth	r3, r3
 8009d4e:	65fb      	str	r3, [r7, #92]	; 0x5c

                if (tag >= extension_range_start)
 8009d50:	69bb      	ldr	r3, [r7, #24]
 8009d52:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009d54:	429a      	cmp	r2, r3
 8009d56:	d816      	bhi.n	8009d86 <pb_decode_noinit+0xde>
                {
                    size_t pos = stream->bytes_left;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	689b      	ldr	r3, [r3, #8]
 8009d5c:	647b      	str	r3, [r7, #68]	; 0x44

                    if (!decode_extension(stream, tag, wire_type, &iter))
 8009d5e:	69b9      	ldr	r1, [r7, #24]
 8009d60:	7dfa      	ldrb	r2, [r7, #23]
 8009d62:	f107 0320 	add.w	r3, r7, #32
 8009d66:	68f8      	ldr	r0, [r7, #12]
 8009d68:	f7ff fe72 	bl	8009a50 <decode_extension>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	f083 0301 	eor.w	r3, r3, #1
 8009d72:	b2db      	uxtb	r3, r3
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d001      	beq.n	8009d7c <pb_decode_noinit+0xd4>
                        return false;
 8009d78:	2300      	movs	r3, #0
 8009d7a:	e0f6      	b.n	8009f6a <pb_decode_noinit+0x2c2>

                    if (pos != stream->bytes_left)
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	689b      	ldr	r3, [r3, #8]
 8009d80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009d82:	429a      	cmp	r2, r3
 8009d84:	d168      	bne.n	8009e58 <pb_decode_noinit+0x1b0>
                    }
                }
            }

            /* No match found, skip data */
            if (!pb_skip_field(stream, wire_type))
 8009d86:	7dfb      	ldrb	r3, [r7, #23]
 8009d88:	4619      	mov	r1, r3
 8009d8a:	68f8      	ldr	r0, [r7, #12]
 8009d8c:	f7ff fb12 	bl	80093b4 <pb_skip_field>
 8009d90:	4603      	mov	r3, r0
 8009d92:	f083 0301 	eor.w	r3, r3, #1
 8009d96:	b2db      	uxtb	r3, r3
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d05f      	beq.n	8009e5c <pb_decode_noinit+0x1b4>
                return false;
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	e0e4      	b.n	8009f6a <pb_decode_noinit+0x2c2>
        }

        /* If a repeated fixed count field was found, get size from
         * 'fixed_count_field' as there is no counter contained in the struct.
         */
        if (PB_HTYPE(iter.pos->type) == PB_HTYPE_REPEATED
 8009da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da2:	789b      	ldrb	r3, [r3, #2]
 8009da4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009da8:	2b20      	cmp	r3, #32
 8009daa:	d124      	bne.n	8009df6 <pb_decode_noinit+0x14e>
            && iter.pSize == iter.pData)
 8009dac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009db0:	429a      	cmp	r2, r3
 8009db2:	d120      	bne.n	8009df6 <pb_decode_noinit+0x14e>
        {
            if (fixed_count_field != iter.pos) {
 8009db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009db8:	429a      	cmp	r2, r3
 8009dba:	d019      	beq.n	8009df0 <pb_decode_noinit+0x148>
                /* If the new fixed count field does not match the previous one,
                 * check that the previous one is NULL or that it finished
                 * receiving all the expected data.
                 */
                if (fixed_count_field != NULL &&
 8009dbc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d012      	beq.n	8009de8 <pb_decode_noinit+0x140>
                    fixed_count_size != fixed_count_field->array_size)
 8009dc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009dc4:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8009dc8:	b29a      	uxth	r2, r3
 8009dca:	8bfb      	ldrh	r3, [r7, #30]
                if (fixed_count_field != NULL &&
 8009dcc:	429a      	cmp	r2, r3
 8009dce:	d00b      	beq.n	8009de8 <pb_decode_noinit+0x140>
                {
                    PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	68db      	ldr	r3, [r3, #12]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d002      	beq.n	8009dde <pb_decode_noinit+0x136>
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	68db      	ldr	r3, [r3, #12]
 8009ddc:	e000      	b.n	8009de0 <pb_decode_noinit+0x138>
 8009dde:	4b65      	ldr	r3, [pc, #404]	; (8009f74 <pb_decode_noinit+0x2cc>)
 8009de0:	68fa      	ldr	r2, [r7, #12]
 8009de2:	60d3      	str	r3, [r2, #12]
 8009de4:	2300      	movs	r3, #0
 8009de6:	e0c0      	b.n	8009f6a <pb_decode_noinit+0x2c2>
                }

                fixed_count_field = iter.pos;
 8009de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dea:	65bb      	str	r3, [r7, #88]	; 0x58
                fixed_count_size = 0;
 8009dec:	2300      	movs	r3, #0
 8009dee:	83fb      	strh	r3, [r7, #30]
            }

            iter.pSize = &fixed_count_size;
 8009df0:	f107 031e 	add.w	r3, r7, #30
 8009df4:	637b      	str	r3, [r7, #52]	; 0x34
        }

        if (PB_HTYPE(iter.pos->type) == PB_HTYPE_REQUIRED
 8009df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df8:	789b      	ldrb	r3, [r3, #2]
 8009dfa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d11b      	bne.n	8009e3a <pb_decode_noinit+0x192>
            && iter.required_field_index < PB_MAX_REQUIRED_FIELDS)
 8009e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e04:	2b3f      	cmp	r3, #63	; 0x3f
 8009e06:	d818      	bhi.n	8009e3a <pb_decode_noinit+0x192>
        {
            uint32_t tmp = ((uint32_t)1 << (iter.required_field_index & 31));
 8009e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e0a:	f003 031f 	and.w	r3, r3, #31
 8009e0e:	2201      	movs	r2, #1
 8009e10:	fa02 f303 	lsl.w	r3, r2, r3
 8009e14:	64bb      	str	r3, [r7, #72]	; 0x48
            fields_seen[iter.required_field_index >> 5] |= tmp;
 8009e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e18:	095b      	lsrs	r3, r3, #5
 8009e1a:	009b      	lsls	r3, r3, #2
 8009e1c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8009e20:	4413      	add	r3, r2
 8009e22:	f853 1c28 	ldr.w	r1, [r3, #-40]
 8009e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e28:	095b      	lsrs	r3, r3, #5
 8009e2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009e2c:	430a      	orrs	r2, r1
 8009e2e:	009b      	lsls	r3, r3, #2
 8009e30:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8009e34:	440b      	add	r3, r1
 8009e36:	f843 2c28 	str.w	r2, [r3, #-40]
        }

        if (!decode_field(stream, wire_type, &iter))
 8009e3a:	7dfb      	ldrb	r3, [r7, #23]
 8009e3c:	f107 0220 	add.w	r2, r7, #32
 8009e40:	4619      	mov	r1, r3
 8009e42:	68f8      	ldr	r0, [r7, #12]
 8009e44:	f7ff fd78 	bl	8009938 <decode_field>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	f083 0301 	eor.w	r3, r3, #1
 8009e4e:	b2db      	uxtb	r3, r3
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d004      	beq.n	8009e5e <pb_decode_noinit+0x1b6>
            return false;
 8009e54:	2300      	movs	r3, #0
 8009e56:	e088      	b.n	8009f6a <pb_decode_noinit+0x2c2>
                        continue;
 8009e58:	bf00      	nop
 8009e5a:	e000      	b.n	8009e5e <pb_decode_noinit+0x1b6>
            continue;
 8009e5c:	bf00      	nop
    while (stream->bytes_left)
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	689b      	ldr	r3, [r3, #8]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	f47f af3b 	bne.w	8009cde <pb_decode_noinit+0x36>
 8009e68:	e000      	b.n	8009e6c <pb_decode_noinit+0x1c4>
                break;
 8009e6a:	bf00      	nop
    }

    /* Check that all elements of the last decoded fixed count field were present. */
    if (fixed_count_field != NULL &&
 8009e6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d012      	beq.n	8009e98 <pb_decode_noinit+0x1f0>
        fixed_count_size != fixed_count_field->array_size)
 8009e72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009e74:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8009e78:	b29a      	uxth	r2, r3
 8009e7a:	8bfb      	ldrh	r3, [r7, #30]
    if (fixed_count_field != NULL &&
 8009e7c:	429a      	cmp	r2, r3
 8009e7e:	d00b      	beq.n	8009e98 <pb_decode_noinit+0x1f0>
    {
        PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	68db      	ldr	r3, [r3, #12]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d002      	beq.n	8009e8e <pb_decode_noinit+0x1e6>
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	68db      	ldr	r3, [r3, #12]
 8009e8c:	e000      	b.n	8009e90 <pb_decode_noinit+0x1e8>
 8009e8e:	4b39      	ldr	r3, [pc, #228]	; (8009f74 <pb_decode_noinit+0x2cc>)
 8009e90:	68fa      	ldr	r2, [r7, #12]
 8009e92:	60d3      	str	r3, [r2, #12]
 8009e94:	2300      	movs	r3, #0
 8009e96:	e068      	b.n	8009f6a <pb_decode_noinit+0x2c2>
         */
        unsigned req_field_count;
        pb_type_t last_type;
        unsigned i;
        do {
            req_field_count = iter.required_field_index;
 8009e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e9a:	657b      	str	r3, [r7, #84]	; 0x54
            last_type = iter.pos->type;
 8009e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e9e:	789b      	ldrb	r3, [r3, #2]
 8009ea0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
        } while (pb_field_iter_next(&iter));
 8009ea4:	f107 0320 	add.w	r3, r7, #32
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f7fe ff7e 	bl	8008daa <pb_field_iter_next>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d1f1      	bne.n	8009e98 <pb_decode_noinit+0x1f0>
        
        /* Fixup if last field was also required. */
        if (PB_HTYPE(last_type) == PB_HTYPE_REQUIRED && iter.pos->tag != 0)
 8009eb4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009eb8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d107      	bne.n	8009ed0 <pb_decode_noinit+0x228>
 8009ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec2:	881b      	ldrh	r3, [r3, #0]
 8009ec4:	b29b      	uxth	r3, r3
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d002      	beq.n	8009ed0 <pb_decode_noinit+0x228>
            req_field_count++;
 8009eca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ecc:	3301      	adds	r3, #1
 8009ece:	657b      	str	r3, [r7, #84]	; 0x54
        
        if (req_field_count > PB_MAX_REQUIRED_FIELDS)
 8009ed0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ed2:	2b40      	cmp	r3, #64	; 0x40
 8009ed4:	d901      	bls.n	8009eda <pb_decode_noinit+0x232>
            req_field_count = PB_MAX_REQUIRED_FIELDS;
 8009ed6:	2340      	movs	r3, #64	; 0x40
 8009ed8:	657b      	str	r3, [r7, #84]	; 0x54

        if (req_field_count > 0)
 8009eda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d043      	beq.n	8009f68 <pb_decode_noinit+0x2c0>
        {
            /* Check the whole words */
            for (i = 0; i < (req_field_count >> 5); i++)
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	653b      	str	r3, [r7, #80]	; 0x50
 8009ee4:	e018      	b.n	8009f18 <pb_decode_noinit+0x270>
            {
                if (fields_seen[i] != allbits)
 8009ee6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ee8:	009b      	lsls	r3, r3, #2
 8009eea:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8009eee:	4413      	add	r3, r2
 8009ef0:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8009ef4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009ef6:	429a      	cmp	r2, r3
 8009ef8:	d00b      	beq.n	8009f12 <pb_decode_noinit+0x26a>
                    PB_RETURN_ERROR(stream, "missing required field");
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	68db      	ldr	r3, [r3, #12]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d002      	beq.n	8009f08 <pb_decode_noinit+0x260>
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	68db      	ldr	r3, [r3, #12]
 8009f06:	e000      	b.n	8009f0a <pb_decode_noinit+0x262>
 8009f08:	4b1b      	ldr	r3, [pc, #108]	; (8009f78 <pb_decode_noinit+0x2d0>)
 8009f0a:	68fa      	ldr	r2, [r7, #12]
 8009f0c:	60d3      	str	r3, [r2, #12]
 8009f0e:	2300      	movs	r3, #0
 8009f10:	e02b      	b.n	8009f6a <pb_decode_noinit+0x2c2>
            for (i = 0; i < (req_field_count >> 5); i++)
 8009f12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f14:	3301      	adds	r3, #1
 8009f16:	653b      	str	r3, [r7, #80]	; 0x50
 8009f18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f1a:	095b      	lsrs	r3, r3, #5
 8009f1c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009f1e:	429a      	cmp	r2, r3
 8009f20:	d3e1      	bcc.n	8009ee6 <pb_decode_noinit+0x23e>
            }
            
            /* Check the remaining bits (if any) */
            if ((req_field_count & 31) != 0)
 8009f22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f24:	f003 031f 	and.w	r3, r3, #31
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d01d      	beq.n	8009f68 <pb_decode_noinit+0x2c0>
            {
                if (fields_seen[req_field_count >> 5] !=
 8009f2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f2e:	095b      	lsrs	r3, r3, #5
 8009f30:	009b      	lsls	r3, r3, #2
 8009f32:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8009f36:	4413      	add	r3, r2
 8009f38:	f853 2c28 	ldr.w	r2, [r3, #-40]
                    (allbits >> (32 - (req_field_count & 31))))
 8009f3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f3e:	f003 031f 	and.w	r3, r3, #31
 8009f42:	f1c3 0320 	rsb	r3, r3, #32
 8009f46:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009f48:	fa21 f303 	lsr.w	r3, r1, r3
                if (fields_seen[req_field_count >> 5] !=
 8009f4c:	429a      	cmp	r2, r3
 8009f4e:	d00b      	beq.n	8009f68 <pb_decode_noinit+0x2c0>
                {
                    PB_RETURN_ERROR(stream, "missing required field");
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	68db      	ldr	r3, [r3, #12]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d002      	beq.n	8009f5e <pb_decode_noinit+0x2b6>
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	68db      	ldr	r3, [r3, #12]
 8009f5c:	e000      	b.n	8009f60 <pb_decode_noinit+0x2b8>
 8009f5e:	4b06      	ldr	r3, [pc, #24]	; (8009f78 <pb_decode_noinit+0x2d0>)
 8009f60:	68fa      	ldr	r2, [r7, #12]
 8009f62:	60d3      	str	r3, [r2, #12]
 8009f64:	2300      	movs	r3, #0
 8009f66:	e000      	b.n	8009f6a <pb_decode_noinit+0x2c2>
                }
            }
        }
    }
    
    return true;
 8009f68:	2301      	movs	r3, #1
}
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	3760      	adds	r7, #96	; 0x60
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}
 8009f72:	bf00      	nop
 8009f74:	0800f054 	.word	0x0800f054
 8009f78:	0800f078 	.word	0x0800f078

08009f7c <pb_decode>:

bool checkreturn pb_decode(pb_istream_t *stream, const pb_field_t fields[], void *dest_struct)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b086      	sub	sp, #24
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	60f8      	str	r0, [r7, #12]
 8009f84:	60b9      	str	r1, [r7, #8]
 8009f86:	607a      	str	r2, [r7, #4]
    bool status;
    pb_message_set_to_defaults(fields, dest_struct);
 8009f88:	6879      	ldr	r1, [r7, #4]
 8009f8a:	68b8      	ldr	r0, [r7, #8]
 8009f8c:	f7ff fe68 	bl	8009c60 <pb_message_set_to_defaults>
    status = pb_decode_noinit(stream, fields, dest_struct);
 8009f90:	687a      	ldr	r2, [r7, #4]
 8009f92:	68b9      	ldr	r1, [r7, #8]
 8009f94:	68f8      	ldr	r0, [r7, #12]
 8009f96:	f7ff fe87 	bl	8009ca8 <pb_decode_noinit>
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	75fb      	strb	r3, [r7, #23]
#ifdef PB_ENABLE_MALLOC
    if (!status)
        pb_release(fields, dest_struct);
#endif
    
    return status;
 8009f9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	3718      	adds	r7, #24
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}

08009fa8 <pb_decode_delimited>:
        return false;
    return status;
}

bool pb_decode_delimited(pb_istream_t *stream, const pb_field_t fields[], void *dest_struct)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b08a      	sub	sp, #40	; 0x28
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	60f8      	str	r0, [r7, #12]
 8009fb0:	60b9      	str	r1, [r7, #8]
 8009fb2:	607a      	str	r2, [r7, #4]
    pb_istream_t substream;
    bool status;
    
    if (!pb_make_string_substream(stream, &substream))
 8009fb4:	f107 0314 	add.w	r3, r7, #20
 8009fb8:	4619      	mov	r1, r3
 8009fba:	68f8      	ldr	r0, [r7, #12]
 8009fbc:	f7ff fa98 	bl	80094f0 <pb_make_string_substream>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	f083 0301 	eor.w	r3, r3, #1
 8009fc6:	b2db      	uxtb	r3, r3
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d001      	beq.n	8009fd0 <pb_decode_delimited+0x28>
        return false;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	e019      	b.n	800a004 <pb_decode_delimited+0x5c>
    
    status = pb_decode(&substream, fields, dest_struct);
 8009fd0:	f107 0314 	add.w	r3, r7, #20
 8009fd4:	687a      	ldr	r2, [r7, #4]
 8009fd6:	68b9      	ldr	r1, [r7, #8]
 8009fd8:	4618      	mov	r0, r3
 8009fda:	f7ff ffcf 	bl	8009f7c <pb_decode>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (!pb_close_string_substream(stream, &substream))
 8009fe4:	f107 0314 	add.w	r3, r7, #20
 8009fe8:	4619      	mov	r1, r3
 8009fea:	68f8      	ldr	r0, [r7, #12]
 8009fec:	f7ff faba 	bl	8009564 <pb_close_string_substream>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	f083 0301 	eor.w	r3, r3, #1
 8009ff6:	b2db      	uxtb	r3, r3
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d001      	beq.n	800a000 <pb_decode_delimited+0x58>
        return false;
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	e001      	b.n	800a004 <pb_decode_delimited+0x5c>
    return status;
 800a000:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a004:	4618      	mov	r0, r3
 800a006:	3728      	adds	r7, #40	; 0x28
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd80      	pop	{r7, pc}

0800a00c <pb_decode_svarint>:
#endif

/* Field decoders */

bool pb_decode_svarint(pb_istream_t *stream, pb_int64_t *dest)
{
 800a00c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800a010:	b084      	sub	sp, #16
 800a012:	af00      	add	r7, sp, #0
 800a014:	6078      	str	r0, [r7, #4]
 800a016:	6039      	str	r1, [r7, #0]
    pb_uint64_t value;
    if (!pb_decode_varint(stream, &value))
 800a018:	f107 0308 	add.w	r3, r7, #8
 800a01c:	4619      	mov	r1, r3
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	f7ff f8f6 	bl	8009210 <pb_decode_varint>
 800a024:	4603      	mov	r3, r0
 800a026:	f083 0301 	eor.w	r3, r3, #1
 800a02a:	b2db      	uxtb	r3, r3
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d001      	beq.n	800a034 <pb_decode_svarint+0x28>
        return false;
 800a030:	2300      	movs	r3, #0
 800a032:	e021      	b.n	800a078 <pb_decode_svarint+0x6c>
    
    if (value & 1)
 800a034:	e9d7 bc02 	ldrd	fp, ip, [r7, #8]
 800a038:	f04f 0101 	mov.w	r1, #1
 800a03c:	f04f 0200 	mov.w	r2, #0
 800a040:	ea0b 0301 	and.w	r3, fp, r1
 800a044:	ea0c 0402 	and.w	r4, ip, r2
 800a048:	4323      	orrs	r3, r4
 800a04a:	d00c      	beq.n	800a066 <pb_decode_svarint+0x5a>
        *dest = (pb_int64_t)(~(value >> 1));
 800a04c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800a050:	0862      	lsrs	r2, r4, #1
 800a052:	ea4f 0133 	mov.w	r1, r3, rrx
 800a056:	ea6f 0301 	mvn.w	r3, r1
 800a05a:	ea6f 0402 	mvn.w	r4, r2
 800a05e:	683a      	ldr	r2, [r7, #0]
 800a060:	e9c2 3400 	strd	r3, r4, [r2]
 800a064:	e007      	b.n	800a076 <pb_decode_svarint+0x6a>
    else
        *dest = (pb_int64_t)(value >> 1);
 800a066:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800a06a:	0864      	lsrs	r4, r4, #1
 800a06c:	ea4f 0333 	mov.w	r3, r3, rrx
 800a070:	683a      	ldr	r2, [r7, #0]
 800a072:	e9c2 3400 	strd	r3, r4, [r2]
    
    return true;
 800a076:	2301      	movs	r3, #1
}
 800a078:	4618      	mov	r0, r3
 800a07a:	3710      	adds	r7, #16
 800a07c:	46bd      	mov	sp, r7
 800a07e:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800a082 <pb_decode_fixed32>:

bool pb_decode_fixed32(pb_istream_t *stream, void *dest)
{
 800a082:	b580      	push	{r7, lr}
 800a084:	b084      	sub	sp, #16
 800a086:	af00      	add	r7, sp, #0
 800a088:	6078      	str	r0, [r7, #4]
 800a08a:	6039      	str	r1, [r7, #0]
    pb_byte_t bytes[4];

    if (!pb_read(stream, bytes, 4))
 800a08c:	f107 030c 	add.w	r3, r7, #12
 800a090:	2204      	movs	r2, #4
 800a092:	4619      	mov	r1, r3
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f7fe ff5f 	bl	8008f58 <pb_read>
 800a09a:	4603      	mov	r3, r0
 800a09c:	f083 0301 	eor.w	r3, r3, #1
 800a0a0:	b2db      	uxtb	r3, r3
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d001      	beq.n	800a0aa <pb_decode_fixed32+0x28>
        return false;
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	e00d      	b.n	800a0c6 <pb_decode_fixed32+0x44>
    
    *(uint32_t*)dest = ((uint32_t)bytes[0] << 0) |
 800a0aa:	7b3b      	ldrb	r3, [r7, #12]
 800a0ac:	461a      	mov	r2, r3
                       ((uint32_t)bytes[1] << 8) |
 800a0ae:	7b7b      	ldrb	r3, [r7, #13]
 800a0b0:	021b      	lsls	r3, r3, #8
    *(uint32_t*)dest = ((uint32_t)bytes[0] << 0) |
 800a0b2:	431a      	orrs	r2, r3
                       ((uint32_t)bytes[2] << 16) |
 800a0b4:	7bbb      	ldrb	r3, [r7, #14]
 800a0b6:	041b      	lsls	r3, r3, #16
                       ((uint32_t)bytes[1] << 8) |
 800a0b8:	431a      	orrs	r2, r3
                       ((uint32_t)bytes[3] << 24);
 800a0ba:	7bfb      	ldrb	r3, [r7, #15]
 800a0bc:	061b      	lsls	r3, r3, #24
                       ((uint32_t)bytes[2] << 16) |
 800a0be:	431a      	orrs	r2, r3
    *(uint32_t*)dest = ((uint32_t)bytes[0] << 0) |
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	601a      	str	r2, [r3, #0]
    return true;
 800a0c4:	2301      	movs	r3, #1
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3710      	adds	r7, #16
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd80      	pop	{r7, pc}

0800a0ce <pb_decode_fixed64>:

#ifndef PB_WITHOUT_64BIT
bool pb_decode_fixed64(pb_istream_t *stream, void *dest)
{
 800a0ce:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 800a0d2:	b084      	sub	sp, #16
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
 800a0d8:	6039      	str	r1, [r7, #0]
    pb_byte_t bytes[8];

    if (!pb_read(stream, bytes, 8))
 800a0da:	f107 0308 	add.w	r3, r7, #8
 800a0de:	2208      	movs	r2, #8
 800a0e0:	4619      	mov	r1, r3
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	f7fe ff38 	bl	8008f58 <pb_read>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	f083 0301 	eor.w	r3, r3, #1
 800a0ee:	b2db      	uxtb	r3, r3
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d001      	beq.n	800a0f8 <pb_decode_fixed64+0x2a>
        return false;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	e06c      	b.n	800a1d2 <pb_decode_fixed64+0x104>
    
    *(uint64_t*)dest = ((uint64_t)bytes[0] << 0) |
 800a0f8:	7a3b      	ldrb	r3, [r7, #8]
 800a0fa:	fa5f fb83 	uxtb.w	fp, r3
 800a0fe:	f04f 0c00 	mov.w	ip, #0
                       ((uint64_t)bytes[1] << 8) |
 800a102:	7a7b      	ldrb	r3, [r7, #9]
 800a104:	b2d9      	uxtb	r1, r3
 800a106:	f04f 0200 	mov.w	r2, #0
 800a10a:	f04f 0300 	mov.w	r3, #0
 800a10e:	f04f 0400 	mov.w	r4, #0
 800a112:	0214      	lsls	r4, r2, #8
 800a114:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a118:	020b      	lsls	r3, r1, #8
    *(uint64_t*)dest = ((uint64_t)bytes[0] << 0) |
 800a11a:	ea4b 0803 	orr.w	r8, fp, r3
 800a11e:	ea4c 0904 	orr.w	r9, ip, r4
                       ((uint64_t)bytes[2] << 16) |
 800a122:	7abb      	ldrb	r3, [r7, #10]
 800a124:	b2d9      	uxtb	r1, r3
 800a126:	f04f 0200 	mov.w	r2, #0
 800a12a:	f04f 0300 	mov.w	r3, #0
 800a12e:	f04f 0400 	mov.w	r4, #0
 800a132:	0414      	lsls	r4, r2, #16
 800a134:	ea44 4411 	orr.w	r4, r4, r1, lsr #16
 800a138:	040b      	lsls	r3, r1, #16
                       ((uint64_t)bytes[1] << 8) |
 800a13a:	ea48 0103 	orr.w	r1, r8, r3
 800a13e:	ea49 0204 	orr.w	r2, r9, r4
                       ((uint64_t)bytes[3] << 24) |
 800a142:	7afb      	ldrb	r3, [r7, #11]
 800a144:	b2db      	uxtb	r3, r3
 800a146:	f04f 0400 	mov.w	r4, #0
 800a14a:	0a1e      	lsrs	r6, r3, #8
 800a14c:	061d      	lsls	r5, r3, #24
                       ((uint64_t)bytes[2] << 16) |
 800a14e:	ea41 0805 	orr.w	r8, r1, r5
 800a152:	ea42 0906 	orr.w	r9, r2, r6
                       ((uint64_t)bytes[4] << 32) |
 800a156:	7b3b      	ldrb	r3, [r7, #12]
 800a158:	b2dd      	uxtb	r5, r3
 800a15a:	f04f 0600 	mov.w	r6, #0
 800a15e:	f04f 0300 	mov.w	r3, #0
 800a162:	f04f 0400 	mov.w	r4, #0
 800a166:	002c      	movs	r4, r5
 800a168:	2300      	movs	r3, #0
                       ((uint64_t)bytes[3] << 24) |
 800a16a:	ea48 0103 	orr.w	r1, r8, r3
 800a16e:	ea49 0204 	orr.w	r2, r9, r4
                       ((uint64_t)bytes[5] << 40) |
 800a172:	7b7b      	ldrb	r3, [r7, #13]
 800a174:	b2dd      	uxtb	r5, r3
 800a176:	f04f 0600 	mov.w	r6, #0
 800a17a:	f04f 0300 	mov.w	r3, #0
 800a17e:	f04f 0400 	mov.w	r4, #0
 800a182:	022c      	lsls	r4, r5, #8
 800a184:	2300      	movs	r3, #0
                       ((uint64_t)bytes[4] << 32) |
 800a186:	ea41 0803 	orr.w	r8, r1, r3
 800a18a:	ea42 0904 	orr.w	r9, r2, r4
                       ((uint64_t)bytes[6] << 48) |
 800a18e:	7bbb      	ldrb	r3, [r7, #14]
 800a190:	b2dd      	uxtb	r5, r3
 800a192:	f04f 0600 	mov.w	r6, #0
 800a196:	f04f 0300 	mov.w	r3, #0
 800a19a:	f04f 0400 	mov.w	r4, #0
 800a19e:	042c      	lsls	r4, r5, #16
 800a1a0:	2300      	movs	r3, #0
                       ((uint64_t)bytes[5] << 40) |
 800a1a2:	ea48 0103 	orr.w	r1, r8, r3
 800a1a6:	ea49 0204 	orr.w	r2, r9, r4
                       ((uint64_t)bytes[7] << 56);
 800a1aa:	7bfb      	ldrb	r3, [r7, #15]
 800a1ac:	b2dd      	uxtb	r5, r3
 800a1ae:	f04f 0600 	mov.w	r6, #0
 800a1b2:	f04f 0800 	mov.w	r8, #0
 800a1b6:	f04f 0900 	mov.w	r9, #0
 800a1ba:	ea4f 6905 	mov.w	r9, r5, lsl #24
 800a1be:	f04f 0800 	mov.w	r8, #0
                       ((uint64_t)bytes[6] << 48) |
 800a1c2:	ea48 0301 	orr.w	r3, r8, r1
 800a1c6:	ea49 0402 	orr.w	r4, r9, r2
    *(uint64_t*)dest = ((uint64_t)bytes[0] << 0) |
 800a1ca:	683a      	ldr	r2, [r7, #0]
 800a1cc:	e9c2 3400 	strd	r3, r4, [r2]
    
    return true;
 800a1d0:	2301      	movs	r3, #1
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	3710      	adds	r7, #16
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}

0800a1dc <pb_dec_varint>:
#endif

static bool checkreturn pb_dec_varint(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 800a1dc:	b590      	push	{r4, r7, lr}
 800a1de:	b08b      	sub	sp, #44	; 0x2c
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	60f8      	str	r0, [r7, #12]
 800a1e4:	60b9      	str	r1, [r7, #8]
 800a1e6:	607a      	str	r2, [r7, #4]
    pb_uint64_t value;
    pb_int64_t svalue;
    pb_int64_t clamped;
    if (!pb_decode_varint(stream, &value))
 800a1e8:	f107 0310 	add.w	r3, r7, #16
 800a1ec:	4619      	mov	r1, r3
 800a1ee:	68f8      	ldr	r0, [r7, #12]
 800a1f0:	f7ff f80e 	bl	8009210 <pb_decode_varint>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	f083 0301 	eor.w	r3, r3, #1
 800a1fa:	b2db      	uxtb	r3, r3
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d001      	beq.n	800a204 <pb_dec_varint+0x28>
        return false;
 800a200:	2300      	movs	r3, #0
 800a202:	e078      	b.n	800a2f6 <pb_dec_varint+0x11a>
     * be cast as int32_t, instead of the int64_t that should be used when
     * encoding. Previous nanopb versions had a bug in encoding. In order to
     * not break decoding of such messages, we cast <=32 bit fields to
     * int32_t first to get the sign correct.
     */
    if (field->data_size == sizeof(pb_int64_t))
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800a20a:	b29b      	uxth	r3, r3
 800a20c:	2b08      	cmp	r3, #8
 800a20e:	d104      	bne.n	800a21a <pb_dec_varint+0x3e>
        svalue = (pb_int64_t)value;
 800a210:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800a214:	e9c7 3408 	strd	r3, r4, [r7, #32]
 800a218:	e005      	b.n	800a226 <pb_dec_varint+0x4a>
    else
        svalue = (int32_t)value;
 800a21a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800a21e:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800a222:	e9c7 3408 	strd	r3, r4, [r7, #32]

    /* Cast to the proper field size, while checking for overflows */
    if (field->data_size == sizeof(pb_int64_t))
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800a22c:	b29b      	uxth	r3, r3
 800a22e:	2b08      	cmp	r3, #8
 800a230:	d10a      	bne.n	800a248 <pb_dec_varint+0x6c>
        clamped = *(pb_int64_t*)dest = svalue;
 800a232:	687a      	ldr	r2, [r7, #4]
 800a234:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800a238:	e9c2 3400 	strd	r3, r4, [r2]
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a242:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800a246:	e041      	b.n	800a2cc <pb_dec_varint+0xf0>
    else if (field->data_size == sizeof(int32_t))
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800a24e:	b29b      	uxth	r3, r3
 800a250:	2b04      	cmp	r3, #4
 800a252:	d109      	bne.n	800a268 <pb_dec_varint+0x8c>
        clamped = *(int32_t*)dest = (int32_t)svalue;
 800a254:	6a3a      	ldr	r2, [r7, #32]
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	601a      	str	r2, [r3, #0]
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800a262:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800a266:	e031      	b.n	800a2cc <pb_dec_varint+0xf0>
    else if (field->data_size == sizeof(int_least16_t))
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800a26e:	b29b      	uxth	r3, r3
 800a270:	2b02      	cmp	r3, #2
 800a272:	d10c      	bne.n	800a28e <pb_dec_varint+0xb2>
        clamped = *(int_least16_t*)dest = (int_least16_t)svalue;
 800a274:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	801a      	strh	r2, [r3, #0]
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a282:	b21b      	sxth	r3, r3
 800a284:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800a288:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800a28c:	e01e      	b.n	800a2cc <pb_dec_varint+0xf0>
    else if (field->data_size == sizeof(int_least8_t))
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800a294:	b29b      	uxth	r3, r3
 800a296:	2b01      	cmp	r3, #1
 800a298:	d10c      	bne.n	800a2b4 <pb_dec_varint+0xd8>
        clamped = *(int_least8_t*)dest = (int_least8_t)svalue;
 800a29a:	f997 2020 	ldrsb.w	r2, [r7, #32]
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	701a      	strb	r2, [r3, #0]
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	f993 3000 	ldrsb.w	r3, [r3]
 800a2a8:	b25b      	sxtb	r3, r3
 800a2aa:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800a2ae:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800a2b2:	e00b      	b.n	800a2cc <pb_dec_varint+0xf0>
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	68db      	ldr	r3, [r3, #12]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d002      	beq.n	800a2c2 <pb_dec_varint+0xe6>
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	68db      	ldr	r3, [r3, #12]
 800a2c0:	e000      	b.n	800a2c4 <pb_dec_varint+0xe8>
 800a2c2:	4b0f      	ldr	r3, [pc, #60]	; (800a300 <pb_dec_varint+0x124>)
 800a2c4:	68fa      	ldr	r2, [r7, #12]
 800a2c6:	60d3      	str	r3, [r2, #12]
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	e014      	b.n	800a2f6 <pb_dec_varint+0x11a>

    if (clamped != svalue)
 800a2cc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a2d0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800a2d4:	42a2      	cmp	r2, r4
 800a2d6:	bf08      	it	eq
 800a2d8:	4299      	cmpeq	r1, r3
 800a2da:	d00b      	beq.n	800a2f4 <pb_dec_varint+0x118>
        PB_RETURN_ERROR(stream, "integer too large");
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	68db      	ldr	r3, [r3, #12]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d002      	beq.n	800a2ea <pb_dec_varint+0x10e>
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	68db      	ldr	r3, [r3, #12]
 800a2e8:	e000      	b.n	800a2ec <pb_dec_varint+0x110>
 800a2ea:	4b06      	ldr	r3, [pc, #24]	; (800a304 <pb_dec_varint+0x128>)
 800a2ec:	68fa      	ldr	r2, [r7, #12]
 800a2ee:	60d3      	str	r3, [r2, #12]
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	e000      	b.n	800a2f6 <pb_dec_varint+0x11a>
    
    return true;
 800a2f4:	2301      	movs	r3, #1
}
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	372c      	adds	r7, #44	; 0x2c
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd90      	pop	{r4, r7, pc}
 800a2fe:	bf00      	nop
 800a300:	0800f090 	.word	0x0800f090
 800a304:	0800f0a4 	.word	0x0800f0a4

0800a308 <pb_dec_uvarint>:

static bool checkreturn pb_dec_uvarint(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 800a308:	b590      	push	{r4, r7, lr}
 800a30a:	b089      	sub	sp, #36	; 0x24
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	60f8      	str	r0, [r7, #12]
 800a310:	60b9      	str	r1, [r7, #8]
 800a312:	607a      	str	r2, [r7, #4]
    pb_uint64_t value, clamped;
    if (!pb_decode_varint(stream, &value))
 800a314:	f107 0310 	add.w	r3, r7, #16
 800a318:	4619      	mov	r1, r3
 800a31a:	68f8      	ldr	r0, [r7, #12]
 800a31c:	f7fe ff78 	bl	8009210 <pb_decode_varint>
 800a320:	4603      	mov	r3, r0
 800a322:	f083 0301 	eor.w	r3, r3, #1
 800a326:	b2db      	uxtb	r3, r3
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d001      	beq.n	800a330 <pb_dec_uvarint+0x28>
        return false;
 800a32c:	2300      	movs	r3, #0
 800a32e:	e069      	b.n	800a404 <pb_dec_uvarint+0xfc>
    
    /* Cast to the proper field size, while checking for overflows */
    if (field->data_size == sizeof(pb_uint64_t))
 800a330:	68bb      	ldr	r3, [r7, #8]
 800a332:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800a336:	b29b      	uxth	r3, r3
 800a338:	2b08      	cmp	r3, #8
 800a33a:	d10a      	bne.n	800a352 <pb_dec_uvarint+0x4a>
        clamped = *(pb_uint64_t*)dest = value;
 800a33c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800a340:	687a      	ldr	r2, [r7, #4]
 800a342:	e9c2 3400 	strd	r3, r4, [r2]
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a34c:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800a350:	e043      	b.n	800a3da <pb_dec_uvarint+0xd2>
    else if (field->data_size == sizeof(uint32_t))
 800a352:	68bb      	ldr	r3, [r7, #8]
 800a354:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800a358:	b29b      	uxth	r3, r3
 800a35a:	2b04      	cmp	r3, #4
 800a35c:	d10b      	bne.n	800a376 <pb_dec_uvarint+0x6e>
        clamped = *(uint32_t*)dest = (uint32_t)value;
 800a35e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800a362:	461a      	mov	r2, r3
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	601a      	str	r2, [r3, #0]
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f04f 0400 	mov.w	r4, #0
 800a370:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800a374:	e031      	b.n	800a3da <pb_dec_uvarint+0xd2>
    else if (field->data_size == sizeof(uint_least16_t))
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800a37c:	b29b      	uxth	r3, r3
 800a37e:	2b02      	cmp	r3, #2
 800a380:	d10c      	bne.n	800a39c <pb_dec_uvarint+0x94>
        clamped = *(uint_least16_t*)dest = (uint_least16_t)value;
 800a382:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800a386:	b29a      	uxth	r2, r3
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	801a      	strh	r2, [r3, #0]
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	881b      	ldrh	r3, [r3, #0]
 800a390:	b29b      	uxth	r3, r3
 800a392:	f04f 0400 	mov.w	r4, #0
 800a396:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800a39a:	e01e      	b.n	800a3da <pb_dec_uvarint+0xd2>
    else if (field->data_size == sizeof(uint_least8_t))
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800a3a2:	b29b      	uxth	r3, r3
 800a3a4:	2b01      	cmp	r3, #1
 800a3a6:	d10c      	bne.n	800a3c2 <pb_dec_uvarint+0xba>
        clamped = *(uint_least8_t*)dest = (uint_least8_t)value;
 800a3a8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800a3ac:	b2da      	uxtb	r2, r3
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	701a      	strb	r2, [r3, #0]
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	781b      	ldrb	r3, [r3, #0]
 800a3b6:	b2db      	uxtb	r3, r3
 800a3b8:	f04f 0400 	mov.w	r4, #0
 800a3bc:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800a3c0:	e00b      	b.n	800a3da <pb_dec_uvarint+0xd2>
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	68db      	ldr	r3, [r3, #12]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d002      	beq.n	800a3d0 <pb_dec_uvarint+0xc8>
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	68db      	ldr	r3, [r3, #12]
 800a3ce:	e000      	b.n	800a3d2 <pb_dec_uvarint+0xca>
 800a3d0:	4b0e      	ldr	r3, [pc, #56]	; (800a40c <pb_dec_uvarint+0x104>)
 800a3d2:	68fa      	ldr	r2, [r7, #12]
 800a3d4:	60d3      	str	r3, [r2, #12]
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	e014      	b.n	800a404 <pb_dec_uvarint+0xfc>
    
    if (clamped != value)
 800a3da:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800a3de:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a3e2:	42a2      	cmp	r2, r4
 800a3e4:	bf08      	it	eq
 800a3e6:	4299      	cmpeq	r1, r3
 800a3e8:	d00b      	beq.n	800a402 <pb_dec_uvarint+0xfa>
        PB_RETURN_ERROR(stream, "integer too large");
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	68db      	ldr	r3, [r3, #12]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d002      	beq.n	800a3f8 <pb_dec_uvarint+0xf0>
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	68db      	ldr	r3, [r3, #12]
 800a3f6:	e000      	b.n	800a3fa <pb_dec_uvarint+0xf2>
 800a3f8:	4b05      	ldr	r3, [pc, #20]	; (800a410 <pb_dec_uvarint+0x108>)
 800a3fa:	68fa      	ldr	r2, [r7, #12]
 800a3fc:	60d3      	str	r3, [r2, #12]
 800a3fe:	2300      	movs	r3, #0
 800a400:	e000      	b.n	800a404 <pb_dec_uvarint+0xfc>

    return true;
 800a402:	2301      	movs	r3, #1
}
 800a404:	4618      	mov	r0, r3
 800a406:	3724      	adds	r7, #36	; 0x24
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd90      	pop	{r4, r7, pc}
 800a40c:	0800f090 	.word	0x0800f090
 800a410:	0800f0a4 	.word	0x0800f0a4

0800a414 <pb_dec_svarint>:

static bool checkreturn pb_dec_svarint(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 800a414:	b590      	push	{r4, r7, lr}
 800a416:	b089      	sub	sp, #36	; 0x24
 800a418:	af00      	add	r7, sp, #0
 800a41a:	60f8      	str	r0, [r7, #12]
 800a41c:	60b9      	str	r1, [r7, #8]
 800a41e:	607a      	str	r2, [r7, #4]
    pb_int64_t value, clamped;
    if (!pb_decode_svarint(stream, &value))
 800a420:	f107 0310 	add.w	r3, r7, #16
 800a424:	4619      	mov	r1, r3
 800a426:	68f8      	ldr	r0, [r7, #12]
 800a428:	f7ff fdf0 	bl	800a00c <pb_decode_svarint>
 800a42c:	4603      	mov	r3, r0
 800a42e:	f083 0301 	eor.w	r3, r3, #1
 800a432:	b2db      	uxtb	r3, r3
 800a434:	2b00      	cmp	r3, #0
 800a436:	d001      	beq.n	800a43c <pb_dec_svarint+0x28>
        return false;
 800a438:	2300      	movs	r3, #0
 800a43a:	e06b      	b.n	800a514 <pb_dec_svarint+0x100>
    
    /* Cast to the proper field size, while checking for overflows */
    if (field->data_size == sizeof(pb_int64_t))
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800a442:	b29b      	uxth	r3, r3
 800a444:	2b08      	cmp	r3, #8
 800a446:	d10a      	bne.n	800a45e <pb_dec_svarint+0x4a>
        clamped = *(pb_int64_t*)dest = value;
 800a448:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800a44c:	687a      	ldr	r2, [r7, #4]
 800a44e:	e9c2 3400 	strd	r3, r4, [r2]
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a458:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800a45c:	e045      	b.n	800a4ea <pb_dec_svarint+0xd6>
    else if (field->data_size == sizeof(int32_t))
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800a464:	b29b      	uxth	r3, r3
 800a466:	2b04      	cmp	r3, #4
 800a468:	d10b      	bne.n	800a482 <pb_dec_svarint+0x6e>
        clamped = *(int32_t*)dest = (int32_t)value;
 800a46a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800a46e:	461a      	mov	r2, r3
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	601a      	str	r2, [r3, #0]
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800a47c:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800a480:	e033      	b.n	800a4ea <pb_dec_svarint+0xd6>
    else if (field->data_size == sizeof(int_least16_t))
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800a488:	b29b      	uxth	r3, r3
 800a48a:	2b02      	cmp	r3, #2
 800a48c:	d10d      	bne.n	800a4aa <pb_dec_svarint+0x96>
        clamped = *(int_least16_t*)dest = (int_least16_t)value;
 800a48e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800a492:	b21a      	sxth	r2, r3
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	801a      	strh	r2, [r3, #0]
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a49e:	b21b      	sxth	r3, r3
 800a4a0:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800a4a4:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800a4a8:	e01f      	b.n	800a4ea <pb_dec_svarint+0xd6>
    else if (field->data_size == sizeof(int_least8_t))
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800a4b0:	b29b      	uxth	r3, r3
 800a4b2:	2b01      	cmp	r3, #1
 800a4b4:	d10d      	bne.n	800a4d2 <pb_dec_svarint+0xbe>
        clamped = *(int_least8_t*)dest = (int_least8_t)value;
 800a4b6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800a4ba:	b25a      	sxtb	r2, r3
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	701a      	strb	r2, [r3, #0]
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f993 3000 	ldrsb.w	r3, [r3]
 800a4c6:	b25b      	sxtb	r3, r3
 800a4c8:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800a4cc:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800a4d0:	e00b      	b.n	800a4ea <pb_dec_svarint+0xd6>
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	68db      	ldr	r3, [r3, #12]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d002      	beq.n	800a4e0 <pb_dec_svarint+0xcc>
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	68db      	ldr	r3, [r3, #12]
 800a4de:	e000      	b.n	800a4e2 <pb_dec_svarint+0xce>
 800a4e0:	4b0e      	ldr	r3, [pc, #56]	; (800a51c <pb_dec_svarint+0x108>)
 800a4e2:	68fa      	ldr	r2, [r7, #12]
 800a4e4:	60d3      	str	r3, [r2, #12]
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	e014      	b.n	800a514 <pb_dec_svarint+0x100>

    if (clamped != value)
 800a4ea:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800a4ee:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a4f2:	42a2      	cmp	r2, r4
 800a4f4:	bf08      	it	eq
 800a4f6:	4299      	cmpeq	r1, r3
 800a4f8:	d00b      	beq.n	800a512 <pb_dec_svarint+0xfe>
        PB_RETURN_ERROR(stream, "integer too large");
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	68db      	ldr	r3, [r3, #12]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d002      	beq.n	800a508 <pb_dec_svarint+0xf4>
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	68db      	ldr	r3, [r3, #12]
 800a506:	e000      	b.n	800a50a <pb_dec_svarint+0xf6>
 800a508:	4b05      	ldr	r3, [pc, #20]	; (800a520 <pb_dec_svarint+0x10c>)
 800a50a:	68fa      	ldr	r2, [r7, #12]
 800a50c:	60d3      	str	r3, [r2, #12]
 800a50e:	2300      	movs	r3, #0
 800a510:	e000      	b.n	800a514 <pb_dec_svarint+0x100>
    
    return true;
 800a512:	2301      	movs	r3, #1
}
 800a514:	4618      	mov	r0, r3
 800a516:	3724      	adds	r7, #36	; 0x24
 800a518:	46bd      	mov	sp, r7
 800a51a:	bd90      	pop	{r4, r7, pc}
 800a51c:	0800f090 	.word	0x0800f090
 800a520:	0800f0a4 	.word	0x0800f0a4

0800a524 <pb_dec_fixed32>:

static bool checkreturn pb_dec_fixed32(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b084      	sub	sp, #16
 800a528:	af00      	add	r7, sp, #0
 800a52a:	60f8      	str	r0, [r7, #12]
 800a52c:	60b9      	str	r1, [r7, #8]
 800a52e:	607a      	str	r2, [r7, #4]
    PB_UNUSED(field);
    return pb_decode_fixed32(stream, dest);
 800a530:	6879      	ldr	r1, [r7, #4]
 800a532:	68f8      	ldr	r0, [r7, #12]
 800a534:	f7ff fda5 	bl	800a082 <pb_decode_fixed32>
 800a538:	4603      	mov	r3, r0
}
 800a53a:	4618      	mov	r0, r3
 800a53c:	3710      	adds	r7, #16
 800a53e:	46bd      	mov	sp, r7
 800a540:	bd80      	pop	{r7, pc}

0800a542 <pb_dec_fixed64>:

static bool checkreturn pb_dec_fixed64(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 800a542:	b580      	push	{r7, lr}
 800a544:	b084      	sub	sp, #16
 800a546:	af00      	add	r7, sp, #0
 800a548:	60f8      	str	r0, [r7, #12]
 800a54a:	60b9      	str	r1, [r7, #8]
 800a54c:	607a      	str	r2, [r7, #4]
    PB_UNUSED(field);
#ifndef PB_WITHOUT_64BIT
    return pb_decode_fixed64(stream, dest);
 800a54e:	6879      	ldr	r1, [r7, #4]
 800a550:	68f8      	ldr	r0, [r7, #12]
 800a552:	f7ff fdbc 	bl	800a0ce <pb_decode_fixed64>
 800a556:	4603      	mov	r3, r0
#else
    PB_UNUSED(dest);
    PB_RETURN_ERROR(stream, "no 64bit support");
#endif
}
 800a558:	4618      	mov	r0, r3
 800a55a:	3710      	adds	r7, #16
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}

0800a560 <pb_dec_bytes>:

static bool checkreturn pb_dec_bytes(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b088      	sub	sp, #32
 800a564:	af00      	add	r7, sp, #0
 800a566:	60f8      	str	r0, [r7, #12]
 800a568:	60b9      	str	r1, [r7, #8]
 800a56a:	607a      	str	r2, [r7, #4]
    uint32_t size;
    size_t alloc_size;
    pb_bytes_array_t *bdest;
    
    if (!pb_decode_varint32(stream, &size))
 800a56c:	f107 0314 	add.w	r3, r7, #20
 800a570:	4619      	mov	r1, r3
 800a572:	68f8      	ldr	r0, [r7, #12]
 800a574:	f7fe fe3c 	bl	80091f0 <pb_decode_varint32>
 800a578:	4603      	mov	r3, r0
 800a57a:	f083 0301 	eor.w	r3, r3, #1
 800a57e:	b2db      	uxtb	r3, r3
 800a580:	2b00      	cmp	r3, #0
 800a582:	d001      	beq.n	800a588 <pb_dec_bytes+0x28>
        return false;
 800a584:	2300      	movs	r3, #0
 800a586:	e056      	b.n	800a636 <pb_dec_bytes+0xd6>
    
    if (size > PB_SIZE_MAX)
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a58e:	d30b      	bcc.n	800a5a8 <pb_dec_bytes+0x48>
        PB_RETURN_ERROR(stream, "bytes overflow");
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	68db      	ldr	r3, [r3, #12]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d002      	beq.n	800a59e <pb_dec_bytes+0x3e>
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	68db      	ldr	r3, [r3, #12]
 800a59c:	e000      	b.n	800a5a0 <pb_dec_bytes+0x40>
 800a59e:	4b28      	ldr	r3, [pc, #160]	; (800a640 <pb_dec_bytes+0xe0>)
 800a5a0:	68fa      	ldr	r2, [r7, #12]
 800a5a2:	60d3      	str	r3, [r2, #12]
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	e046      	b.n	800a636 <pb_dec_bytes+0xd6>
    
    alloc_size = PB_BYTES_ARRAY_T_ALLOCSIZE(size);
 800a5a8:	697b      	ldr	r3, [r7, #20]
 800a5aa:	3302      	adds	r3, #2
 800a5ac:	61fb      	str	r3, [r7, #28]
    if (size > alloc_size)
 800a5ae:	697b      	ldr	r3, [r7, #20]
 800a5b0:	69fa      	ldr	r2, [r7, #28]
 800a5b2:	429a      	cmp	r2, r3
 800a5b4:	d20b      	bcs.n	800a5ce <pb_dec_bytes+0x6e>
        PB_RETURN_ERROR(stream, "size too large");
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	68db      	ldr	r3, [r3, #12]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d002      	beq.n	800a5c4 <pb_dec_bytes+0x64>
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	68db      	ldr	r3, [r3, #12]
 800a5c2:	e000      	b.n	800a5c6 <pb_dec_bytes+0x66>
 800a5c4:	4b1f      	ldr	r3, [pc, #124]	; (800a644 <pb_dec_bytes+0xe4>)
 800a5c6:	68fa      	ldr	r2, [r7, #12]
 800a5c8:	60d3      	str	r3, [r2, #12]
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	e033      	b.n	800a636 <pb_dec_bytes+0xd6>
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	789b      	ldrb	r3, [r3, #2]
 800a5d2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a5d6:	2b80      	cmp	r3, #128	; 0x80
 800a5d8:	d10b      	bne.n	800a5f2 <pb_dec_bytes+0x92>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	68db      	ldr	r3, [r3, #12]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d002      	beq.n	800a5e8 <pb_dec_bytes+0x88>
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	68db      	ldr	r3, [r3, #12]
 800a5e6:	e000      	b.n	800a5ea <pb_dec_bytes+0x8a>
 800a5e8:	4b17      	ldr	r3, [pc, #92]	; (800a648 <pb_dec_bytes+0xe8>)
 800a5ea:	68fa      	ldr	r2, [r7, #12]
 800a5ec:	60d3      	str	r3, [r2, #12]
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	e021      	b.n	800a636 <pb_dec_bytes+0xd6>
        bdest = *(pb_bytes_array_t**)dest;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 800a5f2:	68bb      	ldr	r3, [r7, #8]
 800a5f4:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800a5f8:	b29b      	uxth	r3, r3
 800a5fa:	461a      	mov	r2, r3
 800a5fc:	69fb      	ldr	r3, [r7, #28]
 800a5fe:	4293      	cmp	r3, r2
 800a600:	d90b      	bls.n	800a61a <pb_dec_bytes+0xba>
            PB_RETURN_ERROR(stream, "bytes overflow");
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	68db      	ldr	r3, [r3, #12]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d002      	beq.n	800a610 <pb_dec_bytes+0xb0>
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	68db      	ldr	r3, [r3, #12]
 800a60e:	e000      	b.n	800a612 <pb_dec_bytes+0xb2>
 800a610:	4b0b      	ldr	r3, [pc, #44]	; (800a640 <pb_dec_bytes+0xe0>)
 800a612:	68fa      	ldr	r2, [r7, #12]
 800a614:	60d3      	str	r3, [r2, #12]
 800a616:	2300      	movs	r3, #0
 800a618:	e00d      	b.n	800a636 <pb_dec_bytes+0xd6>
        bdest = (pb_bytes_array_t*)dest;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	61bb      	str	r3, [r7, #24]
    }

    bdest->size = (pb_size_t)size;
 800a61e:	697b      	ldr	r3, [r7, #20]
 800a620:	b29a      	uxth	r2, r3
 800a622:	69bb      	ldr	r3, [r7, #24]
 800a624:	801a      	strh	r2, [r3, #0]
    return pb_read(stream, bdest->bytes, size);
 800a626:	69bb      	ldr	r3, [r7, #24]
 800a628:	3302      	adds	r3, #2
 800a62a:	697a      	ldr	r2, [r7, #20]
 800a62c:	4619      	mov	r1, r3
 800a62e:	68f8      	ldr	r0, [r7, #12]
 800a630:	f7fe fc92 	bl	8008f58 <pb_read>
 800a634:	4603      	mov	r3, r0
}
 800a636:	4618      	mov	r0, r3
 800a638:	3720      	adds	r7, #32
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}
 800a63e:	bf00      	nop
 800a640:	0800f0b8 	.word	0x0800f0b8
 800a644:	0800f0c8 	.word	0x0800f0c8
 800a648:	0800f030 	.word	0x0800f030

0800a64c <pb_dec_string>:

static bool checkreturn pb_dec_string(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b088      	sub	sp, #32
 800a650:	af00      	add	r7, sp, #0
 800a652:	60f8      	str	r0, [r7, #12]
 800a654:	60b9      	str	r1, [r7, #8]
 800a656:	607a      	str	r2, [r7, #4]
    uint32_t size;
    size_t alloc_size;
    bool status;
    if (!pb_decode_varint32(stream, &size))
 800a658:	f107 0314 	add.w	r3, r7, #20
 800a65c:	4619      	mov	r1, r3
 800a65e:	68f8      	ldr	r0, [r7, #12]
 800a660:	f7fe fdc6 	bl	80091f0 <pb_decode_varint32>
 800a664:	4603      	mov	r3, r0
 800a666:	f083 0301 	eor.w	r3, r3, #1
 800a66a:	b2db      	uxtb	r3, r3
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d001      	beq.n	800a674 <pb_dec_string+0x28>
        return false;
 800a670:	2300      	movs	r3, #0
 800a672:	e046      	b.n	800a702 <pb_dec_string+0xb6>
    
    /* Space for null terminator */
    alloc_size = size + 1;
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	3301      	adds	r3, #1
 800a678:	61fb      	str	r3, [r7, #28]
    
    if (alloc_size < size)
 800a67a:	697b      	ldr	r3, [r7, #20]
 800a67c:	69fa      	ldr	r2, [r7, #28]
 800a67e:	429a      	cmp	r2, r3
 800a680:	d20b      	bcs.n	800a69a <pb_dec_string+0x4e>
        PB_RETURN_ERROR(stream, "size too large");
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	68db      	ldr	r3, [r3, #12]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d002      	beq.n	800a690 <pb_dec_string+0x44>
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	68db      	ldr	r3, [r3, #12]
 800a68e:	e000      	b.n	800a692 <pb_dec_string+0x46>
 800a690:	4b1e      	ldr	r3, [pc, #120]	; (800a70c <pb_dec_string+0xc0>)
 800a692:	68fa      	ldr	r2, [r7, #12]
 800a694:	60d3      	str	r3, [r2, #12]
 800a696:	2300      	movs	r3, #0
 800a698:	e033      	b.n	800a702 <pb_dec_string+0xb6>
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	789b      	ldrb	r3, [r3, #2]
 800a69e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a6a2:	2b80      	cmp	r3, #128	; 0x80
 800a6a4:	d10b      	bne.n	800a6be <pb_dec_string+0x72>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	68db      	ldr	r3, [r3, #12]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d002      	beq.n	800a6b4 <pb_dec_string+0x68>
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	68db      	ldr	r3, [r3, #12]
 800a6b2:	e000      	b.n	800a6b6 <pb_dec_string+0x6a>
 800a6b4:	4b16      	ldr	r3, [pc, #88]	; (800a710 <pb_dec_string+0xc4>)
 800a6b6:	68fa      	ldr	r2, [r7, #12]
 800a6b8:	60d3      	str	r3, [r2, #12]
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	e021      	b.n	800a702 <pb_dec_string+0xb6>
        dest = *(void**)dest;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 800a6be:	68bb      	ldr	r3, [r7, #8]
 800a6c0:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800a6c4:	b29b      	uxth	r3, r3
 800a6c6:	461a      	mov	r2, r3
 800a6c8:	69fb      	ldr	r3, [r7, #28]
 800a6ca:	4293      	cmp	r3, r2
 800a6cc:	d90b      	bls.n	800a6e6 <pb_dec_string+0x9a>
            PB_RETURN_ERROR(stream, "string overflow");
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	68db      	ldr	r3, [r3, #12]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d002      	beq.n	800a6dc <pb_dec_string+0x90>
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	68db      	ldr	r3, [r3, #12]
 800a6da:	e000      	b.n	800a6de <pb_dec_string+0x92>
 800a6dc:	4b0d      	ldr	r3, [pc, #52]	; (800a714 <pb_dec_string+0xc8>)
 800a6de:	68fa      	ldr	r2, [r7, #12]
 800a6e0:	60d3      	str	r3, [r2, #12]
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	e00d      	b.n	800a702 <pb_dec_string+0xb6>
    }
    
    status = pb_read(stream, (pb_byte_t*)dest, size);
 800a6e6:	697b      	ldr	r3, [r7, #20]
 800a6e8:	461a      	mov	r2, r3
 800a6ea:	6879      	ldr	r1, [r7, #4]
 800a6ec:	68f8      	ldr	r0, [r7, #12]
 800a6ee:	f7fe fc33 	bl	8008f58 <pb_read>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	76fb      	strb	r3, [r7, #27]
    *((pb_byte_t*)dest + size) = 0;
 800a6f6:	697b      	ldr	r3, [r7, #20]
 800a6f8:	687a      	ldr	r2, [r7, #4]
 800a6fa:	4413      	add	r3, r2
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	701a      	strb	r2, [r3, #0]
    return status;
 800a700:	7efb      	ldrb	r3, [r7, #27]
}
 800a702:	4618      	mov	r0, r3
 800a704:	3720      	adds	r7, #32
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}
 800a70a:	bf00      	nop
 800a70c:	0800f0c8 	.word	0x0800f0c8
 800a710:	0800f030 	.word	0x0800f030
 800a714:	0800f0d8 	.word	0x0800f0d8

0800a718 <pb_dec_submessage>:

static bool checkreturn pb_dec_submessage(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b08a      	sub	sp, #40	; 0x28
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	60f8      	str	r0, [r7, #12]
 800a720:	60b9      	str	r1, [r7, #8]
 800a722:	607a      	str	r2, [r7, #4]
    bool status;
    pb_istream_t substream;
    const pb_field_t* submsg_fields = (const pb_field_t*)field->ptr;
 800a724:	68bb      	ldr	r3, [r7, #8]
 800a726:	f8d3 300b 	ldr.w	r3, [r3, #11]
 800a72a:	623b      	str	r3, [r7, #32]
    
    if (!pb_make_string_substream(stream, &substream))
 800a72c:	f107 0310 	add.w	r3, r7, #16
 800a730:	4619      	mov	r1, r3
 800a732:	68f8      	ldr	r0, [r7, #12]
 800a734:	f7fe fedc 	bl	80094f0 <pb_make_string_substream>
 800a738:	4603      	mov	r3, r0
 800a73a:	f083 0301 	eor.w	r3, r3, #1
 800a73e:	b2db      	uxtb	r3, r3
 800a740:	2b00      	cmp	r3, #0
 800a742:	d001      	beq.n	800a748 <pb_dec_submessage+0x30>
        return false;
 800a744:	2300      	movs	r3, #0
 800a746:	e03b      	b.n	800a7c0 <pb_dec_submessage+0xa8>
    
    if (field->ptr == NULL)
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	f8d3 300b 	ldr.w	r3, [r3, #11]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d10b      	bne.n	800a76a <pb_dec_submessage+0x52>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	68db      	ldr	r3, [r3, #12]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d002      	beq.n	800a760 <pb_dec_submessage+0x48>
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	68db      	ldr	r3, [r3, #12]
 800a75e:	e000      	b.n	800a762 <pb_dec_submessage+0x4a>
 800a760:	4b19      	ldr	r3, [pc, #100]	; (800a7c8 <pb_dec_submessage+0xb0>)
 800a762:	68fa      	ldr	r2, [r7, #12]
 800a764:	60d3      	str	r3, [r2, #12]
 800a766:	2300      	movs	r3, #0
 800a768:	e02a      	b.n	800a7c0 <pb_dec_submessage+0xa8>
    
    /* New array entries need to be initialized, while required and optional
     * submessages have already been initialized in the top-level pb_decode. */
    if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
 800a76a:	68bb      	ldr	r3, [r7, #8]
 800a76c:	789b      	ldrb	r3, [r3, #2]
 800a76e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a772:	2b20      	cmp	r3, #32
 800a774:	d10a      	bne.n	800a78c <pb_dec_submessage+0x74>
        status = pb_decode(&substream, submsg_fields, dest);
 800a776:	f107 0310 	add.w	r3, r7, #16
 800a77a:	687a      	ldr	r2, [r7, #4]
 800a77c:	6a39      	ldr	r1, [r7, #32]
 800a77e:	4618      	mov	r0, r3
 800a780:	f7ff fbfc 	bl	8009f7c <pb_decode>
 800a784:	4603      	mov	r3, r0
 800a786:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a78a:	e009      	b.n	800a7a0 <pb_dec_submessage+0x88>
    else
        status = pb_decode_noinit(&substream, submsg_fields, dest);
 800a78c:	f107 0310 	add.w	r3, r7, #16
 800a790:	687a      	ldr	r2, [r7, #4]
 800a792:	6a39      	ldr	r1, [r7, #32]
 800a794:	4618      	mov	r0, r3
 800a796:	f7ff fa87 	bl	8009ca8 <pb_decode_noinit>
 800a79a:	4603      	mov	r3, r0
 800a79c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    
    if (!pb_close_string_substream(stream, &substream))
 800a7a0:	f107 0310 	add.w	r3, r7, #16
 800a7a4:	4619      	mov	r1, r3
 800a7a6:	68f8      	ldr	r0, [r7, #12]
 800a7a8:	f7fe fedc 	bl	8009564 <pb_close_string_substream>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	f083 0301 	eor.w	r3, r3, #1
 800a7b2:	b2db      	uxtb	r3, r3
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d001      	beq.n	800a7bc <pb_dec_submessage+0xa4>
        return false;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	e001      	b.n	800a7c0 <pb_dec_submessage+0xa8>
    return status;
 800a7bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	3728      	adds	r7, #40	; 0x28
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}
 800a7c8:	0800f0e8 	.word	0x0800f0e8

0800a7cc <pb_dec_fixed_length_bytes>:

static bool checkreturn pb_dec_fixed_length_bytes(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b086      	sub	sp, #24
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	60f8      	str	r0, [r7, #12]
 800a7d4:	60b9      	str	r1, [r7, #8]
 800a7d6:	607a      	str	r2, [r7, #4]
    uint32_t size;

    if (!pb_decode_varint32(stream, &size))
 800a7d8:	f107 0314 	add.w	r3, r7, #20
 800a7dc:	4619      	mov	r1, r3
 800a7de:	68f8      	ldr	r0, [r7, #12]
 800a7e0:	f7fe fd06 	bl	80091f0 <pb_decode_varint32>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	f083 0301 	eor.w	r3, r3, #1
 800a7ea:	b2db      	uxtb	r3, r3
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d001      	beq.n	800a7f4 <pb_dec_fixed_length_bytes+0x28>
        return false;
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	e03b      	b.n	800a86c <pb_dec_fixed_length_bytes+0xa0>

    if (size > PB_SIZE_MAX)
 800a7f4:	697b      	ldr	r3, [r7, #20]
 800a7f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7fa:	d30b      	bcc.n	800a814 <pb_dec_fixed_length_bytes+0x48>
        PB_RETURN_ERROR(stream, "bytes overflow");
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	68db      	ldr	r3, [r3, #12]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d002      	beq.n	800a80a <pb_dec_fixed_length_bytes+0x3e>
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	68db      	ldr	r3, [r3, #12]
 800a808:	e000      	b.n	800a80c <pb_dec_fixed_length_bytes+0x40>
 800a80a:	4b1a      	ldr	r3, [pc, #104]	; (800a874 <pb_dec_fixed_length_bytes+0xa8>)
 800a80c:	68fa      	ldr	r2, [r7, #12]
 800a80e:	60d3      	str	r3, [r2, #12]
 800a810:	2300      	movs	r3, #0
 800a812:	e02b      	b.n	800a86c <pb_dec_fixed_length_bytes+0xa0>

    if (size == 0)
 800a814:	697b      	ldr	r3, [r7, #20]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d10a      	bne.n	800a830 <pb_dec_fixed_length_bytes+0x64>
    {
        /* As a special case, treat empty bytes string as all zeros for fixed_length_bytes. */
        memset(dest, 0, field->data_size);
 800a81a:	68bb      	ldr	r3, [r7, #8]
 800a81c:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800a820:	b29b      	uxth	r3, r3
 800a822:	461a      	mov	r2, r3
 800a824:	2100      	movs	r1, #0
 800a826:	6878      	ldr	r0, [r7, #4]
 800a828:	f001 ff50 	bl	800c6cc <memset>
        return true;
 800a82c:	2301      	movs	r3, #1
 800a82e:	e01d      	b.n	800a86c <pb_dec_fixed_length_bytes+0xa0>
    }

    if (size != field->data_size)
 800a830:	68bb      	ldr	r3, [r7, #8]
 800a832:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800a836:	b29b      	uxth	r3, r3
 800a838:	461a      	mov	r2, r3
 800a83a:	697b      	ldr	r3, [r7, #20]
 800a83c:	429a      	cmp	r2, r3
 800a83e:	d00b      	beq.n	800a858 <pb_dec_fixed_length_bytes+0x8c>
        PB_RETURN_ERROR(stream, "incorrect fixed length bytes size");
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	68db      	ldr	r3, [r3, #12]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d002      	beq.n	800a84e <pb_dec_fixed_length_bytes+0x82>
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	68db      	ldr	r3, [r3, #12]
 800a84c:	e000      	b.n	800a850 <pb_dec_fixed_length_bytes+0x84>
 800a84e:	4b0a      	ldr	r3, [pc, #40]	; (800a878 <pb_dec_fixed_length_bytes+0xac>)
 800a850:	68fa      	ldr	r2, [r7, #12]
 800a852:	60d3      	str	r3, [r2, #12]
 800a854:	2300      	movs	r3, #0
 800a856:	e009      	b.n	800a86c <pb_dec_fixed_length_bytes+0xa0>

    return pb_read(stream, (pb_byte_t*)dest, field->data_size);
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800a85e:	b29b      	uxth	r3, r3
 800a860:	461a      	mov	r2, r3
 800a862:	6879      	ldr	r1, [r7, #4]
 800a864:	68f8      	ldr	r0, [r7, #12]
 800a866:	f7fe fb77 	bl	8008f58 <pb_read>
 800a86a:	4603      	mov	r3, r0
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	3718      	adds	r7, #24
 800a870:	46bd      	mov	sp, r7
 800a872:	bd80      	pop	{r7, pc}
 800a874:	0800f0b8 	.word	0x0800f0b8
 800a878:	0800f104 	.word	0x0800f104

0800a87c <pb_write>:
#endif
    return stream;
}

bool checkreturn pb_write(pb_ostream_t *stream, const pb_byte_t *buf, size_t count)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b084      	sub	sp, #16
 800a880:	af00      	add	r7, sp, #0
 800a882:	60f8      	str	r0, [r7, #12]
 800a884:	60b9      	str	r1, [r7, #8]
 800a886:	607a      	str	r2, [r7, #4]
    if (stream->callback != NULL)
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d02b      	beq.n	800a8e8 <pb_write+0x6c>
    {
        if (stream->bytes_written + count > stream->max_size)
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	68da      	ldr	r2, [r3, #12]
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	441a      	add	r2, r3
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	689b      	ldr	r3, [r3, #8]
 800a89c:	429a      	cmp	r2, r3
 800a89e:	d90b      	bls.n	800a8b8 <pb_write+0x3c>
            PB_RETURN_ERROR(stream, "stream full");
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	691b      	ldr	r3, [r3, #16]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d002      	beq.n	800a8ae <pb_write+0x32>
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	691b      	ldr	r3, [r3, #16]
 800a8ac:	e000      	b.n	800a8b0 <pb_write+0x34>
 800a8ae:	4b14      	ldr	r3, [pc, #80]	; (800a900 <pb_write+0x84>)
 800a8b0:	68fa      	ldr	r2, [r7, #12]
 800a8b2:	6113      	str	r3, [r2, #16]
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	e01e      	b.n	800a8f6 <pb_write+0x7a>

#ifdef PB_BUFFER_ONLY
        if (!buf_write(stream, buf, count))
            PB_RETURN_ERROR(stream, "io error");
#else        
        if (!stream->callback(stream, buf, count))
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	687a      	ldr	r2, [r7, #4]
 800a8be:	68b9      	ldr	r1, [r7, #8]
 800a8c0:	68f8      	ldr	r0, [r7, #12]
 800a8c2:	4798      	blx	r3
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	f083 0301 	eor.w	r3, r3, #1
 800a8ca:	b2db      	uxtb	r3, r3
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d00b      	beq.n	800a8e8 <pb_write+0x6c>
            PB_RETURN_ERROR(stream, "io error");
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	691b      	ldr	r3, [r3, #16]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d002      	beq.n	800a8de <pb_write+0x62>
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	691b      	ldr	r3, [r3, #16]
 800a8dc:	e000      	b.n	800a8e0 <pb_write+0x64>
 800a8de:	4b09      	ldr	r3, [pc, #36]	; (800a904 <pb_write+0x88>)
 800a8e0:	68fa      	ldr	r2, [r7, #12]
 800a8e2:	6113      	str	r3, [r2, #16]
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	e006      	b.n	800a8f6 <pb_write+0x7a>
#endif
    }
    
    stream->bytes_written += count;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	68da      	ldr	r2, [r3, #12]
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	441a      	add	r2, r3
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	60da      	str	r2, [r3, #12]
    return true;
 800a8f4:	2301      	movs	r3, #1
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	3710      	adds	r7, #16
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bd80      	pop	{r7, pc}
 800a8fe:	bf00      	nop
 800a900:	0800f128 	.word	0x0800f128
 800a904:	0800f134 	.word	0x0800f134

0800a908 <encode_array>:
 *************************/

/* Encode a static array. Handles the size calculations and possible packing. */
static bool checkreturn encode_array(pb_ostream_t *stream, const pb_field_t *field,
                         const void *pData, size_t count, pb_encoder_t func)
{
 800a908:	b590      	push	{r4, r7, lr}
 800a90a:	b08d      	sub	sp, #52	; 0x34
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	60f8      	str	r0, [r7, #12]
 800a910:	60b9      	str	r1, [r7, #8]
 800a912:	607a      	str	r2, [r7, #4]
 800a914:	603b      	str	r3, [r7, #0]
    size_t i;
    const void *p;
    size_t size;
    
    if (count == 0)
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d101      	bne.n	800a920 <encode_array+0x18>
        return true;
 800a91c:	2301      	movs	r3, #1
 800a91e:	e0fb      	b.n	800ab18 <encode_array+0x210>

    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
 800a920:	68bb      	ldr	r3, [r7, #8]
 800a922:	789b      	ldrb	r3, [r3, #2]
 800a924:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a928:	2b80      	cmp	r3, #128	; 0x80
 800a92a:	d013      	beq.n	800a954 <encode_array+0x4c>
 800a92c:	68bb      	ldr	r3, [r7, #8]
 800a92e:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800a932:	b29b      	uxth	r3, r3
 800a934:	461a      	mov	r2, r3
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	4293      	cmp	r3, r2
 800a93a:	d90b      	bls.n	800a954 <encode_array+0x4c>
        PB_RETURN_ERROR(stream, "array max size exceeded");
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	691b      	ldr	r3, [r3, #16]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d002      	beq.n	800a94a <encode_array+0x42>
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	691b      	ldr	r3, [r3, #16]
 800a948:	e000      	b.n	800a94c <encode_array+0x44>
 800a94a:	4b75      	ldr	r3, [pc, #468]	; (800ab20 <encode_array+0x218>)
 800a94c:	68fa      	ldr	r2, [r7, #12]
 800a94e:	6113      	str	r3, [r2, #16]
 800a950:	2300      	movs	r3, #0
 800a952:	e0e1      	b.n	800ab18 <encode_array+0x210>
    
    /* We always pack arrays if the datatype allows it. */
    if (PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 800a954:	68bb      	ldr	r3, [r7, #8]
 800a956:	789b      	ldrb	r3, [r3, #2]
 800a958:	f003 030f 	and.w	r3, r3, #15
 800a95c:	2b04      	cmp	r3, #4
 800a95e:	f300 808d 	bgt.w	800aa7c <encode_array+0x174>
    {
        if (!pb_encode_tag(stream, PB_WT_STRING, field->tag))
 800a962:	68bb      	ldr	r3, [r7, #8]
 800a964:	881b      	ldrh	r3, [r3, #0]
 800a966:	b29b      	uxth	r3, r3
 800a968:	461a      	mov	r2, r3
 800a96a:	2102      	movs	r1, #2
 800a96c:	68f8      	ldr	r0, [r7, #12]
 800a96e:	f000 fcb1 	bl	800b2d4 <pb_encode_tag>
 800a972:	4603      	mov	r3, r0
 800a974:	f083 0301 	eor.w	r3, r3, #1
 800a978:	b2db      	uxtb	r3, r3
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d001      	beq.n	800a982 <encode_array+0x7a>
            return false;
 800a97e:	2300      	movs	r3, #0
 800a980:	e0ca      	b.n	800ab18 <encode_array+0x210>
        
        /* Determine the total size of packed array. */
        if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32)
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	789b      	ldrb	r3, [r3, #2]
 800a986:	f003 030f 	and.w	r3, r3, #15
 800a98a:	2b03      	cmp	r3, #3
 800a98c:	d103      	bne.n	800a996 <encode_array+0x8e>
        {
            size = 4 * count;
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	009b      	lsls	r3, r3, #2
 800a992:	627b      	str	r3, [r7, #36]	; 0x24
 800a994:	e035      	b.n	800aa02 <encode_array+0xfa>
        }
        else if (PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	789b      	ldrb	r3, [r3, #2]
 800a99a:	f003 030f 	and.w	r3, r3, #15
 800a99e:	2b04      	cmp	r3, #4
 800a9a0:	d103      	bne.n	800a9aa <encode_array+0xa2>
        {
            size = 8 * count;
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	00db      	lsls	r3, r3, #3
 800a9a6:	627b      	str	r3, [r7, #36]	; 0x24
 800a9a8:	e02b      	b.n	800aa02 <encode_array+0xfa>
        }
        else
        { 
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
 800a9aa:	f107 0310 	add.w	r3, r7, #16
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	601a      	str	r2, [r3, #0]
 800a9b2:	605a      	str	r2, [r3, #4]
 800a9b4:	609a      	str	r2, [r3, #8]
 800a9b6:	60da      	str	r2, [r3, #12]
 800a9b8:	611a      	str	r2, [r3, #16]
            p = pData;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	62bb      	str	r3, [r7, #40]	; 0x28
            for (i = 0; i < count; i++)
 800a9be:	2300      	movs	r3, #0
 800a9c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a9c2:	e018      	b.n	800a9f6 <encode_array+0xee>
            {
                if (!func(&sizestream, field, p))
 800a9c4:	f107 0010 	add.w	r0, r7, #16
 800a9c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a9ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a9cc:	68b9      	ldr	r1, [r7, #8]
 800a9ce:	4798      	blx	r3
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	f083 0301 	eor.w	r3, r3, #1
 800a9d6:	b2db      	uxtb	r3, r3
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d001      	beq.n	800a9e0 <encode_array+0xd8>
                    return false;
 800a9dc:	2300      	movs	r3, #0
 800a9de:	e09b      	b.n	800ab18 <encode_array+0x210>
                p = (const char*)p + field->data_size;
 800a9e0:	68bb      	ldr	r3, [r7, #8]
 800a9e2:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800a9e6:	b29b      	uxth	r3, r3
 800a9e8:	461a      	mov	r2, r3
 800a9ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ec:	4413      	add	r3, r2
 800a9ee:	62bb      	str	r3, [r7, #40]	; 0x28
            for (i = 0; i < count; i++)
 800a9f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9f2:	3301      	adds	r3, #1
 800a9f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a9f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	429a      	cmp	r2, r3
 800a9fc:	d3e2      	bcc.n	800a9c4 <encode_array+0xbc>
            }
            size = sizestream.bytes_written;
 800a9fe:	69fb      	ldr	r3, [r7, #28]
 800aa00:	627b      	str	r3, [r7, #36]	; 0x24
        }
        
        if (!pb_encode_varint(stream, (pb_uint64_t)size))
 800aa02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa04:	f04f 0400 	mov.w	r4, #0
 800aa08:	461a      	mov	r2, r3
 800aa0a:	4623      	mov	r3, r4
 800aa0c:	68f8      	ldr	r0, [r7, #12]
 800aa0e:	f000 fb5c 	bl	800b0ca <pb_encode_varint>
 800aa12:	4603      	mov	r3, r0
 800aa14:	f083 0301 	eor.w	r3, r3, #1
 800aa18:	b2db      	uxtb	r3, r3
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d001      	beq.n	800aa22 <encode_array+0x11a>
            return false;
 800aa1e:	2300      	movs	r3, #0
 800aa20:	e07a      	b.n	800ab18 <encode_array+0x210>
        
        if (stream->callback == NULL)
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d106      	bne.n	800aa38 <encode_array+0x130>
            return pb_write(stream, NULL, size); /* Just sizing.. */
 800aa2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa2c:	2100      	movs	r1, #0
 800aa2e:	68f8      	ldr	r0, [r7, #12]
 800aa30:	f7ff ff24 	bl	800a87c <pb_write>
 800aa34:	4603      	mov	r3, r0
 800aa36:	e06f      	b.n	800ab18 <encode_array+0x210>
        
        /* Write the data */
        p = pData;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	62bb      	str	r3, [r7, #40]	; 0x28
        for (i = 0; i < count; i++)
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa40:	e017      	b.n	800aa72 <encode_array+0x16a>
        {
            if (!func(stream, field, p))
 800aa42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa46:	68b9      	ldr	r1, [r7, #8]
 800aa48:	68f8      	ldr	r0, [r7, #12]
 800aa4a:	4798      	blx	r3
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	f083 0301 	eor.w	r3, r3, #1
 800aa52:	b2db      	uxtb	r3, r3
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d001      	beq.n	800aa5c <encode_array+0x154>
                return false;
 800aa58:	2300      	movs	r3, #0
 800aa5a:	e05d      	b.n	800ab18 <encode_array+0x210>
            p = (const char*)p + field->data_size;
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800aa62:	b29b      	uxth	r3, r3
 800aa64:	461a      	mov	r2, r3
 800aa66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa68:	4413      	add	r3, r2
 800aa6a:	62bb      	str	r3, [r7, #40]	; 0x28
        for (i = 0; i < count; i++)
 800aa6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa6e:	3301      	adds	r3, #1
 800aa70:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	429a      	cmp	r2, r3
 800aa78:	d3e3      	bcc.n	800aa42 <encode_array+0x13a>
 800aa7a:	e04c      	b.n	800ab16 <encode_array+0x20e>
        }
    }
    else
    {
        p = pData;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	62bb      	str	r3, [r7, #40]	; 0x28
        for (i = 0; i < count; i++)
 800aa80:	2300      	movs	r3, #0
 800aa82:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa84:	e043      	b.n	800ab0e <encode_array+0x206>
        {
            if (!pb_encode_tag_for_field(stream, field))
 800aa86:	68b9      	ldr	r1, [r7, #8]
 800aa88:	68f8      	ldr	r0, [r7, #12]
 800aa8a:	f000 fc47 	bl	800b31c <pb_encode_tag_for_field>
 800aa8e:	4603      	mov	r3, r0
 800aa90:	f083 0301 	eor.w	r3, r3, #1
 800aa94:	b2db      	uxtb	r3, r3
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d001      	beq.n	800aa9e <encode_array+0x196>
                return false;
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	e03c      	b.n	800ab18 <encode_array+0x210>

            /* Normally the data is stored directly in the array entries, but
             * for pointer-type string and bytes fields, the array entries are
             * actually pointers themselves also. So we have to dereference once
             * more to get to the actual data. */
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 800aa9e:	68bb      	ldr	r3, [r7, #8]
 800aaa0:	789b      	ldrb	r3, [r3, #2]
 800aaa2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800aaa6:	2b80      	cmp	r3, #128	; 0x80
 800aaa8:	d119      	bne.n	800aade <encode_array+0x1d6>
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	789b      	ldrb	r3, [r3, #2]
 800aaae:	f003 030f 	and.w	r3, r3, #15
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 800aab2:	2b06      	cmp	r3, #6
 800aab4:	d005      	beq.n	800aac2 <encode_array+0x1ba>
                 PB_LTYPE(field->type) == PB_LTYPE_BYTES))
 800aab6:	68bb      	ldr	r3, [r7, #8]
 800aab8:	789b      	ldrb	r3, [r3, #2]
 800aaba:	f003 030f 	and.w	r3, r3, #15
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 800aabe:	2b05      	cmp	r3, #5
 800aac0:	d10d      	bne.n	800aade <encode_array+0x1d6>
            {
                if (!func(stream, field, *(const void* const*)p))
 800aac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aac4:	681a      	ldr	r2, [r3, #0]
 800aac6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aac8:	68b9      	ldr	r1, [r7, #8]
 800aaca:	68f8      	ldr	r0, [r7, #12]
 800aacc:	4798      	blx	r3
 800aace:	4603      	mov	r3, r0
 800aad0:	f083 0301 	eor.w	r3, r3, #1
 800aad4:	b2db      	uxtb	r3, r3
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d00e      	beq.n	800aaf8 <encode_array+0x1f0>
                    return false;
 800aada:	2300      	movs	r3, #0
 800aadc:	e01c      	b.n	800ab18 <encode_array+0x210>
            }
            else
            {
                if (!func(stream, field, p))
 800aade:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aae0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aae2:	68b9      	ldr	r1, [r7, #8]
 800aae4:	68f8      	ldr	r0, [r7, #12]
 800aae6:	4798      	blx	r3
 800aae8:	4603      	mov	r3, r0
 800aaea:	f083 0301 	eor.w	r3, r3, #1
 800aaee:	b2db      	uxtb	r3, r3
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d001      	beq.n	800aaf8 <encode_array+0x1f0>
                    return false;
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	e00f      	b.n	800ab18 <encode_array+0x210>
            }
            p = (const char*)p + field->data_size;
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800aafe:	b29b      	uxth	r3, r3
 800ab00:	461a      	mov	r2, r3
 800ab02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab04:	4413      	add	r3, r2
 800ab06:	62bb      	str	r3, [r7, #40]	; 0x28
        for (i = 0; i < count; i++)
 800ab08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab0a:	3301      	adds	r3, #1
 800ab0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	429a      	cmp	r2, r3
 800ab14:	d3b7      	bcc.n	800aa86 <encode_array+0x17e>
        }
    }
    
    return true;
 800ab16:	2301      	movs	r3, #1
}
 800ab18:	4618      	mov	r0, r3
 800ab1a:	3734      	adds	r7, #52	; 0x34
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	bd90      	pop	{r4, r7, pc}
 800ab20:	0800f140 	.word	0x0800f140

0800ab24 <pb_check_proto3_default_value>:

/* In proto3, all fields are optional and are only encoded if their value is "non-zero".
 * This function implements the check for the zero value. */
static bool pb_check_proto3_default_value(const pb_field_t *field, const void *pData)
{
 800ab24:	b590      	push	{r4, r7, lr}
 800ab26:	b08d      	sub	sp, #52	; 0x34
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
 800ab2c:	6039      	str	r1, [r7, #0]
    pb_type_t type = field->type;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	789b      	ldrb	r3, [r3, #2]
 800ab32:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    const void *pSize = (const char*)pData + field->size_offset;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 800ab3c:	b21b      	sxth	r3, r3
 800ab3e:	461a      	mov	r2, r3
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	4413      	add	r3, r2
 800ab44:	62bb      	str	r3, [r7, #40]	; 0x28

    if (PB_HTYPE(type) == PB_HTYPE_REQUIRED)
 800ab46:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800ab4a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d101      	bne.n	800ab56 <pb_check_proto3_default_value+0x32>
    {
        /* Required proto2 fields inside proto3 submessage, pretty rare case */
        return false;
 800ab52:	2300      	movs	r3, #0
 800ab54:	e0af      	b.n	800acb6 <pb_check_proto3_default_value+0x192>
    }
    else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
 800ab56:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800ab5a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ab5e:	2b20      	cmp	r3, #32
 800ab60:	d107      	bne.n	800ab72 <pb_check_proto3_default_value+0x4e>
    {
        /* Repeated fields inside proto3 submessage: present if count != 0 */
        return *(const pb_size_t*)pSize == 0;
 800ab62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab64:	881b      	ldrh	r3, [r3, #0]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	bf0c      	ite	eq
 800ab6a:	2301      	moveq	r3, #1
 800ab6c:	2300      	movne	r3, #0
 800ab6e:	b2db      	uxtb	r3, r3
 800ab70:	e0a1      	b.n	800acb6 <pb_check_proto3_default_value+0x192>
    }
    else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
 800ab72:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800ab76:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ab7a:	2b30      	cmp	r3, #48	; 0x30
 800ab7c:	d107      	bne.n	800ab8e <pb_check_proto3_default_value+0x6a>
    {
        /* Oneof fields */
        return *(const pb_size_t*)pSize == 0;
 800ab7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab80:	881b      	ldrh	r3, [r3, #0]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	bf0c      	ite	eq
 800ab86:	2301      	moveq	r3, #1
 800ab88:	2300      	movne	r3, #0
 800ab8a:	b2db      	uxtb	r3, r3
 800ab8c:	e093      	b.n	800acb6 <pb_check_proto3_default_value+0x192>
    }
    else if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->size_offset)
 800ab8e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800ab92:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ab96:	2b10      	cmp	r3, #16
 800ab98:	d113      	bne.n	800abc2 <pb_check_proto3_default_value+0x9e>
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 800aba0:	b21b      	sxth	r3, r3
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d00d      	beq.n	800abc2 <pb_check_proto3_default_value+0x9e>
    {
        /* Proto2 optional fields inside proto3 submessage */
        return *(const bool*)pSize == false;
 800aba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aba8:	781b      	ldrb	r3, [r3, #0]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	bf14      	ite	ne
 800abae:	2301      	movne	r3, #1
 800abb0:	2300      	moveq	r3, #0
 800abb2:	b2db      	uxtb	r3, r3
 800abb4:	f083 0301 	eor.w	r3, r3, #1
 800abb8:	b2db      	uxtb	r3, r3
 800abba:	f003 0301 	and.w	r3, r3, #1
 800abbe:	b2db      	uxtb	r3, r3
 800abc0:	e079      	b.n	800acb6 <pb_check_proto3_default_value+0x192>
    }

    /* Rest is proto3 singular fields */

    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 800abc2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800abc6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d15b      	bne.n	800ac86 <pb_check_proto3_default_value+0x162>
    {
        if (PB_LTYPE(type) == PB_LTYPE_BYTES)
 800abce:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800abd2:	f003 030f 	and.w	r3, r3, #15
 800abd6:	2b05      	cmp	r3, #5
 800abd8:	d109      	bne.n	800abee <pb_check_proto3_default_value+0xca>
        {
            const pb_bytes_array_t *bytes = (const pb_bytes_array_t*)pData;
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	627b      	str	r3, [r7, #36]	; 0x24
            return bytes->size == 0;
 800abde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abe0:	881b      	ldrh	r3, [r3, #0]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	bf0c      	ite	eq
 800abe6:	2301      	moveq	r3, #1
 800abe8:	2300      	movne	r3, #0
 800abea:	b2db      	uxtb	r3, r3
 800abec:	e063      	b.n	800acb6 <pb_check_proto3_default_value+0x192>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_STRING)
 800abee:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800abf2:	f003 030f 	and.w	r3, r3, #15
 800abf6:	2b06      	cmp	r3, #6
 800abf8:	d107      	bne.n	800ac0a <pb_check_proto3_default_value+0xe6>
        {
            return *(const char*)pData == '\0';
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	781b      	ldrb	r3, [r3, #0]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	bf0c      	ite	eq
 800ac02:	2301      	moveq	r3, #1
 800ac04:	2300      	movne	r3, #0
 800ac06:	b2db      	uxtb	r3, r3
 800ac08:	e055      	b.n	800acb6 <pb_check_proto3_default_value+0x192>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_FIXED_LENGTH_BYTES)
 800ac0a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800ac0e:	f003 030f 	and.w	r3, r3, #15
 800ac12:	2b09      	cmp	r3, #9
 800ac14:	d109      	bne.n	800ac2a <pb_check_proto3_default_value+0x106>
        {
            /* Fixed length bytes is only empty if its length is fixed
             * as 0. Which would be pretty strange, but we can check
             * it anyway. */
            return field->data_size == 0;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800ac1c:	b29b      	uxth	r3, r3
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	bf0c      	ite	eq
 800ac22:	2301      	moveq	r3, #1
 800ac24:	2300      	movne	r3, #0
 800ac26:	b2db      	uxtb	r3, r3
 800ac28:	e045      	b.n	800acb6 <pb_check_proto3_default_value+0x192>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_SUBMESSAGE)
 800ac2a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800ac2e:	f003 030f 	and.w	r3, r3, #15
 800ac32:	2b07      	cmp	r3, #7
 800ac34:	d127      	bne.n	800ac86 <pb_check_proto3_default_value+0x162>
             * are non-zero. The comparison cannot be done byte-per-byte
             * because the C struct may contain padding bytes that must
             * be skipped.
             */
            pb_field_iter_t iter;
            if (pb_field_iter_begin(&iter, (const pb_field_t*)field->ptr, pb_const_cast(pData)))
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	f8d3 400b 	ldr.w	r4, [r3, #11]
 800ac3c:	6838      	ldr	r0, [r7, #0]
 800ac3e:	f000 f9f0 	bl	800b022 <pb_const_cast>
 800ac42:	4602      	mov	r2, r0
 800ac44:	f107 0308 	add.w	r3, r7, #8
 800ac48:	4621      	mov	r1, r4
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f7fe f878 	bl	8008d40 <pb_field_iter_begin>
 800ac50:	4603      	mov	r3, r0
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d015      	beq.n	800ac82 <pb_check_proto3_default_value+0x15e>
            {
                do
                {
                    if (!pb_check_proto3_default_value(iter.pos, iter.pData))
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	69ba      	ldr	r2, [r7, #24]
 800ac5a:	4611      	mov	r1, r2
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	f7ff ff61 	bl	800ab24 <pb_check_proto3_default_value>
 800ac62:	4603      	mov	r3, r0
 800ac64:	f083 0301 	eor.w	r3, r3, #1
 800ac68:	b2db      	uxtb	r3, r3
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d001      	beq.n	800ac72 <pb_check_proto3_default_value+0x14e>
                    {
                        return false;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	e021      	b.n	800acb6 <pb_check_proto3_default_value+0x192>
                    }
                } while (pb_field_iter_next(&iter));
 800ac72:	f107 0308 	add.w	r3, r7, #8
 800ac76:	4618      	mov	r0, r3
 800ac78:	f7fe f897 	bl	8008daa <pb_field_iter_next>
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d1e9      	bne.n	800ac56 <pb_check_proto3_default_value+0x132>
            }
            return true;
 800ac82:	2301      	movs	r3, #1
 800ac84:	e017      	b.n	800acb6 <pb_check_proto3_default_value+0x192>
	     * UVARINT, SVARINT, FIXED32, FIXED64, EXTENSION fields, and also
	     * callback fields. These all have integer or pointer value which
	     * can be compared with 0.
	     */
	    pb_size_t i;
	    const char *p = (const char*)pData;
 800ac86:	683b      	ldr	r3, [r7, #0]
 800ac88:	623b      	str	r3, [r7, #32]
	    for (i = 0; i < field->data_size; i++)
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800ac8e:	e00a      	b.n	800aca6 <pb_check_proto3_default_value+0x182>
	    {
	        if (p[i] != 0)
 800ac90:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ac92:	6a3a      	ldr	r2, [r7, #32]
 800ac94:	4413      	add	r3, r2
 800ac96:	781b      	ldrb	r3, [r3, #0]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d001      	beq.n	800aca0 <pb_check_proto3_default_value+0x17c>
	        {
	            return false;
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	e00a      	b.n	800acb6 <pb_check_proto3_default_value+0x192>
	    for (i = 0; i < field->data_size; i++)
 800aca0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800aca2:	3301      	adds	r3, #1
 800aca4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800acac:	b29b      	uxth	r3, r3
 800acae:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800acb0:	429a      	cmp	r2, r3
 800acb2:	d3ed      	bcc.n	800ac90 <pb_check_proto3_default_value+0x16c>
	        }
	    }

	    return true;
 800acb4:	2301      	movs	r3, #1
	}
}
 800acb6:	4618      	mov	r0, r3
 800acb8:	3734      	adds	r7, #52	; 0x34
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd90      	pop	{r4, r7, pc}
	...

0800acc0 <encode_basic_field>:

/* Encode a field with static or pointer allocation, i.e. one whose data
 * is available to the encoder directly. */
static bool checkreturn encode_basic_field(pb_ostream_t *stream,
    const pb_field_t *field, const void *pData)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b08a      	sub	sp, #40	; 0x28
 800acc4:	af02      	add	r7, sp, #8
 800acc6:	60f8      	str	r0, [r7, #12]
 800acc8:	60b9      	str	r1, [r7, #8]
 800acca:	607a      	str	r2, [r7, #4]
    pb_encoder_t func;
    bool implicit_has;
    const void *pSize = &implicit_has;
 800accc:	f107 0313 	add.w	r3, r7, #19
 800acd0:	61fb      	str	r3, [r7, #28]
    
    func = PB_ENCODERS[PB_LTYPE(field->type)];
 800acd2:	68bb      	ldr	r3, [r7, #8]
 800acd4:	789b      	ldrb	r3, [r3, #2]
 800acd6:	f003 030f 	and.w	r3, r3, #15
 800acda:	4a75      	ldr	r2, [pc, #468]	; (800aeb0 <encode_basic_field+0x1f0>)
 800acdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ace0:	617b      	str	r3, [r7, #20]
    
    if (field->size_offset)
 800ace2:	68bb      	ldr	r3, [r7, #8]
 800ace4:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 800ace8:	b21b      	sxth	r3, r3
 800acea:	2b00      	cmp	r3, #0
 800acec:	d008      	beq.n	800ad00 <encode_basic_field+0x40>
    {
        /* Static optional, repeated or oneof field */
        pSize = (const char*)pData + field->size_offset;
 800acee:	68bb      	ldr	r3, [r7, #8]
 800acf0:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 800acf4:	b21b      	sxth	r3, r3
 800acf6:	461a      	mov	r2, r3
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	4413      	add	r3, r2
 800acfc:	61fb      	str	r3, [r7, #28]
 800acfe:	e019      	b.n	800ad34 <encode_basic_field+0x74>
    }
    else if (PB_HTYPE(field->type) == PB_HTYPE_OPTIONAL)
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	789b      	ldrb	r3, [r3, #2]
 800ad04:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ad08:	2b10      	cmp	r3, #16
 800ad0a:	d111      	bne.n	800ad30 <encode_basic_field+0x70>
    {
        /* Proto3 style field, optional but without explicit has_ field. */
        implicit_has = !pb_check_proto3_default_value(field, pData);
 800ad0c:	6879      	ldr	r1, [r7, #4]
 800ad0e:	68b8      	ldr	r0, [r7, #8]
 800ad10:	f7ff ff08 	bl	800ab24 <pb_check_proto3_default_value>
 800ad14:	4603      	mov	r3, r0
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	bf14      	ite	ne
 800ad1a:	2301      	movne	r3, #1
 800ad1c:	2300      	moveq	r3, #0
 800ad1e:	b2db      	uxtb	r3, r3
 800ad20:	f083 0301 	eor.w	r3, r3, #1
 800ad24:	b2db      	uxtb	r3, r3
 800ad26:	f003 0301 	and.w	r3, r3, #1
 800ad2a:	b2db      	uxtb	r3, r3
 800ad2c:	74fb      	strb	r3, [r7, #19]
 800ad2e:	e001      	b.n	800ad34 <encode_basic_field+0x74>
    }
    else
    {
        /* Required field, always present */
        implicit_has = true;
 800ad30:	2301      	movs	r3, #1
 800ad32:	74fb      	strb	r3, [r7, #19]
    }

    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	789b      	ldrb	r3, [r3, #2]
 800ad38:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ad3c:	2b80      	cmp	r3, #128	; 0x80
 800ad3e:	d109      	bne.n	800ad54 <encode_basic_field+0x94>
    {
        /* pData is a pointer to the field, which contains pointer to
         * the data. If the 2nd pointer is NULL, it is interpreted as if
         * the has_field was false.
         */
        pData = *(const void* const*)pData;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	607b      	str	r3, [r7, #4]
        implicit_has = (pData != NULL);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	bf14      	ite	ne
 800ad4c:	2301      	movne	r3, #1
 800ad4e:	2300      	moveq	r3, #0
 800ad50:	b2db      	uxtb	r3, r3
 800ad52:	74fb      	strb	r3, [r7, #19]
    }

    switch (PB_HTYPE(field->type))
 800ad54:	68bb      	ldr	r3, [r7, #8]
 800ad56:	789b      	ldrb	r3, [r3, #2]
 800ad58:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ad5c:	2b10      	cmp	r3, #16
 800ad5e:	d031      	beq.n	800adc4 <encode_basic_field+0x104>
 800ad60:	2b10      	cmp	r3, #16
 800ad62:	dc02      	bgt.n	800ad6a <encode_basic_field+0xaa>
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d005      	beq.n	800ad74 <encode_basic_field+0xb4>
 800ad68:	e08a      	b.n	800ae80 <encode_basic_field+0x1c0>
 800ad6a:	2b20      	cmp	r3, #32
 800ad6c:	d047      	beq.n	800adfe <encode_basic_field+0x13e>
 800ad6e:	2b30      	cmp	r3, #48	; 0x30
 800ad70:	d066      	beq.n	800ae40 <encode_basic_field+0x180>
 800ad72:	e085      	b.n	800ae80 <encode_basic_field+0x1c0>
    {
        case PB_HTYPE_REQUIRED:
            if (!pData)
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d10b      	bne.n	800ad92 <encode_basic_field+0xd2>
                PB_RETURN_ERROR(stream, "missing required field");
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	691b      	ldr	r3, [r3, #16]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d002      	beq.n	800ad88 <encode_basic_field+0xc8>
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	691b      	ldr	r3, [r3, #16]
 800ad86:	e000      	b.n	800ad8a <encode_basic_field+0xca>
 800ad88:	4b4a      	ldr	r3, [pc, #296]	; (800aeb4 <encode_basic_field+0x1f4>)
 800ad8a:	68fa      	ldr	r2, [r7, #12]
 800ad8c:	6113      	str	r3, [r2, #16]
 800ad8e:	2300      	movs	r3, #0
 800ad90:	e08a      	b.n	800aea8 <encode_basic_field+0x1e8>
            if (!pb_encode_tag_for_field(stream, field))
 800ad92:	68b9      	ldr	r1, [r7, #8]
 800ad94:	68f8      	ldr	r0, [r7, #12]
 800ad96:	f000 fac1 	bl	800b31c <pb_encode_tag_for_field>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	f083 0301 	eor.w	r3, r3, #1
 800ada0:	b2db      	uxtb	r3, r3
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d001      	beq.n	800adaa <encode_basic_field+0xea>
                return false;
 800ada6:	2300      	movs	r3, #0
 800ada8:	e07e      	b.n	800aea8 <encode_basic_field+0x1e8>
            if (!func(stream, field, pData))
 800adaa:	697b      	ldr	r3, [r7, #20]
 800adac:	687a      	ldr	r2, [r7, #4]
 800adae:	68b9      	ldr	r1, [r7, #8]
 800adb0:	68f8      	ldr	r0, [r7, #12]
 800adb2:	4798      	blx	r3
 800adb4:	4603      	mov	r3, r0
 800adb6:	f083 0301 	eor.w	r3, r3, #1
 800adba:	b2db      	uxtb	r3, r3
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d06b      	beq.n	800ae98 <encode_basic_field+0x1d8>
                return false;
 800adc0:	2300      	movs	r3, #0
 800adc2:	e071      	b.n	800aea8 <encode_basic_field+0x1e8>
            break;
        
        case PB_HTYPE_OPTIONAL:
            if (*(const bool*)pSize)
 800adc4:	69fb      	ldr	r3, [r7, #28]
 800adc6:	781b      	ldrb	r3, [r3, #0]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d067      	beq.n	800ae9c <encode_basic_field+0x1dc>
            {
                if (!pb_encode_tag_for_field(stream, field))
 800adcc:	68b9      	ldr	r1, [r7, #8]
 800adce:	68f8      	ldr	r0, [r7, #12]
 800add0:	f000 faa4 	bl	800b31c <pb_encode_tag_for_field>
 800add4:	4603      	mov	r3, r0
 800add6:	f083 0301 	eor.w	r3, r3, #1
 800adda:	b2db      	uxtb	r3, r3
 800addc:	2b00      	cmp	r3, #0
 800adde:	d001      	beq.n	800ade4 <encode_basic_field+0x124>
                    return false;
 800ade0:	2300      	movs	r3, #0
 800ade2:	e061      	b.n	800aea8 <encode_basic_field+0x1e8>
            
                if (!func(stream, field, pData))
 800ade4:	697b      	ldr	r3, [r7, #20]
 800ade6:	687a      	ldr	r2, [r7, #4]
 800ade8:	68b9      	ldr	r1, [r7, #8]
 800adea:	68f8      	ldr	r0, [r7, #12]
 800adec:	4798      	blx	r3
 800adee:	4603      	mov	r3, r0
 800adf0:	f083 0301 	eor.w	r3, r3, #1
 800adf4:	b2db      	uxtb	r3, r3
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d050      	beq.n	800ae9c <encode_basic_field+0x1dc>
                    return false;
 800adfa:	2300      	movs	r3, #0
 800adfc:	e054      	b.n	800aea8 <encode_basic_field+0x1e8>
            }
            break;
        
        case PB_HTYPE_REPEATED: {
            pb_size_t count;
            if (field->size_offset != 0) {
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 800ae04:	b21b      	sxth	r3, r3
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d003      	beq.n	800ae12 <encode_basic_field+0x152>
                count = *(const pb_size_t*)pSize;
 800ae0a:	69fb      	ldr	r3, [r7, #28]
 800ae0c:	881b      	ldrh	r3, [r3, #0]
 800ae0e:	837b      	strh	r3, [r7, #26]
 800ae10:	e005      	b.n	800ae1e <encode_basic_field+0x15e>
            } else {
                count = field->array_size;
 800ae12:	68bb      	ldr	r3, [r7, #8]
 800ae14:	7a5a      	ldrb	r2, [r3, #9]
 800ae16:	7a9b      	ldrb	r3, [r3, #10]
 800ae18:	021b      	lsls	r3, r3, #8
 800ae1a:	4313      	orrs	r3, r2
 800ae1c:	837b      	strh	r3, [r7, #26]
            }
            if (!encode_array(stream, field, pData, count, func))
 800ae1e:	8b7a      	ldrh	r2, [r7, #26]
 800ae20:	697b      	ldr	r3, [r7, #20]
 800ae22:	9300      	str	r3, [sp, #0]
 800ae24:	4613      	mov	r3, r2
 800ae26:	687a      	ldr	r2, [r7, #4]
 800ae28:	68b9      	ldr	r1, [r7, #8]
 800ae2a:	68f8      	ldr	r0, [r7, #12]
 800ae2c:	f7ff fd6c 	bl	800a908 <encode_array>
 800ae30:	4603      	mov	r3, r0
 800ae32:	f083 0301 	eor.w	r3, r3, #1
 800ae36:	b2db      	uxtb	r3, r3
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d031      	beq.n	800aea0 <encode_basic_field+0x1e0>
                return false;
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	e033      	b.n	800aea8 <encode_basic_field+0x1e8>
            break;
        }
        
        case PB_HTYPE_ONEOF:
            if (*(const pb_size_t*)pSize == field->tag)
 800ae40:	69fb      	ldr	r3, [r7, #28]
 800ae42:	881a      	ldrh	r2, [r3, #0]
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	881b      	ldrh	r3, [r3, #0]
 800ae48:	b29b      	uxth	r3, r3
 800ae4a:	429a      	cmp	r2, r3
 800ae4c:	d12a      	bne.n	800aea4 <encode_basic_field+0x1e4>
            {
                if (!pb_encode_tag_for_field(stream, field))
 800ae4e:	68b9      	ldr	r1, [r7, #8]
 800ae50:	68f8      	ldr	r0, [r7, #12]
 800ae52:	f000 fa63 	bl	800b31c <pb_encode_tag_for_field>
 800ae56:	4603      	mov	r3, r0
 800ae58:	f083 0301 	eor.w	r3, r3, #1
 800ae5c:	b2db      	uxtb	r3, r3
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d001      	beq.n	800ae66 <encode_basic_field+0x1a6>
                    return false;
 800ae62:	2300      	movs	r3, #0
 800ae64:	e020      	b.n	800aea8 <encode_basic_field+0x1e8>

                if (!func(stream, field, pData))
 800ae66:	697b      	ldr	r3, [r7, #20]
 800ae68:	687a      	ldr	r2, [r7, #4]
 800ae6a:	68b9      	ldr	r1, [r7, #8]
 800ae6c:	68f8      	ldr	r0, [r7, #12]
 800ae6e:	4798      	blx	r3
 800ae70:	4603      	mov	r3, r0
 800ae72:	f083 0301 	eor.w	r3, r3, #1
 800ae76:	b2db      	uxtb	r3, r3
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d013      	beq.n	800aea4 <encode_basic_field+0x1e4>
                    return false;
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	e013      	b.n	800aea8 <encode_basic_field+0x1e8>
            }
            break;
            
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	691b      	ldr	r3, [r3, #16]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d002      	beq.n	800ae8e <encode_basic_field+0x1ce>
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	691b      	ldr	r3, [r3, #16]
 800ae8c:	e000      	b.n	800ae90 <encode_basic_field+0x1d0>
 800ae8e:	4b0a      	ldr	r3, [pc, #40]	; (800aeb8 <encode_basic_field+0x1f8>)
 800ae90:	68fa      	ldr	r2, [r7, #12]
 800ae92:	6113      	str	r3, [r2, #16]
 800ae94:	2300      	movs	r3, #0
 800ae96:	e007      	b.n	800aea8 <encode_basic_field+0x1e8>
            break;
 800ae98:	bf00      	nop
 800ae9a:	e004      	b.n	800aea6 <encode_basic_field+0x1e6>
            break;
 800ae9c:	bf00      	nop
 800ae9e:	e002      	b.n	800aea6 <encode_basic_field+0x1e6>
            break;
 800aea0:	bf00      	nop
 800aea2:	e000      	b.n	800aea6 <encode_basic_field+0x1e6>
            break;
 800aea4:	bf00      	nop
    }
    
    return true;
 800aea6:	2301      	movs	r3, #1
}
 800aea8:	4618      	mov	r0, r3
 800aeaa:	3720      	adds	r7, #32
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}
 800aeb0:	0800f324 	.word	0x0800f324
 800aeb4:	0800f158 	.word	0x0800f158
 800aeb8:	0800f170 	.word	0x0800f170

0800aebc <encode_callback_field>:

/* Encode a field with callback semantics. This means that a user function is
 * called to provide and encode the actual data. */
static bool checkreturn encode_callback_field(pb_ostream_t *stream,
    const pb_field_t *field, const void *pData)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b086      	sub	sp, #24
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	60f8      	str	r0, [r7, #12]
 800aec4:	60b9      	str	r1, [r7, #8]
 800aec6:	607a      	str	r2, [r7, #4]
    const pb_callback_t *callback = (const pb_callback_t*)pData;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	617b      	str	r3, [r7, #20]
    
#ifdef PB_OLD_CALLBACK_STYLE
    const void *arg = callback->arg;
#else
    void * const *arg = &(callback->arg);
 800aecc:	697b      	ldr	r3, [r7, #20]
 800aece:	3304      	adds	r3, #4
 800aed0:	613b      	str	r3, [r7, #16]
#endif    
    
    if (callback->funcs.encode != NULL)
 800aed2:	697b      	ldr	r3, [r7, #20]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d017      	beq.n	800af0a <encode_callback_field+0x4e>
    {
        if (!callback->funcs.encode(stream, field, arg))
 800aeda:	697b      	ldr	r3, [r7, #20]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	693a      	ldr	r2, [r7, #16]
 800aee0:	68b9      	ldr	r1, [r7, #8]
 800aee2:	68f8      	ldr	r0, [r7, #12]
 800aee4:	4798      	blx	r3
 800aee6:	4603      	mov	r3, r0
 800aee8:	f083 0301 	eor.w	r3, r3, #1
 800aeec:	b2db      	uxtb	r3, r3
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d00b      	beq.n	800af0a <encode_callback_field+0x4e>
            PB_RETURN_ERROR(stream, "callback error");
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	691b      	ldr	r3, [r3, #16]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d002      	beq.n	800af00 <encode_callback_field+0x44>
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	691b      	ldr	r3, [r3, #16]
 800aefe:	e000      	b.n	800af02 <encode_callback_field+0x46>
 800af00:	4b04      	ldr	r3, [pc, #16]	; (800af14 <encode_callback_field+0x58>)
 800af02:	68fa      	ldr	r2, [r7, #12]
 800af04:	6113      	str	r3, [r2, #16]
 800af06:	2300      	movs	r3, #0
 800af08:	e000      	b.n	800af0c <encode_callback_field+0x50>
    }
    return true;
 800af0a:	2301      	movs	r3, #1
}
 800af0c:	4618      	mov	r0, r3
 800af0e:	3718      	adds	r7, #24
 800af10:	46bd      	mov	sp, r7
 800af12:	bd80      	pop	{r7, pc}
 800af14:	0800f184 	.word	0x0800f184

0800af18 <encode_field>:

/* Encode a single field of any callback or static type. */
static bool checkreturn encode_field(pb_ostream_t *stream,
    const pb_field_t *field, const void *pData)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b084      	sub	sp, #16
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	60f8      	str	r0, [r7, #12]
 800af20:	60b9      	str	r1, [r7, #8]
 800af22:	607a      	str	r2, [r7, #4]
    switch (PB_ATYPE(field->type))
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	789b      	ldrb	r3, [r3, #2]
 800af28:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800af2c:	2b40      	cmp	r3, #64	; 0x40
 800af2e:	d00a      	beq.n	800af46 <encode_field+0x2e>
 800af30:	2b80      	cmp	r3, #128	; 0x80
 800af32:	d001      	beq.n	800af38 <encode_field+0x20>
 800af34:	2b00      	cmp	r3, #0
 800af36:	d10d      	bne.n	800af54 <encode_field+0x3c>
    {
        case PB_ATYPE_STATIC:
        case PB_ATYPE_POINTER:
            return encode_basic_field(stream, field, pData);
 800af38:	687a      	ldr	r2, [r7, #4]
 800af3a:	68b9      	ldr	r1, [r7, #8]
 800af3c:	68f8      	ldr	r0, [r7, #12]
 800af3e:	f7ff febf 	bl	800acc0 <encode_basic_field>
 800af42:	4603      	mov	r3, r0
 800af44:	e011      	b.n	800af6a <encode_field+0x52>
        
        case PB_ATYPE_CALLBACK:
            return encode_callback_field(stream, field, pData);
 800af46:	687a      	ldr	r2, [r7, #4]
 800af48:	68b9      	ldr	r1, [r7, #8]
 800af4a:	68f8      	ldr	r0, [r7, #12]
 800af4c:	f7ff ffb6 	bl	800aebc <encode_callback_field>
 800af50:	4603      	mov	r3, r0
 800af52:	e00a      	b.n	800af6a <encode_field+0x52>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	691b      	ldr	r3, [r3, #16]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d002      	beq.n	800af62 <encode_field+0x4a>
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	691b      	ldr	r3, [r3, #16]
 800af60:	e000      	b.n	800af64 <encode_field+0x4c>
 800af62:	4b04      	ldr	r3, [pc, #16]	; (800af74 <encode_field+0x5c>)
 800af64:	68fa      	ldr	r2, [r7, #12]
 800af66:	6113      	str	r3, [r2, #16]
 800af68:	2300      	movs	r3, #0
    }
}
 800af6a:	4618      	mov	r0, r3
 800af6c:	3710      	adds	r7, #16
 800af6e:	46bd      	mov	sp, r7
 800af70:	bd80      	pop	{r7, pc}
 800af72:	bf00      	nop
 800af74:	0800f170 	.word	0x0800f170

0800af78 <default_extension_encoder>:

/* Default handler for extension fields. Expects to have a pb_field_t
 * pointer in the extension->type->arg field. */
static bool checkreturn default_extension_encoder(pb_ostream_t *stream,
    const pb_extension_t *extension)
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b084      	sub	sp, #16
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
 800af80:	6039      	str	r1, [r7, #0]
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	689b      	ldr	r3, [r3, #8]
 800af88:	60fb      	str	r3, [r7, #12]
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	789b      	ldrb	r3, [r3, #2]
 800af8e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800af92:	2b80      	cmp	r3, #128	; 0x80
 800af94:	d108      	bne.n	800afa8 <default_extension_encoder+0x30>
    {
        /* For pointer extensions, the pointer is stored directly
         * in the extension structure. This avoids having an extra
         * indirection. */
        return encode_field(stream, field, &extension->dest);
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	3304      	adds	r3, #4
 800af9a:	461a      	mov	r2, r3
 800af9c:	68f9      	ldr	r1, [r7, #12]
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f7ff ffba 	bl	800af18 <encode_field>
 800afa4:	4603      	mov	r3, r0
 800afa6:	e007      	b.n	800afb8 <default_extension_encoder+0x40>
    }
    else
    {
        return encode_field(stream, field, extension->dest);
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	685b      	ldr	r3, [r3, #4]
 800afac:	461a      	mov	r2, r3
 800afae:	68f9      	ldr	r1, [r7, #12]
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	f7ff ffb1 	bl	800af18 <encode_field>
 800afb6:	4603      	mov	r3, r0
    }
}
 800afb8:	4618      	mov	r0, r3
 800afba:	3710      	adds	r7, #16
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bd80      	pop	{r7, pc}

0800afc0 <encode_extension_field>:

/* Walk through all the registered extensions and give them a chance
 * to encode themselves. */
static bool checkreturn encode_extension_field(pb_ostream_t *stream,
    const pb_field_t *field, const void *pData)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b086      	sub	sp, #24
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	60f8      	str	r0, [r7, #12]
 800afc8:	60b9      	str	r1, [r7, #8]
 800afca:	607a      	str	r2, [r7, #4]
    const pb_extension_t *extension = *(const pb_extension_t* const *)pData;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	617b      	str	r3, [r7, #20]
    PB_UNUSED(field);
    
    while (extension)
 800afd2:	e01e      	b.n	800b012 <encode_extension_field+0x52>
    {
        bool status;
        if (extension->type->encode)
 800afd4:	697b      	ldr	r3, [r7, #20]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	685b      	ldr	r3, [r3, #4]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d008      	beq.n	800aff0 <encode_extension_field+0x30>
            status = extension->type->encode(stream, extension);
 800afde:	697b      	ldr	r3, [r7, #20]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	685b      	ldr	r3, [r3, #4]
 800afe4:	6979      	ldr	r1, [r7, #20]
 800afe6:	68f8      	ldr	r0, [r7, #12]
 800afe8:	4798      	blx	r3
 800afea:	4603      	mov	r3, r0
 800afec:	74fb      	strb	r3, [r7, #19]
 800afee:	e005      	b.n	800affc <encode_extension_field+0x3c>
        else
            status = default_extension_encoder(stream, extension);
 800aff0:	6979      	ldr	r1, [r7, #20]
 800aff2:	68f8      	ldr	r0, [r7, #12]
 800aff4:	f7ff ffc0 	bl	800af78 <default_extension_encoder>
 800aff8:	4603      	mov	r3, r0
 800affa:	74fb      	strb	r3, [r7, #19]

        if (!status)
 800affc:	7cfb      	ldrb	r3, [r7, #19]
 800affe:	f083 0301 	eor.w	r3, r3, #1
 800b002:	b2db      	uxtb	r3, r3
 800b004:	2b00      	cmp	r3, #0
 800b006:	d001      	beq.n	800b00c <encode_extension_field+0x4c>
            return false;
 800b008:	2300      	movs	r3, #0
 800b00a:	e006      	b.n	800b01a <encode_extension_field+0x5a>
        
        extension = extension->next;
 800b00c:	697b      	ldr	r3, [r7, #20]
 800b00e:	689b      	ldr	r3, [r3, #8]
 800b010:	617b      	str	r3, [r7, #20]
    while (extension)
 800b012:	697b      	ldr	r3, [r7, #20]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d1dd      	bne.n	800afd4 <encode_extension_field+0x14>
    }
    
    return true;
 800b018:	2301      	movs	r3, #1
}
 800b01a:	4618      	mov	r0, r3
 800b01c:	3718      	adds	r7, #24
 800b01e:	46bd      	mov	sp, r7
 800b020:	bd80      	pop	{r7, pc}

0800b022 <pb_const_cast>:
/*********************
 * Encode all fields *
 *********************/

static void *pb_const_cast(const void *p)
{
 800b022:	b480      	push	{r7}
 800b024:	b085      	sub	sp, #20
 800b026:	af00      	add	r7, sp, #0
 800b028:	6078      	str	r0, [r7, #4]
     * logic for both encoding and decoding. */
    union {
        void *p1;
        const void *p2;
    } t;
    t.p2 = p;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	60fb      	str	r3, [r7, #12]
    return t.p1;
 800b02e:	68fb      	ldr	r3, [r7, #12]
}
 800b030:	4618      	mov	r0, r3
 800b032:	3714      	adds	r7, #20
 800b034:	46bd      	mov	sp, r7
 800b036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03a:	4770      	bx	lr

0800b03c <pb_encode>:

bool checkreturn pb_encode(pb_ostream_t *stream, const pb_field_t fields[], const void *src_struct)
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b08a      	sub	sp, #40	; 0x28
 800b040:	af00      	add	r7, sp, #0
 800b042:	60f8      	str	r0, [r7, #12]
 800b044:	60b9      	str	r1, [r7, #8]
 800b046:	607a      	str	r2, [r7, #4]
    pb_field_iter_t iter;
    if (!pb_field_iter_begin(&iter, fields, pb_const_cast(src_struct)))
 800b048:	6878      	ldr	r0, [r7, #4]
 800b04a:	f7ff ffea 	bl	800b022 <pb_const_cast>
 800b04e:	4602      	mov	r2, r0
 800b050:	f107 0310 	add.w	r3, r7, #16
 800b054:	68b9      	ldr	r1, [r7, #8]
 800b056:	4618      	mov	r0, r3
 800b058:	f7fd fe72 	bl	8008d40 <pb_field_iter_begin>
 800b05c:	4603      	mov	r3, r0
 800b05e:	f083 0301 	eor.w	r3, r3, #1
 800b062:	b2db      	uxtb	r3, r3
 800b064:	2b00      	cmp	r3, #0
 800b066:	d001      	beq.n	800b06c <pb_encode+0x30>
        return true; /* Empty message type */
 800b068:	2301      	movs	r3, #1
 800b06a:	e02a      	b.n	800b0c2 <pb_encode+0x86>
    
    do {
        if (PB_LTYPE(iter.pos->type) == PB_LTYPE_EXTENSION)
 800b06c:	697b      	ldr	r3, [r7, #20]
 800b06e:	789b      	ldrb	r3, [r3, #2]
 800b070:	f003 030f 	and.w	r3, r3, #15
 800b074:	2b08      	cmp	r3, #8
 800b076:	d10d      	bne.n	800b094 <pb_encode+0x58>
        {
            /* Special case for the extension field placeholder */
            if (!encode_extension_field(stream, iter.pos, iter.pData))
 800b078:	697b      	ldr	r3, [r7, #20]
 800b07a:	6a3a      	ldr	r2, [r7, #32]
 800b07c:	4619      	mov	r1, r3
 800b07e:	68f8      	ldr	r0, [r7, #12]
 800b080:	f7ff ff9e 	bl	800afc0 <encode_extension_field>
 800b084:	4603      	mov	r3, r0
 800b086:	f083 0301 	eor.w	r3, r3, #1
 800b08a:	b2db      	uxtb	r3, r3
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d00f      	beq.n	800b0b0 <pb_encode+0x74>
                return false;
 800b090:	2300      	movs	r3, #0
 800b092:	e016      	b.n	800b0c2 <pb_encode+0x86>
        }
        else
        {
            /* Regular field */
            if (!encode_field(stream, iter.pos, iter.pData))
 800b094:	697b      	ldr	r3, [r7, #20]
 800b096:	6a3a      	ldr	r2, [r7, #32]
 800b098:	4619      	mov	r1, r3
 800b09a:	68f8      	ldr	r0, [r7, #12]
 800b09c:	f7ff ff3c 	bl	800af18 <encode_field>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	f083 0301 	eor.w	r3, r3, #1
 800b0a6:	b2db      	uxtb	r3, r3
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d001      	beq.n	800b0b0 <pb_encode+0x74>
                return false;
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	e008      	b.n	800b0c2 <pb_encode+0x86>
        }
    } while (pb_field_iter_next(&iter));
 800b0b0:	f107 0310 	add.w	r3, r7, #16
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	f7fd fe78 	bl	8008daa <pb_field_iter_next>
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d1d5      	bne.n	800b06c <pb_encode+0x30>
    
    return true;
 800b0c0:	2301      	movs	r3, #1
}
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	3728      	adds	r7, #40	; 0x28
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bd80      	pop	{r7, pc}

0800b0ca <pb_encode_varint>:
  return pb_write(stream, buffer, i);
}
#endif

bool checkreturn pb_encode_varint(pb_ostream_t *stream, pb_uint64_t value)
{
 800b0ca:	b590      	push	{r4, r7, lr}
 800b0cc:	b08b      	sub	sp, #44	; 0x2c
 800b0ce:	af00      	add	r7, sp, #0
 800b0d0:	60f8      	str	r0, [r7, #12]
 800b0d2:	e9c7 2300 	strd	r2, r3, [r7]
    pb_byte_t buffer[10];
    size_t i = 0;
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	627b      	str	r3, [r7, #36]	; 0x24
    
    if (value <= 0x7F)
 800b0da:	e9d7 3400 	ldrd	r3, r4, [r7]
 800b0de:	2c00      	cmp	r4, #0
 800b0e0:	bf08      	it	eq
 800b0e2:	2b80      	cmpeq	r3, #128	; 0x80
 800b0e4:	d223      	bcs.n	800b12e <pb_encode_varint+0x64>
    {
        pb_byte_t v = (pb_byte_t)value;
 800b0e6:	783b      	ldrb	r3, [r7, #0]
 800b0e8:	75fb      	strb	r3, [r7, #23]
        return pb_write(stream, &v, 1);
 800b0ea:	f107 0317 	add.w	r3, r7, #23
 800b0ee:	2201      	movs	r2, #1
 800b0f0:	4619      	mov	r1, r3
 800b0f2:	68f8      	ldr	r0, [r7, #12]
 800b0f4:	f7ff fbc2 	bl	800a87c <pb_write>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	e035      	b.n	800b168 <pb_encode_varint+0x9e>
    }
    
    while (value)
    {
        buffer[i] = (pb_byte_t)((value & 0x7F) | 0x80);
 800b0fc:	783b      	ldrb	r3, [r7, #0]
 800b0fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b102:	b2d9      	uxtb	r1, r3
 800b104:	f107 0218 	add.w	r2, r7, #24
 800b108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b10a:	4413      	add	r3, r2
 800b10c:	460a      	mov	r2, r1
 800b10e:	701a      	strb	r2, [r3, #0]
        value >>= 7;
 800b110:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b114:	f04f 0300 	mov.w	r3, #0
 800b118:	f04f 0400 	mov.w	r4, #0
 800b11c:	09cb      	lsrs	r3, r1, #7
 800b11e:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800b122:	09d4      	lsrs	r4, r2, #7
 800b124:	e9c7 3400 	strd	r3, r4, [r7]
        i++;
 800b128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b12a:	3301      	adds	r3, #1
 800b12c:	627b      	str	r3, [r7, #36]	; 0x24
    while (value)
 800b12e:	e9d7 3400 	ldrd	r3, r4, [r7]
 800b132:	4323      	orrs	r3, r4
 800b134:	d1e2      	bne.n	800b0fc <pb_encode_varint+0x32>
    }
    buffer[i-1] &= 0x7F; /* Unset top bit on last byte */
 800b136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b138:	3b01      	subs	r3, #1
 800b13a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b13e:	4413      	add	r3, r2
 800b140:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 800b144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b146:	3b01      	subs	r3, #1
 800b148:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b14c:	b2d2      	uxtb	r2, r2
 800b14e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800b152:	440b      	add	r3, r1
 800b154:	f803 2c10 	strb.w	r2, [r3, #-16]
    
    return pb_write(stream, buffer, i);
 800b158:	f107 0318 	add.w	r3, r7, #24
 800b15c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b15e:	4619      	mov	r1, r3
 800b160:	68f8      	ldr	r0, [r7, #12]
 800b162:	f7ff fb8b 	bl	800a87c <pb_write>
 800b166:	4603      	mov	r3, r0
}
 800b168:	4618      	mov	r0, r3
 800b16a:	372c      	adds	r7, #44	; 0x2c
 800b16c:	46bd      	mov	sp, r7
 800b16e:	bd90      	pop	{r4, r7, pc}

0800b170 <pb_encode_svarint>:

bool checkreturn pb_encode_svarint(pb_ostream_t *stream, pb_int64_t value)
{
 800b170:	b590      	push	{r4, r7, lr}
 800b172:	b087      	sub	sp, #28
 800b174:	af00      	add	r7, sp, #0
 800b176:	60f8      	str	r0, [r7, #12]
 800b178:	e9c7 2300 	strd	r2, r3, [r7]
    pb_uint64_t zigzagged;
    if (value < 0)
 800b17c:	e9d7 3400 	ldrd	r3, r4, [r7]
 800b180:	2b00      	cmp	r3, #0
 800b182:	f174 0300 	sbcs.w	r3, r4, #0
 800b186:	da0d      	bge.n	800b1a4 <pb_encode_svarint+0x34>
        zigzagged = ~((pb_uint64_t)value << 1);
 800b188:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b18c:	184b      	adds	r3, r1, r1
 800b18e:	eb42 0402 	adc.w	r4, r2, r2
 800b192:	4619      	mov	r1, r3
 800b194:	4622      	mov	r2, r4
 800b196:	ea6f 0301 	mvn.w	r3, r1
 800b19a:	ea6f 0402 	mvn.w	r4, r2
 800b19e:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800b1a2:	e006      	b.n	800b1b2 <pb_encode_svarint+0x42>
    else
        zigzagged = (pb_uint64_t)value << 1;
 800b1a4:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b1a8:	184b      	adds	r3, r1, r1
 800b1aa:	eb42 0402 	adc.w	r4, r2, r2
 800b1ae:	e9c7 3404 	strd	r3, r4, [r7, #16]
    
    return pb_encode_varint(stream, zigzagged);
 800b1b2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b1b6:	68f8      	ldr	r0, [r7, #12]
 800b1b8:	f7ff ff87 	bl	800b0ca <pb_encode_varint>
 800b1bc:	4603      	mov	r3, r0
}
 800b1be:	4618      	mov	r0, r3
 800b1c0:	371c      	adds	r7, #28
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	bd90      	pop	{r4, r7, pc}

0800b1c6 <pb_encode_fixed32>:

bool checkreturn pb_encode_fixed32(pb_ostream_t *stream, const void *value)
{
 800b1c6:	b580      	push	{r7, lr}
 800b1c8:	b084      	sub	sp, #16
 800b1ca:	af00      	add	r7, sp, #0
 800b1cc:	6078      	str	r0, [r7, #4]
 800b1ce:	6039      	str	r1, [r7, #0]
    uint32_t val = *(const uint32_t*)value;
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	60fb      	str	r3, [r7, #12]
    pb_byte_t bytes[4];
    bytes[0] = (pb_byte_t)(val & 0xFF);
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	b2db      	uxtb	r3, r3
 800b1da:	723b      	strb	r3, [r7, #8]
    bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	0a1b      	lsrs	r3, r3, #8
 800b1e0:	b2db      	uxtb	r3, r3
 800b1e2:	727b      	strb	r3, [r7, #9]
    bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	0c1b      	lsrs	r3, r3, #16
 800b1e8:	b2db      	uxtb	r3, r3
 800b1ea:	72bb      	strb	r3, [r7, #10]
    bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	0e1b      	lsrs	r3, r3, #24
 800b1f0:	b2db      	uxtb	r3, r3
 800b1f2:	72fb      	strb	r3, [r7, #11]
    return pb_write(stream, bytes, 4);
 800b1f4:	f107 0308 	add.w	r3, r7, #8
 800b1f8:	2204      	movs	r2, #4
 800b1fa:	4619      	mov	r1, r3
 800b1fc:	6878      	ldr	r0, [r7, #4]
 800b1fe:	f7ff fb3d 	bl	800a87c <pb_write>
 800b202:	4603      	mov	r3, r0
}
 800b204:	4618      	mov	r0, r3
 800b206:	3710      	adds	r7, #16
 800b208:	46bd      	mov	sp, r7
 800b20a:	bd80      	pop	{r7, pc}

0800b20c <pb_encode_fixed64>:

#ifndef PB_WITHOUT_64BIT
bool checkreturn pb_encode_fixed64(pb_ostream_t *stream, const void *value)
{
 800b20c:	b590      	push	{r4, r7, lr}
 800b20e:	b087      	sub	sp, #28
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
 800b214:	6039      	str	r1, [r7, #0]
    uint64_t val = *(const uint64_t*)value;
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b21c:	e9c7 3404 	strd	r3, r4, [r7, #16]
    pb_byte_t bytes[8];
    bytes[0] = (pb_byte_t)(val & 0xFF);
 800b220:	7c3b      	ldrb	r3, [r7, #16]
 800b222:	723b      	strb	r3, [r7, #8]
    bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
 800b224:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b228:	f04f 0300 	mov.w	r3, #0
 800b22c:	f04f 0400 	mov.w	r4, #0
 800b230:	0a0b      	lsrs	r3, r1, #8
 800b232:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800b236:	0a14      	lsrs	r4, r2, #8
 800b238:	b2db      	uxtb	r3, r3
 800b23a:	727b      	strb	r3, [r7, #9]
    bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
 800b23c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b240:	f04f 0300 	mov.w	r3, #0
 800b244:	f04f 0400 	mov.w	r4, #0
 800b248:	0c0b      	lsrs	r3, r1, #16
 800b24a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b24e:	0c14      	lsrs	r4, r2, #16
 800b250:	b2db      	uxtb	r3, r3
 800b252:	72bb      	strb	r3, [r7, #10]
    bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
 800b254:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b258:	f04f 0300 	mov.w	r3, #0
 800b25c:	f04f 0400 	mov.w	r4, #0
 800b260:	0e0b      	lsrs	r3, r1, #24
 800b262:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b266:	0e14      	lsrs	r4, r2, #24
 800b268:	b2db      	uxtb	r3, r3
 800b26a:	72fb      	strb	r3, [r7, #11]
    bytes[4] = (pb_byte_t)((val >> 32) & 0xFF);
 800b26c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b270:	f04f 0300 	mov.w	r3, #0
 800b274:	f04f 0400 	mov.w	r4, #0
 800b278:	0013      	movs	r3, r2
 800b27a:	2400      	movs	r4, #0
 800b27c:	b2db      	uxtb	r3, r3
 800b27e:	733b      	strb	r3, [r7, #12]
    bytes[5] = (pb_byte_t)((val >> 40) & 0xFF);
 800b280:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b284:	f04f 0300 	mov.w	r3, #0
 800b288:	f04f 0400 	mov.w	r4, #0
 800b28c:	0a13      	lsrs	r3, r2, #8
 800b28e:	2400      	movs	r4, #0
 800b290:	b2db      	uxtb	r3, r3
 800b292:	737b      	strb	r3, [r7, #13]
    bytes[6] = (pb_byte_t)((val >> 48) & 0xFF);
 800b294:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b298:	f04f 0300 	mov.w	r3, #0
 800b29c:	f04f 0400 	mov.w	r4, #0
 800b2a0:	0c13      	lsrs	r3, r2, #16
 800b2a2:	2400      	movs	r4, #0
 800b2a4:	b2db      	uxtb	r3, r3
 800b2a6:	73bb      	strb	r3, [r7, #14]
    bytes[7] = (pb_byte_t)((val >> 56) & 0xFF);
 800b2a8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b2ac:	f04f 0300 	mov.w	r3, #0
 800b2b0:	f04f 0400 	mov.w	r4, #0
 800b2b4:	0e13      	lsrs	r3, r2, #24
 800b2b6:	2400      	movs	r4, #0
 800b2b8:	b2db      	uxtb	r3, r3
 800b2ba:	73fb      	strb	r3, [r7, #15]
    return pb_write(stream, bytes, 8);
 800b2bc:	f107 0308 	add.w	r3, r7, #8
 800b2c0:	2208      	movs	r2, #8
 800b2c2:	4619      	mov	r1, r3
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	f7ff fad9 	bl	800a87c <pb_write>
 800b2ca:	4603      	mov	r3, r0
}
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	371c      	adds	r7, #28
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	bd90      	pop	{r4, r7, pc}

0800b2d4 <pb_encode_tag>:
#endif

bool checkreturn pb_encode_tag(pb_ostream_t *stream, pb_wire_type_t wiretype, uint32_t field_number)
{
 800b2d4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800b2d8:	b086      	sub	sp, #24
 800b2da:	af00      	add	r7, sp, #0
 800b2dc:	60f8      	str	r0, [r7, #12]
 800b2de:	607a      	str	r2, [r7, #4]
 800b2e0:	460a      	mov	r2, r1
 800b2e2:	72fa      	strb	r2, [r7, #11]
    pb_uint64_t tag = ((pb_uint64_t)field_number << 3) | wiretype;
 800b2e4:	687a      	ldr	r2, [r7, #4]
 800b2e6:	4611      	mov	r1, r2
 800b2e8:	f04f 0200 	mov.w	r2, #0
 800b2ec:	ea4f 7c51 	mov.w	ip, r1, lsr #29
 800b2f0:	ea4f 0bc1 	mov.w	fp, r1, lsl #3
 800b2f4:	7af9      	ldrb	r1, [r7, #11]
 800b2f6:	f04f 0200 	mov.w	r2, #0
 800b2fa:	ea4b 0301 	orr.w	r3, fp, r1
 800b2fe:	ea4c 0402 	orr.w	r4, ip, r2
 800b302:	e9c7 3404 	strd	r3, r4, [r7, #16]
    return pb_encode_varint(stream, tag);
 800b306:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b30a:	68f8      	ldr	r0, [r7, #12]
 800b30c:	f7ff fedd 	bl	800b0ca <pb_encode_varint>
 800b310:	4603      	mov	r3, r0
}
 800b312:	4618      	mov	r0, r3
 800b314:	3718      	adds	r7, #24
 800b316:	46bd      	mov	sp, r7
 800b318:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800b31c <pb_encode_tag_for_field>:

bool checkreturn pb_encode_tag_for_field(pb_ostream_t *stream, const pb_field_t *field)
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b084      	sub	sp, #16
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
 800b324:	6039      	str	r1, [r7, #0]
    pb_wire_type_t wiretype;
    switch (PB_LTYPE(field->type))
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	789b      	ldrb	r3, [r3, #2]
 800b32a:	f003 030f 	and.w	r3, r3, #15
 800b32e:	2b09      	cmp	r3, #9
 800b330:	d822      	bhi.n	800b378 <pb_encode_tag_for_field+0x5c>
 800b332:	a201      	add	r2, pc, #4	; (adr r2, 800b338 <pb_encode_tag_for_field+0x1c>)
 800b334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b338:	0800b361 	.word	0x0800b361
 800b33c:	0800b361 	.word	0x0800b361
 800b340:	0800b361 	.word	0x0800b361
 800b344:	0800b367 	.word	0x0800b367
 800b348:	0800b36d 	.word	0x0800b36d
 800b34c:	0800b373 	.word	0x0800b373
 800b350:	0800b373 	.word	0x0800b373
 800b354:	0800b373 	.word	0x0800b373
 800b358:	0800b379 	.word	0x0800b379
 800b35c:	0800b373 	.word	0x0800b373
    {
        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            wiretype = PB_WT_VARINT;
 800b360:	2300      	movs	r3, #0
 800b362:	73fb      	strb	r3, [r7, #15]
            break;
 800b364:	e014      	b.n	800b390 <pb_encode_tag_for_field+0x74>
        
        case PB_LTYPE_FIXED32:
            wiretype = PB_WT_32BIT;
 800b366:	2305      	movs	r3, #5
 800b368:	73fb      	strb	r3, [r7, #15]
            break;
 800b36a:	e011      	b.n	800b390 <pb_encode_tag_for_field+0x74>
        
        case PB_LTYPE_FIXED64:
            wiretype = PB_WT_64BIT;
 800b36c:	2301      	movs	r3, #1
 800b36e:	73fb      	strb	r3, [r7, #15]
            break;
 800b370:	e00e      	b.n	800b390 <pb_encode_tag_for_field+0x74>
        
        case PB_LTYPE_BYTES:
        case PB_LTYPE_STRING:
        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_FIXED_LENGTH_BYTES:
            wiretype = PB_WT_STRING;
 800b372:	2302      	movs	r3, #2
 800b374:	73fb      	strb	r3, [r7, #15]
            break;
 800b376:	e00b      	b.n	800b390 <pb_encode_tag_for_field+0x74>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	691b      	ldr	r3, [r3, #16]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d002      	beq.n	800b386 <pb_encode_tag_for_field+0x6a>
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	691b      	ldr	r3, [r3, #16]
 800b384:	e000      	b.n	800b388 <pb_encode_tag_for_field+0x6c>
 800b386:	4b09      	ldr	r3, [pc, #36]	; (800b3ac <pb_encode_tag_for_field+0x90>)
 800b388:	687a      	ldr	r2, [r7, #4]
 800b38a:	6113      	str	r3, [r2, #16]
 800b38c:	2300      	movs	r3, #0
 800b38e:	e009      	b.n	800b3a4 <pb_encode_tag_for_field+0x88>
    }
    
    return pb_encode_tag(stream, wiretype, field->tag);
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	881b      	ldrh	r3, [r3, #0]
 800b394:	b29b      	uxth	r3, r3
 800b396:	461a      	mov	r2, r3
 800b398:	7bfb      	ldrb	r3, [r7, #15]
 800b39a:	4619      	mov	r1, r3
 800b39c:	6878      	ldr	r0, [r7, #4]
 800b39e:	f7ff ff99 	bl	800b2d4 <pb_encode_tag>
 800b3a2:	4603      	mov	r3, r0
}
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	3710      	adds	r7, #16
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	bd80      	pop	{r7, pc}
 800b3ac:	0800f170 	.word	0x0800f170

0800b3b0 <pb_encode_string>:

bool checkreturn pb_encode_string(pb_ostream_t *stream, const pb_byte_t *buffer, size_t size)
{
 800b3b0:	b590      	push	{r4, r7, lr}
 800b3b2:	b085      	sub	sp, #20
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	60f8      	str	r0, [r7, #12]
 800b3b8:	60b9      	str	r1, [r7, #8]
 800b3ba:	607a      	str	r2, [r7, #4]
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	f04f 0400 	mov.w	r4, #0
 800b3c2:	461a      	mov	r2, r3
 800b3c4:	4623      	mov	r3, r4
 800b3c6:	68f8      	ldr	r0, [r7, #12]
 800b3c8:	f7ff fe7f 	bl	800b0ca <pb_encode_varint>
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	f083 0301 	eor.w	r3, r3, #1
 800b3d2:	b2db      	uxtb	r3, r3
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d001      	beq.n	800b3dc <pb_encode_string+0x2c>
        return false;
 800b3d8:	2300      	movs	r3, #0
 800b3da:	e005      	b.n	800b3e8 <pb_encode_string+0x38>
    
    return pb_write(stream, buffer, size);
 800b3dc:	687a      	ldr	r2, [r7, #4]
 800b3de:	68b9      	ldr	r1, [r7, #8]
 800b3e0:	68f8      	ldr	r0, [r7, #12]
 800b3e2:	f7ff fa4b 	bl	800a87c <pb_write>
 800b3e6:	4603      	mov	r3, r0
}
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	3714      	adds	r7, #20
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd90      	pop	{r4, r7, pc}

0800b3f0 <pb_encode_submessage>:

bool checkreturn pb_encode_submessage(pb_ostream_t *stream, const pb_field_t fields[], const void *src_struct)
{
 800b3f0:	b590      	push	{r4, r7, lr}
 800b3f2:	b08d      	sub	sp, #52	; 0x34
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	60f8      	str	r0, [r7, #12]
 800b3f8:	60b9      	str	r1, [r7, #8]
 800b3fa:	607a      	str	r2, [r7, #4]
    /* First calculate the message size using a non-writing substream. */
    pb_ostream_t substream = PB_OSTREAM_SIZING;
 800b3fc:	f107 0314 	add.w	r3, r7, #20
 800b400:	2200      	movs	r2, #0
 800b402:	601a      	str	r2, [r3, #0]
 800b404:	605a      	str	r2, [r3, #4]
 800b406:	609a      	str	r2, [r3, #8]
 800b408:	60da      	str	r2, [r3, #12]
 800b40a:	611a      	str	r2, [r3, #16]
    size_t size;
    bool status;
    
    if (!pb_encode(&substream, fields, src_struct))
 800b40c:	f107 0314 	add.w	r3, r7, #20
 800b410:	687a      	ldr	r2, [r7, #4]
 800b412:	68b9      	ldr	r1, [r7, #8]
 800b414:	4618      	mov	r0, r3
 800b416:	f7ff fe11 	bl	800b03c <pb_encode>
 800b41a:	4603      	mov	r3, r0
 800b41c:	f083 0301 	eor.w	r3, r3, #1
 800b420:	b2db      	uxtb	r3, r3
 800b422:	2b00      	cmp	r3, #0
 800b424:	d004      	beq.n	800b430 <pb_encode_submessage+0x40>
    {
#ifndef PB_NO_ERRMSG
        stream->errmsg = substream.errmsg;
 800b426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	611a      	str	r2, [r3, #16]
#endif
        return false;
 800b42c:	2300      	movs	r3, #0
 800b42e:	e064      	b.n	800b4fa <pb_encode_submessage+0x10a>
    }
    
    size = substream.bytes_written;
 800b430:	6a3b      	ldr	r3, [r7, #32]
 800b432:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 800b434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b436:	f04f 0400 	mov.w	r4, #0
 800b43a:	461a      	mov	r2, r3
 800b43c:	4623      	mov	r3, r4
 800b43e:	68f8      	ldr	r0, [r7, #12]
 800b440:	f7ff fe43 	bl	800b0ca <pb_encode_varint>
 800b444:	4603      	mov	r3, r0
 800b446:	f083 0301 	eor.w	r3, r3, #1
 800b44a:	b2db      	uxtb	r3, r3
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d001      	beq.n	800b454 <pb_encode_submessage+0x64>
        return false;
 800b450:	2300      	movs	r3, #0
 800b452:	e052      	b.n	800b4fa <pb_encode_submessage+0x10a>
    
    if (stream->callback == NULL)
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d106      	bne.n	800b46a <pb_encode_submessage+0x7a>
        return pb_write(stream, NULL, size); /* Just sizing */
 800b45c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b45e:	2100      	movs	r1, #0
 800b460:	68f8      	ldr	r0, [r7, #12]
 800b462:	f7ff fa0b 	bl	800a87c <pb_write>
 800b466:	4603      	mov	r3, r0
 800b468:	e047      	b.n	800b4fa <pb_encode_submessage+0x10a>
    
    if (stream->bytes_written + size > stream->max_size)
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	68da      	ldr	r2, [r3, #12]
 800b46e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b470:	441a      	add	r2, r3
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	689b      	ldr	r3, [r3, #8]
 800b476:	429a      	cmp	r2, r3
 800b478:	d90b      	bls.n	800b492 <pb_encode_submessage+0xa2>
        PB_RETURN_ERROR(stream, "stream full");
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	691b      	ldr	r3, [r3, #16]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d002      	beq.n	800b488 <pb_encode_submessage+0x98>
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	691b      	ldr	r3, [r3, #16]
 800b486:	e000      	b.n	800b48a <pb_encode_submessage+0x9a>
 800b488:	4b1e      	ldr	r3, [pc, #120]	; (800b504 <pb_encode_submessage+0x114>)
 800b48a:	68fa      	ldr	r2, [r7, #12]
 800b48c:	6113      	str	r3, [r2, #16]
 800b48e:	2300      	movs	r3, #0
 800b490:	e033      	b.n	800b4fa <pb_encode_submessage+0x10a>
        
    /* Use a substream to verify that a callback doesn't write more than
     * what it did the first time. */
    substream.callback = stream->callback;
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	617b      	str	r3, [r7, #20]
    substream.state = stream->state;
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	685b      	ldr	r3, [r3, #4]
 800b49c:	61bb      	str	r3, [r7, #24]
    substream.max_size = size;
 800b49e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4a0:	61fb      	str	r3, [r7, #28]
    substream.bytes_written = 0;
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    substream.errmsg = NULL;
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    
    status = pb_encode(&substream, fields, src_struct);
 800b4aa:	f107 0314 	add.w	r3, r7, #20
 800b4ae:	687a      	ldr	r2, [r7, #4]
 800b4b0:	68b9      	ldr	r1, [r7, #8]
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	f7ff fdc2 	bl	800b03c <pb_encode>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    
    stream->bytes_written += substream.bytes_written;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	68da      	ldr	r2, [r3, #12]
 800b4c2:	6a3b      	ldr	r3, [r7, #32]
 800b4c4:	441a      	add	r2, r3
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	60da      	str	r2, [r3, #12]
    stream->state = substream.state;
 800b4ca:	69ba      	ldr	r2, [r7, #24]
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	605a      	str	r2, [r3, #4]
#ifndef PB_NO_ERRMSG
    stream->errmsg = substream.errmsg;
 800b4d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	611a      	str	r2, [r3, #16]
#endif
    
    if (substream.bytes_written != size)
 800b4d6:	6a3b      	ldr	r3, [r7, #32]
 800b4d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b4da:	429a      	cmp	r2, r3
 800b4dc:	d00b      	beq.n	800b4f6 <pb_encode_submessage+0x106>
        PB_RETURN_ERROR(stream, "submsg size changed");
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	691b      	ldr	r3, [r3, #16]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d002      	beq.n	800b4ec <pb_encode_submessage+0xfc>
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	691b      	ldr	r3, [r3, #16]
 800b4ea:	e000      	b.n	800b4ee <pb_encode_submessage+0xfe>
 800b4ec:	4b06      	ldr	r3, [pc, #24]	; (800b508 <pb_encode_submessage+0x118>)
 800b4ee:	68fa      	ldr	r2, [r7, #12]
 800b4f0:	6113      	str	r3, [r2, #16]
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	e001      	b.n	800b4fa <pb_encode_submessage+0x10a>
    
    return status;
 800b4f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	3734      	adds	r7, #52	; 0x34
 800b4fe:	46bd      	mov	sp, r7
 800b500:	bd90      	pop	{r4, r7, pc}
 800b502:	bf00      	nop
 800b504:	0800f128 	.word	0x0800f128
 800b508:	0800f194 	.word	0x0800f194

0800b50c <pb_enc_varint>:

/* Field encoders */

static bool checkreturn pb_enc_varint(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 800b50c:	b590      	push	{r4, r7, lr}
 800b50e:	b087      	sub	sp, #28
 800b510:	af00      	add	r7, sp, #0
 800b512:	60f8      	str	r0, [r7, #12]
 800b514:	60b9      	str	r1, [r7, #8]
 800b516:	607a      	str	r2, [r7, #4]
    pb_int64_t value = 0;
 800b518:	f04f 0300 	mov.w	r3, #0
 800b51c:	f04f 0400 	mov.w	r4, #0
 800b520:	e9c7 3404 	strd	r3, r4, [r7, #16]
    
    if (field->data_size == sizeof(int_least8_t))
 800b524:	68bb      	ldr	r3, [r7, #8]
 800b526:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800b52a:	b29b      	uxth	r3, r3
 800b52c:	2b01      	cmp	r3, #1
 800b52e:	d108      	bne.n	800b542 <pb_enc_varint+0x36>
        value = *(const int_least8_t*)src;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	f993 3000 	ldrsb.w	r3, [r3]
 800b536:	b25b      	sxtb	r3, r3
 800b538:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800b53c:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800b540:	e033      	b.n	800b5aa <pb_enc_varint+0x9e>
    else if (field->data_size == sizeof(int_least16_t))
 800b542:	68bb      	ldr	r3, [r7, #8]
 800b544:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800b548:	b29b      	uxth	r3, r3
 800b54a:	2b02      	cmp	r3, #2
 800b54c:	d108      	bne.n	800b560 <pb_enc_varint+0x54>
        value = *(const int_least16_t*)src;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b554:	b21b      	sxth	r3, r3
 800b556:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800b55a:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800b55e:	e024      	b.n	800b5aa <pb_enc_varint+0x9e>
    else if (field->data_size == sizeof(int32_t))
 800b560:	68bb      	ldr	r3, [r7, #8]
 800b562:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800b566:	b29b      	uxth	r3, r3
 800b568:	2b04      	cmp	r3, #4
 800b56a:	d106      	bne.n	800b57a <pb_enc_varint+0x6e>
        value = *(const int32_t*)src;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800b574:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800b578:	e017      	b.n	800b5aa <pb_enc_varint+0x9e>
    else if (field->data_size == sizeof(pb_int64_t))
 800b57a:	68bb      	ldr	r3, [r7, #8]
 800b57c:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800b580:	b29b      	uxth	r3, r3
 800b582:	2b08      	cmp	r3, #8
 800b584:	d105      	bne.n	800b592 <pb_enc_varint+0x86>
        value = *(const pb_int64_t*)src;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b58c:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800b590:	e00b      	b.n	800b5aa <pb_enc_varint+0x9e>
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	691b      	ldr	r3, [r3, #16]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d002      	beq.n	800b5a0 <pb_enc_varint+0x94>
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	691b      	ldr	r3, [r3, #16]
 800b59e:	e000      	b.n	800b5a2 <pb_enc_varint+0x96>
 800b5a0:	4b08      	ldr	r3, [pc, #32]	; (800b5c4 <pb_enc_varint+0xb8>)
 800b5a2:	68fa      	ldr	r2, [r7, #12]
 800b5a4:	6113      	str	r3, [r2, #16]
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	e007      	b.n	800b5ba <pb_enc_varint+0xae>
#ifdef PB_WITHOUT_64BIT
    if (value < 0)
      return pb_encode_negative_varint(stream, (pb_uint64_t)value);
    else
#endif
      return pb_encode_varint(stream, (pb_uint64_t)value);
 800b5aa:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800b5ae:	461a      	mov	r2, r3
 800b5b0:	4623      	mov	r3, r4
 800b5b2:	68f8      	ldr	r0, [r7, #12]
 800b5b4:	f7ff fd89 	bl	800b0ca <pb_encode_varint>
 800b5b8:	4603      	mov	r3, r0
}
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	371c      	adds	r7, #28
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	bd90      	pop	{r4, r7, pc}
 800b5c2:	bf00      	nop
 800b5c4:	0800f1a8 	.word	0x0800f1a8

0800b5c8 <pb_enc_uvarint>:

static bool checkreturn pb_enc_uvarint(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 800b5c8:	b590      	push	{r4, r7, lr}
 800b5ca:	b087      	sub	sp, #28
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	60f8      	str	r0, [r7, #12]
 800b5d0:	60b9      	str	r1, [r7, #8]
 800b5d2:	607a      	str	r2, [r7, #4]
    pb_uint64_t value = 0;
 800b5d4:	f04f 0300 	mov.w	r3, #0
 800b5d8:	f04f 0400 	mov.w	r4, #0
 800b5dc:	e9c7 3404 	strd	r3, r4, [r7, #16]
    
    if (field->data_size == sizeof(uint_least8_t))
 800b5e0:	68bb      	ldr	r3, [r7, #8]
 800b5e2:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800b5e6:	b29b      	uxth	r3, r3
 800b5e8:	2b01      	cmp	r3, #1
 800b5ea:	d107      	bne.n	800b5fc <pb_enc_uvarint+0x34>
        value = *(const uint_least8_t*)src;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	781b      	ldrb	r3, [r3, #0]
 800b5f0:	b2db      	uxtb	r3, r3
 800b5f2:	f04f 0400 	mov.w	r4, #0
 800b5f6:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800b5fa:	e032      	b.n	800b662 <pb_enc_uvarint+0x9a>
    else if (field->data_size == sizeof(uint_least16_t))
 800b5fc:	68bb      	ldr	r3, [r7, #8]
 800b5fe:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800b602:	b29b      	uxth	r3, r3
 800b604:	2b02      	cmp	r3, #2
 800b606:	d107      	bne.n	800b618 <pb_enc_uvarint+0x50>
        value = *(const uint_least16_t*)src;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	881b      	ldrh	r3, [r3, #0]
 800b60c:	b29b      	uxth	r3, r3
 800b60e:	f04f 0400 	mov.w	r4, #0
 800b612:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800b616:	e024      	b.n	800b662 <pb_enc_uvarint+0x9a>
    else if (field->data_size == sizeof(uint32_t))
 800b618:	68bb      	ldr	r3, [r7, #8]
 800b61a:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800b61e:	b29b      	uxth	r3, r3
 800b620:	2b04      	cmp	r3, #4
 800b622:	d106      	bne.n	800b632 <pb_enc_uvarint+0x6a>
        value = *(const uint32_t*)src;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	f04f 0400 	mov.w	r4, #0
 800b62c:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800b630:	e017      	b.n	800b662 <pb_enc_uvarint+0x9a>
    else if (field->data_size == sizeof(pb_uint64_t))
 800b632:	68bb      	ldr	r3, [r7, #8]
 800b634:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800b638:	b29b      	uxth	r3, r3
 800b63a:	2b08      	cmp	r3, #8
 800b63c:	d105      	bne.n	800b64a <pb_enc_uvarint+0x82>
        value = *(const pb_uint64_t*)src;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b644:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800b648:	e00b      	b.n	800b662 <pb_enc_uvarint+0x9a>
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	691b      	ldr	r3, [r3, #16]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d002      	beq.n	800b658 <pb_enc_uvarint+0x90>
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	691b      	ldr	r3, [r3, #16]
 800b656:	e000      	b.n	800b65a <pb_enc_uvarint+0x92>
 800b658:	4b07      	ldr	r3, [pc, #28]	; (800b678 <pb_enc_uvarint+0xb0>)
 800b65a:	68fa      	ldr	r2, [r7, #12]
 800b65c:	6113      	str	r3, [r2, #16]
 800b65e:	2300      	movs	r3, #0
 800b660:	e005      	b.n	800b66e <pb_enc_uvarint+0xa6>
    
    return pb_encode_varint(stream, value);
 800b662:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b666:	68f8      	ldr	r0, [r7, #12]
 800b668:	f7ff fd2f 	bl	800b0ca <pb_encode_varint>
 800b66c:	4603      	mov	r3, r0
}
 800b66e:	4618      	mov	r0, r3
 800b670:	371c      	adds	r7, #28
 800b672:	46bd      	mov	sp, r7
 800b674:	bd90      	pop	{r4, r7, pc}
 800b676:	bf00      	nop
 800b678:	0800f1a8 	.word	0x0800f1a8

0800b67c <pb_enc_svarint>:

static bool checkreturn pb_enc_svarint(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 800b67c:	b590      	push	{r4, r7, lr}
 800b67e:	b087      	sub	sp, #28
 800b680:	af00      	add	r7, sp, #0
 800b682:	60f8      	str	r0, [r7, #12]
 800b684:	60b9      	str	r1, [r7, #8]
 800b686:	607a      	str	r2, [r7, #4]
    pb_int64_t value = 0;
 800b688:	f04f 0300 	mov.w	r3, #0
 800b68c:	f04f 0400 	mov.w	r4, #0
 800b690:	e9c7 3404 	strd	r3, r4, [r7, #16]
    
    if (field->data_size == sizeof(int_least8_t))
 800b694:	68bb      	ldr	r3, [r7, #8]
 800b696:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800b69a:	b29b      	uxth	r3, r3
 800b69c:	2b01      	cmp	r3, #1
 800b69e:	d108      	bne.n	800b6b2 <pb_enc_svarint+0x36>
        value = *(const int_least8_t*)src;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	f993 3000 	ldrsb.w	r3, [r3]
 800b6a6:	b25b      	sxtb	r3, r3
 800b6a8:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800b6ac:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800b6b0:	e033      	b.n	800b71a <pb_enc_svarint+0x9e>
    else if (field->data_size == sizeof(int_least16_t))
 800b6b2:	68bb      	ldr	r3, [r7, #8]
 800b6b4:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800b6b8:	b29b      	uxth	r3, r3
 800b6ba:	2b02      	cmp	r3, #2
 800b6bc:	d108      	bne.n	800b6d0 <pb_enc_svarint+0x54>
        value = *(const int_least16_t*)src;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b6c4:	b21b      	sxth	r3, r3
 800b6c6:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800b6ca:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800b6ce:	e024      	b.n	800b71a <pb_enc_svarint+0x9e>
    else if (field->data_size == sizeof(int32_t))
 800b6d0:	68bb      	ldr	r3, [r7, #8]
 800b6d2:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800b6d6:	b29b      	uxth	r3, r3
 800b6d8:	2b04      	cmp	r3, #4
 800b6da:	d106      	bne.n	800b6ea <pb_enc_svarint+0x6e>
        value = *(const int32_t*)src;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800b6e4:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800b6e8:	e017      	b.n	800b71a <pb_enc_svarint+0x9e>
    else if (field->data_size == sizeof(pb_int64_t))
 800b6ea:	68bb      	ldr	r3, [r7, #8]
 800b6ec:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800b6f0:	b29b      	uxth	r3, r3
 800b6f2:	2b08      	cmp	r3, #8
 800b6f4:	d105      	bne.n	800b702 <pb_enc_svarint+0x86>
        value = *(const pb_int64_t*)src;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b6fc:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800b700:	e00b      	b.n	800b71a <pb_enc_svarint+0x9e>
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	691b      	ldr	r3, [r3, #16]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d002      	beq.n	800b710 <pb_enc_svarint+0x94>
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	691b      	ldr	r3, [r3, #16]
 800b70e:	e000      	b.n	800b712 <pb_enc_svarint+0x96>
 800b710:	4b07      	ldr	r3, [pc, #28]	; (800b730 <pb_enc_svarint+0xb4>)
 800b712:	68fa      	ldr	r2, [r7, #12]
 800b714:	6113      	str	r3, [r2, #16]
 800b716:	2300      	movs	r3, #0
 800b718:	e005      	b.n	800b726 <pb_enc_svarint+0xaa>
    
    return pb_encode_svarint(stream, value);
 800b71a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b71e:	68f8      	ldr	r0, [r7, #12]
 800b720:	f7ff fd26 	bl	800b170 <pb_encode_svarint>
 800b724:	4603      	mov	r3, r0
}
 800b726:	4618      	mov	r0, r3
 800b728:	371c      	adds	r7, #28
 800b72a:	46bd      	mov	sp, r7
 800b72c:	bd90      	pop	{r4, r7, pc}
 800b72e:	bf00      	nop
 800b730:	0800f1a8 	.word	0x0800f1a8

0800b734 <pb_enc_fixed64>:

static bool checkreturn pb_enc_fixed64(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b084      	sub	sp, #16
 800b738:	af00      	add	r7, sp, #0
 800b73a:	60f8      	str	r0, [r7, #12]
 800b73c:	60b9      	str	r1, [r7, #8]
 800b73e:	607a      	str	r2, [r7, #4]
    PB_UNUSED(field);
#ifndef PB_WITHOUT_64BIT
    return pb_encode_fixed64(stream, src);
 800b740:	6879      	ldr	r1, [r7, #4]
 800b742:	68f8      	ldr	r0, [r7, #12]
 800b744:	f7ff fd62 	bl	800b20c <pb_encode_fixed64>
 800b748:	4603      	mov	r3, r0
#else
    PB_UNUSED(src);
    PB_RETURN_ERROR(stream, "no 64bit support");
#endif
}
 800b74a:	4618      	mov	r0, r3
 800b74c:	3710      	adds	r7, #16
 800b74e:	46bd      	mov	sp, r7
 800b750:	bd80      	pop	{r7, pc}

0800b752 <pb_enc_fixed32>:

static bool checkreturn pb_enc_fixed32(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 800b752:	b580      	push	{r7, lr}
 800b754:	b084      	sub	sp, #16
 800b756:	af00      	add	r7, sp, #0
 800b758:	60f8      	str	r0, [r7, #12]
 800b75a:	60b9      	str	r1, [r7, #8]
 800b75c:	607a      	str	r2, [r7, #4]
    PB_UNUSED(field);
    return pb_encode_fixed32(stream, src);
 800b75e:	6879      	ldr	r1, [r7, #4]
 800b760:	68f8      	ldr	r0, [r7, #12]
 800b762:	f7ff fd30 	bl	800b1c6 <pb_encode_fixed32>
 800b766:	4603      	mov	r3, r0
}
 800b768:	4618      	mov	r0, r3
 800b76a:	3710      	adds	r7, #16
 800b76c:	46bd      	mov	sp, r7
 800b76e:	bd80      	pop	{r7, pc}

0800b770 <pb_enc_bytes>:

static bool checkreturn pb_enc_bytes(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b086      	sub	sp, #24
 800b774:	af00      	add	r7, sp, #0
 800b776:	60f8      	str	r0, [r7, #12]
 800b778:	60b9      	str	r1, [r7, #8]
 800b77a:	607a      	str	r2, [r7, #4]
    const pb_bytes_array_t *bytes = NULL;
 800b77c:	2300      	movs	r3, #0
 800b77e:	617b      	str	r3, [r7, #20]

    bytes = (const pb_bytes_array_t*)src;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	617b      	str	r3, [r7, #20]
    
    if (src == NULL)
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d106      	bne.n	800b798 <pb_enc_bytes+0x28>
    {
        /* Treat null pointer as an empty bytes field */
        return pb_encode_string(stream, NULL, 0);
 800b78a:	2200      	movs	r2, #0
 800b78c:	2100      	movs	r1, #0
 800b78e:	68f8      	ldr	r0, [r7, #12]
 800b790:	f7ff fe0e 	bl	800b3b0 <pb_encode_string>
 800b794:	4603      	mov	r3, r0
 800b796:	e023      	b.n	800b7e0 <pb_enc_bytes+0x70>
    }
    
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	789b      	ldrb	r3, [r3, #2]
 800b79c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d114      	bne.n	800b7ce <pb_enc_bytes+0x5e>
        PB_BYTES_ARRAY_T_ALLOCSIZE(bytes->size) > field->data_size)
 800b7a4:	697b      	ldr	r3, [r7, #20]
 800b7a6:	881b      	ldrh	r3, [r3, #0]
 800b7a8:	3302      	adds	r3, #2
 800b7aa:	68ba      	ldr	r2, [r7, #8]
 800b7ac:	f8b2 2007 	ldrh.w	r2, [r2, #7]
 800b7b0:	b292      	uxth	r2, r2
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 800b7b2:	4293      	cmp	r3, r2
 800b7b4:	d90b      	bls.n	800b7ce <pb_enc_bytes+0x5e>
    {
        PB_RETURN_ERROR(stream, "bytes size exceeded");
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	691b      	ldr	r3, [r3, #16]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d002      	beq.n	800b7c4 <pb_enc_bytes+0x54>
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	691b      	ldr	r3, [r3, #16]
 800b7c2:	e000      	b.n	800b7c6 <pb_enc_bytes+0x56>
 800b7c4:	4b08      	ldr	r3, [pc, #32]	; (800b7e8 <pb_enc_bytes+0x78>)
 800b7c6:	68fa      	ldr	r2, [r7, #12]
 800b7c8:	6113      	str	r3, [r2, #16]
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	e008      	b.n	800b7e0 <pb_enc_bytes+0x70>
    }
    
    return pb_encode_string(stream, bytes->bytes, bytes->size);
 800b7ce:	697b      	ldr	r3, [r7, #20]
 800b7d0:	1c99      	adds	r1, r3, #2
 800b7d2:	697b      	ldr	r3, [r7, #20]
 800b7d4:	881b      	ldrh	r3, [r3, #0]
 800b7d6:	461a      	mov	r2, r3
 800b7d8:	68f8      	ldr	r0, [r7, #12]
 800b7da:	f7ff fde9 	bl	800b3b0 <pb_encode_string>
 800b7de:	4603      	mov	r3, r0
}
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	3718      	adds	r7, #24
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	bd80      	pop	{r7, pc}
 800b7e8:	0800f1bc 	.word	0x0800f1bc

0800b7ec <pb_enc_string>:

static bool checkreturn pb_enc_string(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b088      	sub	sp, #32
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	60f8      	str	r0, [r7, #12]
 800b7f4:	60b9      	str	r1, [r7, #8]
 800b7f6:	607a      	str	r2, [r7, #4]
    size_t size = 0;
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	61fb      	str	r3, [r7, #28]
    size_t max_size = field->data_size;
 800b7fc:	68bb      	ldr	r3, [r7, #8]
 800b7fe:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800b802:	b29b      	uxth	r3, r3
 800b804:	61bb      	str	r3, [r7, #24]
    const char *p = (const char*)src;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	617b      	str	r3, [r7, #20]
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800b80a:	68bb      	ldr	r3, [r7, #8]
 800b80c:	789b      	ldrb	r3, [r3, #2]
 800b80e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b812:	2b80      	cmp	r3, #128	; 0x80
 800b814:	d102      	bne.n	800b81c <pb_enc_string+0x30>
        max_size = (size_t)-1;
 800b816:	f04f 33ff 	mov.w	r3, #4294967295
 800b81a:	61bb      	str	r3, [r7, #24]

    if (src == NULL)
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d108      	bne.n	800b834 <pb_enc_string+0x48>
    {
        size = 0; /* Treat null pointer as an empty string */
 800b822:	2300      	movs	r3, #0
 800b824:	61fb      	str	r3, [r7, #28]
 800b826:	e00d      	b.n	800b844 <pb_enc_string+0x58>
    else
    {
        /* strnlen() is not always available, so just use a loop */
        while (size < max_size && *p != '\0')
        {
            size++;
 800b828:	69fb      	ldr	r3, [r7, #28]
 800b82a:	3301      	adds	r3, #1
 800b82c:	61fb      	str	r3, [r7, #28]
            p++;
 800b82e:	697b      	ldr	r3, [r7, #20]
 800b830:	3301      	adds	r3, #1
 800b832:	617b      	str	r3, [r7, #20]
        while (size < max_size && *p != '\0')
 800b834:	69fa      	ldr	r2, [r7, #28]
 800b836:	69bb      	ldr	r3, [r7, #24]
 800b838:	429a      	cmp	r2, r3
 800b83a:	d203      	bcs.n	800b844 <pb_enc_string+0x58>
 800b83c:	697b      	ldr	r3, [r7, #20]
 800b83e:	781b      	ldrb	r3, [r3, #0]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d1f1      	bne.n	800b828 <pb_enc_string+0x3c>
        }
    }

    return pb_encode_string(stream, (const pb_byte_t*)src, size);
 800b844:	69fa      	ldr	r2, [r7, #28]
 800b846:	6879      	ldr	r1, [r7, #4]
 800b848:	68f8      	ldr	r0, [r7, #12]
 800b84a:	f7ff fdb1 	bl	800b3b0 <pb_encode_string>
 800b84e:	4603      	mov	r3, r0
}
 800b850:	4618      	mov	r0, r3
 800b852:	3720      	adds	r7, #32
 800b854:	46bd      	mov	sp, r7
 800b856:	bd80      	pop	{r7, pc}

0800b858 <pb_enc_submessage>:

static bool checkreturn pb_enc_submessage(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b084      	sub	sp, #16
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	60f8      	str	r0, [r7, #12]
 800b860:	60b9      	str	r1, [r7, #8]
 800b862:	607a      	str	r2, [r7, #4]
    if (field->ptr == NULL)
 800b864:	68bb      	ldr	r3, [r7, #8]
 800b866:	f8d3 300b 	ldr.w	r3, [r3, #11]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d10b      	bne.n	800b886 <pb_enc_submessage+0x2e>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	691b      	ldr	r3, [r3, #16]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d002      	beq.n	800b87c <pb_enc_submessage+0x24>
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	691b      	ldr	r3, [r3, #16]
 800b87a:	e000      	b.n	800b87e <pb_enc_submessage+0x26>
 800b87c:	4b08      	ldr	r3, [pc, #32]	; (800b8a0 <pb_enc_submessage+0x48>)
 800b87e:	68fa      	ldr	r2, [r7, #12]
 800b880:	6113      	str	r3, [r2, #16]
 800b882:	2300      	movs	r3, #0
 800b884:	e008      	b.n	800b898 <pb_enc_submessage+0x40>
    
    return pb_encode_submessage(stream, (const pb_field_t*)field->ptr, src);
 800b886:	68bb      	ldr	r3, [r7, #8]
 800b888:	f8d3 300b 	ldr.w	r3, [r3, #11]
 800b88c:	687a      	ldr	r2, [r7, #4]
 800b88e:	4619      	mov	r1, r3
 800b890:	68f8      	ldr	r0, [r7, #12]
 800b892:	f7ff fdad 	bl	800b3f0 <pb_encode_submessage>
 800b896:	4603      	mov	r3, r0
}
 800b898:	4618      	mov	r0, r3
 800b89a:	3710      	adds	r7, #16
 800b89c:	46bd      	mov	sp, r7
 800b89e:	bd80      	pop	{r7, pc}
 800b8a0:	0800f1d0 	.word	0x0800f1d0

0800b8a4 <pb_enc_fixed_length_bytes>:

static bool checkreturn pb_enc_fixed_length_bytes(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b084      	sub	sp, #16
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	60f8      	str	r0, [r7, #12]
 800b8ac:	60b9      	str	r1, [r7, #8]
 800b8ae:	607a      	str	r2, [r7, #4]
    return pb_encode_string(stream, (const pb_byte_t*)src, field->data_size);
 800b8b0:	68bb      	ldr	r3, [r7, #8]
 800b8b2:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800b8b6:	b29b      	uxth	r3, r3
 800b8b8:	461a      	mov	r2, r3
 800b8ba:	6879      	ldr	r1, [r7, #4]
 800b8bc:	68f8      	ldr	r0, [r7, #12]
 800b8be:	f7ff fd77 	bl	800b3b0 <pb_encode_string>
 800b8c2:	4603      	mov	r3, r0
}
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	3710      	adds	r7, #16
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	bd80      	pop	{r7, pc}

0800b8cc <MX_X_CUBE_AI_Init>:

/*************************************************************************
  *
  */
void MX_X_CUBE_AI_Init(void)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	af00      	add	r7, sp, #0
    MX_UARTx_Init();
 800b8d0:	f000 fabc 	bl	800be4c <MX_USART2_UART_Init>
    aiValidationInit();
 800b8d4:	f7fd f9d4 	bl	8008c80 <aiValidationInit>
    /* USER CODE BEGIN 0 */
    /* USER CODE END 0 */
}
 800b8d8:	bf00      	nop
 800b8da:	bd80      	pop	{r7, pc}

0800b8dc <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	af00      	add	r7, sp, #0
    aiValidationProcess();
 800b8e0:	f7fd f9e6 	bl	8008cb0 <aiValidationProcess>
    /* USER CODE BEGIN 1 */
    /* USER CODE END 1 */
}
 800b8e4:	bf00      	nop
 800b8e6:	bd80      	pop	{r7, pc}

0800b8e8 <ai_mnetwork_is_valid>:
AI_STATIC struct network_instance gnetworks[AI_MNETWORK_NUMBER] = {0};

AI_DECLARE_STATIC
ai_bool ai_mnetwork_is_valid(const char* name,
        const ai_network_entry_t *entry)
{
 800b8e8:	b590      	push	{r4, r7, lr}
 800b8ea:	b083      	sub	sp, #12
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
 800b8f0:	6039      	str	r1, [r7, #0]
    if (name && (strlen(entry->name) == strlen(name)) &&
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d01d      	beq.n	800b934 <ai_mnetwork_is_valid+0x4c>
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	f7f9 f918 	bl	8004b32 <strlen>
 800b902:	4604      	mov	r4, r0
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	f7f9 f914 	bl	8004b32 <strlen>
 800b90a:	4603      	mov	r3, r0
 800b90c:	429c      	cmp	r4, r3
 800b90e:	d111      	bne.n	800b934 <ai_mnetwork_is_valid+0x4c>
            (strncmp(entry->name, name, strlen(entry->name)) == 0))
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	681c      	ldr	r4, [r3, #0]
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	4618      	mov	r0, r3
 800b91a:	f7f9 f90a 	bl	8004b32 <strlen>
 800b91e:	4603      	mov	r3, r0
 800b920:	461a      	mov	r2, r3
 800b922:	6879      	ldr	r1, [r7, #4]
 800b924:	4620      	mov	r0, r4
 800b926:	f001 f815 	bl	800c954 <strncmp>
 800b92a:	4603      	mov	r3, r0
    if (name && (strlen(entry->name) == strlen(name)) &&
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d101      	bne.n	800b934 <ai_mnetwork_is_valid+0x4c>
        return true;
 800b930:	2301      	movs	r3, #1
 800b932:	e000      	b.n	800b936 <ai_mnetwork_is_valid+0x4e>
    return false;
 800b934:	2300      	movs	r3, #0
}
 800b936:	4618      	mov	r0, r3
 800b938:	370c      	adds	r7, #12
 800b93a:	46bd      	mov	sp, r7
 800b93c:	bd90      	pop	{r4, r7, pc}
	...

0800b940 <ai_mnetwork_handle>:

AI_DECLARE_STATIC
struct network_instance *ai_mnetwork_handle(struct network_instance *inst)
{
 800b940:	b480      	push	{r7}
 800b942:	b085      	sub	sp, #20
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 800b948:	2300      	movs	r3, #0
 800b94a:	60fb      	str	r3, [r7, #12]
 800b94c:	e026      	b.n	800b99c <ai_mnetwork_handle+0x5c>
        if ((inst) && (&gnetworks[i] == inst))
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d00b      	beq.n	800b96c <ai_mnetwork_handle+0x2c>
 800b954:	68fa      	ldr	r2, [r7, #12]
 800b956:	4613      	mov	r3, r2
 800b958:	005b      	lsls	r3, r3, #1
 800b95a:	4413      	add	r3, r2
 800b95c:	011b      	lsls	r3, r3, #4
 800b95e:	4a14      	ldr	r2, [pc, #80]	; (800b9b0 <ai_mnetwork_handle+0x70>)
 800b960:	4413      	add	r3, r2
 800b962:	687a      	ldr	r2, [r7, #4]
 800b964:	429a      	cmp	r2, r3
 800b966:	d101      	bne.n	800b96c <ai_mnetwork_handle+0x2c>
            return inst;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	e01b      	b.n	800b9a4 <ai_mnetwork_handle+0x64>
        else if ((!inst) && (gnetworks[i].entry == NULL))
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d111      	bne.n	800b996 <ai_mnetwork_handle+0x56>
 800b972:	490f      	ldr	r1, [pc, #60]	; (800b9b0 <ai_mnetwork_handle+0x70>)
 800b974:	68fa      	ldr	r2, [r7, #12]
 800b976:	4613      	mov	r3, r2
 800b978:	005b      	lsls	r3, r3, #1
 800b97a:	4413      	add	r3, r2
 800b97c:	011b      	lsls	r3, r3, #4
 800b97e:	440b      	add	r3, r1
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d107      	bne.n	800b996 <ai_mnetwork_handle+0x56>
            return &gnetworks[i];
 800b986:	68fa      	ldr	r2, [r7, #12]
 800b988:	4613      	mov	r3, r2
 800b98a:	005b      	lsls	r3, r3, #1
 800b98c:	4413      	add	r3, r2
 800b98e:	011b      	lsls	r3, r3, #4
 800b990:	4a07      	ldr	r2, [pc, #28]	; (800b9b0 <ai_mnetwork_handle+0x70>)
 800b992:	4413      	add	r3, r2
 800b994:	e006      	b.n	800b9a4 <ai_mnetwork_handle+0x64>
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	3301      	adds	r3, #1
 800b99a:	60fb      	str	r3, [r7, #12]
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	ddd5      	ble.n	800b94e <ai_mnetwork_handle+0xe>
    }
    return NULL;
 800b9a2:	2300      	movs	r3, #0
}
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	3714      	adds	r7, #20
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ae:	4770      	bx	lr
 800b9b0:	200009e4 	.word	0x200009e4

0800b9b4 <ai_mnetwork_release_handle>:

AI_DECLARE_STATIC
void ai_mnetwork_release_handle(struct network_instance *inst)
{
 800b9b4:	b480      	push	{r7}
 800b9b6:	b085      	sub	sp, #20
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 800b9bc:	2300      	movs	r3, #0
 800b9be:	60fb      	str	r3, [r7, #12]
 800b9c0:	e019      	b.n	800b9f6 <ai_mnetwork_release_handle+0x42>
        if ((inst) && (&gnetworks[i] == inst)) {
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d013      	beq.n	800b9f0 <ai_mnetwork_release_handle+0x3c>
 800b9c8:	68fa      	ldr	r2, [r7, #12]
 800b9ca:	4613      	mov	r3, r2
 800b9cc:	005b      	lsls	r3, r3, #1
 800b9ce:	4413      	add	r3, r2
 800b9d0:	011b      	lsls	r3, r3, #4
 800b9d2:	4a0d      	ldr	r2, [pc, #52]	; (800ba08 <ai_mnetwork_release_handle+0x54>)
 800b9d4:	4413      	add	r3, r2
 800b9d6:	687a      	ldr	r2, [r7, #4]
 800b9d8:	429a      	cmp	r2, r3
 800b9da:	d109      	bne.n	800b9f0 <ai_mnetwork_release_handle+0x3c>
            gnetworks[i].entry = NULL;
 800b9dc:	490a      	ldr	r1, [pc, #40]	; (800ba08 <ai_mnetwork_release_handle+0x54>)
 800b9de:	68fa      	ldr	r2, [r7, #12]
 800b9e0:	4613      	mov	r3, r2
 800b9e2:	005b      	lsls	r3, r3, #1
 800b9e4:	4413      	add	r3, r2
 800b9e6:	011b      	lsls	r3, r3, #4
 800b9e8:	440b      	add	r3, r1
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	601a      	str	r2, [r3, #0]
            return;
 800b9ee:	e005      	b.n	800b9fc <ai_mnetwork_release_handle+0x48>
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	3301      	adds	r3, #1
 800b9f4:	60fb      	str	r3, [r7, #12]
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	dde2      	ble.n	800b9c2 <ai_mnetwork_release_handle+0xe>
        }
    }
}
 800b9fc:	3714      	adds	r7, #20
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba04:	4770      	bx	lr
 800ba06:	bf00      	nop
 800ba08:	200009e4 	.word	0x200009e4

0800ba0c <ai_mnetwork_find>:

AI_API_ENTRY
const char* ai_mnetwork_find(const char *name, ai_int idx)
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b084      	sub	sp, #16
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
 800ba14:	6039      	str	r1, [r7, #0]
    const ai_network_entry_t *entry;

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 800ba16:	2300      	movs	r3, #0
 800ba18:	60fb      	str	r3, [r7, #12]
 800ba1a:	e01c      	b.n	800ba56 <ai_mnetwork_find+0x4a>
        entry = &networks[i];
 800ba1c:	68fa      	ldr	r2, [r7, #12]
 800ba1e:	4613      	mov	r3, r2
 800ba20:	009b      	lsls	r3, r3, #2
 800ba22:	4413      	add	r3, r2
 800ba24:	011b      	lsls	r3, r3, #4
 800ba26:	4a10      	ldr	r2, [pc, #64]	; (800ba68 <ai_mnetwork_find+0x5c>)
 800ba28:	4413      	add	r3, r2
 800ba2a:	60bb      	str	r3, [r7, #8]
        if (ai_mnetwork_is_valid(name, entry))
 800ba2c:	68b9      	ldr	r1, [r7, #8]
 800ba2e:	6878      	ldr	r0, [r7, #4]
 800ba30:	f7ff ff5a 	bl	800b8e8 <ai_mnetwork_is_valid>
 800ba34:	4603      	mov	r3, r0
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d002      	beq.n	800ba40 <ai_mnetwork_find+0x34>
            return entry->name;
 800ba3a:	68bb      	ldr	r3, [r7, #8]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	e00e      	b.n	800ba5e <ai_mnetwork_find+0x52>
        else {
            if (!idx--)
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	1e5a      	subs	r2, r3, #1
 800ba44:	603a      	str	r2, [r7, #0]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d102      	bne.n	800ba50 <ai_mnetwork_find+0x44>
                return entry->name;
 800ba4a:	68bb      	ldr	r3, [r7, #8]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	e006      	b.n	800ba5e <ai_mnetwork_find+0x52>
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	3301      	adds	r3, #1
 800ba54:	60fb      	str	r3, [r7, #12]
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	dddf      	ble.n	800ba1c <ai_mnetwork_find+0x10>
        }
    }
    return NULL;
 800ba5c:	2300      	movs	r3, #0
}
 800ba5e:	4618      	mov	r0, r3
 800ba60:	3710      	adds	r7, #16
 800ba62:	46bd      	mov	sp, r7
 800ba64:	bd80      	pop	{r7, pc}
 800ba66:	bf00      	nop
 800ba68:	0800f7a4 	.word	0x0800f7a4

0800ba6c <ai_mnetwork_create>:

AI_API_ENTRY
ai_error ai_mnetwork_create(const char *name, ai_handle* network,
        const ai_buffer* network_config)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b08a      	sub	sp, #40	; 0x28
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	60f8      	str	r0, [r7, #12]
 800ba74:	60b9      	str	r1, [r7, #8]
 800ba76:	607a      	str	r2, [r7, #4]
    const ai_network_entry_t *entry;
    const ai_network_entry_t *found = NULL;
 800ba78:	2300      	movs	r3, #0
 800ba7a:	627b      	str	r3, [r7, #36]	; 0x24
    ai_error err;
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 800ba7c:	2000      	movs	r0, #0
 800ba7e:	f7ff ff5f 	bl	800b940 <ai_mnetwork_handle>
 800ba82:	61f8      	str	r0, [r7, #28]

    if (!inst) {
 800ba84:	69fb      	ldr	r3, [r7, #28]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d108      	bne.n	800ba9c <ai_mnetwork_create+0x30>
        err.type = AI_ERROR_ALLOCATION_FAILED;
 800ba8a:	2331      	movs	r3, #49	; 0x31
 800ba8c:	753b      	strb	r3, [r7, #20]
        err.code = AI_ERROR_CODE_NETWORK;
 800ba8e:	697b      	ldr	r3, [r7, #20]
 800ba90:	2210      	movs	r2, #16
 800ba92:	f362 231f 	bfi	r3, r2, #8, #24
 800ba96:	617b      	str	r3, [r7, #20]
        return err;
 800ba98:	697b      	ldr	r3, [r7, #20]
 800ba9a:	e04d      	b.n	800bb38 <ai_mnetwork_create+0xcc>
    }

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	623b      	str	r3, [r7, #32]
 800baa0:	e014      	b.n	800bacc <ai_mnetwork_create+0x60>
        entry = &networks[i];
 800baa2:	6a3a      	ldr	r2, [r7, #32]
 800baa4:	4613      	mov	r3, r2
 800baa6:	009b      	lsls	r3, r3, #2
 800baa8:	4413      	add	r3, r2
 800baaa:	011b      	lsls	r3, r3, #4
 800baac:	4a24      	ldr	r2, [pc, #144]	; (800bb40 <ai_mnetwork_create+0xd4>)
 800baae:	4413      	add	r3, r2
 800bab0:	61bb      	str	r3, [r7, #24]
        if (ai_mnetwork_is_valid(name, entry)) {
 800bab2:	69b9      	ldr	r1, [r7, #24]
 800bab4:	68f8      	ldr	r0, [r7, #12]
 800bab6:	f7ff ff17 	bl	800b8e8 <ai_mnetwork_is_valid>
 800baba:	4603      	mov	r3, r0
 800babc:	2b00      	cmp	r3, #0
 800babe:	d002      	beq.n	800bac6 <ai_mnetwork_create+0x5a>
            found = entry;
 800bac0:	69bb      	ldr	r3, [r7, #24]
 800bac2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800bac4:	e005      	b.n	800bad2 <ai_mnetwork_create+0x66>
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 800bac6:	6a3b      	ldr	r3, [r7, #32]
 800bac8:	3301      	adds	r3, #1
 800baca:	623b      	str	r3, [r7, #32]
 800bacc:	6a3b      	ldr	r3, [r7, #32]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	dde7      	ble.n	800baa2 <ai_mnetwork_create+0x36>
        }
    }

    if (!found) {
 800bad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d108      	bne.n	800baea <ai_mnetwork_create+0x7e>
        err.type = AI_ERROR_INVALID_PARAM;
 800bad8:	2314      	movs	r3, #20
 800bada:	753b      	strb	r3, [r7, #20]
        err.code = AI_ERROR_CODE_NETWORK;
 800badc:	697b      	ldr	r3, [r7, #20]
 800bade:	2210      	movs	r2, #16
 800bae0:	f362 231f 	bfi	r3, r2, #8, #24
 800bae4:	617b      	str	r3, [r7, #20]
        return err;
 800bae6:	697b      	ldr	r3, [r7, #20]
 800bae8:	e026      	b.n	800bb38 <ai_mnetwork_create+0xcc>
    }

    if (network_config == NULL)
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d109      	bne.n	800bb04 <ai_mnetwork_create+0x98>
        err = found->ai_create(network, found->config);
 800baf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800baf6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800baf8:	4611      	mov	r1, r2
 800bafa:	68b8      	ldr	r0, [r7, #8]
 800bafc:	4798      	blx	r3
 800bafe:	4603      	mov	r3, r0
 800bb00:	617b      	str	r3, [r7, #20]
 800bb02:	e006      	b.n	800bb12 <ai_mnetwork_create+0xa6>
    else
        err = found->ai_create(network, network_config);
 800bb04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb08:	6879      	ldr	r1, [r7, #4]
 800bb0a:	68b8      	ldr	r0, [r7, #8]
 800bb0c:	4798      	blx	r3
 800bb0e:	4603      	mov	r3, r0
 800bb10:	617b      	str	r3, [r7, #20]
    if ((err.code == AI_ERROR_CODE_NONE) && (err.type == AI_ERROR_NONE)) {
 800bb12:	697b      	ldr	r3, [r7, #20]
 800bb14:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d10c      	bne.n	800bb36 <ai_mnetwork_create+0xca>
 800bb1c:	7d3b      	ldrb	r3, [r7, #20]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d109      	bne.n	800bb36 <ai_mnetwork_create+0xca>
        inst->entry = found;
 800bb22:	69fb      	ldr	r3, [r7, #28]
 800bb24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb26:	601a      	str	r2, [r3, #0]
        inst->handle = *network;
 800bb28:	68bb      	ldr	r3, [r7, #8]
 800bb2a:	681a      	ldr	r2, [r3, #0]
 800bb2c:	69fb      	ldr	r3, [r7, #28]
 800bb2e:	605a      	str	r2, [r3, #4]
        *network = (ai_handle*)inst;
 800bb30:	68bb      	ldr	r3, [r7, #8]
 800bb32:	69fa      	ldr	r2, [r7, #28]
 800bb34:	601a      	str	r2, [r3, #0]
    }

    return err;
 800bb36:	697b      	ldr	r3, [r7, #20]
}
 800bb38:	4618      	mov	r0, r3
 800bb3a:	3728      	adds	r7, #40	; 0x28
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	bd80      	pop	{r7, pc}
 800bb40:	0800f7a4 	.word	0x0800f7a4

0800bb44 <ai_mnetwork_destroy>:

AI_API_ENTRY
ai_handle ai_mnetwork_destroy(ai_handle network)
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b084      	sub	sp, #16
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 800bb4c:	6878      	ldr	r0, [r7, #4]
 800bb4e:	f7ff fef7 	bl	800b940 <ai_mnetwork_handle>
 800bb52:	60f8      	str	r0, [r7, #12]
    if (inn) {
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d011      	beq.n	800bb7e <ai_mnetwork_destroy+0x3a>
        ai_handle hdl = inn->entry->ai_destroy(inn->handle);
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb60:	68fa      	ldr	r2, [r7, #12]
 800bb62:	6852      	ldr	r2, [r2, #4]
 800bb64:	4610      	mov	r0, r2
 800bb66:	4798      	blx	r3
 800bb68:	60b8      	str	r0, [r7, #8]
        if (hdl != inn->handle) {
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	685b      	ldr	r3, [r3, #4]
 800bb6e:	68ba      	ldr	r2, [r7, #8]
 800bb70:	429a      	cmp	r2, r3
 800bb72:	d004      	beq.n	800bb7e <ai_mnetwork_destroy+0x3a>
            ai_mnetwork_release_handle(inn);
 800bb74:	68f8      	ldr	r0, [r7, #12]
 800bb76:	f7ff ff1d 	bl	800b9b4 <ai_mnetwork_release_handle>
            network = AI_HANDLE_NULL;
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	607b      	str	r3, [r7, #4]
        }
    }
    return network;
 800bb7e:	687b      	ldr	r3, [r7, #4]
}
 800bb80:	4618      	mov	r0, r3
 800bb82:	3710      	adds	r7, #16
 800bb84:	46bd      	mov	sp, r7
 800bb86:	bd80      	pop	{r7, pc}

0800bb88 <ai_mnetwork_get_info>:

AI_API_ENTRY
ai_bool ai_mnetwork_get_info(ai_handle network, ai_network_report* report)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b084      	sub	sp, #16
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
 800bb90:	6039      	str	r1, [r7, #0]
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 800bb92:	6878      	ldr	r0, [r7, #4]
 800bb94:	f7ff fed4 	bl	800b940 <ai_mnetwork_handle>
 800bb98:	60f8      	str	r0, [r7, #12]
    if (inn)
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d009      	beq.n	800bbb4 <ai_mnetwork_get_info+0x2c>
        return inn->entry->ai_get_info(inn->handle, report);
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bba6:	68fa      	ldr	r2, [r7, #12]
 800bba8:	6852      	ldr	r2, [r2, #4]
 800bbaa:	6839      	ldr	r1, [r7, #0]
 800bbac:	4610      	mov	r0, r2
 800bbae:	4798      	blx	r3
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	e000      	b.n	800bbb6 <ai_mnetwork_get_info+0x2e>
    else
        return false;
 800bbb4:	2300      	movs	r3, #0
}
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	3710      	adds	r7, #16
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bd80      	pop	{r7, pc}

0800bbbe <ai_mnetwork_get_error>:

AI_API_ENTRY
ai_error ai_mnetwork_get_error(ai_handle network)
{
 800bbbe:	b580      	push	{r7, lr}
 800bbc0:	b084      	sub	sp, #16
 800bbc2:	af00      	add	r7, sp, #0
 800bbc4:	6078      	str	r0, [r7, #4]
    struct network_instance *inn;
    ai_error err;
    err.type = AI_ERROR_INVALID_PARAM;
 800bbc6:	2314      	movs	r3, #20
 800bbc8:	723b      	strb	r3, [r7, #8]
    err.code = AI_ERROR_CODE_NETWORK;
 800bbca:	68bb      	ldr	r3, [r7, #8]
 800bbcc:	2210      	movs	r2, #16
 800bbce:	f362 231f 	bfi	r3, r2, #8, #24
 800bbd2:	60bb      	str	r3, [r7, #8]

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 800bbd4:	6878      	ldr	r0, [r7, #4]
 800bbd6:	f7ff feb3 	bl	800b940 <ai_mnetwork_handle>
 800bbda:	60f8      	str	r0, [r7, #12]
    if (inn)
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d008      	beq.n	800bbf4 <ai_mnetwork_get_error+0x36>
        return inn->entry->ai_get_error(inn->handle);
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbe8:	68fa      	ldr	r2, [r7, #12]
 800bbea:	6852      	ldr	r2, [r2, #4]
 800bbec:	4610      	mov	r0, r2
 800bbee:	4798      	blx	r3
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	e000      	b.n	800bbf6 <ai_mnetwork_get_error+0x38>
    else
        return err;
 800bbf4:	68bb      	ldr	r3, [r7, #8]
}
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	3710      	adds	r7, #16
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	bd80      	pop	{r7, pc}

0800bbfe <ai_mnetwork_init>:

AI_API_ENTRY
ai_bool ai_mnetwork_init(ai_handle network, const ai_network_params* params)
{
 800bbfe:	b5b0      	push	{r4, r5, r7, lr}
 800bc00:	b08e      	sub	sp, #56	; 0x38
 800bc02:	af00      	add	r7, sp, #0
 800bc04:	6078      	str	r0, [r7, #4]
 800bc06:	6039      	str	r1, [r7, #0]
    struct network_instance *inn;
    ai_network_params par;

    /* TODO: adding check ai_buffer activations/weights shape coherence */

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 800bc08:	6878      	ldr	r0, [r7, #4]
 800bc0a:	f7ff fe99 	bl	800b940 <ai_mnetwork_handle>
 800bc0e:	6378      	str	r0, [r7, #52]	; 0x34
    if (inn) {
 800bc10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d03b      	beq.n	800bc8e <ai_mnetwork_init+0x90>
        par = inn->entry->params;
 800bc16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	f107 040c 	add.w	r4, r7, #12
 800bc1e:	1d1d      	adds	r5, r3, #4
 800bc20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bc22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bc24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bc26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bc28:	e895 0003 	ldmia.w	r5, {r0, r1}
 800bc2c:	e884 0003 	stmia.w	r4, {r0, r1}
        if (params->activations.n_batches)
 800bc30:	683b      	ldr	r3, [r7, #0]
 800bc32:	8b1b      	ldrh	r3, [r3, #24]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d009      	beq.n	800bc4c <ai_mnetwork_init+0x4e>
            par.activations = params->activations;
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	f107 0420 	add.w	r4, r7, #32
 800bc3e:	f103 0514 	add.w	r5, r3, #20
 800bc42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bc44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bc46:	682b      	ldr	r3, [r5, #0]
 800bc48:	6023      	str	r3, [r4, #0]
 800bc4a:	e002      	b.n	800bc52 <ai_mnetwork_init+0x54>
        else
            par.activations.data = params->activations.data;
 800bc4c:	683b      	ldr	r3, [r7, #0]
 800bc4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc50:	633b      	str	r3, [r7, #48]	; 0x30
        if (params->params.n_batches)
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	889b      	ldrh	r3, [r3, #4]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d008      	beq.n	800bc6c <ai_mnetwork_init+0x6e>
            par.params = params->params;
 800bc5a:	683b      	ldr	r3, [r7, #0]
 800bc5c:	f107 040c 	add.w	r4, r7, #12
 800bc60:	461d      	mov	r5, r3
 800bc62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bc64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bc66:	682b      	ldr	r3, [r5, #0]
 800bc68:	6023      	str	r3, [r4, #0]
 800bc6a:	e005      	b.n	800bc78 <ai_mnetwork_init+0x7a>
        else
            par.params.data = inn->entry->ai_data_weights_get_default();
 800bc6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc72:	4798      	blx	r3
 800bc74:	4603      	mov	r3, r0
 800bc76:	61fb      	str	r3, [r7, #28]
        return inn->entry->ai_init(inn->handle, &par);
 800bc78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bc80:	6852      	ldr	r2, [r2, #4]
 800bc82:	f107 010c 	add.w	r1, r7, #12
 800bc86:	4610      	mov	r0, r2
 800bc88:	4798      	blx	r3
 800bc8a:	4603      	mov	r3, r0
 800bc8c:	e000      	b.n	800bc90 <ai_mnetwork_init+0x92>
    }
    else
        return false;
 800bc8e:	2300      	movs	r3, #0
}
 800bc90:	4618      	mov	r0, r3
 800bc92:	3738      	adds	r7, #56	; 0x38
 800bc94:	46bd      	mov	sp, r7
 800bc96:	bdb0      	pop	{r4, r5, r7, pc}

0800bc98 <ai_mnetwork_run>:

AI_API_ENTRY
ai_i32 ai_mnetwork_run(ai_handle network, const ai_buffer* input,
        ai_buffer* output)
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b086      	sub	sp, #24
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	60f8      	str	r0, [r7, #12]
 800bca0:	60b9      	str	r1, [r7, #8]
 800bca2:	607a      	str	r2, [r7, #4]
    struct network_instance* inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 800bca4:	68f8      	ldr	r0, [r7, #12]
 800bca6:	f7ff fe4b 	bl	800b940 <ai_mnetwork_handle>
 800bcaa:	6178      	str	r0, [r7, #20]
    if (inn)
 800bcac:	697b      	ldr	r3, [r7, #20]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d009      	beq.n	800bcc6 <ai_mnetwork_run+0x2e>
        return inn->entry->ai_run(inn->handle, input, output);
 800bcb2:	697b      	ldr	r3, [r7, #20]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bcb8:	697a      	ldr	r2, [r7, #20]
 800bcba:	6850      	ldr	r0, [r2, #4]
 800bcbc:	687a      	ldr	r2, [r7, #4]
 800bcbe:	68b9      	ldr	r1, [r7, #8]
 800bcc0:	4798      	blx	r3
 800bcc2:	4603      	mov	r3, r0
 800bcc4:	e000      	b.n	800bcc8 <ai_mnetwork_run+0x30>
    else
        return 0;
 800bcc6:	2300      	movs	r3, #0
}
 800bcc8:	4618      	mov	r0, r3
 800bcca:	3718      	adds	r7, #24
 800bccc:	46bd      	mov	sp, r7
 800bcce:	bd80      	pop	{r7, pc}

0800bcd0 <ai_mnetwork_get_private_handle>:

AI_API_ENTRY
 int ai_mnetwork_get_private_handle(ai_handle network,
         ai_handle *phandle,
         ai_network_params *pparams)
 {
 800bcd0:	b5b0      	push	{r4, r5, r7, lr}
 800bcd2:	b086      	sub	sp, #24
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	60f8      	str	r0, [r7, #12]
 800bcd8:	60b9      	str	r1, [r7, #8]
 800bcda:	607a      	str	r2, [r7, #4]
     struct network_instance* inn;
     inn =  ai_mnetwork_handle((struct network_instance *)network);
 800bcdc:	68f8      	ldr	r0, [r7, #12]
 800bcde:	f7ff fe2f 	bl	800b940 <ai_mnetwork_handle>
 800bce2:	6178      	str	r0, [r7, #20]
     if (inn && phandle && pparams) {
 800bce4:	697b      	ldr	r3, [r7, #20]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d018      	beq.n	800bd1c <ai_mnetwork_get_private_handle+0x4c>
 800bcea:	68bb      	ldr	r3, [r7, #8]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d015      	beq.n	800bd1c <ai_mnetwork_get_private_handle+0x4c>
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d012      	beq.n	800bd1c <ai_mnetwork_get_private_handle+0x4c>
         *phandle = inn->handle;
 800bcf6:	697b      	ldr	r3, [r7, #20]
 800bcf8:	685a      	ldr	r2, [r3, #4]
 800bcfa:	68bb      	ldr	r3, [r7, #8]
 800bcfc:	601a      	str	r2, [r3, #0]
         *pparams = inn->params;
 800bcfe:	687a      	ldr	r2, [r7, #4]
 800bd00:	697b      	ldr	r3, [r7, #20]
 800bd02:	4615      	mov	r5, r2
 800bd04:	f103 0408 	add.w	r4, r3, #8
 800bd08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bd0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bd0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bd0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bd10:	e894 0003 	ldmia.w	r4, {r0, r1}
 800bd14:	e885 0003 	stmia.w	r5, {r0, r1}
         return 0;
 800bd18:	2300      	movs	r3, #0
 800bd1a:	e001      	b.n	800bd20 <ai_mnetwork_get_private_handle+0x50>
     }
     else
         return -1;
 800bd1c:	f04f 33ff 	mov.w	r3, #4294967295
 }
 800bd20:	4618      	mov	r0, r3
 800bd22:	3718      	adds	r7, #24
 800bd24:	46bd      	mov	sp, r7
 800bd26:	bdb0      	pop	{r4, r5, r7, pc}

0800bd28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800bd2c:	f7f9 fc94 	bl	8005658 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800bd30:	f000 f80a 	bl	800bd48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800bd34:	f000 f8b4 	bl	800bea0 <MX_GPIO_Init>
  MX_CRC_Init();
 800bd38:	f000 f874 	bl	800be24 <MX_CRC_Init>
  MX_X_CUBE_AI_Init();
 800bd3c:	f7ff fdc6 	bl	800b8cc <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_X_CUBE_AI_Process();
 800bd40:	f7ff fdcc 	bl	800b8dc <MX_X_CUBE_AI_Process>
 800bd44:	e7fc      	b.n	800bd40 <main+0x18>
	...

0800bd48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b094      	sub	sp, #80	; 0x50
 800bd4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800bd4e:	f107 031c 	add.w	r3, r7, #28
 800bd52:	2234      	movs	r2, #52	; 0x34
 800bd54:	2100      	movs	r1, #0
 800bd56:	4618      	mov	r0, r3
 800bd58:	f000 fcb8 	bl	800c6cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800bd5c:	f107 0308 	add.w	r3, r7, #8
 800bd60:	2200      	movs	r2, #0
 800bd62:	601a      	str	r2, [r3, #0]
 800bd64:	605a      	str	r2, [r3, #4]
 800bd66:	609a      	str	r2, [r3, #8]
 800bd68:	60da      	str	r2, [r3, #12]
 800bd6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	607b      	str	r3, [r7, #4]
 800bd70:	4b2a      	ldr	r3, [pc, #168]	; (800be1c <SystemClock_Config+0xd4>)
 800bd72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd74:	4a29      	ldr	r2, [pc, #164]	; (800be1c <SystemClock_Config+0xd4>)
 800bd76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bd7a:	6413      	str	r3, [r2, #64]	; 0x40
 800bd7c:	4b27      	ldr	r3, [pc, #156]	; (800be1c <SystemClock_Config+0xd4>)
 800bd7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bd84:	607b      	str	r3, [r7, #4]
 800bd86:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800bd88:	2300      	movs	r3, #0
 800bd8a:	603b      	str	r3, [r7, #0]
 800bd8c:	4b24      	ldr	r3, [pc, #144]	; (800be20 <SystemClock_Config+0xd8>)
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800bd94:	4a22      	ldr	r2, [pc, #136]	; (800be20 <SystemClock_Config+0xd8>)
 800bd96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bd9a:	6013      	str	r3, [r2, #0]
 800bd9c:	4b20      	ldr	r3, [pc, #128]	; (800be20 <SystemClock_Config+0xd8>)
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800bda4:	603b      	str	r3, [r7, #0]
 800bda6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800bda8:	2302      	movs	r3, #2
 800bdaa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800bdac:	2301      	movs	r3, #1
 800bdae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800bdb0:	2310      	movs	r3, #16
 800bdb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800bdb4:	2302      	movs	r3, #2
 800bdb6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800bdb8:	2300      	movs	r3, #0
 800bdba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800bdbc:	2310      	movs	r3, #16
 800bdbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800bdc0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800bdc4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800bdc6:	2304      	movs	r3, #4
 800bdc8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800bdca:	2302      	movs	r3, #2
 800bdcc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800bdce:	2302      	movs	r3, #2
 800bdd0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800bdd2:	f107 031c 	add.w	r3, r7, #28
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	f7fa fa5c 	bl	8006294 <HAL_RCC_OscConfig>
 800bddc:	4603      	mov	r3, r0
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d001      	beq.n	800bde6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800bde2:	f000 f8cd 	bl	800bf80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800bde6:	230f      	movs	r3, #15
 800bde8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800bdea:	2302      	movs	r3, #2
 800bdec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800bdee:	2300      	movs	r3, #0
 800bdf0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800bdf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bdf6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800bdfc:	f107 0308 	add.w	r3, r7, #8
 800be00:	2102      	movs	r1, #2
 800be02:	4618      	mov	r0, r3
 800be04:	f7f9 ff90 	bl	8005d28 <HAL_RCC_ClockConfig>
 800be08:	4603      	mov	r3, r0
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d001      	beq.n	800be12 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800be0e:	f000 f8b7 	bl	800bf80 <Error_Handler>
  }
}
 800be12:	bf00      	nop
 800be14:	3750      	adds	r7, #80	; 0x50
 800be16:	46bd      	mov	sp, r7
 800be18:	bd80      	pop	{r7, pc}
 800be1a:	bf00      	nop
 800be1c:	40023800 	.word	0x40023800
 800be20:	40007000 	.word	0x40007000

0800be24 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800be24:	b580      	push	{r7, lr}
 800be26:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800be28:	4b06      	ldr	r3, [pc, #24]	; (800be44 <MX_CRC_Init+0x20>)
 800be2a:	4a07      	ldr	r2, [pc, #28]	; (800be48 <MX_CRC_Init+0x24>)
 800be2c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800be2e:	4805      	ldr	r0, [pc, #20]	; (800be44 <MX_CRC_Init+0x20>)
 800be30:	f7f9 fdaf 	bl	8005992 <HAL_CRC_Init>
 800be34:	4603      	mov	r3, r0
 800be36:	2b00      	cmp	r3, #0
 800be38:	d001      	beq.n	800be3e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800be3a:	f000 f8a1 	bl	800bf80 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800be3e:	bf00      	nop
 800be40:	bd80      	pop	{r7, pc}
 800be42:	bf00      	nop
 800be44:	20000a90 	.word	0x20000a90
 800be48:	40023000 	.word	0x40023000

0800be4c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800be50:	4b11      	ldr	r3, [pc, #68]	; (800be98 <MX_USART2_UART_Init+0x4c>)
 800be52:	4a12      	ldr	r2, [pc, #72]	; (800be9c <MX_USART2_UART_Init+0x50>)
 800be54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800be56:	4b10      	ldr	r3, [pc, #64]	; (800be98 <MX_USART2_UART_Init+0x4c>)
 800be58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800be5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800be5e:	4b0e      	ldr	r3, [pc, #56]	; (800be98 <MX_USART2_UART_Init+0x4c>)
 800be60:	2200      	movs	r2, #0
 800be62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800be64:	4b0c      	ldr	r3, [pc, #48]	; (800be98 <MX_USART2_UART_Init+0x4c>)
 800be66:	2200      	movs	r2, #0
 800be68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800be6a:	4b0b      	ldr	r3, [pc, #44]	; (800be98 <MX_USART2_UART_Init+0x4c>)
 800be6c:	2200      	movs	r2, #0
 800be6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800be70:	4b09      	ldr	r3, [pc, #36]	; (800be98 <MX_USART2_UART_Init+0x4c>)
 800be72:	220c      	movs	r2, #12
 800be74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800be76:	4b08      	ldr	r3, [pc, #32]	; (800be98 <MX_USART2_UART_Init+0x4c>)
 800be78:	2200      	movs	r2, #0
 800be7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800be7c:	4b06      	ldr	r3, [pc, #24]	; (800be98 <MX_USART2_UART_Init+0x4c>)
 800be7e:	2200      	movs	r2, #0
 800be80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800be82:	4805      	ldr	r0, [pc, #20]	; (800be98 <MX_USART2_UART_Init+0x4c>)
 800be84:	f7fa fc60 	bl	8006748 <HAL_UART_Init>
 800be88:	4603      	mov	r3, r0
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d001      	beq.n	800be92 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800be8e:	f000 f877 	bl	800bf80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800be92:	bf00      	nop
 800be94:	bd80      	pop	{r7, pc}
 800be96:	bf00      	nop
 800be98:	20000a98 	.word	0x20000a98
 800be9c:	40004400 	.word	0x40004400

0800bea0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b08a      	sub	sp, #40	; 0x28
 800bea4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bea6:	f107 0314 	add.w	r3, r7, #20
 800beaa:	2200      	movs	r2, #0
 800beac:	601a      	str	r2, [r3, #0]
 800beae:	605a      	str	r2, [r3, #4]
 800beb0:	609a      	str	r2, [r3, #8]
 800beb2:	60da      	str	r2, [r3, #12]
 800beb4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800beb6:	2300      	movs	r3, #0
 800beb8:	613b      	str	r3, [r7, #16]
 800beba:	4b2d      	ldr	r3, [pc, #180]	; (800bf70 <MX_GPIO_Init+0xd0>)
 800bebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bebe:	4a2c      	ldr	r2, [pc, #176]	; (800bf70 <MX_GPIO_Init+0xd0>)
 800bec0:	f043 0304 	orr.w	r3, r3, #4
 800bec4:	6313      	str	r3, [r2, #48]	; 0x30
 800bec6:	4b2a      	ldr	r3, [pc, #168]	; (800bf70 <MX_GPIO_Init+0xd0>)
 800bec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800beca:	f003 0304 	and.w	r3, r3, #4
 800bece:	613b      	str	r3, [r7, #16]
 800bed0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800bed2:	2300      	movs	r3, #0
 800bed4:	60fb      	str	r3, [r7, #12]
 800bed6:	4b26      	ldr	r3, [pc, #152]	; (800bf70 <MX_GPIO_Init+0xd0>)
 800bed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800beda:	4a25      	ldr	r2, [pc, #148]	; (800bf70 <MX_GPIO_Init+0xd0>)
 800bedc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bee0:	6313      	str	r3, [r2, #48]	; 0x30
 800bee2:	4b23      	ldr	r3, [pc, #140]	; (800bf70 <MX_GPIO_Init+0xd0>)
 800bee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800beea:	60fb      	str	r3, [r7, #12]
 800beec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800beee:	2300      	movs	r3, #0
 800bef0:	60bb      	str	r3, [r7, #8]
 800bef2:	4b1f      	ldr	r3, [pc, #124]	; (800bf70 <MX_GPIO_Init+0xd0>)
 800bef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bef6:	4a1e      	ldr	r2, [pc, #120]	; (800bf70 <MX_GPIO_Init+0xd0>)
 800bef8:	f043 0301 	orr.w	r3, r3, #1
 800befc:	6313      	str	r3, [r2, #48]	; 0x30
 800befe:	4b1c      	ldr	r3, [pc, #112]	; (800bf70 <MX_GPIO_Init+0xd0>)
 800bf00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf02:	f003 0301 	and.w	r3, r3, #1
 800bf06:	60bb      	str	r3, [r7, #8]
 800bf08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	607b      	str	r3, [r7, #4]
 800bf0e:	4b18      	ldr	r3, [pc, #96]	; (800bf70 <MX_GPIO_Init+0xd0>)
 800bf10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf12:	4a17      	ldr	r2, [pc, #92]	; (800bf70 <MX_GPIO_Init+0xd0>)
 800bf14:	f043 0302 	orr.w	r3, r3, #2
 800bf18:	6313      	str	r3, [r2, #48]	; 0x30
 800bf1a:	4b15      	ldr	r3, [pc, #84]	; (800bf70 <MX_GPIO_Init+0xd0>)
 800bf1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf1e:	f003 0302 	and.w	r3, r3, #2
 800bf22:	607b      	str	r3, [r7, #4]
 800bf24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800bf26:	2200      	movs	r2, #0
 800bf28:	2120      	movs	r1, #32
 800bf2a:	4812      	ldr	r0, [pc, #72]	; (800bf74 <MX_GPIO_Init+0xd4>)
 800bf2c:	f7f9 fee2 	bl	8005cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800bf30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bf34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800bf36:	4b10      	ldr	r3, [pc, #64]	; (800bf78 <MX_GPIO_Init+0xd8>)
 800bf38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800bf3e:	f107 0314 	add.w	r3, r7, #20
 800bf42:	4619      	mov	r1, r3
 800bf44:	480d      	ldr	r0, [pc, #52]	; (800bf7c <MX_GPIO_Init+0xdc>)
 800bf46:	f7f9 fd43 	bl	80059d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800bf4a:	2320      	movs	r3, #32
 800bf4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bf4e:	2301      	movs	r3, #1
 800bf50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf52:	2300      	movs	r3, #0
 800bf54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bf56:	2300      	movs	r3, #0
 800bf58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800bf5a:	f107 0314 	add.w	r3, r7, #20
 800bf5e:	4619      	mov	r1, r3
 800bf60:	4804      	ldr	r0, [pc, #16]	; (800bf74 <MX_GPIO_Init+0xd4>)
 800bf62:	f7f9 fd35 	bl	80059d0 <HAL_GPIO_Init>

}
 800bf66:	bf00      	nop
 800bf68:	3728      	adds	r7, #40	; 0x28
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	bd80      	pop	{r7, pc}
 800bf6e:	bf00      	nop
 800bf70:	40023800 	.word	0x40023800
 800bf74:	40020000 	.word	0x40020000
 800bf78:	10210000 	.word	0x10210000
 800bf7c:	40020800 	.word	0x40020800

0800bf80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800bf80:	b480      	push	{r7}
 800bf82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800bf84:	bf00      	nop
 800bf86:	46bd      	mov	sp, r7
 800bf88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8c:	4770      	bx	lr
	...

0800bf90 <network_configure_activations>:


AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 800bf90:	b480      	push	{r7}
 800bf92:	b085      	sub	sp, #20
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
 800bf98:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 800bf9a:	683b      	ldr	r3, [r7, #0]
 800bf9c:	691b      	ldr	r3, [r3, #16]
 800bf9e:	3303      	adds	r3, #3
 800bfa0:	f023 0303 	bic.w	r3, r3, #3
 800bfa4:	60fb      	str	r3, [r7, #12]
  AI_ASSERT( activations )

  {
    /* Updating activations (byte) offsets */
    input_0_output_array.data = AI_PTR(NULL);
 800bfa6:	4b1a      	ldr	r3, [pc, #104]	; (800c010 <network_configure_activations+0x80>)
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	609a      	str	r2, [r3, #8]
    input_0_output_array.data_start = AI_PTR(NULL);
 800bfac:	4b18      	ldr	r3, [pc, #96]	; (800c010 <network_configure_activations+0x80>)
 800bfae:	2200      	movs	r2, #0
 800bfb0:	60da      	str	r2, [r3, #12]
    dense_1_output_array.data = AI_PTR(activations + 0);
 800bfb2:	4a18      	ldr	r2, [pc, #96]	; (800c014 <network_configure_activations+0x84>)
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(activations + 0);
 800bfb8:	4a16      	ldr	r2, [pc, #88]	; (800c014 <network_configure_activations+0x84>)
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	60d3      	str	r3, [r2, #12]
    dense_1_nl_output_array.data = AI_PTR(activations + 0);
 800bfbe:	4a16      	ldr	r2, [pc, #88]	; (800c018 <network_configure_activations+0x88>)
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	6093      	str	r3, [r2, #8]
    dense_1_nl_output_array.data_start = AI_PTR(activations + 0);
 800bfc4:	4a14      	ldr	r2, [pc, #80]	; (800c018 <network_configure_activations+0x88>)
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	60d3      	str	r3, [r2, #12]
    dense_2_output_array.data = AI_PTR(activations + 12);
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	330c      	adds	r3, #12
 800bfce:	4a13      	ldr	r2, [pc, #76]	; (800c01c <network_configure_activations+0x8c>)
 800bfd0:	6093      	str	r3, [r2, #8]
    dense_2_output_array.data_start = AI_PTR(activations + 12);
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	330c      	adds	r3, #12
 800bfd6:	4a11      	ldr	r2, [pc, #68]	; (800c01c <network_configure_activations+0x8c>)
 800bfd8:	60d3      	str	r3, [r2, #12]
    dense_2_nl_output_array.data = AI_PTR(activations + 12);
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	330c      	adds	r3, #12
 800bfde:	4a10      	ldr	r2, [pc, #64]	; (800c020 <network_configure_activations+0x90>)
 800bfe0:	6093      	str	r3, [r2, #8]
    dense_2_nl_output_array.data_start = AI_PTR(activations + 12);
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	330c      	adds	r3, #12
 800bfe6:	4a0e      	ldr	r2, [pc, #56]	; (800c020 <network_configure_activations+0x90>)
 800bfe8:	60d3      	str	r3, [r2, #12]
    dense_3_output_array.data = AI_PTR(activations + 0);
 800bfea:	4a0e      	ldr	r2, [pc, #56]	; (800c024 <network_configure_activations+0x94>)
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	6093      	str	r3, [r2, #8]
    dense_3_output_array.data_start = AI_PTR(activations + 0);
 800bff0:	4a0c      	ldr	r2, [pc, #48]	; (800c024 <network_configure_activations+0x94>)
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	60d3      	str	r3, [r2, #12]
    dense_3_nl_output_array.data = AI_PTR(NULL);
 800bff6:	4b0c      	ldr	r3, [pc, #48]	; (800c028 <network_configure_activations+0x98>)
 800bff8:	2200      	movs	r2, #0
 800bffa:	609a      	str	r2, [r3, #8]
    dense_3_nl_output_array.data_start = AI_PTR(NULL);
 800bffc:	4b0a      	ldr	r3, [pc, #40]	; (800c028 <network_configure_activations+0x98>)
 800bffe:	2200      	movs	r2, #0
 800c000:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 800c002:	2301      	movs	r3, #1
}
 800c004:	4618      	mov	r0, r3
 800c006:	3714      	adds	r7, #20
 800c008:	46bd      	mov	sp, r7
 800c00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00e:	4770      	bx	lr
 800c010:	200000fc 	.word	0x200000fc
 800c014:	2000010c 	.word	0x2000010c
 800c018:	2000011c 	.word	0x2000011c
 800c01c:	2000012c 	.word	0x2000012c
 800c020:	2000013c 	.word	0x2000013c
 800c024:	2000014c 	.word	0x2000014c
 800c028:	2000015c 	.word	0x2000015c

0800c02c <network_configure_weights>:


AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 800c02c:	b480      	push	{r7}
 800c02e:	b085      	sub	sp, #20
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]
 800c034:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 800c036:	683b      	ldr	r3, [r7, #0]
 800c038:	691b      	ldr	r3, [r3, #16]
 800c03a:	60fb      	str	r3, [r7, #12]
  AI_ASSERT( weights )

  {
    /* Updating weights (byte) offsets */
    dense_3_bias_array.format |= AI_FMT_FLAG_CONST;
 800c03c:	4b2c      	ldr	r3, [pc, #176]	; (800c0f0 <network_configure_weights+0xc4>)
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c044:	4a2a      	ldr	r2, [pc, #168]	; (800c0f0 <network_configure_weights+0xc4>)
 800c046:	6013      	str	r3, [r2, #0]
    dense_3_bias_array.data = AI_PTR(weights + 96);
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	3360      	adds	r3, #96	; 0x60
 800c04c:	4a28      	ldr	r2, [pc, #160]	; (800c0f0 <network_configure_weights+0xc4>)
 800c04e:	6093      	str	r3, [r2, #8]
    dense_3_bias_array.data_start = AI_PTR(weights + 96);
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	3360      	adds	r3, #96	; 0x60
 800c054:	4a26      	ldr	r2, [pc, #152]	; (800c0f0 <network_configure_weights+0xc4>)
 800c056:	60d3      	str	r3, [r2, #12]
  dense_3_weights_array.format |= AI_FMT_FLAG_CONST;
 800c058:	4b26      	ldr	r3, [pc, #152]	; (800c0f4 <network_configure_weights+0xc8>)
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c060:	4a24      	ldr	r2, [pc, #144]	; (800c0f4 <network_configure_weights+0xc8>)
 800c062:	6013      	str	r3, [r2, #0]
    dense_3_weights_array.data = AI_PTR(weights + 84);
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	3354      	adds	r3, #84	; 0x54
 800c068:	4a22      	ldr	r2, [pc, #136]	; (800c0f4 <network_configure_weights+0xc8>)
 800c06a:	6093      	str	r3, [r2, #8]
    dense_3_weights_array.data_start = AI_PTR(weights + 84);
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	3354      	adds	r3, #84	; 0x54
 800c070:	4a20      	ldr	r2, [pc, #128]	; (800c0f4 <network_configure_weights+0xc8>)
 800c072:	60d3      	str	r3, [r2, #12]
  dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 800c074:	4b20      	ldr	r3, [pc, #128]	; (800c0f8 <network_configure_weights+0xcc>)
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c07c:	4a1e      	ldr	r2, [pc, #120]	; (800c0f8 <network_configure_weights+0xcc>)
 800c07e:	6013      	str	r3, [r2, #0]
    dense_2_bias_array.data = AI_PTR(weights + 72);
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	3348      	adds	r3, #72	; 0x48
 800c084:	4a1c      	ldr	r2, [pc, #112]	; (800c0f8 <network_configure_weights+0xcc>)
 800c086:	6093      	str	r3, [r2, #8]
    dense_2_bias_array.data_start = AI_PTR(weights + 72);
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	3348      	adds	r3, #72	; 0x48
 800c08c:	4a1a      	ldr	r2, [pc, #104]	; (800c0f8 <network_configure_weights+0xcc>)
 800c08e:	60d3      	str	r3, [r2, #12]
  dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 800c090:	4b1a      	ldr	r3, [pc, #104]	; (800c0fc <network_configure_weights+0xd0>)
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c098:	4a18      	ldr	r2, [pc, #96]	; (800c0fc <network_configure_weights+0xd0>)
 800c09a:	6013      	str	r3, [r2, #0]
    dense_2_weights_array.data = AI_PTR(weights + 36);
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	3324      	adds	r3, #36	; 0x24
 800c0a0:	4a16      	ldr	r2, [pc, #88]	; (800c0fc <network_configure_weights+0xd0>)
 800c0a2:	6093      	str	r3, [r2, #8]
    dense_2_weights_array.data_start = AI_PTR(weights + 36);
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	3324      	adds	r3, #36	; 0x24
 800c0a8:	4a14      	ldr	r2, [pc, #80]	; (800c0fc <network_configure_weights+0xd0>)
 800c0aa:	60d3      	str	r3, [r2, #12]
  dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 800c0ac:	4b14      	ldr	r3, [pc, #80]	; (800c100 <network_configure_weights+0xd4>)
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c0b4:	4a12      	ldr	r2, [pc, #72]	; (800c100 <network_configure_weights+0xd4>)
 800c0b6:	6013      	str	r3, [r2, #0]
    dense_1_bias_array.data = AI_PTR(weights + 24);
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	3318      	adds	r3, #24
 800c0bc:	4a10      	ldr	r2, [pc, #64]	; (800c100 <network_configure_weights+0xd4>)
 800c0be:	6093      	str	r3, [r2, #8]
    dense_1_bias_array.data_start = AI_PTR(weights + 24);
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	3318      	adds	r3, #24
 800c0c4:	4a0e      	ldr	r2, [pc, #56]	; (800c100 <network_configure_weights+0xd4>)
 800c0c6:	60d3      	str	r3, [r2, #12]
  dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 800c0c8:	4b0e      	ldr	r3, [pc, #56]	; (800c104 <network_configure_weights+0xd8>)
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c0d0:	4a0c      	ldr	r2, [pc, #48]	; (800c104 <network_configure_weights+0xd8>)
 800c0d2:	6013      	str	r3, [r2, #0]
    dense_1_weights_array.data = AI_PTR(weights + 0);
 800c0d4:	4a0b      	ldr	r2, [pc, #44]	; (800c104 <network_configure_weights+0xd8>)
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	6093      	str	r3, [r2, #8]
    dense_1_weights_array.data_start = AI_PTR(weights + 0);
 800c0da:	4a0a      	ldr	r2, [pc, #40]	; (800c104 <network_configure_weights+0xd8>)
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	60d3      	str	r3, [r2, #12]
  
  }

  return true;
 800c0e0:	2301      	movs	r3, #1
}
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	3714      	adds	r7, #20
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ec:	4770      	bx	lr
 800c0ee:	bf00      	nop
 800c0f0:	2000009c 	.word	0x2000009c
 800c0f4:	200000ac 	.word	0x200000ac
 800c0f8:	200000bc 	.word	0x200000bc
 800c0fc:	200000cc 	.word	0x200000cc
 800c100:	200000dc 	.word	0x200000dc
 800c104:	200000ec 	.word	0x200000ec

0800c108 <ai_network_get_info>:
/**  PUBLIC APIs SECTION  *****************************************************/

AI_API_ENTRY
ai_bool ai_network_get_info(
  ai_handle network, ai_network_report* report)
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b09e      	sub	sp, #120	; 0x78
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
 800c110:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 800c112:	6878      	ldr	r0, [r7, #4]
 800c114:	f7f4 fc1c 	bl	8000950 <ai_platform_context_acquire>
 800c118:	6778      	str	r0, [r7, #116]	; 0x74

  if ( report && net_ctx )
 800c11a:	683b      	ldr	r3, [r7, #0]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d046      	beq.n	800c1ae <ai_network_get_info+0xa6>
 800c120:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c122:	2b00      	cmp	r3, #0
 800c124:	d043      	beq.n	800c1ae <ai_network_get_info+0xa6>
  {
    ai_network_report r = {
 800c126:	f107 0308 	add.w	r3, r7, #8
 800c12a:	226c      	movs	r2, #108	; 0x6c
 800c12c:	2100      	movs	r1, #0
 800c12e:	4618      	mov	r0, r3
 800c130:	f000 facc 	bl	800c6cc <memset>
 800c134:	4b20      	ldr	r3, [pc, #128]	; (800c1b8 <ai_network_get_info+0xb0>)
 800c136:	60bb      	str	r3, [r7, #8]
 800c138:	4b20      	ldr	r3, [pc, #128]	; (800c1bc <ai_network_get_info+0xb4>)
 800c13a:	60fb      	str	r3, [r7, #12]
 800c13c:	4b20      	ldr	r3, [pc, #128]	; (800c1c0 <ai_network_get_info+0xb8>)
 800c13e:	613b      	str	r3, [r7, #16]
 800c140:	4b20      	ldr	r3, [pc, #128]	; (800c1c4 <ai_network_get_info+0xbc>)
 800c142:	617b      	str	r3, [r7, #20]
      .model_signature   = AI_NETWORK_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 800c144:	f7f4 fb9e 	bl	8000884 <ai_platform_runtime_get_revision>
 800c148:	4603      	mov	r3, r0
    ai_network_report r = {
 800c14a:	61bb      	str	r3, [r7, #24]
 800c14c:	f7f4 fbb2 	bl	80008b4 <ai_platform_runtime_get_version>
 800c150:	4603      	mov	r3, r0
 800c152:	61fb      	str	r3, [r7, #28]
 800c154:	4b1c      	ldr	r3, [pc, #112]	; (800c1c8 <ai_network_get_info+0xc0>)
 800c156:	623b      	str	r3, [r7, #32]
 800c158:	2304      	movs	r3, #4
 800c15a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800c15e:	2301      	movs	r3, #1
 800c160:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800c164:	2303      	movs	r3, #3
 800c166:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800c16a:	f7f4 fbbd 	bl	80008e8 <ai_platform_api_get_version>
 800c16e:	4603      	mov	r3, r0
 800c170:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c172:	f7f4 fbd3 	bl	800091c <ai_platform_interface_api_get_version>
 800c176:	4603      	mov	r3, r0
 800c178:	633b      	str	r3, [r7, #48]	; 0x30
 800c17a:	2322      	movs	r3, #34	; 0x22
 800c17c:	637b      	str	r3, [r7, #52]	; 0x34
      .params            = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x0,
    };

    if ( !ai_platform_api_get_network_report(network, &r) ) return false;
 800c17e:	f107 0308 	add.w	r3, r7, #8
 800c182:	4619      	mov	r1, r3
 800c184:	6878      	ldr	r0, [r7, #4]
 800c186:	f7f4 fc31 	bl	80009ec <ai_platform_api_get_network_report>
 800c18a:	4603      	mov	r3, r0
 800c18c:	f083 0301 	eor.w	r3, r3, #1
 800c190:	b2db      	uxtb	r3, r3
 800c192:	2b00      	cmp	r3, #0
 800c194:	d001      	beq.n	800c19a <ai_network_get_info+0x92>
 800c196:	2300      	movs	r3, #0
 800c198:	e00a      	b.n	800c1b0 <ai_network_get_info+0xa8>

    *report = r;
 800c19a:	683b      	ldr	r3, [r7, #0]
 800c19c:	4618      	mov	r0, r3
 800c19e:	f107 0308 	add.w	r3, r7, #8
 800c1a2:	226c      	movs	r2, #108	; 0x6c
 800c1a4:	4619      	mov	r1, r3
 800c1a6:	f000 fa86 	bl	800c6b6 <memcpy>
    return true;
 800c1aa:	2301      	movs	r3, #1
 800c1ac:	e000      	b.n	800c1b0 <ai_network_get_info+0xa8>
  }

  return false;
 800c1ae:	2300      	movs	r3, #0
}
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	3778      	adds	r7, #120	; 0x78
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	bd80      	pop	{r7, pc}
 800c1b8:	0800f1f4 	.word	0x0800f1f4
 800c1bc:	0800f1fc 	.word	0x0800f1fc
 800c1c0:	0800f220 	.word	0x0800f220
 800c1c4:	0800f23c 	.word	0x0800f23c
 800c1c8:	0800f254 	.word	0x0800f254

0800c1cc <ai_network_get_error>:

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b082      	sub	sp, #8
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 800c1d4:	6878      	ldr	r0, [r7, #4]
 800c1d6:	f7f4 fbdd 	bl	8000994 <ai_platform_network_get_error>
 800c1da:	4603      	mov	r3, r0
}
 800c1dc:	4618      	mov	r0, r3
 800c1de:	3708      	adds	r7, #8
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	bd80      	pop	{r7, pc}

0800c1e4 <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b084      	sub	sp, #16
 800c1e8:	af02      	add	r7, sp, #8
 800c1ea:	6078      	str	r0, [r7, #4]
 800c1ec:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	9301      	str	r3, [sp, #4]
 800c1f2:	2303      	movs	r3, #3
 800c1f4:	9300      	str	r3, [sp, #0]
 800c1f6:	2301      	movs	r3, #1
 800c1f8:	4a04      	ldr	r2, [pc, #16]	; (800c20c <ai_network_create+0x28>)
 800c1fa:	6839      	ldr	r1, [r7, #0]
 800c1fc:	6878      	ldr	r0, [r7, #4]
 800c1fe:	f7f4 fcaf 	bl	8000b60 <ai_platform_network_create>
 800c202:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800c204:	4618      	mov	r0, r3
 800c206:	3708      	adds	r7, #8
 800c208:	46bd      	mov	sp, r7
 800c20a:	bd80      	pop	{r7, pc}
 800c20c:	2000004c 	.word	0x2000004c

0800c210 <ai_network_destroy>:

AI_API_ENTRY
ai_handle ai_network_destroy(ai_handle network)
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b082      	sub	sp, #8
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
  return ai_platform_network_destroy(network);
 800c218:	6878      	ldr	r0, [r7, #4]
 800c21a:	f7f4 fcdd 	bl	8000bd8 <ai_platform_network_destroy>
 800c21e:	4603      	mov	r3, r0
}
 800c220:	4618      	mov	r0, r3
 800c222:	3708      	adds	r7, #8
 800c224:	46bd      	mov	sp, r7
 800c226:	bd80      	pop	{r7, pc}

0800c228 <ai_network_init>:

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 800c228:	b580      	push	{r7, lr}
 800c22a:	b084      	sub	sp, #16
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
 800c230:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800c232:	6839      	ldr	r1, [r7, #0]
 800c234:	6878      	ldr	r0, [r7, #4]
 800c236:	f7f4 fcee 	bl	8000c16 <ai_platform_network_init>
 800c23a:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d101      	bne.n	800c246 <ai_network_init+0x1e>
 800c242:	2300      	movs	r3, #0
 800c244:	e01f      	b.n	800c286 <ai_network_init+0x5e>

  ai_bool ok = true;
 800c246:	2301      	movs	r3, #1
 800c248:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, &params->params);
 800c24a:	683b      	ldr	r3, [r7, #0]
 800c24c:	4619      	mov	r1, r3
 800c24e:	68f8      	ldr	r0, [r7, #12]
 800c250:	f7ff feec 	bl	800c02c <network_configure_weights>
 800c254:	4603      	mov	r3, r0
 800c256:	461a      	mov	r2, r3
 800c258:	7afb      	ldrb	r3, [r7, #11]
 800c25a:	4013      	ands	r3, r2
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	bf14      	ite	ne
 800c260:	2301      	movne	r3, #1
 800c262:	2300      	moveq	r3, #0
 800c264:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, &params->activations);
 800c266:	683b      	ldr	r3, [r7, #0]
 800c268:	3314      	adds	r3, #20
 800c26a:	4619      	mov	r1, r3
 800c26c:	68f8      	ldr	r0, [r7, #12]
 800c26e:	f7ff fe8f 	bl	800bf90 <network_configure_activations>
 800c272:	4603      	mov	r3, r0
 800c274:	461a      	mov	r2, r3
 800c276:	7afb      	ldrb	r3, [r7, #11]
 800c278:	4013      	ands	r3, r2
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	bf14      	ite	ne
 800c27e:	2301      	movne	r3, #1
 800c280:	2300      	moveq	r3, #0
 800c282:	72fb      	strb	r3, [r7, #11]

  return ok;
 800c284:	7afb      	ldrb	r3, [r7, #11]
}
 800c286:	4618      	mov	r0, r3
 800c288:	3710      	adds	r7, #16
 800c28a:	46bd      	mov	sp, r7
 800c28c:	bd80      	pop	{r7, pc}

0800c28e <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800c28e:	b580      	push	{r7, lr}
 800c290:	b084      	sub	sp, #16
 800c292:	af00      	add	r7, sp, #0
 800c294:	60f8      	str	r0, [r7, #12]
 800c296:	60b9      	str	r1, [r7, #8]
 800c298:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800c29a:	687a      	ldr	r2, [r7, #4]
 800c29c:	68b9      	ldr	r1, [r7, #8]
 800c29e:	68f8      	ldr	r0, [r7, #12]
 800c2a0:	f7f4 fd0f 	bl	8000cc2 <ai_platform_network_process>
 800c2a4:	4603      	mov	r3, r0
}
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	3710      	adds	r7, #16
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	bd80      	pop	{r7, pc}

0800c2ae <ai_network_forward>:

AI_API_ENTRY
ai_i32 ai_network_forward(ai_handle network, const ai_buffer* input)
{
 800c2ae:	b580      	push	{r7, lr}
 800c2b0:	b082      	sub	sp, #8
 800c2b2:	af00      	add	r7, sp, #0
 800c2b4:	6078      	str	r0, [r7, #4]
 800c2b6:	6039      	str	r1, [r7, #0]
  return ai_platform_network_process(network, input, NULL);
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	6839      	ldr	r1, [r7, #0]
 800c2bc:	6878      	ldr	r0, [r7, #4]
 800c2be:	f7f4 fd00 	bl	8000cc2 <ai_platform_network_process>
 800c2c2:	4603      	mov	r3, r0
}
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	3708      	adds	r7, #8
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	bd80      	pop	{r7, pc}

0800c2cc <ai_network_data_weights_get>:
#include "network_data.h"

ai_handle ai_network_data_weights_get(void)
{
 800c2cc:	b480      	push	{r7}
 800c2ce:	af00      	add	r7, sp, #0
    0x94, 0xbf, 0xb5, 0xa7, 0x45, 0x3f, 0xe5, 0x93, 0xf0, 0xbe,
    0x2d, 0x26, 0x19, 0x3e, 0x64, 0x32, 0x2a, 0x40, 0x30, 0x95,
    0x0f, 0xc0, 0xf5, 0x99, 0xb3, 0x3f, 0xaa, 0x6d, 0x19, 0x3f
  };

  return AI_HANDLE_PTR(s_network_weights);
 800c2d0:	4b02      	ldr	r3, [pc, #8]	; (800c2dc <ai_network_data_weights_get+0x10>)
}
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2da:	4770      	bx	lr
 800c2dc:	0800f824 	.word	0x0800f824

0800c2e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	b082      	sub	sp, #8
 800c2e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	607b      	str	r3, [r7, #4]
 800c2ea:	4b10      	ldr	r3, [pc, #64]	; (800c32c <HAL_MspInit+0x4c>)
 800c2ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2ee:	4a0f      	ldr	r2, [pc, #60]	; (800c32c <HAL_MspInit+0x4c>)
 800c2f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c2f4:	6453      	str	r3, [r2, #68]	; 0x44
 800c2f6:	4b0d      	ldr	r3, [pc, #52]	; (800c32c <HAL_MspInit+0x4c>)
 800c2f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c2fe:	607b      	str	r3, [r7, #4]
 800c300:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800c302:	2300      	movs	r3, #0
 800c304:	603b      	str	r3, [r7, #0]
 800c306:	4b09      	ldr	r3, [pc, #36]	; (800c32c <HAL_MspInit+0x4c>)
 800c308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c30a:	4a08      	ldr	r2, [pc, #32]	; (800c32c <HAL_MspInit+0x4c>)
 800c30c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c310:	6413      	str	r3, [r2, #64]	; 0x40
 800c312:	4b06      	ldr	r3, [pc, #24]	; (800c32c <HAL_MspInit+0x4c>)
 800c314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c31a:	603b      	str	r3, [r7, #0]
 800c31c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800c31e:	2007      	movs	r0, #7
 800c320:	f7f9 fb04 	bl	800592c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800c324:	bf00      	nop
 800c326:	3708      	adds	r7, #8
 800c328:	46bd      	mov	sp, r7
 800c32a:	bd80      	pop	{r7, pc}
 800c32c:	40023800 	.word	0x40023800

0800c330 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800c330:	b480      	push	{r7}
 800c332:	b085      	sub	sp, #20
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	4a0b      	ldr	r2, [pc, #44]	; (800c36c <HAL_CRC_MspInit+0x3c>)
 800c33e:	4293      	cmp	r3, r2
 800c340:	d10d      	bne.n	800c35e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800c342:	2300      	movs	r3, #0
 800c344:	60fb      	str	r3, [r7, #12]
 800c346:	4b0a      	ldr	r3, [pc, #40]	; (800c370 <HAL_CRC_MspInit+0x40>)
 800c348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c34a:	4a09      	ldr	r2, [pc, #36]	; (800c370 <HAL_CRC_MspInit+0x40>)
 800c34c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c350:	6313      	str	r3, [r2, #48]	; 0x30
 800c352:	4b07      	ldr	r3, [pc, #28]	; (800c370 <HAL_CRC_MspInit+0x40>)
 800c354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c356:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c35a:	60fb      	str	r3, [r7, #12]
 800c35c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800c35e:	bf00      	nop
 800c360:	3714      	adds	r7, #20
 800c362:	46bd      	mov	sp, r7
 800c364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c368:	4770      	bx	lr
 800c36a:	bf00      	nop
 800c36c:	40023000 	.word	0x40023000
 800c370:	40023800 	.word	0x40023800

0800c374 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b08a      	sub	sp, #40	; 0x28
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c37c:	f107 0314 	add.w	r3, r7, #20
 800c380:	2200      	movs	r2, #0
 800c382:	601a      	str	r2, [r3, #0]
 800c384:	605a      	str	r2, [r3, #4]
 800c386:	609a      	str	r2, [r3, #8]
 800c388:	60da      	str	r2, [r3, #12]
 800c38a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	4a19      	ldr	r2, [pc, #100]	; (800c3f8 <HAL_UART_MspInit+0x84>)
 800c392:	4293      	cmp	r3, r2
 800c394:	d12b      	bne.n	800c3ee <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800c396:	2300      	movs	r3, #0
 800c398:	613b      	str	r3, [r7, #16]
 800c39a:	4b18      	ldr	r3, [pc, #96]	; (800c3fc <HAL_UART_MspInit+0x88>)
 800c39c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c39e:	4a17      	ldr	r2, [pc, #92]	; (800c3fc <HAL_UART_MspInit+0x88>)
 800c3a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c3a4:	6413      	str	r3, [r2, #64]	; 0x40
 800c3a6:	4b15      	ldr	r3, [pc, #84]	; (800c3fc <HAL_UART_MspInit+0x88>)
 800c3a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c3ae:	613b      	str	r3, [r7, #16]
 800c3b0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	60fb      	str	r3, [r7, #12]
 800c3b6:	4b11      	ldr	r3, [pc, #68]	; (800c3fc <HAL_UART_MspInit+0x88>)
 800c3b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3ba:	4a10      	ldr	r2, [pc, #64]	; (800c3fc <HAL_UART_MspInit+0x88>)
 800c3bc:	f043 0301 	orr.w	r3, r3, #1
 800c3c0:	6313      	str	r3, [r2, #48]	; 0x30
 800c3c2:	4b0e      	ldr	r3, [pc, #56]	; (800c3fc <HAL_UART_MspInit+0x88>)
 800c3c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3c6:	f003 0301 	and.w	r3, r3, #1
 800c3ca:	60fb      	str	r3, [r7, #12]
 800c3cc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800c3ce:	230c      	movs	r3, #12
 800c3d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c3d2:	2302      	movs	r3, #2
 800c3d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c3d6:	2301      	movs	r3, #1
 800c3d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c3da:	2303      	movs	r3, #3
 800c3dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800c3de:	2307      	movs	r3, #7
 800c3e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c3e2:	f107 0314 	add.w	r3, r7, #20
 800c3e6:	4619      	mov	r1, r3
 800c3e8:	4805      	ldr	r0, [pc, #20]	; (800c400 <HAL_UART_MspInit+0x8c>)
 800c3ea:	f7f9 faf1 	bl	80059d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800c3ee:	bf00      	nop
 800c3f0:	3728      	adds	r7, #40	; 0x28
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	bd80      	pop	{r7, pc}
 800c3f6:	bf00      	nop
 800c3f8:	40004400 	.word	0x40004400
 800c3fc:	40023800 	.word	0x40023800
 800c400:	40020000 	.word	0x40020000

0800c404 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800c404:	b480      	push	{r7}
 800c406:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800c408:	bf00      	nop
 800c40a:	46bd      	mov	sp, r7
 800c40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c410:	4770      	bx	lr

0800c412 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800c412:	b480      	push	{r7}
 800c414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800c416:	e7fe      	b.n	800c416 <HardFault_Handler+0x4>

0800c418 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800c418:	b480      	push	{r7}
 800c41a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800c41c:	e7fe      	b.n	800c41c <MemManage_Handler+0x4>

0800c41e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800c41e:	b480      	push	{r7}
 800c420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800c422:	e7fe      	b.n	800c422 <BusFault_Handler+0x4>

0800c424 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800c424:	b480      	push	{r7}
 800c426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800c428:	e7fe      	b.n	800c428 <UsageFault_Handler+0x4>

0800c42a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800c42a:	b480      	push	{r7}
 800c42c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800c42e:	bf00      	nop
 800c430:	46bd      	mov	sp, r7
 800c432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c436:	4770      	bx	lr

0800c438 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800c438:	b480      	push	{r7}
 800c43a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800c43c:	bf00      	nop
 800c43e:	46bd      	mov	sp, r7
 800c440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c444:	4770      	bx	lr

0800c446 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800c446:	b480      	push	{r7}
 800c448:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800c44a:	bf00      	nop
 800c44c:	46bd      	mov	sp, r7
 800c44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c452:	4770      	bx	lr

0800c454 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800c454:	b580      	push	{r7, lr}
 800c456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800c458:	f7f9 f950 	bl	80056fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800c45c:	bf00      	nop
 800c45e:	bd80      	pop	{r7, pc}

0800c460 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800c460:	b580      	push	{r7, lr}
 800c462:	b086      	sub	sp, #24
 800c464:	af00      	add	r7, sp, #0
 800c466:	60f8      	str	r0, [r7, #12]
 800c468:	60b9      	str	r1, [r7, #8]
 800c46a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c46c:	2300      	movs	r3, #0
 800c46e:	617b      	str	r3, [r7, #20]
 800c470:	e00a      	b.n	800c488 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800c472:	f3af 8000 	nop.w
 800c476:	4601      	mov	r1, r0
 800c478:	68bb      	ldr	r3, [r7, #8]
 800c47a:	1c5a      	adds	r2, r3, #1
 800c47c:	60ba      	str	r2, [r7, #8]
 800c47e:	b2ca      	uxtb	r2, r1
 800c480:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c482:	697b      	ldr	r3, [r7, #20]
 800c484:	3301      	adds	r3, #1
 800c486:	617b      	str	r3, [r7, #20]
 800c488:	697a      	ldr	r2, [r7, #20]
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	429a      	cmp	r2, r3
 800c48e:	dbf0      	blt.n	800c472 <_read+0x12>
	}

return len;
 800c490:	687b      	ldr	r3, [r7, #4]
}
 800c492:	4618      	mov	r0, r3
 800c494:	3718      	adds	r7, #24
 800c496:	46bd      	mov	sp, r7
 800c498:	bd80      	pop	{r7, pc}

0800c49a <_close>:
	}
	return len;
}

int _close(int file)
{
 800c49a:	b480      	push	{r7}
 800c49c:	b083      	sub	sp, #12
 800c49e:	af00      	add	r7, sp, #0
 800c4a0:	6078      	str	r0, [r7, #4]
	return -1;
 800c4a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	370c      	adds	r7, #12
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b0:	4770      	bx	lr

0800c4b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800c4b2:	b480      	push	{r7}
 800c4b4:	b083      	sub	sp, #12
 800c4b6:	af00      	add	r7, sp, #0
 800c4b8:	6078      	str	r0, [r7, #4]
 800c4ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800c4bc:	683b      	ldr	r3, [r7, #0]
 800c4be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c4c2:	605a      	str	r2, [r3, #4]
	return 0;
 800c4c4:	2300      	movs	r3, #0
}
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	370c      	adds	r7, #12
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d0:	4770      	bx	lr

0800c4d2 <_isatty>:

int _isatty(int file)
{
 800c4d2:	b480      	push	{r7}
 800c4d4:	b083      	sub	sp, #12
 800c4d6:	af00      	add	r7, sp, #0
 800c4d8:	6078      	str	r0, [r7, #4]
	return 1;
 800c4da:	2301      	movs	r3, #1
}
 800c4dc:	4618      	mov	r0, r3
 800c4de:	370c      	adds	r7, #12
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e6:	4770      	bx	lr

0800c4e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800c4e8:	b480      	push	{r7}
 800c4ea:	b085      	sub	sp, #20
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	60f8      	str	r0, [r7, #12]
 800c4f0:	60b9      	str	r1, [r7, #8]
 800c4f2:	607a      	str	r2, [r7, #4]
	return 0;
 800c4f4:	2300      	movs	r3, #0
}
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	3714      	adds	r7, #20
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c500:	4770      	bx	lr
	...

0800c504 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b084      	sub	sp, #16
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800c50c:	4b11      	ldr	r3, [pc, #68]	; (800c554 <_sbrk+0x50>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d102      	bne.n	800c51a <_sbrk+0x16>
		heap_end = &end;
 800c514:	4b0f      	ldr	r3, [pc, #60]	; (800c554 <_sbrk+0x50>)
 800c516:	4a10      	ldr	r2, [pc, #64]	; (800c558 <_sbrk+0x54>)
 800c518:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800c51a:	4b0e      	ldr	r3, [pc, #56]	; (800c554 <_sbrk+0x50>)
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800c520:	4b0c      	ldr	r3, [pc, #48]	; (800c554 <_sbrk+0x50>)
 800c522:	681a      	ldr	r2, [r3, #0]
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	4413      	add	r3, r2
 800c528:	466a      	mov	r2, sp
 800c52a:	4293      	cmp	r3, r2
 800c52c:	d907      	bls.n	800c53e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800c52e:	f000 f879 	bl	800c624 <__errno>
 800c532:	4602      	mov	r2, r0
 800c534:	230c      	movs	r3, #12
 800c536:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800c538:	f04f 33ff 	mov.w	r3, #4294967295
 800c53c:	e006      	b.n	800c54c <_sbrk+0x48>
	}

	heap_end += incr;
 800c53e:	4b05      	ldr	r3, [pc, #20]	; (800c554 <_sbrk+0x50>)
 800c540:	681a      	ldr	r2, [r3, #0]
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	4413      	add	r3, r2
 800c546:	4a03      	ldr	r2, [pc, #12]	; (800c554 <_sbrk+0x50>)
 800c548:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800c54a:	68fb      	ldr	r3, [r7, #12]
}
 800c54c:	4618      	mov	r0, r3
 800c54e:	3710      	adds	r7, #16
 800c550:	46bd      	mov	sp, r7
 800c552:	bd80      	pop	{r7, pc}
 800c554:	20000a80 	.word	0x20000a80
 800c558:	20000ae0 	.word	0x20000ae0

0800c55c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800c55c:	b480      	push	{r7}
 800c55e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800c560:	4b16      	ldr	r3, [pc, #88]	; (800c5bc <SystemInit+0x60>)
 800c562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c566:	4a15      	ldr	r2, [pc, #84]	; (800c5bc <SystemInit+0x60>)
 800c568:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c56c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800c570:	4b13      	ldr	r3, [pc, #76]	; (800c5c0 <SystemInit+0x64>)
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	4a12      	ldr	r2, [pc, #72]	; (800c5c0 <SystemInit+0x64>)
 800c576:	f043 0301 	orr.w	r3, r3, #1
 800c57a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800c57c:	4b10      	ldr	r3, [pc, #64]	; (800c5c0 <SystemInit+0x64>)
 800c57e:	2200      	movs	r2, #0
 800c580:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800c582:	4b0f      	ldr	r3, [pc, #60]	; (800c5c0 <SystemInit+0x64>)
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	4a0e      	ldr	r2, [pc, #56]	; (800c5c0 <SystemInit+0x64>)
 800c588:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800c58c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c590:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800c592:	4b0b      	ldr	r3, [pc, #44]	; (800c5c0 <SystemInit+0x64>)
 800c594:	4a0b      	ldr	r2, [pc, #44]	; (800c5c4 <SystemInit+0x68>)
 800c596:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800c598:	4b09      	ldr	r3, [pc, #36]	; (800c5c0 <SystemInit+0x64>)
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	4a08      	ldr	r2, [pc, #32]	; (800c5c0 <SystemInit+0x64>)
 800c59e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c5a2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800c5a4:	4b06      	ldr	r3, [pc, #24]	; (800c5c0 <SystemInit+0x64>)
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800c5aa:	4b04      	ldr	r3, [pc, #16]	; (800c5bc <SystemInit+0x60>)
 800c5ac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800c5b0:	609a      	str	r2, [r3, #8]
#endif
}
 800c5b2:	bf00      	nop
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ba:	4770      	bx	lr
 800c5bc:	e000ed00 	.word	0xe000ed00
 800c5c0:	40023800 	.word	0x40023800
 800c5c4:	24003010 	.word	0x24003010

0800c5c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800c5c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 800c600 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800c5cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800c5ce:	e003      	b.n	800c5d8 <LoopCopyDataInit>

0800c5d0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800c5d0:	4b0c      	ldr	r3, [pc, #48]	; (800c604 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800c5d2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800c5d4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800c5d6:	3104      	adds	r1, #4

0800c5d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800c5d8:	480b      	ldr	r0, [pc, #44]	; (800c608 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800c5da:	4b0c      	ldr	r3, [pc, #48]	; (800c60c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800c5dc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800c5de:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800c5e0:	d3f6      	bcc.n	800c5d0 <CopyDataInit>
  ldr  r2, =_sbss
 800c5e2:	4a0b      	ldr	r2, [pc, #44]	; (800c610 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800c5e4:	e002      	b.n	800c5ec <LoopFillZerobss>

0800c5e6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800c5e6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800c5e8:	f842 3b04 	str.w	r3, [r2], #4

0800c5ec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800c5ec:	4b09      	ldr	r3, [pc, #36]	; (800c614 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800c5ee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800c5f0:	d3f9      	bcc.n	800c5e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800c5f2:	f7ff ffb3 	bl	800c55c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800c5f6:	f000 f81b 	bl	800c630 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800c5fa:	f7ff fb95 	bl	800bd28 <main>
  bx  lr    
 800c5fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800c600:	2001ffff 	.word	0x2001ffff
  ldr  r3, =_sidata
 800c604:	0800f990 	.word	0x0800f990
  ldr  r0, =_sdata
 800c608:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800c60c:	200005e0 	.word	0x200005e0
  ldr  r2, =_sbss
 800c610:	200005e0 	.word	0x200005e0
  ldr  r3, = _ebss
 800c614:	20000adc 	.word	0x20000adc

0800c618 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800c618:	e7fe      	b.n	800c618 <ADC_IRQHandler>

0800c61a <__aeabi_memclr>:
 800c61a:	2200      	movs	r2, #0
 800c61c:	f7f8 ba3c 	b.w	8004a98 <__aeabi_memset>

0800c620 <__aeabi_memcpy>:
 800c620:	f000 b849 	b.w	800c6b6 <memcpy>

0800c624 <__errno>:
 800c624:	4b01      	ldr	r3, [pc, #4]	; (800c62c <__errno+0x8>)
 800c626:	6818      	ldr	r0, [r3, #0]
 800c628:	4770      	bx	lr
 800c62a:	bf00      	nop
 800c62c:	20000578 	.word	0x20000578

0800c630 <__libc_init_array>:
 800c630:	b570      	push	{r4, r5, r6, lr}
 800c632:	4e0d      	ldr	r6, [pc, #52]	; (800c668 <__libc_init_array+0x38>)
 800c634:	4c0d      	ldr	r4, [pc, #52]	; (800c66c <__libc_init_array+0x3c>)
 800c636:	1ba4      	subs	r4, r4, r6
 800c638:	10a4      	asrs	r4, r4, #2
 800c63a:	2500      	movs	r5, #0
 800c63c:	42a5      	cmp	r5, r4
 800c63e:	d109      	bne.n	800c654 <__libc_init_array+0x24>
 800c640:	4e0b      	ldr	r6, [pc, #44]	; (800c670 <__libc_init_array+0x40>)
 800c642:	4c0c      	ldr	r4, [pc, #48]	; (800c674 <__libc_init_array+0x44>)
 800c644:	f002 f91a 	bl	800e87c <_init>
 800c648:	1ba4      	subs	r4, r4, r6
 800c64a:	10a4      	asrs	r4, r4, #2
 800c64c:	2500      	movs	r5, #0
 800c64e:	42a5      	cmp	r5, r4
 800c650:	d105      	bne.n	800c65e <__libc_init_array+0x2e>
 800c652:	bd70      	pop	{r4, r5, r6, pc}
 800c654:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c658:	4798      	blx	r3
 800c65a:	3501      	adds	r5, #1
 800c65c:	e7ee      	b.n	800c63c <__libc_init_array+0xc>
 800c65e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c662:	4798      	blx	r3
 800c664:	3501      	adds	r5, #1
 800c666:	e7f2      	b.n	800c64e <__libc_init_array+0x1e>
 800c668:	0800f988 	.word	0x0800f988
 800c66c:	0800f988 	.word	0x0800f988
 800c670:	0800f988 	.word	0x0800f988
 800c674:	0800f98c 	.word	0x0800f98c

0800c678 <malloc>:
 800c678:	4b02      	ldr	r3, [pc, #8]	; (800c684 <malloc+0xc>)
 800c67a:	4601      	mov	r1, r0
 800c67c:	6818      	ldr	r0, [r3, #0]
 800c67e:	f000 b87b 	b.w	800c778 <_malloc_r>
 800c682:	bf00      	nop
 800c684:	20000578 	.word	0x20000578

0800c688 <free>:
 800c688:	4b02      	ldr	r3, [pc, #8]	; (800c694 <free+0xc>)
 800c68a:	4601      	mov	r1, r0
 800c68c:	6818      	ldr	r0, [r3, #0]
 800c68e:	f000 b825 	b.w	800c6dc <_free_r>
 800c692:	bf00      	nop
 800c694:	20000578 	.word	0x20000578

0800c698 <memcmp>:
 800c698:	b530      	push	{r4, r5, lr}
 800c69a:	2400      	movs	r4, #0
 800c69c:	42a2      	cmp	r2, r4
 800c69e:	d101      	bne.n	800c6a4 <memcmp+0xc>
 800c6a0:	2000      	movs	r0, #0
 800c6a2:	e007      	b.n	800c6b4 <memcmp+0x1c>
 800c6a4:	5d03      	ldrb	r3, [r0, r4]
 800c6a6:	3401      	adds	r4, #1
 800c6a8:	190d      	adds	r5, r1, r4
 800c6aa:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800c6ae:	42ab      	cmp	r3, r5
 800c6b0:	d0f4      	beq.n	800c69c <memcmp+0x4>
 800c6b2:	1b58      	subs	r0, r3, r5
 800c6b4:	bd30      	pop	{r4, r5, pc}

0800c6b6 <memcpy>:
 800c6b6:	b510      	push	{r4, lr}
 800c6b8:	1e43      	subs	r3, r0, #1
 800c6ba:	440a      	add	r2, r1
 800c6bc:	4291      	cmp	r1, r2
 800c6be:	d100      	bne.n	800c6c2 <memcpy+0xc>
 800c6c0:	bd10      	pop	{r4, pc}
 800c6c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c6c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c6ca:	e7f7      	b.n	800c6bc <memcpy+0x6>

0800c6cc <memset>:
 800c6cc:	4402      	add	r2, r0
 800c6ce:	4603      	mov	r3, r0
 800c6d0:	4293      	cmp	r3, r2
 800c6d2:	d100      	bne.n	800c6d6 <memset+0xa>
 800c6d4:	4770      	bx	lr
 800c6d6:	f803 1b01 	strb.w	r1, [r3], #1
 800c6da:	e7f9      	b.n	800c6d0 <memset+0x4>

0800c6dc <_free_r>:
 800c6dc:	b538      	push	{r3, r4, r5, lr}
 800c6de:	4605      	mov	r5, r0
 800c6e0:	2900      	cmp	r1, #0
 800c6e2:	d045      	beq.n	800c770 <_free_r+0x94>
 800c6e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6e8:	1f0c      	subs	r4, r1, #4
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	bfb8      	it	lt
 800c6ee:	18e4      	addlt	r4, r4, r3
 800c6f0:	f000 fbe0 	bl	800ceb4 <__malloc_lock>
 800c6f4:	4a1f      	ldr	r2, [pc, #124]	; (800c774 <_free_r+0x98>)
 800c6f6:	6813      	ldr	r3, [r2, #0]
 800c6f8:	4610      	mov	r0, r2
 800c6fa:	b933      	cbnz	r3, 800c70a <_free_r+0x2e>
 800c6fc:	6063      	str	r3, [r4, #4]
 800c6fe:	6014      	str	r4, [r2, #0]
 800c700:	4628      	mov	r0, r5
 800c702:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c706:	f000 bbd6 	b.w	800ceb6 <__malloc_unlock>
 800c70a:	42a3      	cmp	r3, r4
 800c70c:	d90c      	bls.n	800c728 <_free_r+0x4c>
 800c70e:	6821      	ldr	r1, [r4, #0]
 800c710:	1862      	adds	r2, r4, r1
 800c712:	4293      	cmp	r3, r2
 800c714:	bf04      	itt	eq
 800c716:	681a      	ldreq	r2, [r3, #0]
 800c718:	685b      	ldreq	r3, [r3, #4]
 800c71a:	6063      	str	r3, [r4, #4]
 800c71c:	bf04      	itt	eq
 800c71e:	1852      	addeq	r2, r2, r1
 800c720:	6022      	streq	r2, [r4, #0]
 800c722:	6004      	str	r4, [r0, #0]
 800c724:	e7ec      	b.n	800c700 <_free_r+0x24>
 800c726:	4613      	mov	r3, r2
 800c728:	685a      	ldr	r2, [r3, #4]
 800c72a:	b10a      	cbz	r2, 800c730 <_free_r+0x54>
 800c72c:	42a2      	cmp	r2, r4
 800c72e:	d9fa      	bls.n	800c726 <_free_r+0x4a>
 800c730:	6819      	ldr	r1, [r3, #0]
 800c732:	1858      	adds	r0, r3, r1
 800c734:	42a0      	cmp	r0, r4
 800c736:	d10b      	bne.n	800c750 <_free_r+0x74>
 800c738:	6820      	ldr	r0, [r4, #0]
 800c73a:	4401      	add	r1, r0
 800c73c:	1858      	adds	r0, r3, r1
 800c73e:	4282      	cmp	r2, r0
 800c740:	6019      	str	r1, [r3, #0]
 800c742:	d1dd      	bne.n	800c700 <_free_r+0x24>
 800c744:	6810      	ldr	r0, [r2, #0]
 800c746:	6852      	ldr	r2, [r2, #4]
 800c748:	605a      	str	r2, [r3, #4]
 800c74a:	4401      	add	r1, r0
 800c74c:	6019      	str	r1, [r3, #0]
 800c74e:	e7d7      	b.n	800c700 <_free_r+0x24>
 800c750:	d902      	bls.n	800c758 <_free_r+0x7c>
 800c752:	230c      	movs	r3, #12
 800c754:	602b      	str	r3, [r5, #0]
 800c756:	e7d3      	b.n	800c700 <_free_r+0x24>
 800c758:	6820      	ldr	r0, [r4, #0]
 800c75a:	1821      	adds	r1, r4, r0
 800c75c:	428a      	cmp	r2, r1
 800c75e:	bf04      	itt	eq
 800c760:	6811      	ldreq	r1, [r2, #0]
 800c762:	6852      	ldreq	r2, [r2, #4]
 800c764:	6062      	str	r2, [r4, #4]
 800c766:	bf04      	itt	eq
 800c768:	1809      	addeq	r1, r1, r0
 800c76a:	6021      	streq	r1, [r4, #0]
 800c76c:	605c      	str	r4, [r3, #4]
 800c76e:	e7c7      	b.n	800c700 <_free_r+0x24>
 800c770:	bd38      	pop	{r3, r4, r5, pc}
 800c772:	bf00      	nop
 800c774:	20000a84 	.word	0x20000a84

0800c778 <_malloc_r>:
 800c778:	b570      	push	{r4, r5, r6, lr}
 800c77a:	1ccd      	adds	r5, r1, #3
 800c77c:	f025 0503 	bic.w	r5, r5, #3
 800c780:	3508      	adds	r5, #8
 800c782:	2d0c      	cmp	r5, #12
 800c784:	bf38      	it	cc
 800c786:	250c      	movcc	r5, #12
 800c788:	2d00      	cmp	r5, #0
 800c78a:	4606      	mov	r6, r0
 800c78c:	db01      	blt.n	800c792 <_malloc_r+0x1a>
 800c78e:	42a9      	cmp	r1, r5
 800c790:	d903      	bls.n	800c79a <_malloc_r+0x22>
 800c792:	230c      	movs	r3, #12
 800c794:	6033      	str	r3, [r6, #0]
 800c796:	2000      	movs	r0, #0
 800c798:	bd70      	pop	{r4, r5, r6, pc}
 800c79a:	f000 fb8b 	bl	800ceb4 <__malloc_lock>
 800c79e:	4a21      	ldr	r2, [pc, #132]	; (800c824 <_malloc_r+0xac>)
 800c7a0:	6814      	ldr	r4, [r2, #0]
 800c7a2:	4621      	mov	r1, r4
 800c7a4:	b991      	cbnz	r1, 800c7cc <_malloc_r+0x54>
 800c7a6:	4c20      	ldr	r4, [pc, #128]	; (800c828 <_malloc_r+0xb0>)
 800c7a8:	6823      	ldr	r3, [r4, #0]
 800c7aa:	b91b      	cbnz	r3, 800c7b4 <_malloc_r+0x3c>
 800c7ac:	4630      	mov	r0, r6
 800c7ae:	f000 f8c1 	bl	800c934 <_sbrk_r>
 800c7b2:	6020      	str	r0, [r4, #0]
 800c7b4:	4629      	mov	r1, r5
 800c7b6:	4630      	mov	r0, r6
 800c7b8:	f000 f8bc 	bl	800c934 <_sbrk_r>
 800c7bc:	1c43      	adds	r3, r0, #1
 800c7be:	d124      	bne.n	800c80a <_malloc_r+0x92>
 800c7c0:	230c      	movs	r3, #12
 800c7c2:	6033      	str	r3, [r6, #0]
 800c7c4:	4630      	mov	r0, r6
 800c7c6:	f000 fb76 	bl	800ceb6 <__malloc_unlock>
 800c7ca:	e7e4      	b.n	800c796 <_malloc_r+0x1e>
 800c7cc:	680b      	ldr	r3, [r1, #0]
 800c7ce:	1b5b      	subs	r3, r3, r5
 800c7d0:	d418      	bmi.n	800c804 <_malloc_r+0x8c>
 800c7d2:	2b0b      	cmp	r3, #11
 800c7d4:	d90f      	bls.n	800c7f6 <_malloc_r+0x7e>
 800c7d6:	600b      	str	r3, [r1, #0]
 800c7d8:	50cd      	str	r5, [r1, r3]
 800c7da:	18cc      	adds	r4, r1, r3
 800c7dc:	4630      	mov	r0, r6
 800c7de:	f000 fb6a 	bl	800ceb6 <__malloc_unlock>
 800c7e2:	f104 000b 	add.w	r0, r4, #11
 800c7e6:	1d23      	adds	r3, r4, #4
 800c7e8:	f020 0007 	bic.w	r0, r0, #7
 800c7ec:	1ac3      	subs	r3, r0, r3
 800c7ee:	d0d3      	beq.n	800c798 <_malloc_r+0x20>
 800c7f0:	425a      	negs	r2, r3
 800c7f2:	50e2      	str	r2, [r4, r3]
 800c7f4:	e7d0      	b.n	800c798 <_malloc_r+0x20>
 800c7f6:	428c      	cmp	r4, r1
 800c7f8:	684b      	ldr	r3, [r1, #4]
 800c7fa:	bf16      	itet	ne
 800c7fc:	6063      	strne	r3, [r4, #4]
 800c7fe:	6013      	streq	r3, [r2, #0]
 800c800:	460c      	movne	r4, r1
 800c802:	e7eb      	b.n	800c7dc <_malloc_r+0x64>
 800c804:	460c      	mov	r4, r1
 800c806:	6849      	ldr	r1, [r1, #4]
 800c808:	e7cc      	b.n	800c7a4 <_malloc_r+0x2c>
 800c80a:	1cc4      	adds	r4, r0, #3
 800c80c:	f024 0403 	bic.w	r4, r4, #3
 800c810:	42a0      	cmp	r0, r4
 800c812:	d005      	beq.n	800c820 <_malloc_r+0xa8>
 800c814:	1a21      	subs	r1, r4, r0
 800c816:	4630      	mov	r0, r6
 800c818:	f000 f88c 	bl	800c934 <_sbrk_r>
 800c81c:	3001      	adds	r0, #1
 800c81e:	d0cf      	beq.n	800c7c0 <_malloc_r+0x48>
 800c820:	6025      	str	r5, [r4, #0]
 800c822:	e7db      	b.n	800c7dc <_malloc_r+0x64>
 800c824:	20000a84 	.word	0x20000a84
 800c828:	20000a88 	.word	0x20000a88

0800c82c <iprintf>:
 800c82c:	b40f      	push	{r0, r1, r2, r3}
 800c82e:	4b0a      	ldr	r3, [pc, #40]	; (800c858 <iprintf+0x2c>)
 800c830:	b513      	push	{r0, r1, r4, lr}
 800c832:	681c      	ldr	r4, [r3, #0]
 800c834:	b124      	cbz	r4, 800c840 <iprintf+0x14>
 800c836:	69a3      	ldr	r3, [r4, #24]
 800c838:	b913      	cbnz	r3, 800c840 <iprintf+0x14>
 800c83a:	4620      	mov	r0, r4
 800c83c:	f000 fa4c 	bl	800ccd8 <__sinit>
 800c840:	ab05      	add	r3, sp, #20
 800c842:	9a04      	ldr	r2, [sp, #16]
 800c844:	68a1      	ldr	r1, [r4, #8]
 800c846:	9301      	str	r3, [sp, #4]
 800c848:	4620      	mov	r0, r4
 800c84a:	f000 fb85 	bl	800cf58 <_vfiprintf_r>
 800c84e:	b002      	add	sp, #8
 800c850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c854:	b004      	add	sp, #16
 800c856:	4770      	bx	lr
 800c858:	20000578 	.word	0x20000578

0800c85c <_puts_r>:
 800c85c:	b570      	push	{r4, r5, r6, lr}
 800c85e:	460e      	mov	r6, r1
 800c860:	4605      	mov	r5, r0
 800c862:	b118      	cbz	r0, 800c86c <_puts_r+0x10>
 800c864:	6983      	ldr	r3, [r0, #24]
 800c866:	b90b      	cbnz	r3, 800c86c <_puts_r+0x10>
 800c868:	f000 fa36 	bl	800ccd8 <__sinit>
 800c86c:	69ab      	ldr	r3, [r5, #24]
 800c86e:	68ac      	ldr	r4, [r5, #8]
 800c870:	b913      	cbnz	r3, 800c878 <_puts_r+0x1c>
 800c872:	4628      	mov	r0, r5
 800c874:	f000 fa30 	bl	800ccd8 <__sinit>
 800c878:	4b23      	ldr	r3, [pc, #140]	; (800c908 <_puts_r+0xac>)
 800c87a:	429c      	cmp	r4, r3
 800c87c:	d117      	bne.n	800c8ae <_puts_r+0x52>
 800c87e:	686c      	ldr	r4, [r5, #4]
 800c880:	89a3      	ldrh	r3, [r4, #12]
 800c882:	071b      	lsls	r3, r3, #28
 800c884:	d51d      	bpl.n	800c8c2 <_puts_r+0x66>
 800c886:	6923      	ldr	r3, [r4, #16]
 800c888:	b1db      	cbz	r3, 800c8c2 <_puts_r+0x66>
 800c88a:	3e01      	subs	r6, #1
 800c88c:	68a3      	ldr	r3, [r4, #8]
 800c88e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c892:	3b01      	subs	r3, #1
 800c894:	60a3      	str	r3, [r4, #8]
 800c896:	b9e9      	cbnz	r1, 800c8d4 <_puts_r+0x78>
 800c898:	2b00      	cmp	r3, #0
 800c89a:	da2e      	bge.n	800c8fa <_puts_r+0x9e>
 800c89c:	4622      	mov	r2, r4
 800c89e:	210a      	movs	r1, #10
 800c8a0:	4628      	mov	r0, r5
 800c8a2:	f000 f869 	bl	800c978 <__swbuf_r>
 800c8a6:	3001      	adds	r0, #1
 800c8a8:	d011      	beq.n	800c8ce <_puts_r+0x72>
 800c8aa:	200a      	movs	r0, #10
 800c8ac:	e011      	b.n	800c8d2 <_puts_r+0x76>
 800c8ae:	4b17      	ldr	r3, [pc, #92]	; (800c90c <_puts_r+0xb0>)
 800c8b0:	429c      	cmp	r4, r3
 800c8b2:	d101      	bne.n	800c8b8 <_puts_r+0x5c>
 800c8b4:	68ac      	ldr	r4, [r5, #8]
 800c8b6:	e7e3      	b.n	800c880 <_puts_r+0x24>
 800c8b8:	4b15      	ldr	r3, [pc, #84]	; (800c910 <_puts_r+0xb4>)
 800c8ba:	429c      	cmp	r4, r3
 800c8bc:	bf08      	it	eq
 800c8be:	68ec      	ldreq	r4, [r5, #12]
 800c8c0:	e7de      	b.n	800c880 <_puts_r+0x24>
 800c8c2:	4621      	mov	r1, r4
 800c8c4:	4628      	mov	r0, r5
 800c8c6:	f000 f8a9 	bl	800ca1c <__swsetup_r>
 800c8ca:	2800      	cmp	r0, #0
 800c8cc:	d0dd      	beq.n	800c88a <_puts_r+0x2e>
 800c8ce:	f04f 30ff 	mov.w	r0, #4294967295
 800c8d2:	bd70      	pop	{r4, r5, r6, pc}
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	da04      	bge.n	800c8e2 <_puts_r+0x86>
 800c8d8:	69a2      	ldr	r2, [r4, #24]
 800c8da:	429a      	cmp	r2, r3
 800c8dc:	dc06      	bgt.n	800c8ec <_puts_r+0x90>
 800c8de:	290a      	cmp	r1, #10
 800c8e0:	d004      	beq.n	800c8ec <_puts_r+0x90>
 800c8e2:	6823      	ldr	r3, [r4, #0]
 800c8e4:	1c5a      	adds	r2, r3, #1
 800c8e6:	6022      	str	r2, [r4, #0]
 800c8e8:	7019      	strb	r1, [r3, #0]
 800c8ea:	e7cf      	b.n	800c88c <_puts_r+0x30>
 800c8ec:	4622      	mov	r2, r4
 800c8ee:	4628      	mov	r0, r5
 800c8f0:	f000 f842 	bl	800c978 <__swbuf_r>
 800c8f4:	3001      	adds	r0, #1
 800c8f6:	d1c9      	bne.n	800c88c <_puts_r+0x30>
 800c8f8:	e7e9      	b.n	800c8ce <_puts_r+0x72>
 800c8fa:	6823      	ldr	r3, [r4, #0]
 800c8fc:	200a      	movs	r0, #10
 800c8fe:	1c5a      	adds	r2, r3, #1
 800c900:	6022      	str	r2, [r4, #0]
 800c902:	7018      	strb	r0, [r3, #0]
 800c904:	e7e5      	b.n	800c8d2 <_puts_r+0x76>
 800c906:	bf00      	nop
 800c908:	0800f8c4 	.word	0x0800f8c4
 800c90c:	0800f8e4 	.word	0x0800f8e4
 800c910:	0800f8a4 	.word	0x0800f8a4

0800c914 <puts>:
 800c914:	4b02      	ldr	r3, [pc, #8]	; (800c920 <puts+0xc>)
 800c916:	4601      	mov	r1, r0
 800c918:	6818      	ldr	r0, [r3, #0]
 800c91a:	f7ff bf9f 	b.w	800c85c <_puts_r>
 800c91e:	bf00      	nop
 800c920:	20000578 	.word	0x20000578

0800c924 <realloc>:
 800c924:	4b02      	ldr	r3, [pc, #8]	; (800c930 <realloc+0xc>)
 800c926:	460a      	mov	r2, r1
 800c928:	4601      	mov	r1, r0
 800c92a:	6818      	ldr	r0, [r3, #0]
 800c92c:	f000 bac4 	b.w	800ceb8 <_realloc_r>
 800c930:	20000578 	.word	0x20000578

0800c934 <_sbrk_r>:
 800c934:	b538      	push	{r3, r4, r5, lr}
 800c936:	4c06      	ldr	r4, [pc, #24]	; (800c950 <_sbrk_r+0x1c>)
 800c938:	2300      	movs	r3, #0
 800c93a:	4605      	mov	r5, r0
 800c93c:	4608      	mov	r0, r1
 800c93e:	6023      	str	r3, [r4, #0]
 800c940:	f7ff fde0 	bl	800c504 <_sbrk>
 800c944:	1c43      	adds	r3, r0, #1
 800c946:	d102      	bne.n	800c94e <_sbrk_r+0x1a>
 800c948:	6823      	ldr	r3, [r4, #0]
 800c94a:	b103      	cbz	r3, 800c94e <_sbrk_r+0x1a>
 800c94c:	602b      	str	r3, [r5, #0]
 800c94e:	bd38      	pop	{r3, r4, r5, pc}
 800c950:	20000ad8 	.word	0x20000ad8

0800c954 <strncmp>:
 800c954:	b510      	push	{r4, lr}
 800c956:	b16a      	cbz	r2, 800c974 <strncmp+0x20>
 800c958:	3901      	subs	r1, #1
 800c95a:	1884      	adds	r4, r0, r2
 800c95c:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c960:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c964:	4293      	cmp	r3, r2
 800c966:	d103      	bne.n	800c970 <strncmp+0x1c>
 800c968:	42a0      	cmp	r0, r4
 800c96a:	d001      	beq.n	800c970 <strncmp+0x1c>
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d1f5      	bne.n	800c95c <strncmp+0x8>
 800c970:	1a98      	subs	r0, r3, r2
 800c972:	bd10      	pop	{r4, pc}
 800c974:	4610      	mov	r0, r2
 800c976:	e7fc      	b.n	800c972 <strncmp+0x1e>

0800c978 <__swbuf_r>:
 800c978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c97a:	460e      	mov	r6, r1
 800c97c:	4614      	mov	r4, r2
 800c97e:	4605      	mov	r5, r0
 800c980:	b118      	cbz	r0, 800c98a <__swbuf_r+0x12>
 800c982:	6983      	ldr	r3, [r0, #24]
 800c984:	b90b      	cbnz	r3, 800c98a <__swbuf_r+0x12>
 800c986:	f000 f9a7 	bl	800ccd8 <__sinit>
 800c98a:	4b21      	ldr	r3, [pc, #132]	; (800ca10 <__swbuf_r+0x98>)
 800c98c:	429c      	cmp	r4, r3
 800c98e:	d12a      	bne.n	800c9e6 <__swbuf_r+0x6e>
 800c990:	686c      	ldr	r4, [r5, #4]
 800c992:	69a3      	ldr	r3, [r4, #24]
 800c994:	60a3      	str	r3, [r4, #8]
 800c996:	89a3      	ldrh	r3, [r4, #12]
 800c998:	071a      	lsls	r2, r3, #28
 800c99a:	d52e      	bpl.n	800c9fa <__swbuf_r+0x82>
 800c99c:	6923      	ldr	r3, [r4, #16]
 800c99e:	b363      	cbz	r3, 800c9fa <__swbuf_r+0x82>
 800c9a0:	6923      	ldr	r3, [r4, #16]
 800c9a2:	6820      	ldr	r0, [r4, #0]
 800c9a4:	1ac0      	subs	r0, r0, r3
 800c9a6:	6963      	ldr	r3, [r4, #20]
 800c9a8:	b2f6      	uxtb	r6, r6
 800c9aa:	4283      	cmp	r3, r0
 800c9ac:	4637      	mov	r7, r6
 800c9ae:	dc04      	bgt.n	800c9ba <__swbuf_r+0x42>
 800c9b0:	4621      	mov	r1, r4
 800c9b2:	4628      	mov	r0, r5
 800c9b4:	f000 f926 	bl	800cc04 <_fflush_r>
 800c9b8:	bb28      	cbnz	r0, 800ca06 <__swbuf_r+0x8e>
 800c9ba:	68a3      	ldr	r3, [r4, #8]
 800c9bc:	3b01      	subs	r3, #1
 800c9be:	60a3      	str	r3, [r4, #8]
 800c9c0:	6823      	ldr	r3, [r4, #0]
 800c9c2:	1c5a      	adds	r2, r3, #1
 800c9c4:	6022      	str	r2, [r4, #0]
 800c9c6:	701e      	strb	r6, [r3, #0]
 800c9c8:	6963      	ldr	r3, [r4, #20]
 800c9ca:	3001      	adds	r0, #1
 800c9cc:	4283      	cmp	r3, r0
 800c9ce:	d004      	beq.n	800c9da <__swbuf_r+0x62>
 800c9d0:	89a3      	ldrh	r3, [r4, #12]
 800c9d2:	07db      	lsls	r3, r3, #31
 800c9d4:	d519      	bpl.n	800ca0a <__swbuf_r+0x92>
 800c9d6:	2e0a      	cmp	r6, #10
 800c9d8:	d117      	bne.n	800ca0a <__swbuf_r+0x92>
 800c9da:	4621      	mov	r1, r4
 800c9dc:	4628      	mov	r0, r5
 800c9de:	f000 f911 	bl	800cc04 <_fflush_r>
 800c9e2:	b190      	cbz	r0, 800ca0a <__swbuf_r+0x92>
 800c9e4:	e00f      	b.n	800ca06 <__swbuf_r+0x8e>
 800c9e6:	4b0b      	ldr	r3, [pc, #44]	; (800ca14 <__swbuf_r+0x9c>)
 800c9e8:	429c      	cmp	r4, r3
 800c9ea:	d101      	bne.n	800c9f0 <__swbuf_r+0x78>
 800c9ec:	68ac      	ldr	r4, [r5, #8]
 800c9ee:	e7d0      	b.n	800c992 <__swbuf_r+0x1a>
 800c9f0:	4b09      	ldr	r3, [pc, #36]	; (800ca18 <__swbuf_r+0xa0>)
 800c9f2:	429c      	cmp	r4, r3
 800c9f4:	bf08      	it	eq
 800c9f6:	68ec      	ldreq	r4, [r5, #12]
 800c9f8:	e7cb      	b.n	800c992 <__swbuf_r+0x1a>
 800c9fa:	4621      	mov	r1, r4
 800c9fc:	4628      	mov	r0, r5
 800c9fe:	f000 f80d 	bl	800ca1c <__swsetup_r>
 800ca02:	2800      	cmp	r0, #0
 800ca04:	d0cc      	beq.n	800c9a0 <__swbuf_r+0x28>
 800ca06:	f04f 37ff 	mov.w	r7, #4294967295
 800ca0a:	4638      	mov	r0, r7
 800ca0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca0e:	bf00      	nop
 800ca10:	0800f8c4 	.word	0x0800f8c4
 800ca14:	0800f8e4 	.word	0x0800f8e4
 800ca18:	0800f8a4 	.word	0x0800f8a4

0800ca1c <__swsetup_r>:
 800ca1c:	4b32      	ldr	r3, [pc, #200]	; (800cae8 <__swsetup_r+0xcc>)
 800ca1e:	b570      	push	{r4, r5, r6, lr}
 800ca20:	681d      	ldr	r5, [r3, #0]
 800ca22:	4606      	mov	r6, r0
 800ca24:	460c      	mov	r4, r1
 800ca26:	b125      	cbz	r5, 800ca32 <__swsetup_r+0x16>
 800ca28:	69ab      	ldr	r3, [r5, #24]
 800ca2a:	b913      	cbnz	r3, 800ca32 <__swsetup_r+0x16>
 800ca2c:	4628      	mov	r0, r5
 800ca2e:	f000 f953 	bl	800ccd8 <__sinit>
 800ca32:	4b2e      	ldr	r3, [pc, #184]	; (800caec <__swsetup_r+0xd0>)
 800ca34:	429c      	cmp	r4, r3
 800ca36:	d10f      	bne.n	800ca58 <__swsetup_r+0x3c>
 800ca38:	686c      	ldr	r4, [r5, #4]
 800ca3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca3e:	b29a      	uxth	r2, r3
 800ca40:	0715      	lsls	r5, r2, #28
 800ca42:	d42c      	bmi.n	800ca9e <__swsetup_r+0x82>
 800ca44:	06d0      	lsls	r0, r2, #27
 800ca46:	d411      	bmi.n	800ca6c <__swsetup_r+0x50>
 800ca48:	2209      	movs	r2, #9
 800ca4a:	6032      	str	r2, [r6, #0]
 800ca4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca50:	81a3      	strh	r3, [r4, #12]
 800ca52:	f04f 30ff 	mov.w	r0, #4294967295
 800ca56:	e03e      	b.n	800cad6 <__swsetup_r+0xba>
 800ca58:	4b25      	ldr	r3, [pc, #148]	; (800caf0 <__swsetup_r+0xd4>)
 800ca5a:	429c      	cmp	r4, r3
 800ca5c:	d101      	bne.n	800ca62 <__swsetup_r+0x46>
 800ca5e:	68ac      	ldr	r4, [r5, #8]
 800ca60:	e7eb      	b.n	800ca3a <__swsetup_r+0x1e>
 800ca62:	4b24      	ldr	r3, [pc, #144]	; (800caf4 <__swsetup_r+0xd8>)
 800ca64:	429c      	cmp	r4, r3
 800ca66:	bf08      	it	eq
 800ca68:	68ec      	ldreq	r4, [r5, #12]
 800ca6a:	e7e6      	b.n	800ca3a <__swsetup_r+0x1e>
 800ca6c:	0751      	lsls	r1, r2, #29
 800ca6e:	d512      	bpl.n	800ca96 <__swsetup_r+0x7a>
 800ca70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ca72:	b141      	cbz	r1, 800ca86 <__swsetup_r+0x6a>
 800ca74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ca78:	4299      	cmp	r1, r3
 800ca7a:	d002      	beq.n	800ca82 <__swsetup_r+0x66>
 800ca7c:	4630      	mov	r0, r6
 800ca7e:	f7ff fe2d 	bl	800c6dc <_free_r>
 800ca82:	2300      	movs	r3, #0
 800ca84:	6363      	str	r3, [r4, #52]	; 0x34
 800ca86:	89a3      	ldrh	r3, [r4, #12]
 800ca88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ca8c:	81a3      	strh	r3, [r4, #12]
 800ca8e:	2300      	movs	r3, #0
 800ca90:	6063      	str	r3, [r4, #4]
 800ca92:	6923      	ldr	r3, [r4, #16]
 800ca94:	6023      	str	r3, [r4, #0]
 800ca96:	89a3      	ldrh	r3, [r4, #12]
 800ca98:	f043 0308 	orr.w	r3, r3, #8
 800ca9c:	81a3      	strh	r3, [r4, #12]
 800ca9e:	6923      	ldr	r3, [r4, #16]
 800caa0:	b94b      	cbnz	r3, 800cab6 <__swsetup_r+0x9a>
 800caa2:	89a3      	ldrh	r3, [r4, #12]
 800caa4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800caa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800caac:	d003      	beq.n	800cab6 <__swsetup_r+0x9a>
 800caae:	4621      	mov	r1, r4
 800cab0:	4630      	mov	r0, r6
 800cab2:	f000 f9bf 	bl	800ce34 <__smakebuf_r>
 800cab6:	89a2      	ldrh	r2, [r4, #12]
 800cab8:	f012 0301 	ands.w	r3, r2, #1
 800cabc:	d00c      	beq.n	800cad8 <__swsetup_r+0xbc>
 800cabe:	2300      	movs	r3, #0
 800cac0:	60a3      	str	r3, [r4, #8]
 800cac2:	6963      	ldr	r3, [r4, #20]
 800cac4:	425b      	negs	r3, r3
 800cac6:	61a3      	str	r3, [r4, #24]
 800cac8:	6923      	ldr	r3, [r4, #16]
 800caca:	b953      	cbnz	r3, 800cae2 <__swsetup_r+0xc6>
 800cacc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cad0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800cad4:	d1ba      	bne.n	800ca4c <__swsetup_r+0x30>
 800cad6:	bd70      	pop	{r4, r5, r6, pc}
 800cad8:	0792      	lsls	r2, r2, #30
 800cada:	bf58      	it	pl
 800cadc:	6963      	ldrpl	r3, [r4, #20]
 800cade:	60a3      	str	r3, [r4, #8]
 800cae0:	e7f2      	b.n	800cac8 <__swsetup_r+0xac>
 800cae2:	2000      	movs	r0, #0
 800cae4:	e7f7      	b.n	800cad6 <__swsetup_r+0xba>
 800cae6:	bf00      	nop
 800cae8:	20000578 	.word	0x20000578
 800caec:	0800f8c4 	.word	0x0800f8c4
 800caf0:	0800f8e4 	.word	0x0800f8e4
 800caf4:	0800f8a4 	.word	0x0800f8a4

0800caf8 <__sflush_r>:
 800caf8:	898a      	ldrh	r2, [r1, #12]
 800cafa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cafe:	4605      	mov	r5, r0
 800cb00:	0710      	lsls	r0, r2, #28
 800cb02:	460c      	mov	r4, r1
 800cb04:	d458      	bmi.n	800cbb8 <__sflush_r+0xc0>
 800cb06:	684b      	ldr	r3, [r1, #4]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	dc05      	bgt.n	800cb18 <__sflush_r+0x20>
 800cb0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	dc02      	bgt.n	800cb18 <__sflush_r+0x20>
 800cb12:	2000      	movs	r0, #0
 800cb14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cb1a:	2e00      	cmp	r6, #0
 800cb1c:	d0f9      	beq.n	800cb12 <__sflush_r+0x1a>
 800cb1e:	2300      	movs	r3, #0
 800cb20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cb24:	682f      	ldr	r7, [r5, #0]
 800cb26:	6a21      	ldr	r1, [r4, #32]
 800cb28:	602b      	str	r3, [r5, #0]
 800cb2a:	d032      	beq.n	800cb92 <__sflush_r+0x9a>
 800cb2c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cb2e:	89a3      	ldrh	r3, [r4, #12]
 800cb30:	075a      	lsls	r2, r3, #29
 800cb32:	d505      	bpl.n	800cb40 <__sflush_r+0x48>
 800cb34:	6863      	ldr	r3, [r4, #4]
 800cb36:	1ac0      	subs	r0, r0, r3
 800cb38:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cb3a:	b10b      	cbz	r3, 800cb40 <__sflush_r+0x48>
 800cb3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cb3e:	1ac0      	subs	r0, r0, r3
 800cb40:	2300      	movs	r3, #0
 800cb42:	4602      	mov	r2, r0
 800cb44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cb46:	6a21      	ldr	r1, [r4, #32]
 800cb48:	4628      	mov	r0, r5
 800cb4a:	47b0      	blx	r6
 800cb4c:	1c43      	adds	r3, r0, #1
 800cb4e:	89a3      	ldrh	r3, [r4, #12]
 800cb50:	d106      	bne.n	800cb60 <__sflush_r+0x68>
 800cb52:	6829      	ldr	r1, [r5, #0]
 800cb54:	291d      	cmp	r1, #29
 800cb56:	d848      	bhi.n	800cbea <__sflush_r+0xf2>
 800cb58:	4a29      	ldr	r2, [pc, #164]	; (800cc00 <__sflush_r+0x108>)
 800cb5a:	40ca      	lsrs	r2, r1
 800cb5c:	07d6      	lsls	r6, r2, #31
 800cb5e:	d544      	bpl.n	800cbea <__sflush_r+0xf2>
 800cb60:	2200      	movs	r2, #0
 800cb62:	6062      	str	r2, [r4, #4]
 800cb64:	04d9      	lsls	r1, r3, #19
 800cb66:	6922      	ldr	r2, [r4, #16]
 800cb68:	6022      	str	r2, [r4, #0]
 800cb6a:	d504      	bpl.n	800cb76 <__sflush_r+0x7e>
 800cb6c:	1c42      	adds	r2, r0, #1
 800cb6e:	d101      	bne.n	800cb74 <__sflush_r+0x7c>
 800cb70:	682b      	ldr	r3, [r5, #0]
 800cb72:	b903      	cbnz	r3, 800cb76 <__sflush_r+0x7e>
 800cb74:	6560      	str	r0, [r4, #84]	; 0x54
 800cb76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb78:	602f      	str	r7, [r5, #0]
 800cb7a:	2900      	cmp	r1, #0
 800cb7c:	d0c9      	beq.n	800cb12 <__sflush_r+0x1a>
 800cb7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb82:	4299      	cmp	r1, r3
 800cb84:	d002      	beq.n	800cb8c <__sflush_r+0x94>
 800cb86:	4628      	mov	r0, r5
 800cb88:	f7ff fda8 	bl	800c6dc <_free_r>
 800cb8c:	2000      	movs	r0, #0
 800cb8e:	6360      	str	r0, [r4, #52]	; 0x34
 800cb90:	e7c0      	b.n	800cb14 <__sflush_r+0x1c>
 800cb92:	2301      	movs	r3, #1
 800cb94:	4628      	mov	r0, r5
 800cb96:	47b0      	blx	r6
 800cb98:	1c41      	adds	r1, r0, #1
 800cb9a:	d1c8      	bne.n	800cb2e <__sflush_r+0x36>
 800cb9c:	682b      	ldr	r3, [r5, #0]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d0c5      	beq.n	800cb2e <__sflush_r+0x36>
 800cba2:	2b1d      	cmp	r3, #29
 800cba4:	d001      	beq.n	800cbaa <__sflush_r+0xb2>
 800cba6:	2b16      	cmp	r3, #22
 800cba8:	d101      	bne.n	800cbae <__sflush_r+0xb6>
 800cbaa:	602f      	str	r7, [r5, #0]
 800cbac:	e7b1      	b.n	800cb12 <__sflush_r+0x1a>
 800cbae:	89a3      	ldrh	r3, [r4, #12]
 800cbb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbb4:	81a3      	strh	r3, [r4, #12]
 800cbb6:	e7ad      	b.n	800cb14 <__sflush_r+0x1c>
 800cbb8:	690f      	ldr	r7, [r1, #16]
 800cbba:	2f00      	cmp	r7, #0
 800cbbc:	d0a9      	beq.n	800cb12 <__sflush_r+0x1a>
 800cbbe:	0793      	lsls	r3, r2, #30
 800cbc0:	680e      	ldr	r6, [r1, #0]
 800cbc2:	bf08      	it	eq
 800cbc4:	694b      	ldreq	r3, [r1, #20]
 800cbc6:	600f      	str	r7, [r1, #0]
 800cbc8:	bf18      	it	ne
 800cbca:	2300      	movne	r3, #0
 800cbcc:	eba6 0807 	sub.w	r8, r6, r7
 800cbd0:	608b      	str	r3, [r1, #8]
 800cbd2:	f1b8 0f00 	cmp.w	r8, #0
 800cbd6:	dd9c      	ble.n	800cb12 <__sflush_r+0x1a>
 800cbd8:	4643      	mov	r3, r8
 800cbda:	463a      	mov	r2, r7
 800cbdc:	6a21      	ldr	r1, [r4, #32]
 800cbde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cbe0:	4628      	mov	r0, r5
 800cbe2:	47b0      	blx	r6
 800cbe4:	2800      	cmp	r0, #0
 800cbe6:	dc06      	bgt.n	800cbf6 <__sflush_r+0xfe>
 800cbe8:	89a3      	ldrh	r3, [r4, #12]
 800cbea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbee:	81a3      	strh	r3, [r4, #12]
 800cbf0:	f04f 30ff 	mov.w	r0, #4294967295
 800cbf4:	e78e      	b.n	800cb14 <__sflush_r+0x1c>
 800cbf6:	4407      	add	r7, r0
 800cbf8:	eba8 0800 	sub.w	r8, r8, r0
 800cbfc:	e7e9      	b.n	800cbd2 <__sflush_r+0xda>
 800cbfe:	bf00      	nop
 800cc00:	20400001 	.word	0x20400001

0800cc04 <_fflush_r>:
 800cc04:	b538      	push	{r3, r4, r5, lr}
 800cc06:	690b      	ldr	r3, [r1, #16]
 800cc08:	4605      	mov	r5, r0
 800cc0a:	460c      	mov	r4, r1
 800cc0c:	b1db      	cbz	r3, 800cc46 <_fflush_r+0x42>
 800cc0e:	b118      	cbz	r0, 800cc18 <_fflush_r+0x14>
 800cc10:	6983      	ldr	r3, [r0, #24]
 800cc12:	b90b      	cbnz	r3, 800cc18 <_fflush_r+0x14>
 800cc14:	f000 f860 	bl	800ccd8 <__sinit>
 800cc18:	4b0c      	ldr	r3, [pc, #48]	; (800cc4c <_fflush_r+0x48>)
 800cc1a:	429c      	cmp	r4, r3
 800cc1c:	d109      	bne.n	800cc32 <_fflush_r+0x2e>
 800cc1e:	686c      	ldr	r4, [r5, #4]
 800cc20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc24:	b17b      	cbz	r3, 800cc46 <_fflush_r+0x42>
 800cc26:	4621      	mov	r1, r4
 800cc28:	4628      	mov	r0, r5
 800cc2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc2e:	f7ff bf63 	b.w	800caf8 <__sflush_r>
 800cc32:	4b07      	ldr	r3, [pc, #28]	; (800cc50 <_fflush_r+0x4c>)
 800cc34:	429c      	cmp	r4, r3
 800cc36:	d101      	bne.n	800cc3c <_fflush_r+0x38>
 800cc38:	68ac      	ldr	r4, [r5, #8]
 800cc3a:	e7f1      	b.n	800cc20 <_fflush_r+0x1c>
 800cc3c:	4b05      	ldr	r3, [pc, #20]	; (800cc54 <_fflush_r+0x50>)
 800cc3e:	429c      	cmp	r4, r3
 800cc40:	bf08      	it	eq
 800cc42:	68ec      	ldreq	r4, [r5, #12]
 800cc44:	e7ec      	b.n	800cc20 <_fflush_r+0x1c>
 800cc46:	2000      	movs	r0, #0
 800cc48:	bd38      	pop	{r3, r4, r5, pc}
 800cc4a:	bf00      	nop
 800cc4c:	0800f8c4 	.word	0x0800f8c4
 800cc50:	0800f8e4 	.word	0x0800f8e4
 800cc54:	0800f8a4 	.word	0x0800f8a4

0800cc58 <std>:
 800cc58:	2300      	movs	r3, #0
 800cc5a:	b510      	push	{r4, lr}
 800cc5c:	4604      	mov	r4, r0
 800cc5e:	e9c0 3300 	strd	r3, r3, [r0]
 800cc62:	6083      	str	r3, [r0, #8]
 800cc64:	8181      	strh	r1, [r0, #12]
 800cc66:	6643      	str	r3, [r0, #100]	; 0x64
 800cc68:	81c2      	strh	r2, [r0, #14]
 800cc6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cc6e:	6183      	str	r3, [r0, #24]
 800cc70:	4619      	mov	r1, r3
 800cc72:	2208      	movs	r2, #8
 800cc74:	305c      	adds	r0, #92	; 0x5c
 800cc76:	f7ff fd29 	bl	800c6cc <memset>
 800cc7a:	4b05      	ldr	r3, [pc, #20]	; (800cc90 <std+0x38>)
 800cc7c:	6263      	str	r3, [r4, #36]	; 0x24
 800cc7e:	4b05      	ldr	r3, [pc, #20]	; (800cc94 <std+0x3c>)
 800cc80:	62a3      	str	r3, [r4, #40]	; 0x28
 800cc82:	4b05      	ldr	r3, [pc, #20]	; (800cc98 <std+0x40>)
 800cc84:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cc86:	4b05      	ldr	r3, [pc, #20]	; (800cc9c <std+0x44>)
 800cc88:	6224      	str	r4, [r4, #32]
 800cc8a:	6323      	str	r3, [r4, #48]	; 0x30
 800cc8c:	bd10      	pop	{r4, pc}
 800cc8e:	bf00      	nop
 800cc90:	0800d495 	.word	0x0800d495
 800cc94:	0800d4b7 	.word	0x0800d4b7
 800cc98:	0800d4ef 	.word	0x0800d4ef
 800cc9c:	0800d513 	.word	0x0800d513

0800cca0 <_cleanup_r>:
 800cca0:	4901      	ldr	r1, [pc, #4]	; (800cca8 <_cleanup_r+0x8>)
 800cca2:	f000 b885 	b.w	800cdb0 <_fwalk_reent>
 800cca6:	bf00      	nop
 800cca8:	0800cc05 	.word	0x0800cc05

0800ccac <__sfmoreglue>:
 800ccac:	b570      	push	{r4, r5, r6, lr}
 800ccae:	1e4a      	subs	r2, r1, #1
 800ccb0:	2568      	movs	r5, #104	; 0x68
 800ccb2:	4355      	muls	r5, r2
 800ccb4:	460e      	mov	r6, r1
 800ccb6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ccba:	f7ff fd5d 	bl	800c778 <_malloc_r>
 800ccbe:	4604      	mov	r4, r0
 800ccc0:	b140      	cbz	r0, 800ccd4 <__sfmoreglue+0x28>
 800ccc2:	2100      	movs	r1, #0
 800ccc4:	e9c0 1600 	strd	r1, r6, [r0]
 800ccc8:	300c      	adds	r0, #12
 800ccca:	60a0      	str	r0, [r4, #8]
 800cccc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ccd0:	f7ff fcfc 	bl	800c6cc <memset>
 800ccd4:	4620      	mov	r0, r4
 800ccd6:	bd70      	pop	{r4, r5, r6, pc}

0800ccd8 <__sinit>:
 800ccd8:	6983      	ldr	r3, [r0, #24]
 800ccda:	b510      	push	{r4, lr}
 800ccdc:	4604      	mov	r4, r0
 800ccde:	bb33      	cbnz	r3, 800cd2e <__sinit+0x56>
 800cce0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800cce4:	6503      	str	r3, [r0, #80]	; 0x50
 800cce6:	4b12      	ldr	r3, [pc, #72]	; (800cd30 <__sinit+0x58>)
 800cce8:	4a12      	ldr	r2, [pc, #72]	; (800cd34 <__sinit+0x5c>)
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	6282      	str	r2, [r0, #40]	; 0x28
 800ccee:	4298      	cmp	r0, r3
 800ccf0:	bf04      	itt	eq
 800ccf2:	2301      	moveq	r3, #1
 800ccf4:	6183      	streq	r3, [r0, #24]
 800ccf6:	f000 f81f 	bl	800cd38 <__sfp>
 800ccfa:	6060      	str	r0, [r4, #4]
 800ccfc:	4620      	mov	r0, r4
 800ccfe:	f000 f81b 	bl	800cd38 <__sfp>
 800cd02:	60a0      	str	r0, [r4, #8]
 800cd04:	4620      	mov	r0, r4
 800cd06:	f000 f817 	bl	800cd38 <__sfp>
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	60e0      	str	r0, [r4, #12]
 800cd0e:	2104      	movs	r1, #4
 800cd10:	6860      	ldr	r0, [r4, #4]
 800cd12:	f7ff ffa1 	bl	800cc58 <std>
 800cd16:	2201      	movs	r2, #1
 800cd18:	2109      	movs	r1, #9
 800cd1a:	68a0      	ldr	r0, [r4, #8]
 800cd1c:	f7ff ff9c 	bl	800cc58 <std>
 800cd20:	2202      	movs	r2, #2
 800cd22:	2112      	movs	r1, #18
 800cd24:	68e0      	ldr	r0, [r4, #12]
 800cd26:	f7ff ff97 	bl	800cc58 <std>
 800cd2a:	2301      	movs	r3, #1
 800cd2c:	61a3      	str	r3, [r4, #24]
 800cd2e:	bd10      	pop	{r4, pc}
 800cd30:	0800f8a0 	.word	0x0800f8a0
 800cd34:	0800cca1 	.word	0x0800cca1

0800cd38 <__sfp>:
 800cd38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd3a:	4b1b      	ldr	r3, [pc, #108]	; (800cda8 <__sfp+0x70>)
 800cd3c:	681e      	ldr	r6, [r3, #0]
 800cd3e:	69b3      	ldr	r3, [r6, #24]
 800cd40:	4607      	mov	r7, r0
 800cd42:	b913      	cbnz	r3, 800cd4a <__sfp+0x12>
 800cd44:	4630      	mov	r0, r6
 800cd46:	f7ff ffc7 	bl	800ccd8 <__sinit>
 800cd4a:	3648      	adds	r6, #72	; 0x48
 800cd4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cd50:	3b01      	subs	r3, #1
 800cd52:	d503      	bpl.n	800cd5c <__sfp+0x24>
 800cd54:	6833      	ldr	r3, [r6, #0]
 800cd56:	b133      	cbz	r3, 800cd66 <__sfp+0x2e>
 800cd58:	6836      	ldr	r6, [r6, #0]
 800cd5a:	e7f7      	b.n	800cd4c <__sfp+0x14>
 800cd5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cd60:	b16d      	cbz	r5, 800cd7e <__sfp+0x46>
 800cd62:	3468      	adds	r4, #104	; 0x68
 800cd64:	e7f4      	b.n	800cd50 <__sfp+0x18>
 800cd66:	2104      	movs	r1, #4
 800cd68:	4638      	mov	r0, r7
 800cd6a:	f7ff ff9f 	bl	800ccac <__sfmoreglue>
 800cd6e:	6030      	str	r0, [r6, #0]
 800cd70:	2800      	cmp	r0, #0
 800cd72:	d1f1      	bne.n	800cd58 <__sfp+0x20>
 800cd74:	230c      	movs	r3, #12
 800cd76:	603b      	str	r3, [r7, #0]
 800cd78:	4604      	mov	r4, r0
 800cd7a:	4620      	mov	r0, r4
 800cd7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd7e:	4b0b      	ldr	r3, [pc, #44]	; (800cdac <__sfp+0x74>)
 800cd80:	6665      	str	r5, [r4, #100]	; 0x64
 800cd82:	e9c4 5500 	strd	r5, r5, [r4]
 800cd86:	60a5      	str	r5, [r4, #8]
 800cd88:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800cd8c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800cd90:	2208      	movs	r2, #8
 800cd92:	4629      	mov	r1, r5
 800cd94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cd98:	f7ff fc98 	bl	800c6cc <memset>
 800cd9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cda0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cda4:	e7e9      	b.n	800cd7a <__sfp+0x42>
 800cda6:	bf00      	nop
 800cda8:	0800f8a0 	.word	0x0800f8a0
 800cdac:	ffff0001 	.word	0xffff0001

0800cdb0 <_fwalk_reent>:
 800cdb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cdb4:	4680      	mov	r8, r0
 800cdb6:	4689      	mov	r9, r1
 800cdb8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cdbc:	2600      	movs	r6, #0
 800cdbe:	b914      	cbnz	r4, 800cdc6 <_fwalk_reent+0x16>
 800cdc0:	4630      	mov	r0, r6
 800cdc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cdc6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800cdca:	3f01      	subs	r7, #1
 800cdcc:	d501      	bpl.n	800cdd2 <_fwalk_reent+0x22>
 800cdce:	6824      	ldr	r4, [r4, #0]
 800cdd0:	e7f5      	b.n	800cdbe <_fwalk_reent+0xe>
 800cdd2:	89ab      	ldrh	r3, [r5, #12]
 800cdd4:	2b01      	cmp	r3, #1
 800cdd6:	d907      	bls.n	800cde8 <_fwalk_reent+0x38>
 800cdd8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cddc:	3301      	adds	r3, #1
 800cdde:	d003      	beq.n	800cde8 <_fwalk_reent+0x38>
 800cde0:	4629      	mov	r1, r5
 800cde2:	4640      	mov	r0, r8
 800cde4:	47c8      	blx	r9
 800cde6:	4306      	orrs	r6, r0
 800cde8:	3568      	adds	r5, #104	; 0x68
 800cdea:	e7ee      	b.n	800cdca <_fwalk_reent+0x1a>

0800cdec <__swhatbuf_r>:
 800cdec:	b570      	push	{r4, r5, r6, lr}
 800cdee:	460e      	mov	r6, r1
 800cdf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdf4:	2900      	cmp	r1, #0
 800cdf6:	b096      	sub	sp, #88	; 0x58
 800cdf8:	4614      	mov	r4, r2
 800cdfa:	461d      	mov	r5, r3
 800cdfc:	da07      	bge.n	800ce0e <__swhatbuf_r+0x22>
 800cdfe:	2300      	movs	r3, #0
 800ce00:	602b      	str	r3, [r5, #0]
 800ce02:	89b3      	ldrh	r3, [r6, #12]
 800ce04:	061a      	lsls	r2, r3, #24
 800ce06:	d410      	bmi.n	800ce2a <__swhatbuf_r+0x3e>
 800ce08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce0c:	e00e      	b.n	800ce2c <__swhatbuf_r+0x40>
 800ce0e:	466a      	mov	r2, sp
 800ce10:	f000 fba6 	bl	800d560 <_fstat_r>
 800ce14:	2800      	cmp	r0, #0
 800ce16:	dbf2      	blt.n	800cdfe <__swhatbuf_r+0x12>
 800ce18:	9a01      	ldr	r2, [sp, #4]
 800ce1a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ce1e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ce22:	425a      	negs	r2, r3
 800ce24:	415a      	adcs	r2, r3
 800ce26:	602a      	str	r2, [r5, #0]
 800ce28:	e7ee      	b.n	800ce08 <__swhatbuf_r+0x1c>
 800ce2a:	2340      	movs	r3, #64	; 0x40
 800ce2c:	2000      	movs	r0, #0
 800ce2e:	6023      	str	r3, [r4, #0]
 800ce30:	b016      	add	sp, #88	; 0x58
 800ce32:	bd70      	pop	{r4, r5, r6, pc}

0800ce34 <__smakebuf_r>:
 800ce34:	898b      	ldrh	r3, [r1, #12]
 800ce36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ce38:	079d      	lsls	r5, r3, #30
 800ce3a:	4606      	mov	r6, r0
 800ce3c:	460c      	mov	r4, r1
 800ce3e:	d507      	bpl.n	800ce50 <__smakebuf_r+0x1c>
 800ce40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ce44:	6023      	str	r3, [r4, #0]
 800ce46:	6123      	str	r3, [r4, #16]
 800ce48:	2301      	movs	r3, #1
 800ce4a:	6163      	str	r3, [r4, #20]
 800ce4c:	b002      	add	sp, #8
 800ce4e:	bd70      	pop	{r4, r5, r6, pc}
 800ce50:	ab01      	add	r3, sp, #4
 800ce52:	466a      	mov	r2, sp
 800ce54:	f7ff ffca 	bl	800cdec <__swhatbuf_r>
 800ce58:	9900      	ldr	r1, [sp, #0]
 800ce5a:	4605      	mov	r5, r0
 800ce5c:	4630      	mov	r0, r6
 800ce5e:	f7ff fc8b 	bl	800c778 <_malloc_r>
 800ce62:	b948      	cbnz	r0, 800ce78 <__smakebuf_r+0x44>
 800ce64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce68:	059a      	lsls	r2, r3, #22
 800ce6a:	d4ef      	bmi.n	800ce4c <__smakebuf_r+0x18>
 800ce6c:	f023 0303 	bic.w	r3, r3, #3
 800ce70:	f043 0302 	orr.w	r3, r3, #2
 800ce74:	81a3      	strh	r3, [r4, #12]
 800ce76:	e7e3      	b.n	800ce40 <__smakebuf_r+0xc>
 800ce78:	4b0d      	ldr	r3, [pc, #52]	; (800ceb0 <__smakebuf_r+0x7c>)
 800ce7a:	62b3      	str	r3, [r6, #40]	; 0x28
 800ce7c:	89a3      	ldrh	r3, [r4, #12]
 800ce7e:	6020      	str	r0, [r4, #0]
 800ce80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce84:	81a3      	strh	r3, [r4, #12]
 800ce86:	9b00      	ldr	r3, [sp, #0]
 800ce88:	6163      	str	r3, [r4, #20]
 800ce8a:	9b01      	ldr	r3, [sp, #4]
 800ce8c:	6120      	str	r0, [r4, #16]
 800ce8e:	b15b      	cbz	r3, 800cea8 <__smakebuf_r+0x74>
 800ce90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce94:	4630      	mov	r0, r6
 800ce96:	f000 fb75 	bl	800d584 <_isatty_r>
 800ce9a:	b128      	cbz	r0, 800cea8 <__smakebuf_r+0x74>
 800ce9c:	89a3      	ldrh	r3, [r4, #12]
 800ce9e:	f023 0303 	bic.w	r3, r3, #3
 800cea2:	f043 0301 	orr.w	r3, r3, #1
 800cea6:	81a3      	strh	r3, [r4, #12]
 800cea8:	89a3      	ldrh	r3, [r4, #12]
 800ceaa:	431d      	orrs	r5, r3
 800ceac:	81a5      	strh	r5, [r4, #12]
 800ceae:	e7cd      	b.n	800ce4c <__smakebuf_r+0x18>
 800ceb0:	0800cca1 	.word	0x0800cca1

0800ceb4 <__malloc_lock>:
 800ceb4:	4770      	bx	lr

0800ceb6 <__malloc_unlock>:
 800ceb6:	4770      	bx	lr

0800ceb8 <_realloc_r>:
 800ceb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceba:	4607      	mov	r7, r0
 800cebc:	4614      	mov	r4, r2
 800cebe:	460e      	mov	r6, r1
 800cec0:	b921      	cbnz	r1, 800cecc <_realloc_r+0x14>
 800cec2:	4611      	mov	r1, r2
 800cec4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800cec8:	f7ff bc56 	b.w	800c778 <_malloc_r>
 800cecc:	b922      	cbnz	r2, 800ced8 <_realloc_r+0x20>
 800cece:	f7ff fc05 	bl	800c6dc <_free_r>
 800ced2:	4625      	mov	r5, r4
 800ced4:	4628      	mov	r0, r5
 800ced6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ced8:	f000 fb76 	bl	800d5c8 <_malloc_usable_size_r>
 800cedc:	42a0      	cmp	r0, r4
 800cede:	d20f      	bcs.n	800cf00 <_realloc_r+0x48>
 800cee0:	4621      	mov	r1, r4
 800cee2:	4638      	mov	r0, r7
 800cee4:	f7ff fc48 	bl	800c778 <_malloc_r>
 800cee8:	4605      	mov	r5, r0
 800ceea:	2800      	cmp	r0, #0
 800ceec:	d0f2      	beq.n	800ced4 <_realloc_r+0x1c>
 800ceee:	4631      	mov	r1, r6
 800cef0:	4622      	mov	r2, r4
 800cef2:	f7ff fbe0 	bl	800c6b6 <memcpy>
 800cef6:	4631      	mov	r1, r6
 800cef8:	4638      	mov	r0, r7
 800cefa:	f7ff fbef 	bl	800c6dc <_free_r>
 800cefe:	e7e9      	b.n	800ced4 <_realloc_r+0x1c>
 800cf00:	4635      	mov	r5, r6
 800cf02:	e7e7      	b.n	800ced4 <_realloc_r+0x1c>

0800cf04 <__sfputc_r>:
 800cf04:	6893      	ldr	r3, [r2, #8]
 800cf06:	3b01      	subs	r3, #1
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	b410      	push	{r4}
 800cf0c:	6093      	str	r3, [r2, #8]
 800cf0e:	da08      	bge.n	800cf22 <__sfputc_r+0x1e>
 800cf10:	6994      	ldr	r4, [r2, #24]
 800cf12:	42a3      	cmp	r3, r4
 800cf14:	db01      	blt.n	800cf1a <__sfputc_r+0x16>
 800cf16:	290a      	cmp	r1, #10
 800cf18:	d103      	bne.n	800cf22 <__sfputc_r+0x1e>
 800cf1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf1e:	f7ff bd2b 	b.w	800c978 <__swbuf_r>
 800cf22:	6813      	ldr	r3, [r2, #0]
 800cf24:	1c58      	adds	r0, r3, #1
 800cf26:	6010      	str	r0, [r2, #0]
 800cf28:	7019      	strb	r1, [r3, #0]
 800cf2a:	4608      	mov	r0, r1
 800cf2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf30:	4770      	bx	lr

0800cf32 <__sfputs_r>:
 800cf32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf34:	4606      	mov	r6, r0
 800cf36:	460f      	mov	r7, r1
 800cf38:	4614      	mov	r4, r2
 800cf3a:	18d5      	adds	r5, r2, r3
 800cf3c:	42ac      	cmp	r4, r5
 800cf3e:	d101      	bne.n	800cf44 <__sfputs_r+0x12>
 800cf40:	2000      	movs	r0, #0
 800cf42:	e007      	b.n	800cf54 <__sfputs_r+0x22>
 800cf44:	463a      	mov	r2, r7
 800cf46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf4a:	4630      	mov	r0, r6
 800cf4c:	f7ff ffda 	bl	800cf04 <__sfputc_r>
 800cf50:	1c43      	adds	r3, r0, #1
 800cf52:	d1f3      	bne.n	800cf3c <__sfputs_r+0xa>
 800cf54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cf58 <_vfiprintf_r>:
 800cf58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf5c:	460c      	mov	r4, r1
 800cf5e:	b09d      	sub	sp, #116	; 0x74
 800cf60:	4617      	mov	r7, r2
 800cf62:	461d      	mov	r5, r3
 800cf64:	4606      	mov	r6, r0
 800cf66:	b118      	cbz	r0, 800cf70 <_vfiprintf_r+0x18>
 800cf68:	6983      	ldr	r3, [r0, #24]
 800cf6a:	b90b      	cbnz	r3, 800cf70 <_vfiprintf_r+0x18>
 800cf6c:	f7ff feb4 	bl	800ccd8 <__sinit>
 800cf70:	4b7c      	ldr	r3, [pc, #496]	; (800d164 <_vfiprintf_r+0x20c>)
 800cf72:	429c      	cmp	r4, r3
 800cf74:	d158      	bne.n	800d028 <_vfiprintf_r+0xd0>
 800cf76:	6874      	ldr	r4, [r6, #4]
 800cf78:	89a3      	ldrh	r3, [r4, #12]
 800cf7a:	0718      	lsls	r0, r3, #28
 800cf7c:	d55e      	bpl.n	800d03c <_vfiprintf_r+0xe4>
 800cf7e:	6923      	ldr	r3, [r4, #16]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d05b      	beq.n	800d03c <_vfiprintf_r+0xe4>
 800cf84:	2300      	movs	r3, #0
 800cf86:	9309      	str	r3, [sp, #36]	; 0x24
 800cf88:	2320      	movs	r3, #32
 800cf8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cf8e:	2330      	movs	r3, #48	; 0x30
 800cf90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cf94:	9503      	str	r5, [sp, #12]
 800cf96:	f04f 0b01 	mov.w	fp, #1
 800cf9a:	46b8      	mov	r8, r7
 800cf9c:	4645      	mov	r5, r8
 800cf9e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800cfa2:	b10b      	cbz	r3, 800cfa8 <_vfiprintf_r+0x50>
 800cfa4:	2b25      	cmp	r3, #37	; 0x25
 800cfa6:	d154      	bne.n	800d052 <_vfiprintf_r+0xfa>
 800cfa8:	ebb8 0a07 	subs.w	sl, r8, r7
 800cfac:	d00b      	beq.n	800cfc6 <_vfiprintf_r+0x6e>
 800cfae:	4653      	mov	r3, sl
 800cfb0:	463a      	mov	r2, r7
 800cfb2:	4621      	mov	r1, r4
 800cfb4:	4630      	mov	r0, r6
 800cfb6:	f7ff ffbc 	bl	800cf32 <__sfputs_r>
 800cfba:	3001      	adds	r0, #1
 800cfbc:	f000 80c2 	beq.w	800d144 <_vfiprintf_r+0x1ec>
 800cfc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfc2:	4453      	add	r3, sl
 800cfc4:	9309      	str	r3, [sp, #36]	; 0x24
 800cfc6:	f898 3000 	ldrb.w	r3, [r8]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	f000 80ba 	beq.w	800d144 <_vfiprintf_r+0x1ec>
 800cfd0:	2300      	movs	r3, #0
 800cfd2:	f04f 32ff 	mov.w	r2, #4294967295
 800cfd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cfda:	9304      	str	r3, [sp, #16]
 800cfdc:	9307      	str	r3, [sp, #28]
 800cfde:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cfe2:	931a      	str	r3, [sp, #104]	; 0x68
 800cfe4:	46a8      	mov	r8, r5
 800cfe6:	2205      	movs	r2, #5
 800cfe8:	f818 1b01 	ldrb.w	r1, [r8], #1
 800cfec:	485e      	ldr	r0, [pc, #376]	; (800d168 <_vfiprintf_r+0x210>)
 800cfee:	f7f7 fdaf 	bl	8004b50 <memchr>
 800cff2:	9b04      	ldr	r3, [sp, #16]
 800cff4:	bb78      	cbnz	r0, 800d056 <_vfiprintf_r+0xfe>
 800cff6:	06d9      	lsls	r1, r3, #27
 800cff8:	bf44      	itt	mi
 800cffa:	2220      	movmi	r2, #32
 800cffc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d000:	071a      	lsls	r2, r3, #28
 800d002:	bf44      	itt	mi
 800d004:	222b      	movmi	r2, #43	; 0x2b
 800d006:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d00a:	782a      	ldrb	r2, [r5, #0]
 800d00c:	2a2a      	cmp	r2, #42	; 0x2a
 800d00e:	d02a      	beq.n	800d066 <_vfiprintf_r+0x10e>
 800d010:	9a07      	ldr	r2, [sp, #28]
 800d012:	46a8      	mov	r8, r5
 800d014:	2000      	movs	r0, #0
 800d016:	250a      	movs	r5, #10
 800d018:	4641      	mov	r1, r8
 800d01a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d01e:	3b30      	subs	r3, #48	; 0x30
 800d020:	2b09      	cmp	r3, #9
 800d022:	d969      	bls.n	800d0f8 <_vfiprintf_r+0x1a0>
 800d024:	b360      	cbz	r0, 800d080 <_vfiprintf_r+0x128>
 800d026:	e024      	b.n	800d072 <_vfiprintf_r+0x11a>
 800d028:	4b50      	ldr	r3, [pc, #320]	; (800d16c <_vfiprintf_r+0x214>)
 800d02a:	429c      	cmp	r4, r3
 800d02c:	d101      	bne.n	800d032 <_vfiprintf_r+0xda>
 800d02e:	68b4      	ldr	r4, [r6, #8]
 800d030:	e7a2      	b.n	800cf78 <_vfiprintf_r+0x20>
 800d032:	4b4f      	ldr	r3, [pc, #316]	; (800d170 <_vfiprintf_r+0x218>)
 800d034:	429c      	cmp	r4, r3
 800d036:	bf08      	it	eq
 800d038:	68f4      	ldreq	r4, [r6, #12]
 800d03a:	e79d      	b.n	800cf78 <_vfiprintf_r+0x20>
 800d03c:	4621      	mov	r1, r4
 800d03e:	4630      	mov	r0, r6
 800d040:	f7ff fcec 	bl	800ca1c <__swsetup_r>
 800d044:	2800      	cmp	r0, #0
 800d046:	d09d      	beq.n	800cf84 <_vfiprintf_r+0x2c>
 800d048:	f04f 30ff 	mov.w	r0, #4294967295
 800d04c:	b01d      	add	sp, #116	; 0x74
 800d04e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d052:	46a8      	mov	r8, r5
 800d054:	e7a2      	b.n	800cf9c <_vfiprintf_r+0x44>
 800d056:	4a44      	ldr	r2, [pc, #272]	; (800d168 <_vfiprintf_r+0x210>)
 800d058:	1a80      	subs	r0, r0, r2
 800d05a:	fa0b f000 	lsl.w	r0, fp, r0
 800d05e:	4318      	orrs	r0, r3
 800d060:	9004      	str	r0, [sp, #16]
 800d062:	4645      	mov	r5, r8
 800d064:	e7be      	b.n	800cfe4 <_vfiprintf_r+0x8c>
 800d066:	9a03      	ldr	r2, [sp, #12]
 800d068:	1d11      	adds	r1, r2, #4
 800d06a:	6812      	ldr	r2, [r2, #0]
 800d06c:	9103      	str	r1, [sp, #12]
 800d06e:	2a00      	cmp	r2, #0
 800d070:	db01      	blt.n	800d076 <_vfiprintf_r+0x11e>
 800d072:	9207      	str	r2, [sp, #28]
 800d074:	e004      	b.n	800d080 <_vfiprintf_r+0x128>
 800d076:	4252      	negs	r2, r2
 800d078:	f043 0302 	orr.w	r3, r3, #2
 800d07c:	9207      	str	r2, [sp, #28]
 800d07e:	9304      	str	r3, [sp, #16]
 800d080:	f898 3000 	ldrb.w	r3, [r8]
 800d084:	2b2e      	cmp	r3, #46	; 0x2e
 800d086:	d10e      	bne.n	800d0a6 <_vfiprintf_r+0x14e>
 800d088:	f898 3001 	ldrb.w	r3, [r8, #1]
 800d08c:	2b2a      	cmp	r3, #42	; 0x2a
 800d08e:	d138      	bne.n	800d102 <_vfiprintf_r+0x1aa>
 800d090:	9b03      	ldr	r3, [sp, #12]
 800d092:	1d1a      	adds	r2, r3, #4
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	9203      	str	r2, [sp, #12]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	bfb8      	it	lt
 800d09c:	f04f 33ff 	movlt.w	r3, #4294967295
 800d0a0:	f108 0802 	add.w	r8, r8, #2
 800d0a4:	9305      	str	r3, [sp, #20]
 800d0a6:	4d33      	ldr	r5, [pc, #204]	; (800d174 <_vfiprintf_r+0x21c>)
 800d0a8:	f898 1000 	ldrb.w	r1, [r8]
 800d0ac:	2203      	movs	r2, #3
 800d0ae:	4628      	mov	r0, r5
 800d0b0:	f7f7 fd4e 	bl	8004b50 <memchr>
 800d0b4:	b140      	cbz	r0, 800d0c8 <_vfiprintf_r+0x170>
 800d0b6:	2340      	movs	r3, #64	; 0x40
 800d0b8:	1b40      	subs	r0, r0, r5
 800d0ba:	fa03 f000 	lsl.w	r0, r3, r0
 800d0be:	9b04      	ldr	r3, [sp, #16]
 800d0c0:	4303      	orrs	r3, r0
 800d0c2:	f108 0801 	add.w	r8, r8, #1
 800d0c6:	9304      	str	r3, [sp, #16]
 800d0c8:	f898 1000 	ldrb.w	r1, [r8]
 800d0cc:	482a      	ldr	r0, [pc, #168]	; (800d178 <_vfiprintf_r+0x220>)
 800d0ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d0d2:	2206      	movs	r2, #6
 800d0d4:	f108 0701 	add.w	r7, r8, #1
 800d0d8:	f7f7 fd3a 	bl	8004b50 <memchr>
 800d0dc:	2800      	cmp	r0, #0
 800d0de:	d037      	beq.n	800d150 <_vfiprintf_r+0x1f8>
 800d0e0:	4b26      	ldr	r3, [pc, #152]	; (800d17c <_vfiprintf_r+0x224>)
 800d0e2:	bb1b      	cbnz	r3, 800d12c <_vfiprintf_r+0x1d4>
 800d0e4:	9b03      	ldr	r3, [sp, #12]
 800d0e6:	3307      	adds	r3, #7
 800d0e8:	f023 0307 	bic.w	r3, r3, #7
 800d0ec:	3308      	adds	r3, #8
 800d0ee:	9303      	str	r3, [sp, #12]
 800d0f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0f2:	444b      	add	r3, r9
 800d0f4:	9309      	str	r3, [sp, #36]	; 0x24
 800d0f6:	e750      	b.n	800cf9a <_vfiprintf_r+0x42>
 800d0f8:	fb05 3202 	mla	r2, r5, r2, r3
 800d0fc:	2001      	movs	r0, #1
 800d0fe:	4688      	mov	r8, r1
 800d100:	e78a      	b.n	800d018 <_vfiprintf_r+0xc0>
 800d102:	2300      	movs	r3, #0
 800d104:	f108 0801 	add.w	r8, r8, #1
 800d108:	9305      	str	r3, [sp, #20]
 800d10a:	4619      	mov	r1, r3
 800d10c:	250a      	movs	r5, #10
 800d10e:	4640      	mov	r0, r8
 800d110:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d114:	3a30      	subs	r2, #48	; 0x30
 800d116:	2a09      	cmp	r2, #9
 800d118:	d903      	bls.n	800d122 <_vfiprintf_r+0x1ca>
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d0c3      	beq.n	800d0a6 <_vfiprintf_r+0x14e>
 800d11e:	9105      	str	r1, [sp, #20]
 800d120:	e7c1      	b.n	800d0a6 <_vfiprintf_r+0x14e>
 800d122:	fb05 2101 	mla	r1, r5, r1, r2
 800d126:	2301      	movs	r3, #1
 800d128:	4680      	mov	r8, r0
 800d12a:	e7f0      	b.n	800d10e <_vfiprintf_r+0x1b6>
 800d12c:	ab03      	add	r3, sp, #12
 800d12e:	9300      	str	r3, [sp, #0]
 800d130:	4622      	mov	r2, r4
 800d132:	4b13      	ldr	r3, [pc, #76]	; (800d180 <_vfiprintf_r+0x228>)
 800d134:	a904      	add	r1, sp, #16
 800d136:	4630      	mov	r0, r6
 800d138:	f3af 8000 	nop.w
 800d13c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d140:	4681      	mov	r9, r0
 800d142:	d1d5      	bne.n	800d0f0 <_vfiprintf_r+0x198>
 800d144:	89a3      	ldrh	r3, [r4, #12]
 800d146:	065b      	lsls	r3, r3, #25
 800d148:	f53f af7e 	bmi.w	800d048 <_vfiprintf_r+0xf0>
 800d14c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d14e:	e77d      	b.n	800d04c <_vfiprintf_r+0xf4>
 800d150:	ab03      	add	r3, sp, #12
 800d152:	9300      	str	r3, [sp, #0]
 800d154:	4622      	mov	r2, r4
 800d156:	4b0a      	ldr	r3, [pc, #40]	; (800d180 <_vfiprintf_r+0x228>)
 800d158:	a904      	add	r1, sp, #16
 800d15a:	4630      	mov	r0, r6
 800d15c:	f000 f888 	bl	800d270 <_printf_i>
 800d160:	e7ec      	b.n	800d13c <_vfiprintf_r+0x1e4>
 800d162:	bf00      	nop
 800d164:	0800f8c4 	.word	0x0800f8c4
 800d168:	0800f904 	.word	0x0800f904
 800d16c:	0800f8e4 	.word	0x0800f8e4
 800d170:	0800f8a4 	.word	0x0800f8a4
 800d174:	0800f90a 	.word	0x0800f90a
 800d178:	0800f90e 	.word	0x0800f90e
 800d17c:	00000000 	.word	0x00000000
 800d180:	0800cf33 	.word	0x0800cf33

0800d184 <_printf_common>:
 800d184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d188:	4691      	mov	r9, r2
 800d18a:	461f      	mov	r7, r3
 800d18c:	688a      	ldr	r2, [r1, #8]
 800d18e:	690b      	ldr	r3, [r1, #16]
 800d190:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d194:	4293      	cmp	r3, r2
 800d196:	bfb8      	it	lt
 800d198:	4613      	movlt	r3, r2
 800d19a:	f8c9 3000 	str.w	r3, [r9]
 800d19e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d1a2:	4606      	mov	r6, r0
 800d1a4:	460c      	mov	r4, r1
 800d1a6:	b112      	cbz	r2, 800d1ae <_printf_common+0x2a>
 800d1a8:	3301      	adds	r3, #1
 800d1aa:	f8c9 3000 	str.w	r3, [r9]
 800d1ae:	6823      	ldr	r3, [r4, #0]
 800d1b0:	0699      	lsls	r1, r3, #26
 800d1b2:	bf42      	ittt	mi
 800d1b4:	f8d9 3000 	ldrmi.w	r3, [r9]
 800d1b8:	3302      	addmi	r3, #2
 800d1ba:	f8c9 3000 	strmi.w	r3, [r9]
 800d1be:	6825      	ldr	r5, [r4, #0]
 800d1c0:	f015 0506 	ands.w	r5, r5, #6
 800d1c4:	d107      	bne.n	800d1d6 <_printf_common+0x52>
 800d1c6:	f104 0a19 	add.w	sl, r4, #25
 800d1ca:	68e3      	ldr	r3, [r4, #12]
 800d1cc:	f8d9 2000 	ldr.w	r2, [r9]
 800d1d0:	1a9b      	subs	r3, r3, r2
 800d1d2:	42ab      	cmp	r3, r5
 800d1d4:	dc28      	bgt.n	800d228 <_printf_common+0xa4>
 800d1d6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d1da:	6822      	ldr	r2, [r4, #0]
 800d1dc:	3300      	adds	r3, #0
 800d1de:	bf18      	it	ne
 800d1e0:	2301      	movne	r3, #1
 800d1e2:	0692      	lsls	r2, r2, #26
 800d1e4:	d42d      	bmi.n	800d242 <_printf_common+0xbe>
 800d1e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d1ea:	4639      	mov	r1, r7
 800d1ec:	4630      	mov	r0, r6
 800d1ee:	47c0      	blx	r8
 800d1f0:	3001      	adds	r0, #1
 800d1f2:	d020      	beq.n	800d236 <_printf_common+0xb2>
 800d1f4:	6823      	ldr	r3, [r4, #0]
 800d1f6:	68e5      	ldr	r5, [r4, #12]
 800d1f8:	f8d9 2000 	ldr.w	r2, [r9]
 800d1fc:	f003 0306 	and.w	r3, r3, #6
 800d200:	2b04      	cmp	r3, #4
 800d202:	bf08      	it	eq
 800d204:	1aad      	subeq	r5, r5, r2
 800d206:	68a3      	ldr	r3, [r4, #8]
 800d208:	6922      	ldr	r2, [r4, #16]
 800d20a:	bf0c      	ite	eq
 800d20c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d210:	2500      	movne	r5, #0
 800d212:	4293      	cmp	r3, r2
 800d214:	bfc4      	itt	gt
 800d216:	1a9b      	subgt	r3, r3, r2
 800d218:	18ed      	addgt	r5, r5, r3
 800d21a:	f04f 0900 	mov.w	r9, #0
 800d21e:	341a      	adds	r4, #26
 800d220:	454d      	cmp	r5, r9
 800d222:	d11a      	bne.n	800d25a <_printf_common+0xd6>
 800d224:	2000      	movs	r0, #0
 800d226:	e008      	b.n	800d23a <_printf_common+0xb6>
 800d228:	2301      	movs	r3, #1
 800d22a:	4652      	mov	r2, sl
 800d22c:	4639      	mov	r1, r7
 800d22e:	4630      	mov	r0, r6
 800d230:	47c0      	blx	r8
 800d232:	3001      	adds	r0, #1
 800d234:	d103      	bne.n	800d23e <_printf_common+0xba>
 800d236:	f04f 30ff 	mov.w	r0, #4294967295
 800d23a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d23e:	3501      	adds	r5, #1
 800d240:	e7c3      	b.n	800d1ca <_printf_common+0x46>
 800d242:	18e1      	adds	r1, r4, r3
 800d244:	1c5a      	adds	r2, r3, #1
 800d246:	2030      	movs	r0, #48	; 0x30
 800d248:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d24c:	4422      	add	r2, r4
 800d24e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d252:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d256:	3302      	adds	r3, #2
 800d258:	e7c5      	b.n	800d1e6 <_printf_common+0x62>
 800d25a:	2301      	movs	r3, #1
 800d25c:	4622      	mov	r2, r4
 800d25e:	4639      	mov	r1, r7
 800d260:	4630      	mov	r0, r6
 800d262:	47c0      	blx	r8
 800d264:	3001      	adds	r0, #1
 800d266:	d0e6      	beq.n	800d236 <_printf_common+0xb2>
 800d268:	f109 0901 	add.w	r9, r9, #1
 800d26c:	e7d8      	b.n	800d220 <_printf_common+0x9c>
	...

0800d270 <_printf_i>:
 800d270:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d274:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800d278:	460c      	mov	r4, r1
 800d27a:	7e09      	ldrb	r1, [r1, #24]
 800d27c:	b085      	sub	sp, #20
 800d27e:	296e      	cmp	r1, #110	; 0x6e
 800d280:	4617      	mov	r7, r2
 800d282:	4606      	mov	r6, r0
 800d284:	4698      	mov	r8, r3
 800d286:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d288:	f000 80b3 	beq.w	800d3f2 <_printf_i+0x182>
 800d28c:	d822      	bhi.n	800d2d4 <_printf_i+0x64>
 800d28e:	2963      	cmp	r1, #99	; 0x63
 800d290:	d036      	beq.n	800d300 <_printf_i+0x90>
 800d292:	d80a      	bhi.n	800d2aa <_printf_i+0x3a>
 800d294:	2900      	cmp	r1, #0
 800d296:	f000 80b9 	beq.w	800d40c <_printf_i+0x19c>
 800d29a:	2958      	cmp	r1, #88	; 0x58
 800d29c:	f000 8083 	beq.w	800d3a6 <_printf_i+0x136>
 800d2a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d2a4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800d2a8:	e032      	b.n	800d310 <_printf_i+0xa0>
 800d2aa:	2964      	cmp	r1, #100	; 0x64
 800d2ac:	d001      	beq.n	800d2b2 <_printf_i+0x42>
 800d2ae:	2969      	cmp	r1, #105	; 0x69
 800d2b0:	d1f6      	bne.n	800d2a0 <_printf_i+0x30>
 800d2b2:	6820      	ldr	r0, [r4, #0]
 800d2b4:	6813      	ldr	r3, [r2, #0]
 800d2b6:	0605      	lsls	r5, r0, #24
 800d2b8:	f103 0104 	add.w	r1, r3, #4
 800d2bc:	d52a      	bpl.n	800d314 <_printf_i+0xa4>
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	6011      	str	r1, [r2, #0]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	da03      	bge.n	800d2ce <_printf_i+0x5e>
 800d2c6:	222d      	movs	r2, #45	; 0x2d
 800d2c8:	425b      	negs	r3, r3
 800d2ca:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d2ce:	486f      	ldr	r0, [pc, #444]	; (800d48c <_printf_i+0x21c>)
 800d2d0:	220a      	movs	r2, #10
 800d2d2:	e039      	b.n	800d348 <_printf_i+0xd8>
 800d2d4:	2973      	cmp	r1, #115	; 0x73
 800d2d6:	f000 809d 	beq.w	800d414 <_printf_i+0x1a4>
 800d2da:	d808      	bhi.n	800d2ee <_printf_i+0x7e>
 800d2dc:	296f      	cmp	r1, #111	; 0x6f
 800d2de:	d020      	beq.n	800d322 <_printf_i+0xb2>
 800d2e0:	2970      	cmp	r1, #112	; 0x70
 800d2e2:	d1dd      	bne.n	800d2a0 <_printf_i+0x30>
 800d2e4:	6823      	ldr	r3, [r4, #0]
 800d2e6:	f043 0320 	orr.w	r3, r3, #32
 800d2ea:	6023      	str	r3, [r4, #0]
 800d2ec:	e003      	b.n	800d2f6 <_printf_i+0x86>
 800d2ee:	2975      	cmp	r1, #117	; 0x75
 800d2f0:	d017      	beq.n	800d322 <_printf_i+0xb2>
 800d2f2:	2978      	cmp	r1, #120	; 0x78
 800d2f4:	d1d4      	bne.n	800d2a0 <_printf_i+0x30>
 800d2f6:	2378      	movs	r3, #120	; 0x78
 800d2f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d2fc:	4864      	ldr	r0, [pc, #400]	; (800d490 <_printf_i+0x220>)
 800d2fe:	e055      	b.n	800d3ac <_printf_i+0x13c>
 800d300:	6813      	ldr	r3, [r2, #0]
 800d302:	1d19      	adds	r1, r3, #4
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	6011      	str	r1, [r2, #0]
 800d308:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d30c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d310:	2301      	movs	r3, #1
 800d312:	e08c      	b.n	800d42e <_printf_i+0x1be>
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	6011      	str	r1, [r2, #0]
 800d318:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d31c:	bf18      	it	ne
 800d31e:	b21b      	sxthne	r3, r3
 800d320:	e7cf      	b.n	800d2c2 <_printf_i+0x52>
 800d322:	6813      	ldr	r3, [r2, #0]
 800d324:	6825      	ldr	r5, [r4, #0]
 800d326:	1d18      	adds	r0, r3, #4
 800d328:	6010      	str	r0, [r2, #0]
 800d32a:	0628      	lsls	r0, r5, #24
 800d32c:	d501      	bpl.n	800d332 <_printf_i+0xc2>
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	e002      	b.n	800d338 <_printf_i+0xc8>
 800d332:	0668      	lsls	r0, r5, #25
 800d334:	d5fb      	bpl.n	800d32e <_printf_i+0xbe>
 800d336:	881b      	ldrh	r3, [r3, #0]
 800d338:	4854      	ldr	r0, [pc, #336]	; (800d48c <_printf_i+0x21c>)
 800d33a:	296f      	cmp	r1, #111	; 0x6f
 800d33c:	bf14      	ite	ne
 800d33e:	220a      	movne	r2, #10
 800d340:	2208      	moveq	r2, #8
 800d342:	2100      	movs	r1, #0
 800d344:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d348:	6865      	ldr	r5, [r4, #4]
 800d34a:	60a5      	str	r5, [r4, #8]
 800d34c:	2d00      	cmp	r5, #0
 800d34e:	f2c0 8095 	blt.w	800d47c <_printf_i+0x20c>
 800d352:	6821      	ldr	r1, [r4, #0]
 800d354:	f021 0104 	bic.w	r1, r1, #4
 800d358:	6021      	str	r1, [r4, #0]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d13d      	bne.n	800d3da <_printf_i+0x16a>
 800d35e:	2d00      	cmp	r5, #0
 800d360:	f040 808e 	bne.w	800d480 <_printf_i+0x210>
 800d364:	4665      	mov	r5, ip
 800d366:	2a08      	cmp	r2, #8
 800d368:	d10b      	bne.n	800d382 <_printf_i+0x112>
 800d36a:	6823      	ldr	r3, [r4, #0]
 800d36c:	07db      	lsls	r3, r3, #31
 800d36e:	d508      	bpl.n	800d382 <_printf_i+0x112>
 800d370:	6923      	ldr	r3, [r4, #16]
 800d372:	6862      	ldr	r2, [r4, #4]
 800d374:	429a      	cmp	r2, r3
 800d376:	bfde      	ittt	le
 800d378:	2330      	movle	r3, #48	; 0x30
 800d37a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d37e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d382:	ebac 0305 	sub.w	r3, ip, r5
 800d386:	6123      	str	r3, [r4, #16]
 800d388:	f8cd 8000 	str.w	r8, [sp]
 800d38c:	463b      	mov	r3, r7
 800d38e:	aa03      	add	r2, sp, #12
 800d390:	4621      	mov	r1, r4
 800d392:	4630      	mov	r0, r6
 800d394:	f7ff fef6 	bl	800d184 <_printf_common>
 800d398:	3001      	adds	r0, #1
 800d39a:	d14d      	bne.n	800d438 <_printf_i+0x1c8>
 800d39c:	f04f 30ff 	mov.w	r0, #4294967295
 800d3a0:	b005      	add	sp, #20
 800d3a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d3a6:	4839      	ldr	r0, [pc, #228]	; (800d48c <_printf_i+0x21c>)
 800d3a8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800d3ac:	6813      	ldr	r3, [r2, #0]
 800d3ae:	6821      	ldr	r1, [r4, #0]
 800d3b0:	1d1d      	adds	r5, r3, #4
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	6015      	str	r5, [r2, #0]
 800d3b6:	060a      	lsls	r2, r1, #24
 800d3b8:	d50b      	bpl.n	800d3d2 <_printf_i+0x162>
 800d3ba:	07ca      	lsls	r2, r1, #31
 800d3bc:	bf44      	itt	mi
 800d3be:	f041 0120 	orrmi.w	r1, r1, #32
 800d3c2:	6021      	strmi	r1, [r4, #0]
 800d3c4:	b91b      	cbnz	r3, 800d3ce <_printf_i+0x15e>
 800d3c6:	6822      	ldr	r2, [r4, #0]
 800d3c8:	f022 0220 	bic.w	r2, r2, #32
 800d3cc:	6022      	str	r2, [r4, #0]
 800d3ce:	2210      	movs	r2, #16
 800d3d0:	e7b7      	b.n	800d342 <_printf_i+0xd2>
 800d3d2:	064d      	lsls	r5, r1, #25
 800d3d4:	bf48      	it	mi
 800d3d6:	b29b      	uxthmi	r3, r3
 800d3d8:	e7ef      	b.n	800d3ba <_printf_i+0x14a>
 800d3da:	4665      	mov	r5, ip
 800d3dc:	fbb3 f1f2 	udiv	r1, r3, r2
 800d3e0:	fb02 3311 	mls	r3, r2, r1, r3
 800d3e4:	5cc3      	ldrb	r3, [r0, r3]
 800d3e6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d3ea:	460b      	mov	r3, r1
 800d3ec:	2900      	cmp	r1, #0
 800d3ee:	d1f5      	bne.n	800d3dc <_printf_i+0x16c>
 800d3f0:	e7b9      	b.n	800d366 <_printf_i+0xf6>
 800d3f2:	6813      	ldr	r3, [r2, #0]
 800d3f4:	6825      	ldr	r5, [r4, #0]
 800d3f6:	6961      	ldr	r1, [r4, #20]
 800d3f8:	1d18      	adds	r0, r3, #4
 800d3fa:	6010      	str	r0, [r2, #0]
 800d3fc:	0628      	lsls	r0, r5, #24
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	d501      	bpl.n	800d406 <_printf_i+0x196>
 800d402:	6019      	str	r1, [r3, #0]
 800d404:	e002      	b.n	800d40c <_printf_i+0x19c>
 800d406:	066a      	lsls	r2, r5, #25
 800d408:	d5fb      	bpl.n	800d402 <_printf_i+0x192>
 800d40a:	8019      	strh	r1, [r3, #0]
 800d40c:	2300      	movs	r3, #0
 800d40e:	6123      	str	r3, [r4, #16]
 800d410:	4665      	mov	r5, ip
 800d412:	e7b9      	b.n	800d388 <_printf_i+0x118>
 800d414:	6813      	ldr	r3, [r2, #0]
 800d416:	1d19      	adds	r1, r3, #4
 800d418:	6011      	str	r1, [r2, #0]
 800d41a:	681d      	ldr	r5, [r3, #0]
 800d41c:	6862      	ldr	r2, [r4, #4]
 800d41e:	2100      	movs	r1, #0
 800d420:	4628      	mov	r0, r5
 800d422:	f7f7 fb95 	bl	8004b50 <memchr>
 800d426:	b108      	cbz	r0, 800d42c <_printf_i+0x1bc>
 800d428:	1b40      	subs	r0, r0, r5
 800d42a:	6060      	str	r0, [r4, #4]
 800d42c:	6863      	ldr	r3, [r4, #4]
 800d42e:	6123      	str	r3, [r4, #16]
 800d430:	2300      	movs	r3, #0
 800d432:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d436:	e7a7      	b.n	800d388 <_printf_i+0x118>
 800d438:	6923      	ldr	r3, [r4, #16]
 800d43a:	462a      	mov	r2, r5
 800d43c:	4639      	mov	r1, r7
 800d43e:	4630      	mov	r0, r6
 800d440:	47c0      	blx	r8
 800d442:	3001      	adds	r0, #1
 800d444:	d0aa      	beq.n	800d39c <_printf_i+0x12c>
 800d446:	6823      	ldr	r3, [r4, #0]
 800d448:	079b      	lsls	r3, r3, #30
 800d44a:	d413      	bmi.n	800d474 <_printf_i+0x204>
 800d44c:	68e0      	ldr	r0, [r4, #12]
 800d44e:	9b03      	ldr	r3, [sp, #12]
 800d450:	4298      	cmp	r0, r3
 800d452:	bfb8      	it	lt
 800d454:	4618      	movlt	r0, r3
 800d456:	e7a3      	b.n	800d3a0 <_printf_i+0x130>
 800d458:	2301      	movs	r3, #1
 800d45a:	464a      	mov	r2, r9
 800d45c:	4639      	mov	r1, r7
 800d45e:	4630      	mov	r0, r6
 800d460:	47c0      	blx	r8
 800d462:	3001      	adds	r0, #1
 800d464:	d09a      	beq.n	800d39c <_printf_i+0x12c>
 800d466:	3501      	adds	r5, #1
 800d468:	68e3      	ldr	r3, [r4, #12]
 800d46a:	9a03      	ldr	r2, [sp, #12]
 800d46c:	1a9b      	subs	r3, r3, r2
 800d46e:	42ab      	cmp	r3, r5
 800d470:	dcf2      	bgt.n	800d458 <_printf_i+0x1e8>
 800d472:	e7eb      	b.n	800d44c <_printf_i+0x1dc>
 800d474:	2500      	movs	r5, #0
 800d476:	f104 0919 	add.w	r9, r4, #25
 800d47a:	e7f5      	b.n	800d468 <_printf_i+0x1f8>
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d1ac      	bne.n	800d3da <_printf_i+0x16a>
 800d480:	7803      	ldrb	r3, [r0, #0]
 800d482:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d486:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d48a:	e76c      	b.n	800d366 <_printf_i+0xf6>
 800d48c:	0800f915 	.word	0x0800f915
 800d490:	0800f926 	.word	0x0800f926

0800d494 <__sread>:
 800d494:	b510      	push	{r4, lr}
 800d496:	460c      	mov	r4, r1
 800d498:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d49c:	f000 f89c 	bl	800d5d8 <_read_r>
 800d4a0:	2800      	cmp	r0, #0
 800d4a2:	bfab      	itete	ge
 800d4a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d4a6:	89a3      	ldrhlt	r3, [r4, #12]
 800d4a8:	181b      	addge	r3, r3, r0
 800d4aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d4ae:	bfac      	ite	ge
 800d4b0:	6563      	strge	r3, [r4, #84]	; 0x54
 800d4b2:	81a3      	strhlt	r3, [r4, #12]
 800d4b4:	bd10      	pop	{r4, pc}

0800d4b6 <__swrite>:
 800d4b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4ba:	461f      	mov	r7, r3
 800d4bc:	898b      	ldrh	r3, [r1, #12]
 800d4be:	05db      	lsls	r3, r3, #23
 800d4c0:	4605      	mov	r5, r0
 800d4c2:	460c      	mov	r4, r1
 800d4c4:	4616      	mov	r6, r2
 800d4c6:	d505      	bpl.n	800d4d4 <__swrite+0x1e>
 800d4c8:	2302      	movs	r3, #2
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4d0:	f000 f868 	bl	800d5a4 <_lseek_r>
 800d4d4:	89a3      	ldrh	r3, [r4, #12]
 800d4d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d4da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d4de:	81a3      	strh	r3, [r4, #12]
 800d4e0:	4632      	mov	r2, r6
 800d4e2:	463b      	mov	r3, r7
 800d4e4:	4628      	mov	r0, r5
 800d4e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d4ea:	f000 b817 	b.w	800d51c <_write_r>

0800d4ee <__sseek>:
 800d4ee:	b510      	push	{r4, lr}
 800d4f0:	460c      	mov	r4, r1
 800d4f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4f6:	f000 f855 	bl	800d5a4 <_lseek_r>
 800d4fa:	1c43      	adds	r3, r0, #1
 800d4fc:	89a3      	ldrh	r3, [r4, #12]
 800d4fe:	bf15      	itete	ne
 800d500:	6560      	strne	r0, [r4, #84]	; 0x54
 800d502:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d506:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d50a:	81a3      	strheq	r3, [r4, #12]
 800d50c:	bf18      	it	ne
 800d50e:	81a3      	strhne	r3, [r4, #12]
 800d510:	bd10      	pop	{r4, pc}

0800d512 <__sclose>:
 800d512:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d516:	f000 b813 	b.w	800d540 <_close_r>
	...

0800d51c <_write_r>:
 800d51c:	b538      	push	{r3, r4, r5, lr}
 800d51e:	4c07      	ldr	r4, [pc, #28]	; (800d53c <_write_r+0x20>)
 800d520:	4605      	mov	r5, r0
 800d522:	4608      	mov	r0, r1
 800d524:	4611      	mov	r1, r2
 800d526:	2200      	movs	r2, #0
 800d528:	6022      	str	r2, [r4, #0]
 800d52a:	461a      	mov	r2, r3
 800d52c:	f7fa fc14 	bl	8007d58 <_write>
 800d530:	1c43      	adds	r3, r0, #1
 800d532:	d102      	bne.n	800d53a <_write_r+0x1e>
 800d534:	6823      	ldr	r3, [r4, #0]
 800d536:	b103      	cbz	r3, 800d53a <_write_r+0x1e>
 800d538:	602b      	str	r3, [r5, #0]
 800d53a:	bd38      	pop	{r3, r4, r5, pc}
 800d53c:	20000ad8 	.word	0x20000ad8

0800d540 <_close_r>:
 800d540:	b538      	push	{r3, r4, r5, lr}
 800d542:	4c06      	ldr	r4, [pc, #24]	; (800d55c <_close_r+0x1c>)
 800d544:	2300      	movs	r3, #0
 800d546:	4605      	mov	r5, r0
 800d548:	4608      	mov	r0, r1
 800d54a:	6023      	str	r3, [r4, #0]
 800d54c:	f7fe ffa5 	bl	800c49a <_close>
 800d550:	1c43      	adds	r3, r0, #1
 800d552:	d102      	bne.n	800d55a <_close_r+0x1a>
 800d554:	6823      	ldr	r3, [r4, #0]
 800d556:	b103      	cbz	r3, 800d55a <_close_r+0x1a>
 800d558:	602b      	str	r3, [r5, #0]
 800d55a:	bd38      	pop	{r3, r4, r5, pc}
 800d55c:	20000ad8 	.word	0x20000ad8

0800d560 <_fstat_r>:
 800d560:	b538      	push	{r3, r4, r5, lr}
 800d562:	4c07      	ldr	r4, [pc, #28]	; (800d580 <_fstat_r+0x20>)
 800d564:	2300      	movs	r3, #0
 800d566:	4605      	mov	r5, r0
 800d568:	4608      	mov	r0, r1
 800d56a:	4611      	mov	r1, r2
 800d56c:	6023      	str	r3, [r4, #0]
 800d56e:	f7fe ffa0 	bl	800c4b2 <_fstat>
 800d572:	1c43      	adds	r3, r0, #1
 800d574:	d102      	bne.n	800d57c <_fstat_r+0x1c>
 800d576:	6823      	ldr	r3, [r4, #0]
 800d578:	b103      	cbz	r3, 800d57c <_fstat_r+0x1c>
 800d57a:	602b      	str	r3, [r5, #0]
 800d57c:	bd38      	pop	{r3, r4, r5, pc}
 800d57e:	bf00      	nop
 800d580:	20000ad8 	.word	0x20000ad8

0800d584 <_isatty_r>:
 800d584:	b538      	push	{r3, r4, r5, lr}
 800d586:	4c06      	ldr	r4, [pc, #24]	; (800d5a0 <_isatty_r+0x1c>)
 800d588:	2300      	movs	r3, #0
 800d58a:	4605      	mov	r5, r0
 800d58c:	4608      	mov	r0, r1
 800d58e:	6023      	str	r3, [r4, #0]
 800d590:	f7fe ff9f 	bl	800c4d2 <_isatty>
 800d594:	1c43      	adds	r3, r0, #1
 800d596:	d102      	bne.n	800d59e <_isatty_r+0x1a>
 800d598:	6823      	ldr	r3, [r4, #0]
 800d59a:	b103      	cbz	r3, 800d59e <_isatty_r+0x1a>
 800d59c:	602b      	str	r3, [r5, #0]
 800d59e:	bd38      	pop	{r3, r4, r5, pc}
 800d5a0:	20000ad8 	.word	0x20000ad8

0800d5a4 <_lseek_r>:
 800d5a4:	b538      	push	{r3, r4, r5, lr}
 800d5a6:	4c07      	ldr	r4, [pc, #28]	; (800d5c4 <_lseek_r+0x20>)
 800d5a8:	4605      	mov	r5, r0
 800d5aa:	4608      	mov	r0, r1
 800d5ac:	4611      	mov	r1, r2
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	6022      	str	r2, [r4, #0]
 800d5b2:	461a      	mov	r2, r3
 800d5b4:	f7fe ff98 	bl	800c4e8 <_lseek>
 800d5b8:	1c43      	adds	r3, r0, #1
 800d5ba:	d102      	bne.n	800d5c2 <_lseek_r+0x1e>
 800d5bc:	6823      	ldr	r3, [r4, #0]
 800d5be:	b103      	cbz	r3, 800d5c2 <_lseek_r+0x1e>
 800d5c0:	602b      	str	r3, [r5, #0]
 800d5c2:	bd38      	pop	{r3, r4, r5, pc}
 800d5c4:	20000ad8 	.word	0x20000ad8

0800d5c8 <_malloc_usable_size_r>:
 800d5c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d5cc:	1f18      	subs	r0, r3, #4
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	bfbc      	itt	lt
 800d5d2:	580b      	ldrlt	r3, [r1, r0]
 800d5d4:	18c0      	addlt	r0, r0, r3
 800d5d6:	4770      	bx	lr

0800d5d8 <_read_r>:
 800d5d8:	b538      	push	{r3, r4, r5, lr}
 800d5da:	4c07      	ldr	r4, [pc, #28]	; (800d5f8 <_read_r+0x20>)
 800d5dc:	4605      	mov	r5, r0
 800d5de:	4608      	mov	r0, r1
 800d5e0:	4611      	mov	r1, r2
 800d5e2:	2200      	movs	r2, #0
 800d5e4:	6022      	str	r2, [r4, #0]
 800d5e6:	461a      	mov	r2, r3
 800d5e8:	f7fe ff3a 	bl	800c460 <_read>
 800d5ec:	1c43      	adds	r3, r0, #1
 800d5ee:	d102      	bne.n	800d5f6 <_read_r+0x1e>
 800d5f0:	6823      	ldr	r3, [r4, #0]
 800d5f2:	b103      	cbz	r3, 800d5f6 <_read_r+0x1e>
 800d5f4:	602b      	str	r3, [r5, #0]
 800d5f6:	bd38      	pop	{r3, r4, r5, pc}
 800d5f8:	20000ad8 	.word	0x20000ad8

0800d5fc <tanhf>:
 800d5fc:	b510      	push	{r4, lr}
 800d5fe:	ee10 4a10 	vmov	r4, s0
 800d602:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800d606:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d60a:	ed2d 8b02 	vpush	{d8}
 800d60e:	eef0 7a40 	vmov.f32	s15, s0
 800d612:	db0c      	blt.n	800d62e <tanhf+0x32>
 800d614:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d618:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800d61c:	2c00      	cmp	r4, #0
 800d61e:	bfac      	ite	ge
 800d620:	ee30 0a07 	vaddge.f32	s0, s0, s14
 800d624:	ee30 0a47 	vsublt.f32	s0, s0, s14
 800d628:	ecbd 8b02 	vpop	{d8}
 800d62c:	bd10      	pop	{r4, pc}
 800d62e:	4a1b      	ldr	r2, [pc, #108]	; (800d69c <tanhf+0xa0>)
 800d630:	4293      	cmp	r3, r2
 800d632:	dc30      	bgt.n	800d696 <tanhf+0x9a>
 800d634:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 800d638:	da06      	bge.n	800d648 <tanhf+0x4c>
 800d63a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d63e:	ee37 0a80 	vadd.f32	s0, s15, s0
 800d642:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d646:	e7ef      	b.n	800d628 <tanhf+0x2c>
 800d648:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800d64c:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
 800d650:	db12      	blt.n	800d678 <tanhf+0x7c>
 800d652:	f001 f835 	bl	800e6c0 <fabsf>
 800d656:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d65a:	f000 ff05 	bl	800e468 <expm1f>
 800d65e:	ee30 0a08 	vadd.f32	s0, s0, s16
 800d662:	eec8 7a00 	vdiv.f32	s15, s16, s0
 800d666:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d66a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d66e:	2c00      	cmp	r4, #0
 800d670:	bfb8      	it	lt
 800d672:	eeb1 0a40 	vneglt.f32	s0, s0
 800d676:	e7d7      	b.n	800d628 <tanhf+0x2c>
 800d678:	f001 f822 	bl	800e6c0 <fabsf>
 800d67c:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 800d680:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d684:	f000 fef0 	bl	800e468 <expm1f>
 800d688:	ee70 7a08 	vadd.f32	s15, s0, s16
 800d68c:	eeb1 7a40 	vneg.f32	s14, s0
 800d690:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800d694:	e7eb      	b.n	800d66e <tanhf+0x72>
 800d696:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d69a:	e7e8      	b.n	800d66e <tanhf+0x72>
 800d69c:	41afffff 	.word	0x41afffff

0800d6a0 <expf>:
 800d6a0:	b530      	push	{r4, r5, lr}
 800d6a2:	ed2d 8b02 	vpush	{d8}
 800d6a6:	4d35      	ldr	r5, [pc, #212]	; (800d77c <expf+0xdc>)
 800d6a8:	b08b      	sub	sp, #44	; 0x2c
 800d6aa:	eeb0 8a40 	vmov.f32	s16, s0
 800d6ae:	f000 fa4b 	bl	800db48 <__ieee754_expf>
 800d6b2:	f995 3000 	ldrsb.w	r3, [r5]
 800d6b6:	3301      	adds	r3, #1
 800d6b8:	ee10 4a10 	vmov	r4, s0
 800d6bc:	d030      	beq.n	800d720 <expf+0x80>
 800d6be:	eeb0 0a48 	vmov.f32	s0, s16
 800d6c2:	f001 f804 	bl	800e6ce <finitef>
 800d6c6:	b358      	cbz	r0, 800d720 <expf+0x80>
 800d6c8:	eddf 7a2d 	vldr	s15, [pc, #180]	; 800d780 <expf+0xe0>
 800d6cc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800d6d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6d4:	dd35      	ble.n	800d742 <expf+0xa2>
 800d6d6:	2303      	movs	r3, #3
 800d6d8:	9300      	str	r3, [sp, #0]
 800d6da:	4b2a      	ldr	r3, [pc, #168]	; (800d784 <expf+0xe4>)
 800d6dc:	9301      	str	r3, [sp, #4]
 800d6de:	ee18 0a10 	vmov	r0, s16
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	9308      	str	r3, [sp, #32]
 800d6e6:	f7f7 fbe7 	bl	8004eb8 <__aeabi_f2d>
 800d6ea:	f995 3000 	ldrsb.w	r3, [r5]
 800d6ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d6f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d6f6:	b9cb      	cbnz	r3, 800d72c <expf+0x8c>
 800d6f8:	4b23      	ldr	r3, [pc, #140]	; (800d788 <expf+0xe8>)
 800d6fa:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800d6fe:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d702:	4668      	mov	r0, sp
 800d704:	f000 fea5 	bl	800e452 <matherr>
 800d708:	b1b0      	cbz	r0, 800d738 <expf+0x98>
 800d70a:	9b08      	ldr	r3, [sp, #32]
 800d70c:	b11b      	cbz	r3, 800d716 <expf+0x76>
 800d70e:	f7fe ff89 	bl	800c624 <__errno>
 800d712:	9b08      	ldr	r3, [sp, #32]
 800d714:	6003      	str	r3, [r0, #0]
 800d716:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d71a:	f7f7 fc25 	bl	8004f68 <__aeabi_d2f>
 800d71e:	4604      	mov	r4, r0
 800d720:	ee00 4a10 	vmov	s0, r4
 800d724:	b00b      	add	sp, #44	; 0x2c
 800d726:	ecbd 8b02 	vpop	{d8}
 800d72a:	bd30      	pop	{r4, r5, pc}
 800d72c:	4917      	ldr	r1, [pc, #92]	; (800d78c <expf+0xec>)
 800d72e:	2000      	movs	r0, #0
 800d730:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d734:	2b02      	cmp	r3, #2
 800d736:	d1e4      	bne.n	800d702 <expf+0x62>
 800d738:	f7fe ff74 	bl	800c624 <__errno>
 800d73c:	2322      	movs	r3, #34	; 0x22
 800d73e:	6003      	str	r3, [r0, #0]
 800d740:	e7e3      	b.n	800d70a <expf+0x6a>
 800d742:	eddf 7a13 	vldr	s15, [pc, #76]	; 800d790 <expf+0xf0>
 800d746:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800d74a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d74e:	d5e7      	bpl.n	800d720 <expf+0x80>
 800d750:	2304      	movs	r3, #4
 800d752:	9300      	str	r3, [sp, #0]
 800d754:	4b0b      	ldr	r3, [pc, #44]	; (800d784 <expf+0xe4>)
 800d756:	9301      	str	r3, [sp, #4]
 800d758:	ee18 0a10 	vmov	r0, s16
 800d75c:	2300      	movs	r3, #0
 800d75e:	9308      	str	r3, [sp, #32]
 800d760:	f7f7 fbaa 	bl	8004eb8 <__aeabi_f2d>
 800d764:	2300      	movs	r3, #0
 800d766:	2200      	movs	r2, #0
 800d768:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d76c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d770:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d774:	f995 3000 	ldrsb.w	r3, [r5]
 800d778:	e7dc      	b.n	800d734 <expf+0x94>
 800d77a:	bf00      	nop
 800d77c:	200005dc 	.word	0x200005dc
 800d780:	42b17180 	.word	0x42b17180
 800d784:	0800f937 	.word	0x0800f937
 800d788:	47efffff 	.word	0x47efffff
 800d78c:	7ff00000 	.word	0x7ff00000
 800d790:	c2cff1b5 	.word	0xc2cff1b5

0800d794 <logf>:
 800d794:	b510      	push	{r4, lr}
 800d796:	ed2d 8b02 	vpush	{d8}
 800d79a:	b08a      	sub	sp, #40	; 0x28
 800d79c:	eeb0 8a40 	vmov.f32	s16, s0
 800d7a0:	f000 faa6 	bl	800dcf0 <__ieee754_logf>
 800d7a4:	4b31      	ldr	r3, [pc, #196]	; (800d86c <logf+0xd8>)
 800d7a6:	f993 4000 	ldrsb.w	r4, [r3]
 800d7aa:	1c63      	adds	r3, r4, #1
 800d7ac:	d059      	beq.n	800d862 <logf+0xce>
 800d7ae:	eeb4 8a48 	vcmp.f32	s16, s16
 800d7b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7b6:	d654      	bvs.n	800d862 <logf+0xce>
 800d7b8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800d7bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7c0:	dc4f      	bgt.n	800d862 <logf+0xce>
 800d7c2:	4b2b      	ldr	r3, [pc, #172]	; (800d870 <logf+0xdc>)
 800d7c4:	9301      	str	r3, [sp, #4]
 800d7c6:	ee18 0a10 	vmov	r0, s16
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	9308      	str	r3, [sp, #32]
 800d7ce:	f7f7 fb73 	bl	8004eb8 <__aeabi_f2d>
 800d7d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d7d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d7da:	b994      	cbnz	r4, 800d802 <logf+0x6e>
 800d7dc:	4b25      	ldr	r3, [pc, #148]	; (800d874 <logf+0xe0>)
 800d7de:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800d7e2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800d7e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7ea:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d7ee:	d025      	beq.n	800d83c <logf+0xa8>
 800d7f0:	2301      	movs	r3, #1
 800d7f2:	2c02      	cmp	r4, #2
 800d7f4:	9300      	str	r3, [sp, #0]
 800d7f6:	d116      	bne.n	800d826 <logf+0x92>
 800d7f8:	f7fe ff14 	bl	800c624 <__errno>
 800d7fc:	2321      	movs	r3, #33	; 0x21
 800d7fe:	6003      	str	r3, [r0, #0]
 800d800:	e016      	b.n	800d830 <logf+0x9c>
 800d802:	4b1d      	ldr	r3, [pc, #116]	; (800d878 <logf+0xe4>)
 800d804:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800d808:	2200      	movs	r2, #0
 800d80a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d80e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d812:	d1ed      	bne.n	800d7f0 <logf+0x5c>
 800d814:	2302      	movs	r3, #2
 800d816:	429c      	cmp	r4, r3
 800d818:	9300      	str	r3, [sp, #0]
 800d81a:	d111      	bne.n	800d840 <logf+0xac>
 800d81c:	f7fe ff02 	bl	800c624 <__errno>
 800d820:	2322      	movs	r3, #34	; 0x22
 800d822:	6003      	str	r3, [r0, #0]
 800d824:	e011      	b.n	800d84a <logf+0xb6>
 800d826:	4668      	mov	r0, sp
 800d828:	f000 fe13 	bl	800e452 <matherr>
 800d82c:	2800      	cmp	r0, #0
 800d82e:	d0e3      	beq.n	800d7f8 <logf+0x64>
 800d830:	4812      	ldr	r0, [pc, #72]	; (800d87c <logf+0xe8>)
 800d832:	f000 fe11 	bl	800e458 <nan>
 800d836:	ed8d 0b06 	vstr	d0, [sp, #24]
 800d83a:	e006      	b.n	800d84a <logf+0xb6>
 800d83c:	2302      	movs	r3, #2
 800d83e:	9300      	str	r3, [sp, #0]
 800d840:	4668      	mov	r0, sp
 800d842:	f000 fe06 	bl	800e452 <matherr>
 800d846:	2800      	cmp	r0, #0
 800d848:	d0e8      	beq.n	800d81c <logf+0x88>
 800d84a:	9b08      	ldr	r3, [sp, #32]
 800d84c:	b11b      	cbz	r3, 800d856 <logf+0xc2>
 800d84e:	f7fe fee9 	bl	800c624 <__errno>
 800d852:	9b08      	ldr	r3, [sp, #32]
 800d854:	6003      	str	r3, [r0, #0]
 800d856:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d85a:	f7f7 fb85 	bl	8004f68 <__aeabi_d2f>
 800d85e:	ee00 0a10 	vmov	s0, r0
 800d862:	b00a      	add	sp, #40	; 0x28
 800d864:	ecbd 8b02 	vpop	{d8}
 800d868:	bd10      	pop	{r4, pc}
 800d86a:	bf00      	nop
 800d86c:	200005dc 	.word	0x200005dc
 800d870:	0800f93c 	.word	0x0800f93c
 800d874:	c7efffff 	.word	0xc7efffff
 800d878:	fff00000 	.word	0xfff00000
 800d87c:	0800f909 	.word	0x0800f909

0800d880 <powf>:
 800d880:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 800d884:	ed2d 8b04 	vpush	{d8-d9}
 800d888:	4ca7      	ldr	r4, [pc, #668]	; (800db28 <powf+0x2a8>)
 800d88a:	b08a      	sub	sp, #40	; 0x28
 800d88c:	eef0 8a40 	vmov.f32	s17, s0
 800d890:	eeb0 8a60 	vmov.f32	s16, s1
 800d894:	f000 fb1a 	bl	800decc <__ieee754_powf>
 800d898:	f994 5000 	ldrsb.w	r5, [r4]
 800d89c:	1c6b      	adds	r3, r5, #1
 800d89e:	eeb0 9a40 	vmov.f32	s18, s0
 800d8a2:	4626      	mov	r6, r4
 800d8a4:	d05f      	beq.n	800d966 <powf+0xe6>
 800d8a6:	eeb4 8a48 	vcmp.f32	s16, s16
 800d8aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8ae:	d65a      	bvs.n	800d966 <powf+0xe6>
 800d8b0:	eef4 8a68 	vcmp.f32	s17, s17
 800d8b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8b8:	d721      	bvc.n	800d8fe <powf+0x7e>
 800d8ba:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800d8be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8c2:	d150      	bne.n	800d966 <powf+0xe6>
 800d8c4:	2301      	movs	r3, #1
 800d8c6:	9300      	str	r3, [sp, #0]
 800d8c8:	4b98      	ldr	r3, [pc, #608]	; (800db2c <powf+0x2ac>)
 800d8ca:	9301      	str	r3, [sp, #4]
 800d8cc:	ee18 0a90 	vmov	r0, s17
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	9308      	str	r3, [sp, #32]
 800d8d4:	f7f7 faf0 	bl	8004eb8 <__aeabi_f2d>
 800d8d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d8dc:	ee18 0a10 	vmov	r0, s16
 800d8e0:	f7f7 faea 	bl	8004eb8 <__aeabi_f2d>
 800d8e4:	4b92      	ldr	r3, [pc, #584]	; (800db30 <powf+0x2b0>)
 800d8e6:	2200      	movs	r2, #0
 800d8e8:	2d02      	cmp	r5, #2
 800d8ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d8ee:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d8f2:	d032      	beq.n	800d95a <powf+0xda>
 800d8f4:	4668      	mov	r0, sp
 800d8f6:	f000 fdac 	bl	800e452 <matherr>
 800d8fa:	bb40      	cbnz	r0, 800d94e <powf+0xce>
 800d8fc:	e065      	b.n	800d9ca <powf+0x14a>
 800d8fe:	eddf 9a8d 	vldr	s19, [pc, #564]	; 800db34 <powf+0x2b4>
 800d902:	eef4 8a69 	vcmp.f32	s17, s19
 800d906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d90a:	d163      	bne.n	800d9d4 <powf+0x154>
 800d90c:	eeb4 8a69 	vcmp.f32	s16, s19
 800d910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d914:	d12e      	bne.n	800d974 <powf+0xf4>
 800d916:	2301      	movs	r3, #1
 800d918:	9300      	str	r3, [sp, #0]
 800d91a:	4b84      	ldr	r3, [pc, #528]	; (800db2c <powf+0x2ac>)
 800d91c:	9301      	str	r3, [sp, #4]
 800d91e:	ee18 0a90 	vmov	r0, s17
 800d922:	2300      	movs	r3, #0
 800d924:	9308      	str	r3, [sp, #32]
 800d926:	f7f7 fac7 	bl	8004eb8 <__aeabi_f2d>
 800d92a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d92e:	ee18 0a10 	vmov	r0, s16
 800d932:	f7f7 fac1 	bl	8004eb8 <__aeabi_f2d>
 800d936:	2200      	movs	r2, #0
 800d938:	2300      	movs	r3, #0
 800d93a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d93e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d942:	2d00      	cmp	r5, #0
 800d944:	d0d6      	beq.n	800d8f4 <powf+0x74>
 800d946:	4b7a      	ldr	r3, [pc, #488]	; (800db30 <powf+0x2b0>)
 800d948:	2200      	movs	r2, #0
 800d94a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d94e:	9b08      	ldr	r3, [sp, #32]
 800d950:	b11b      	cbz	r3, 800d95a <powf+0xda>
 800d952:	f7fe fe67 	bl	800c624 <__errno>
 800d956:	9b08      	ldr	r3, [sp, #32]
 800d958:	6003      	str	r3, [r0, #0]
 800d95a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d95e:	f7f7 fb03 	bl	8004f68 <__aeabi_d2f>
 800d962:	ee09 0a10 	vmov	s18, r0
 800d966:	eeb0 0a49 	vmov.f32	s0, s18
 800d96a:	b00a      	add	sp, #40	; 0x28
 800d96c:	ecbd 8b04 	vpop	{d8-d9}
 800d970:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800d974:	eeb0 0a48 	vmov.f32	s0, s16
 800d978:	f000 fea9 	bl	800e6ce <finitef>
 800d97c:	2800      	cmp	r0, #0
 800d97e:	d0f2      	beq.n	800d966 <powf+0xe6>
 800d980:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800d984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d988:	d5ed      	bpl.n	800d966 <powf+0xe6>
 800d98a:	2301      	movs	r3, #1
 800d98c:	9300      	str	r3, [sp, #0]
 800d98e:	4b67      	ldr	r3, [pc, #412]	; (800db2c <powf+0x2ac>)
 800d990:	9301      	str	r3, [sp, #4]
 800d992:	ee18 0a90 	vmov	r0, s17
 800d996:	2300      	movs	r3, #0
 800d998:	9308      	str	r3, [sp, #32]
 800d99a:	f7f7 fa8d 	bl	8004eb8 <__aeabi_f2d>
 800d99e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d9a2:	ee18 0a10 	vmov	r0, s16
 800d9a6:	f7f7 fa87 	bl	8004eb8 <__aeabi_f2d>
 800d9aa:	f994 3000 	ldrsb.w	r3, [r4]
 800d9ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d9b2:	b923      	cbnz	r3, 800d9be <powf+0x13e>
 800d9b4:	2200      	movs	r2, #0
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d9bc:	e79a      	b.n	800d8f4 <powf+0x74>
 800d9be:	495e      	ldr	r1, [pc, #376]	; (800db38 <powf+0x2b8>)
 800d9c0:	2000      	movs	r0, #0
 800d9c2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d9c6:	2b02      	cmp	r3, #2
 800d9c8:	d194      	bne.n	800d8f4 <powf+0x74>
 800d9ca:	f7fe fe2b 	bl	800c624 <__errno>
 800d9ce:	2321      	movs	r3, #33	; 0x21
 800d9d0:	6003      	str	r3, [r0, #0]
 800d9d2:	e7bc      	b.n	800d94e <powf+0xce>
 800d9d4:	f000 fe7b 	bl	800e6ce <finitef>
 800d9d8:	4605      	mov	r5, r0
 800d9da:	2800      	cmp	r0, #0
 800d9dc:	d173      	bne.n	800dac6 <powf+0x246>
 800d9de:	eeb0 0a68 	vmov.f32	s0, s17
 800d9e2:	f000 fe74 	bl	800e6ce <finitef>
 800d9e6:	2800      	cmp	r0, #0
 800d9e8:	d06d      	beq.n	800dac6 <powf+0x246>
 800d9ea:	eeb0 0a48 	vmov.f32	s0, s16
 800d9ee:	f000 fe6e 	bl	800e6ce <finitef>
 800d9f2:	2800      	cmp	r0, #0
 800d9f4:	d067      	beq.n	800dac6 <powf+0x246>
 800d9f6:	ee18 0a90 	vmov	r0, s17
 800d9fa:	f7f7 fa5d 	bl	8004eb8 <__aeabi_f2d>
 800d9fe:	4680      	mov	r8, r0
 800da00:	ee18 0a10 	vmov	r0, s16
 800da04:	4689      	mov	r9, r1
 800da06:	f7f7 fa57 	bl	8004eb8 <__aeabi_f2d>
 800da0a:	eeb4 9a49 	vcmp.f32	s18, s18
 800da0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da12:	f994 4000 	ldrsb.w	r4, [r4]
 800da16:	4b45      	ldr	r3, [pc, #276]	; (800db2c <powf+0x2ac>)
 800da18:	d713      	bvc.n	800da42 <powf+0x1c2>
 800da1a:	2201      	movs	r2, #1
 800da1c:	e9cd 2300 	strd	r2, r3, [sp]
 800da20:	9508      	str	r5, [sp, #32]
 800da22:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800da26:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800da2a:	2c00      	cmp	r4, #0
 800da2c:	d0c2      	beq.n	800d9b4 <powf+0x134>
 800da2e:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 800da32:	ee17 0a90 	vmov	r0, s15
 800da36:	f7f7 fa3f 	bl	8004eb8 <__aeabi_f2d>
 800da3a:	2c02      	cmp	r4, #2
 800da3c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800da40:	e7c2      	b.n	800d9c8 <powf+0x148>
 800da42:	2203      	movs	r2, #3
 800da44:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800da48:	e9cd 2300 	strd	r2, r3, [sp]
 800da4c:	9508      	str	r5, [sp, #32]
 800da4e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800da52:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800da56:	ee28 8a27 	vmul.f32	s16, s16, s15
 800da5a:	b9fc      	cbnz	r4, 800da9c <powf+0x21c>
 800da5c:	4b37      	ldr	r3, [pc, #220]	; (800db3c <powf+0x2bc>)
 800da5e:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800da62:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800da66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da6a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800da6e:	d553      	bpl.n	800db18 <powf+0x298>
 800da70:	eeb0 0a48 	vmov.f32	s0, s16
 800da74:	f000 fe3c 	bl	800e6f0 <rintf>
 800da78:	eeb4 0a48 	vcmp.f32	s0, s16
 800da7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da80:	d004      	beq.n	800da8c <powf+0x20c>
 800da82:	4b2f      	ldr	r3, [pc, #188]	; (800db40 <powf+0x2c0>)
 800da84:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800da88:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800da8c:	f996 3000 	ldrsb.w	r3, [r6]
 800da90:	2b02      	cmp	r3, #2
 800da92:	d141      	bne.n	800db18 <powf+0x298>
 800da94:	f7fe fdc6 	bl	800c624 <__errno>
 800da98:	2322      	movs	r3, #34	; 0x22
 800da9a:	e799      	b.n	800d9d0 <powf+0x150>
 800da9c:	4b29      	ldr	r3, [pc, #164]	; (800db44 <powf+0x2c4>)
 800da9e:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800daa2:	2200      	movs	r2, #0
 800daa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800daa8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800daac:	d5ee      	bpl.n	800da8c <powf+0x20c>
 800daae:	eeb0 0a48 	vmov.f32	s0, s16
 800dab2:	f000 fe1d 	bl	800e6f0 <rintf>
 800dab6:	eeb4 0a48 	vcmp.f32	s0, s16
 800daba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dabe:	d0e5      	beq.n	800da8c <powf+0x20c>
 800dac0:	2200      	movs	r2, #0
 800dac2:	4b1d      	ldr	r3, [pc, #116]	; (800db38 <powf+0x2b8>)
 800dac4:	e7e0      	b.n	800da88 <powf+0x208>
 800dac6:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800daca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dace:	f47f af4a 	bne.w	800d966 <powf+0xe6>
 800dad2:	eeb0 0a68 	vmov.f32	s0, s17
 800dad6:	f000 fdfa 	bl	800e6ce <finitef>
 800dada:	2800      	cmp	r0, #0
 800dadc:	f43f af43 	beq.w	800d966 <powf+0xe6>
 800dae0:	eeb0 0a48 	vmov.f32	s0, s16
 800dae4:	f000 fdf3 	bl	800e6ce <finitef>
 800dae8:	2800      	cmp	r0, #0
 800daea:	f43f af3c 	beq.w	800d966 <powf+0xe6>
 800daee:	2304      	movs	r3, #4
 800daf0:	9300      	str	r3, [sp, #0]
 800daf2:	4b0e      	ldr	r3, [pc, #56]	; (800db2c <powf+0x2ac>)
 800daf4:	9301      	str	r3, [sp, #4]
 800daf6:	ee18 0a90 	vmov	r0, s17
 800dafa:	2300      	movs	r3, #0
 800dafc:	9308      	str	r3, [sp, #32]
 800dafe:	f7f7 f9db 	bl	8004eb8 <__aeabi_f2d>
 800db02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800db06:	ee18 0a10 	vmov	r0, s16
 800db0a:	f7f7 f9d5 	bl	8004eb8 <__aeabi_f2d>
 800db0e:	2200      	movs	r2, #0
 800db10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800db14:	2300      	movs	r3, #0
 800db16:	e7b7      	b.n	800da88 <powf+0x208>
 800db18:	4668      	mov	r0, sp
 800db1a:	f000 fc9a 	bl	800e452 <matherr>
 800db1e:	2800      	cmp	r0, #0
 800db20:	f47f af15 	bne.w	800d94e <powf+0xce>
 800db24:	e7b6      	b.n	800da94 <powf+0x214>
 800db26:	bf00      	nop
 800db28:	200005dc 	.word	0x200005dc
 800db2c:	0800f941 	.word	0x0800f941
 800db30:	3ff00000 	.word	0x3ff00000
 800db34:	00000000 	.word	0x00000000
 800db38:	fff00000 	.word	0xfff00000
 800db3c:	47efffff 	.word	0x47efffff
 800db40:	c7efffff 	.word	0xc7efffff
 800db44:	7ff00000 	.word	0x7ff00000

0800db48 <__ieee754_expf>:
 800db48:	ee10 2a10 	vmov	r2, s0
 800db4c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800db50:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800db54:	d902      	bls.n	800db5c <__ieee754_expf+0x14>
 800db56:	ee30 0a00 	vadd.f32	s0, s0, s0
 800db5a:	4770      	bx	lr
 800db5c:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 800db60:	d106      	bne.n	800db70 <__ieee754_expf+0x28>
 800db62:	eddf 7a51 	vldr	s15, [pc, #324]	; 800dca8 <__ieee754_expf+0x160>
 800db66:	2b00      	cmp	r3, #0
 800db68:	bf18      	it	ne
 800db6a:	eeb0 0a67 	vmovne.f32	s0, s15
 800db6e:	4770      	bx	lr
 800db70:	484e      	ldr	r0, [pc, #312]	; (800dcac <__ieee754_expf+0x164>)
 800db72:	4282      	cmp	r2, r0
 800db74:	dd04      	ble.n	800db80 <__ieee754_expf+0x38>
 800db76:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 800dcb0 <__ieee754_expf+0x168>
 800db7a:	ee20 0a00 	vmul.f32	s0, s0, s0
 800db7e:	4770      	bx	lr
 800db80:	2a00      	cmp	r2, #0
 800db82:	da03      	bge.n	800db8c <__ieee754_expf+0x44>
 800db84:	4a4b      	ldr	r2, [pc, #300]	; (800dcb4 <__ieee754_expf+0x16c>)
 800db86:	4291      	cmp	r1, r2
 800db88:	f200 808a 	bhi.w	800dca0 <__ieee754_expf+0x158>
 800db8c:	4a4a      	ldr	r2, [pc, #296]	; (800dcb8 <__ieee754_expf+0x170>)
 800db8e:	4291      	cmp	r1, r2
 800db90:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800db94:	d954      	bls.n	800dc40 <__ieee754_expf+0xf8>
 800db96:	4a49      	ldr	r2, [pc, #292]	; (800dcbc <__ieee754_expf+0x174>)
 800db98:	4291      	cmp	r1, r2
 800db9a:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800db9e:	d836      	bhi.n	800dc0e <__ieee754_expf+0xc6>
 800dba0:	4947      	ldr	r1, [pc, #284]	; (800dcc0 <__ieee754_expf+0x178>)
 800dba2:	4411      	add	r1, r2
 800dba4:	ed91 7a00 	vldr	s14, [r1]
 800dba8:	4946      	ldr	r1, [pc, #280]	; (800dcc4 <__ieee754_expf+0x17c>)
 800dbaa:	440a      	add	r2, r1
 800dbac:	edd2 7a00 	vldr	s15, [r2]
 800dbb0:	ee30 7a47 	vsub.f32	s14, s0, s14
 800dbb4:	f1c3 0201 	rsb	r2, r3, #1
 800dbb8:	1ad2      	subs	r2, r2, r3
 800dbba:	ee37 0a67 	vsub.f32	s0, s14, s15
 800dbbe:	ee60 6a00 	vmul.f32	s13, s0, s0
 800dbc2:	eddf 5a41 	vldr	s11, [pc, #260]	; 800dcc8 <__ieee754_expf+0x180>
 800dbc6:	ed9f 5a41 	vldr	s10, [pc, #260]	; 800dccc <__ieee754_expf+0x184>
 800dbca:	eea6 5aa5 	vfma.f32	s10, s13, s11
 800dbce:	eddf 5a40 	vldr	s11, [pc, #256]	; 800dcd0 <__ieee754_expf+0x188>
 800dbd2:	eee5 5a26 	vfma.f32	s11, s10, s13
 800dbd6:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 800dcd4 <__ieee754_expf+0x18c>
 800dbda:	eea5 5aa6 	vfma.f32	s10, s11, s13
 800dbde:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800dcd8 <__ieee754_expf+0x190>
 800dbe2:	eee5 5a26 	vfma.f32	s11, s10, s13
 800dbe6:	eeb0 5a40 	vmov.f32	s10, s0
 800dbea:	eea5 5ae6 	vfms.f32	s10, s11, s13
 800dbee:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800dbf2:	eef0 6a45 	vmov.f32	s13, s10
 800dbf6:	ee20 5a05 	vmul.f32	s10, s0, s10
 800dbfa:	bb92      	cbnz	r2, 800dc62 <__ieee754_expf+0x11a>
 800dbfc:	ee76 6ae5 	vsub.f32	s13, s13, s11
 800dc00:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800dc04:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800dc08:	ee36 0a40 	vsub.f32	s0, s12, s0
 800dc0c:	4770      	bx	lr
 800dc0e:	4b33      	ldr	r3, [pc, #204]	; (800dcdc <__ieee754_expf+0x194>)
 800dc10:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800dce0 <__ieee754_expf+0x198>
 800dc14:	4413      	add	r3, r2
 800dc16:	edd3 7a00 	vldr	s15, [r3]
 800dc1a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800dc1e:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800dce4 <__ieee754_expf+0x19c>
 800dc22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dc26:	ee17 2a90 	vmov	r2, s15
 800dc2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dc2e:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800dc32:	eeb0 7a40 	vmov.f32	s14, s0
 800dc36:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800dce8 <__ieee754_expf+0x1a0>
 800dc3a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800dc3e:	e7bc      	b.n	800dbba <__ieee754_expf+0x72>
 800dc40:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 800dc44:	d20b      	bcs.n	800dc5e <__ieee754_expf+0x116>
 800dc46:	eddf 6a1a 	vldr	s13, [pc, #104]	; 800dcb0 <__ieee754_expf+0x168>
 800dc4a:	ee70 6a26 	vadd.f32	s13, s0, s13
 800dc4e:	eef4 6ac6 	vcmpe.f32	s13, s12
 800dc52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc56:	dd02      	ble.n	800dc5e <__ieee754_expf+0x116>
 800dc58:	ee30 0a06 	vadd.f32	s0, s0, s12
 800dc5c:	4770      	bx	lr
 800dc5e:	2200      	movs	r2, #0
 800dc60:	e7ad      	b.n	800dbbe <__ieee754_expf+0x76>
 800dc62:	ee75 6ae6 	vsub.f32	s13, s11, s13
 800dc66:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800dc6a:	ee85 0a26 	vdiv.f32	s0, s10, s13
 800dc6e:	bfb8      	it	lt
 800dc70:	3264      	addlt	r2, #100	; 0x64
 800dc72:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800dc76:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800dc7a:	ee76 7a40 	vsub.f32	s15, s12, s0
 800dc7e:	ee17 3a90 	vmov	r3, s15
 800dc82:	bfab      	itete	ge
 800dc84:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800dc88:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800dc8c:	ee00 3a10 	vmovge	s0, r3
 800dc90:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 800dcec <__ieee754_expf+0x1a4>
 800dc94:	bfbc      	itt	lt
 800dc96:	ee00 3a10 	vmovlt	s0, r3
 800dc9a:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800dc9e:	4770      	bx	lr
 800dca0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800dca8 <__ieee754_expf+0x160>
 800dca4:	4770      	bx	lr
 800dca6:	bf00      	nop
 800dca8:	00000000 	.word	0x00000000
 800dcac:	42b17217 	.word	0x42b17217
 800dcb0:	7149f2ca 	.word	0x7149f2ca
 800dcb4:	42cff1b5 	.word	0x42cff1b5
 800dcb8:	3eb17218 	.word	0x3eb17218
 800dcbc:	3f851591 	.word	0x3f851591
 800dcc0:	0800f950 	.word	0x0800f950
 800dcc4:	0800f958 	.word	0x0800f958
 800dcc8:	3331bb4c 	.word	0x3331bb4c
 800dccc:	b5ddea0e 	.word	0xb5ddea0e
 800dcd0:	388ab355 	.word	0x388ab355
 800dcd4:	bb360b61 	.word	0xbb360b61
 800dcd8:	3e2aaaab 	.word	0x3e2aaaab
 800dcdc:	0800f948 	.word	0x0800f948
 800dce0:	3fb8aa3b 	.word	0x3fb8aa3b
 800dce4:	3f317180 	.word	0x3f317180
 800dce8:	3717f7d1 	.word	0x3717f7d1
 800dcec:	0d800000 	.word	0x0d800000

0800dcf0 <__ieee754_logf>:
 800dcf0:	ee10 3a10 	vmov	r3, s0
 800dcf4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800dcf8:	d106      	bne.n	800dd08 <__ieee754_logf+0x18>
 800dcfa:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800de90 <__ieee754_logf+0x1a0>
 800dcfe:	eddf 7a65 	vldr	s15, [pc, #404]	; 800de94 <__ieee754_logf+0x1a4>
 800dd02:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800dd06:	4770      	bx	lr
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	da02      	bge.n	800dd12 <__ieee754_logf+0x22>
 800dd0c:	ee30 7a40 	vsub.f32	s14, s0, s0
 800dd10:	e7f5      	b.n	800dcfe <__ieee754_logf+0xe>
 800dd12:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800dd16:	db02      	blt.n	800dd1e <__ieee754_logf+0x2e>
 800dd18:	ee30 0a00 	vadd.f32	s0, s0, s0
 800dd1c:	4770      	bx	lr
 800dd1e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800dd22:	bfbf      	itttt	lt
 800dd24:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 800de98 <__ieee754_logf+0x1a8>
 800dd28:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800dd2c:	f06f 0118 	mvnlt.w	r1, #24
 800dd30:	ee17 3a90 	vmovlt	r3, s15
 800dd34:	ea4f 52e3 	mov.w	r2, r3, asr #23
 800dd38:	bfa8      	it	ge
 800dd3a:	2100      	movge	r1, #0
 800dd3c:	3a7f      	subs	r2, #127	; 0x7f
 800dd3e:	440a      	add	r2, r1
 800dd40:	4956      	ldr	r1, [pc, #344]	; (800de9c <__ieee754_logf+0x1ac>)
 800dd42:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800dd46:	4419      	add	r1, r3
 800dd48:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 800dd4c:	eb02 52d1 	add.w	r2, r2, r1, lsr #23
 800dd50:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 800dd54:	4319      	orrs	r1, r3
 800dd56:	ee07 1a90 	vmov	s15, r1
 800dd5a:	f103 010f 	add.w	r1, r3, #15
 800dd5e:	f3c1 0116 	ubfx	r1, r1, #0, #23
 800dd62:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800dd66:	290f      	cmp	r1, #15
 800dd68:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800dd6c:	dc31      	bgt.n	800ddd2 <__ieee754_logf+0xe2>
 800dd6e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800dd72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd76:	d10f      	bne.n	800dd98 <__ieee754_logf+0xa8>
 800dd78:	2a00      	cmp	r2, #0
 800dd7a:	f000 8085 	beq.w	800de88 <__ieee754_logf+0x198>
 800dd7e:	ee07 2a90 	vmov	s15, r2
 800dd82:	ed9f 0a47 	vldr	s0, [pc, #284]	; 800dea0 <__ieee754_logf+0x1b0>
 800dd86:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800dea4 <__ieee754_logf+0x1b4>
 800dd8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dd8e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800dd92:	eea7 0a87 	vfma.f32	s0, s15, s14
 800dd96:	4770      	bx	lr
 800dd98:	eddf 7a43 	vldr	s15, [pc, #268]	; 800dea8 <__ieee754_logf+0x1b8>
 800dd9c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800dda0:	eea0 7a67 	vfms.f32	s14, s0, s15
 800dda4:	ee60 7a00 	vmul.f32	s15, s0, s0
 800dda8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ddac:	b912      	cbnz	r2, 800ddb4 <__ieee754_logf+0xc4>
 800ddae:	ee30 0a47 	vsub.f32	s0, s0, s14
 800ddb2:	4770      	bx	lr
 800ddb4:	ee07 2a90 	vmov	s15, r2
 800ddb8:	eddf 6a39 	vldr	s13, [pc, #228]	; 800dea0 <__ieee754_logf+0x1b0>
 800ddbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ddc0:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800ddc4:	ee37 0a40 	vsub.f32	s0, s14, s0
 800ddc8:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800dea4 <__ieee754_logf+0x1b4>
 800ddcc:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800ddd0:	4770      	bx	lr
 800ddd2:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800ddd6:	ee70 7a27 	vadd.f32	s15, s0, s15
 800ddda:	eddf 5a34 	vldr	s11, [pc, #208]	; 800deac <__ieee754_logf+0x1bc>
 800ddde:	eddf 4a34 	vldr	s9, [pc, #208]	; 800deb0 <__ieee754_logf+0x1c0>
 800dde2:	4934      	ldr	r1, [pc, #208]	; (800deb4 <__ieee754_logf+0x1c4>)
 800dde4:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800dde8:	4419      	add	r1, r3
 800ddea:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 800ddee:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800ddf2:	430b      	orrs	r3, r1
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	ee07 2a90 	vmov	s15, r2
 800ddfa:	ee26 5a06 	vmul.f32	s10, s12, s12
 800ddfe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800de02:	ee25 7a05 	vmul.f32	s14, s10, s10
 800de06:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800deb8 <__ieee754_logf+0x1c8>
 800de0a:	eee7 7a25 	vfma.f32	s15, s14, s11
 800de0e:	eddf 5a2b 	vldr	s11, [pc, #172]	; 800debc <__ieee754_logf+0x1cc>
 800de12:	eee7 5a87 	vfma.f32	s11, s15, s14
 800de16:	eddf 7a2a 	vldr	s15, [pc, #168]	; 800dec0 <__ieee754_logf+0x1d0>
 800de1a:	eee7 7a24 	vfma.f32	s15, s14, s9
 800de1e:	eddf 4a29 	vldr	s9, [pc, #164]	; 800dec4 <__ieee754_logf+0x1d4>
 800de22:	eee7 4a87 	vfma.f32	s9, s15, s14
 800de26:	eddf 7a28 	vldr	s15, [pc, #160]	; 800dec8 <__ieee754_logf+0x1d8>
 800de2a:	eee4 7a87 	vfma.f32	s15, s9, s14
 800de2e:	ee67 7a85 	vmul.f32	s15, s15, s10
 800de32:	eee5 7a87 	vfma.f32	s15, s11, s14
 800de36:	dd1c      	ble.n	800de72 <__ieee754_logf+0x182>
 800de38:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800de3c:	ee20 7a07 	vmul.f32	s14, s0, s14
 800de40:	ee27 7a00 	vmul.f32	s14, s14, s0
 800de44:	ee77 7a87 	vadd.f32	s15, s15, s14
 800de48:	ee67 7a86 	vmul.f32	s15, s15, s12
 800de4c:	b922      	cbnz	r2, 800de58 <__ieee754_logf+0x168>
 800de4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800de52:	ee30 0a67 	vsub.f32	s0, s0, s15
 800de56:	4770      	bx	lr
 800de58:	ed9f 6a11 	vldr	s12, [pc, #68]	; 800dea0 <__ieee754_logf+0x1b0>
 800de5c:	eee6 7a86 	vfma.f32	s15, s13, s12
 800de60:	ee77 7a67 	vsub.f32	s15, s14, s15
 800de64:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800de68:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800dea4 <__ieee754_logf+0x1b4>
 800de6c:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800de70:	4770      	bx	lr
 800de72:	ee70 7a67 	vsub.f32	s15, s0, s15
 800de76:	ee67 7a86 	vmul.f32	s15, s15, s12
 800de7a:	2a00      	cmp	r2, #0
 800de7c:	d0e9      	beq.n	800de52 <__ieee754_logf+0x162>
 800de7e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800dea0 <__ieee754_logf+0x1b0>
 800de82:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800de86:	e7ed      	b.n	800de64 <__ieee754_logf+0x174>
 800de88:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800de94 <__ieee754_logf+0x1a4>
 800de8c:	4770      	bx	lr
 800de8e:	bf00      	nop
 800de90:	cc000000 	.word	0xcc000000
 800de94:	00000000 	.word	0x00000000
 800de98:	4c000000 	.word	0x4c000000
 800de9c:	004afb20 	.word	0x004afb20
 800dea0:	3717f7d1 	.word	0x3717f7d1
 800dea4:	3f317180 	.word	0x3f317180
 800dea8:	3eaaaaab 	.word	0x3eaaaaab
 800deac:	3e1cd04f 	.word	0x3e1cd04f
 800deb0:	3e178897 	.word	0x3e178897
 800deb4:	ffcf5c30 	.word	0xffcf5c30
 800deb8:	3e638e29 	.word	0x3e638e29
 800debc:	3ecccccd 	.word	0x3ecccccd
 800dec0:	3e3a3325 	.word	0x3e3a3325
 800dec4:	3e924925 	.word	0x3e924925
 800dec8:	3f2aaaab 	.word	0x3f2aaaab

0800decc <__ieee754_powf>:
 800decc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ded0:	ee10 5a90 	vmov	r5, s1
 800ded4:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 800ded8:	ed2d 8b02 	vpush	{d8}
 800dedc:	eeb0 8a40 	vmov.f32	s16, s0
 800dee0:	eef0 8a60 	vmov.f32	s17, s1
 800dee4:	f000 8293 	beq.w	800e40e <__ieee754_powf+0x542>
 800dee8:	ee10 8a10 	vmov	r8, s0
 800deec:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 800def0:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800def4:	dc06      	bgt.n	800df04 <__ieee754_powf+0x38>
 800def6:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800defa:	dd0a      	ble.n	800df12 <__ieee754_powf+0x46>
 800defc:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800df00:	f000 8285 	beq.w	800e40e <__ieee754_powf+0x542>
 800df04:	ecbd 8b02 	vpop	{d8}
 800df08:	48d9      	ldr	r0, [pc, #868]	; (800e270 <__ieee754_powf+0x3a4>)
 800df0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df0e:	f000 bbe9 	b.w	800e6e4 <nanf>
 800df12:	f1b8 0f00 	cmp.w	r8, #0
 800df16:	da1d      	bge.n	800df54 <__ieee754_powf+0x88>
 800df18:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 800df1c:	da2c      	bge.n	800df78 <__ieee754_powf+0xac>
 800df1e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800df22:	db30      	blt.n	800df86 <__ieee754_powf+0xba>
 800df24:	15fb      	asrs	r3, r7, #23
 800df26:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800df2a:	fa47 f603 	asr.w	r6, r7, r3
 800df2e:	fa06 f303 	lsl.w	r3, r6, r3
 800df32:	42bb      	cmp	r3, r7
 800df34:	d127      	bne.n	800df86 <__ieee754_powf+0xba>
 800df36:	f006 0601 	and.w	r6, r6, #1
 800df3a:	f1c6 0602 	rsb	r6, r6, #2
 800df3e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800df42:	d122      	bne.n	800df8a <__ieee754_powf+0xbe>
 800df44:	2d00      	cmp	r5, #0
 800df46:	f280 8268 	bge.w	800e41a <__ieee754_powf+0x54e>
 800df4a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800df4e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800df52:	e00d      	b.n	800df70 <__ieee754_powf+0xa4>
 800df54:	2600      	movs	r6, #0
 800df56:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800df5a:	d1f0      	bne.n	800df3e <__ieee754_powf+0x72>
 800df5c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800df60:	f000 8255 	beq.w	800e40e <__ieee754_powf+0x542>
 800df64:	dd0a      	ble.n	800df7c <__ieee754_powf+0xb0>
 800df66:	2d00      	cmp	r5, #0
 800df68:	f280 8254 	bge.w	800e414 <__ieee754_powf+0x548>
 800df6c:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 800e274 <__ieee754_powf+0x3a8>
 800df70:	ecbd 8b02 	vpop	{d8}
 800df74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df78:	2602      	movs	r6, #2
 800df7a:	e7ec      	b.n	800df56 <__ieee754_powf+0x8a>
 800df7c:	2d00      	cmp	r5, #0
 800df7e:	daf5      	bge.n	800df6c <__ieee754_powf+0xa0>
 800df80:	eeb1 0a68 	vneg.f32	s0, s17
 800df84:	e7f4      	b.n	800df70 <__ieee754_powf+0xa4>
 800df86:	2600      	movs	r6, #0
 800df88:	e7d9      	b.n	800df3e <__ieee754_powf+0x72>
 800df8a:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 800df8e:	d102      	bne.n	800df96 <__ieee754_powf+0xca>
 800df90:	ee28 0a08 	vmul.f32	s0, s16, s16
 800df94:	e7ec      	b.n	800df70 <__ieee754_powf+0xa4>
 800df96:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800df9a:	eeb0 0a48 	vmov.f32	s0, s16
 800df9e:	d108      	bne.n	800dfb2 <__ieee754_powf+0xe6>
 800dfa0:	f1b8 0f00 	cmp.w	r8, #0
 800dfa4:	db05      	blt.n	800dfb2 <__ieee754_powf+0xe6>
 800dfa6:	ecbd 8b02 	vpop	{d8}
 800dfaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dfae:	f000 ba4d 	b.w	800e44c <__ieee754_sqrtf>
 800dfb2:	f000 fb85 	bl	800e6c0 <fabsf>
 800dfb6:	b124      	cbz	r4, 800dfc2 <__ieee754_powf+0xf6>
 800dfb8:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 800dfbc:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800dfc0:	d117      	bne.n	800dff2 <__ieee754_powf+0x126>
 800dfc2:	2d00      	cmp	r5, #0
 800dfc4:	bfbc      	itt	lt
 800dfc6:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800dfca:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800dfce:	f1b8 0f00 	cmp.w	r8, #0
 800dfd2:	dacd      	bge.n	800df70 <__ieee754_powf+0xa4>
 800dfd4:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 800dfd8:	ea54 0306 	orrs.w	r3, r4, r6
 800dfdc:	d104      	bne.n	800dfe8 <__ieee754_powf+0x11c>
 800dfde:	ee70 7a40 	vsub.f32	s15, s0, s0
 800dfe2:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800dfe6:	e7c3      	b.n	800df70 <__ieee754_powf+0xa4>
 800dfe8:	2e01      	cmp	r6, #1
 800dfea:	d1c1      	bne.n	800df70 <__ieee754_powf+0xa4>
 800dfec:	eeb1 0a40 	vneg.f32	s0, s0
 800dff0:	e7be      	b.n	800df70 <__ieee754_powf+0xa4>
 800dff2:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 800dff6:	3801      	subs	r0, #1
 800dff8:	ea56 0300 	orrs.w	r3, r6, r0
 800dffc:	d104      	bne.n	800e008 <__ieee754_powf+0x13c>
 800dffe:	ee38 8a48 	vsub.f32	s16, s16, s16
 800e002:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800e006:	e7b3      	b.n	800df70 <__ieee754_powf+0xa4>
 800e008:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 800e00c:	dd6d      	ble.n	800e0ea <__ieee754_powf+0x21e>
 800e00e:	4b9a      	ldr	r3, [pc, #616]	; (800e278 <__ieee754_powf+0x3ac>)
 800e010:	429c      	cmp	r4, r3
 800e012:	dc06      	bgt.n	800e022 <__ieee754_powf+0x156>
 800e014:	2d00      	cmp	r5, #0
 800e016:	daa9      	bge.n	800df6c <__ieee754_powf+0xa0>
 800e018:	ed9f 0a98 	vldr	s0, [pc, #608]	; 800e27c <__ieee754_powf+0x3b0>
 800e01c:	ee20 0a00 	vmul.f32	s0, s0, s0
 800e020:	e7a6      	b.n	800df70 <__ieee754_powf+0xa4>
 800e022:	4b97      	ldr	r3, [pc, #604]	; (800e280 <__ieee754_powf+0x3b4>)
 800e024:	429c      	cmp	r4, r3
 800e026:	dd02      	ble.n	800e02e <__ieee754_powf+0x162>
 800e028:	2d00      	cmp	r5, #0
 800e02a:	dcf5      	bgt.n	800e018 <__ieee754_powf+0x14c>
 800e02c:	e79e      	b.n	800df6c <__ieee754_powf+0xa0>
 800e02e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e032:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e036:	ed9f 7a93 	vldr	s14, [pc, #588]	; 800e284 <__ieee754_powf+0x3b8>
 800e03a:	eef1 6a40 	vneg.f32	s13, s0
 800e03e:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800e042:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e046:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e04a:	eee7 7a40 	vfms.f32	s15, s14, s0
 800e04e:	ee60 0a00 	vmul.f32	s1, s0, s0
 800e052:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 800e288 <__ieee754_powf+0x3bc>
 800e056:	ee67 0aa0 	vmul.f32	s1, s15, s1
 800e05a:	eddf 7a8c 	vldr	s15, [pc, #560]	; 800e28c <__ieee754_powf+0x3c0>
 800e05e:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 800e062:	eee0 7a07 	vfma.f32	s15, s0, s14
 800e066:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800e290 <__ieee754_powf+0x3c4>
 800e06a:	eeb0 6a67 	vmov.f32	s12, s15
 800e06e:	eea0 6a07 	vfma.f32	s12, s0, s14
 800e072:	ee16 3a10 	vmov	r3, s12
 800e076:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800e07a:	f023 030f 	bic.w	r3, r3, #15
 800e07e:	ee00 3a90 	vmov	s1, r3
 800e082:	eee6 0a87 	vfma.f32	s1, s13, s14
 800e086:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800e08a:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 800e08e:	f025 050f 	bic.w	r5, r5, #15
 800e092:	ee07 5a10 	vmov	s14, r5
 800e096:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800e09a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800e09e:	ee07 3a90 	vmov	s15, r3
 800e0a2:	eee7 0a27 	vfma.f32	s1, s14, s15
 800e0a6:	3e01      	subs	r6, #1
 800e0a8:	ea56 0200 	orrs.w	r2, r6, r0
 800e0ac:	ee07 5a10 	vmov	s14, r5
 800e0b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e0b4:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800e0b8:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800e0bc:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800e0c0:	ee17 4a10 	vmov	r4, s14
 800e0c4:	bf08      	it	eq
 800e0c6:	eeb0 8a40 	vmoveq.f32	s16, s0
 800e0ca:	2c00      	cmp	r4, #0
 800e0cc:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800e0d0:	f340 8184 	ble.w	800e3dc <__ieee754_powf+0x510>
 800e0d4:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800e0d8:	f340 80fc 	ble.w	800e2d4 <__ieee754_powf+0x408>
 800e0dc:	eddf 7a67 	vldr	s15, [pc, #412]	; 800e27c <__ieee754_powf+0x3b0>
 800e0e0:	ee28 0a27 	vmul.f32	s0, s16, s15
 800e0e4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e0e8:	e742      	b.n	800df70 <__ieee754_powf+0xa4>
 800e0ea:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 800e0ee:	bfbf      	itttt	lt
 800e0f0:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 800e294 <__ieee754_powf+0x3c8>
 800e0f4:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800e0f8:	f06f 0217 	mvnlt.w	r2, #23
 800e0fc:	ee17 4a90 	vmovlt	r4, s15
 800e100:	ea4f 53e4 	mov.w	r3, r4, asr #23
 800e104:	bfa8      	it	ge
 800e106:	2200      	movge	r2, #0
 800e108:	3b7f      	subs	r3, #127	; 0x7f
 800e10a:	4413      	add	r3, r2
 800e10c:	4a62      	ldr	r2, [pc, #392]	; (800e298 <__ieee754_powf+0x3cc>)
 800e10e:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800e112:	4294      	cmp	r4, r2
 800e114:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 800e118:	dd06      	ble.n	800e128 <__ieee754_powf+0x25c>
 800e11a:	4a60      	ldr	r2, [pc, #384]	; (800e29c <__ieee754_powf+0x3d0>)
 800e11c:	4294      	cmp	r4, r2
 800e11e:	f340 80a5 	ble.w	800e26c <__ieee754_powf+0x3a0>
 800e122:	3301      	adds	r3, #1
 800e124:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800e128:	2400      	movs	r4, #0
 800e12a:	4a5d      	ldr	r2, [pc, #372]	; (800e2a0 <__ieee754_powf+0x3d4>)
 800e12c:	00a7      	lsls	r7, r4, #2
 800e12e:	443a      	add	r2, r7
 800e130:	ee07 1a90 	vmov	s15, r1
 800e134:	ed92 7a00 	vldr	s14, [r2]
 800e138:	4a5a      	ldr	r2, [pc, #360]	; (800e2a4 <__ieee754_powf+0x3d8>)
 800e13a:	ee37 6a27 	vadd.f32	s12, s14, s15
 800e13e:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800e142:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800e146:	1049      	asrs	r1, r1, #1
 800e148:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800e14c:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800e150:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 800e154:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800e158:	ee06 1a10 	vmov	s12, r1
 800e15c:	ee65 4aa6 	vmul.f32	s9, s11, s13
 800e160:	ee14 ca90 	vmov	ip, s9
 800e164:	ea02 0c0c 	and.w	ip, r2, ip
 800e168:	ee05 ca10 	vmov	s10, ip
 800e16c:	eeb1 4a45 	vneg.f32	s8, s10
 800e170:	eee4 5a06 	vfma.f32	s11, s8, s12
 800e174:	ee36 6a47 	vsub.f32	s12, s12, s14
 800e178:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800e2a8 <__ieee754_powf+0x3dc>
 800e17c:	ee37 6ac6 	vsub.f32	s12, s15, s12
 800e180:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800e184:	eee4 5a06 	vfma.f32	s11, s8, s12
 800e188:	ee67 3aa7 	vmul.f32	s7, s15, s15
 800e18c:	ee25 6aa6 	vmul.f32	s12, s11, s13
 800e190:	eddf 5a46 	vldr	s11, [pc, #280]	; 800e2ac <__ieee754_powf+0x3e0>
 800e194:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800e198:	eddf 5a45 	vldr	s11, [pc, #276]	; 800e2b0 <__ieee754_powf+0x3e4>
 800e19c:	eee7 5a27 	vfma.f32	s11, s14, s15
 800e1a0:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800e284 <__ieee754_powf+0x3b8>
 800e1a4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800e1a8:	eddf 5a42 	vldr	s11, [pc, #264]	; 800e2b4 <__ieee754_powf+0x3e8>
 800e1ac:	eee7 5a27 	vfma.f32	s11, s14, s15
 800e1b0:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800e2b8 <__ieee754_powf+0x3ec>
 800e1b4:	ee75 6a24 	vadd.f32	s13, s10, s9
 800e1b8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800e1bc:	ee66 6a86 	vmul.f32	s13, s13, s12
 800e1c0:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 800e1c4:	eef0 7a65 	vmov.f32	s15, s11
 800e1c8:	eee3 6a87 	vfma.f32	s13, s7, s14
 800e1cc:	eee5 7a05 	vfma.f32	s15, s10, s10
 800e1d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e1d4:	ee17 1a90 	vmov	r1, s15
 800e1d8:	4011      	ands	r1, r2
 800e1da:	ee07 1a90 	vmov	s15, r1
 800e1de:	ee37 7ae5 	vsub.f32	s14, s15, s11
 800e1e2:	eddf 5a36 	vldr	s11, [pc, #216]	; 800e2bc <__ieee754_powf+0x3f0>
 800e1e6:	eea4 7a05 	vfma.f32	s14, s8, s10
 800e1ea:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800e1ee:	ee27 7a24 	vmul.f32	s14, s14, s9
 800e1f2:	eea7 7a86 	vfma.f32	s14, s15, s12
 800e1f6:	eeb0 6a47 	vmov.f32	s12, s14
 800e1fa:	eea5 6a27 	vfma.f32	s12, s10, s15
 800e1fe:	ee16 1a10 	vmov	r1, s12
 800e202:	4011      	ands	r1, r2
 800e204:	ee06 1a90 	vmov	s13, r1
 800e208:	eee4 6a27 	vfma.f32	s13, s8, s15
 800e20c:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800e2c0 <__ieee754_powf+0x3f4>
 800e210:	ee37 7a66 	vsub.f32	s14, s14, s13
 800e214:	ee06 1a10 	vmov	s12, r1
 800e218:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e21c:	eddf 7a29 	vldr	s15, [pc, #164]	; 800e2c4 <__ieee754_powf+0x3f8>
 800e220:	4929      	ldr	r1, [pc, #164]	; (800e2c8 <__ieee754_powf+0x3fc>)
 800e222:	eea6 7a27 	vfma.f32	s14, s12, s15
 800e226:	4439      	add	r1, r7
 800e228:	edd1 7a00 	vldr	s15, [r1]
 800e22c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e230:	ee07 3a90 	vmov	s15, r3
 800e234:	eef0 0a47 	vmov.f32	s1, s14
 800e238:	4b24      	ldr	r3, [pc, #144]	; (800e2cc <__ieee754_powf+0x400>)
 800e23a:	eee6 0a25 	vfma.f32	s1, s12, s11
 800e23e:	443b      	add	r3, r7
 800e240:	ed93 5a00 	vldr	s10, [r3]
 800e244:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e248:	ee70 0a85 	vadd.f32	s1, s1, s10
 800e24c:	ee70 7aa6 	vadd.f32	s15, s1, s13
 800e250:	ee17 3a90 	vmov	r3, s15
 800e254:	4013      	ands	r3, r2
 800e256:	ee07 3a90 	vmov	s15, r3
 800e25a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e25e:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800e262:	eee6 7a65 	vfms.f32	s15, s12, s11
 800e266:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e26a:	e70e      	b.n	800e08a <__ieee754_powf+0x1be>
 800e26c:	2401      	movs	r4, #1
 800e26e:	e75c      	b.n	800e12a <__ieee754_powf+0x25e>
 800e270:	0800f909 	.word	0x0800f909
 800e274:	00000000 	.word	0x00000000
 800e278:	3f7ffff7 	.word	0x3f7ffff7
 800e27c:	7149f2ca 	.word	0x7149f2ca
 800e280:	3f800007 	.word	0x3f800007
 800e284:	3eaaaaab 	.word	0x3eaaaaab
 800e288:	36eca570 	.word	0x36eca570
 800e28c:	3fb8aa3b 	.word	0x3fb8aa3b
 800e290:	3fb8aa00 	.word	0x3fb8aa00
 800e294:	4b800000 	.word	0x4b800000
 800e298:	001cc471 	.word	0x001cc471
 800e29c:	005db3d6 	.word	0x005db3d6
 800e2a0:	0800f960 	.word	0x0800f960
 800e2a4:	fffff000 	.word	0xfffff000
 800e2a8:	3e6c3255 	.word	0x3e6c3255
 800e2ac:	3e53f142 	.word	0x3e53f142
 800e2b0:	3e8ba305 	.word	0x3e8ba305
 800e2b4:	3edb6db7 	.word	0x3edb6db7
 800e2b8:	3f19999a 	.word	0x3f19999a
 800e2bc:	3f763800 	.word	0x3f763800
 800e2c0:	3f76384f 	.word	0x3f76384f
 800e2c4:	369dc3a0 	.word	0x369dc3a0
 800e2c8:	0800f970 	.word	0x0800f970
 800e2cc:	0800f968 	.word	0x0800f968
 800e2d0:	3338aa3c 	.word	0x3338aa3c
 800e2d4:	f040 8092 	bne.w	800e3fc <__ieee754_powf+0x530>
 800e2d8:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800e2d0 <__ieee754_powf+0x404>
 800e2dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e2e0:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800e2e4:	eef4 6ac7 	vcmpe.f32	s13, s14
 800e2e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2ec:	f73f aef6 	bgt.w	800e0dc <__ieee754_powf+0x210>
 800e2f0:	15db      	asrs	r3, r3, #23
 800e2f2:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800e2f6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800e2fa:	4103      	asrs	r3, r0
 800e2fc:	4423      	add	r3, r4
 800e2fe:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800e302:	4947      	ldr	r1, [pc, #284]	; (800e420 <__ieee754_powf+0x554>)
 800e304:	3a7f      	subs	r2, #127	; 0x7f
 800e306:	4111      	asrs	r1, r2
 800e308:	ea23 0101 	bic.w	r1, r3, r1
 800e30c:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800e310:	ee07 1a10 	vmov	s14, r1
 800e314:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800e318:	f1c2 0217 	rsb	r2, r2, #23
 800e31c:	4110      	asrs	r0, r2
 800e31e:	2c00      	cmp	r4, #0
 800e320:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e324:	bfb8      	it	lt
 800e326:	4240      	neglt	r0, r0
 800e328:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800e32c:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800e424 <__ieee754_powf+0x558>
 800e330:	ee17 3a10 	vmov	r3, s14
 800e334:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800e338:	f023 030f 	bic.w	r3, r3, #15
 800e33c:	ee07 3a10 	vmov	s14, r3
 800e340:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e344:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800e348:	eddf 7a37 	vldr	s15, [pc, #220]	; 800e428 <__ieee754_powf+0x55c>
 800e34c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e350:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800e354:	eddf 6a35 	vldr	s13, [pc, #212]	; 800e42c <__ieee754_powf+0x560>
 800e358:	eeb0 0a67 	vmov.f32	s0, s15
 800e35c:	eea7 0a26 	vfma.f32	s0, s14, s13
 800e360:	eeb0 6a40 	vmov.f32	s12, s0
 800e364:	eea7 6a66 	vfms.f32	s12, s14, s13
 800e368:	ee20 7a00 	vmul.f32	s14, s0, s0
 800e36c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800e370:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800e430 <__ieee754_powf+0x564>
 800e374:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800e434 <__ieee754_powf+0x568>
 800e378:	eea7 6a26 	vfma.f32	s12, s14, s13
 800e37c:	eddf 6a2e 	vldr	s13, [pc, #184]	; 800e438 <__ieee754_powf+0x56c>
 800e380:	eee6 6a07 	vfma.f32	s13, s12, s14
 800e384:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 800e43c <__ieee754_powf+0x570>
 800e388:	eea6 6a87 	vfma.f32	s12, s13, s14
 800e38c:	eddf 6a2c 	vldr	s13, [pc, #176]	; 800e440 <__ieee754_powf+0x574>
 800e390:	eee6 6a07 	vfma.f32	s13, s12, s14
 800e394:	eeb0 6a40 	vmov.f32	s12, s0
 800e398:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800e39c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800e3a0:	eeb0 7a46 	vmov.f32	s14, s12
 800e3a4:	ee77 6a66 	vsub.f32	s13, s14, s13
 800e3a8:	ee20 6a06 	vmul.f32	s12, s0, s12
 800e3ac:	eee0 7a27 	vfma.f32	s15, s0, s15
 800e3b0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800e3b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e3b8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800e3bc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e3c0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800e3c4:	ee10 3a10 	vmov	r3, s0
 800e3c8:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800e3cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e3d0:	da1a      	bge.n	800e408 <__ieee754_powf+0x53c>
 800e3d2:	f000 f9e7 	bl	800e7a4 <scalbnf>
 800e3d6:	ee20 0a08 	vmul.f32	s0, s0, s16
 800e3da:	e5c9      	b.n	800df70 <__ieee754_powf+0xa4>
 800e3dc:	4a19      	ldr	r2, [pc, #100]	; (800e444 <__ieee754_powf+0x578>)
 800e3de:	4293      	cmp	r3, r2
 800e3e0:	dd02      	ble.n	800e3e8 <__ieee754_powf+0x51c>
 800e3e2:	eddf 7a19 	vldr	s15, [pc, #100]	; 800e448 <__ieee754_powf+0x57c>
 800e3e6:	e67b      	b.n	800e0e0 <__ieee754_powf+0x214>
 800e3e8:	d108      	bne.n	800e3fc <__ieee754_powf+0x530>
 800e3ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e3ee:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800e3f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3f6:	f6ff af7b 	blt.w	800e2f0 <__ieee754_powf+0x424>
 800e3fa:	e7f2      	b.n	800e3e2 <__ieee754_powf+0x516>
 800e3fc:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800e400:	f73f af76 	bgt.w	800e2f0 <__ieee754_powf+0x424>
 800e404:	2000      	movs	r0, #0
 800e406:	e78f      	b.n	800e328 <__ieee754_powf+0x45c>
 800e408:	ee00 3a10 	vmov	s0, r3
 800e40c:	e7e3      	b.n	800e3d6 <__ieee754_powf+0x50a>
 800e40e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800e412:	e5ad      	b.n	800df70 <__ieee754_powf+0xa4>
 800e414:	eeb0 0a68 	vmov.f32	s0, s17
 800e418:	e5aa      	b.n	800df70 <__ieee754_powf+0xa4>
 800e41a:	eeb0 0a48 	vmov.f32	s0, s16
 800e41e:	e5a7      	b.n	800df70 <__ieee754_powf+0xa4>
 800e420:	007fffff 	.word	0x007fffff
 800e424:	3f317218 	.word	0x3f317218
 800e428:	35bfbe8c 	.word	0x35bfbe8c
 800e42c:	3f317200 	.word	0x3f317200
 800e430:	3331bb4c 	.word	0x3331bb4c
 800e434:	b5ddea0e 	.word	0xb5ddea0e
 800e438:	388ab355 	.word	0x388ab355
 800e43c:	bb360b61 	.word	0xbb360b61
 800e440:	3e2aaaab 	.word	0x3e2aaaab
 800e444:	43160000 	.word	0x43160000
 800e448:	0da24260 	.word	0x0da24260

0800e44c <__ieee754_sqrtf>:
 800e44c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800e450:	4770      	bx	lr

0800e452 <matherr>:
 800e452:	2000      	movs	r0, #0
 800e454:	4770      	bx	lr
	...

0800e458 <nan>:
 800e458:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e460 <nan+0x8>
 800e45c:	4770      	bx	lr
 800e45e:	bf00      	nop
 800e460:	00000000 	.word	0x00000000
 800e464:	7ff80000 	.word	0x7ff80000

0800e468 <expm1f>:
 800e468:	ee10 2a10 	vmov	r2, s0
 800e46c:	4985      	ldr	r1, [pc, #532]	; (800e684 <expm1f+0x21c>)
 800e46e:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800e472:	428b      	cmp	r3, r1
 800e474:	d924      	bls.n	800e4c0 <expm1f+0x58>
 800e476:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e47a:	d902      	bls.n	800e482 <expm1f+0x1a>
 800e47c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e480:	4770      	bx	lr
 800e482:	d106      	bne.n	800e492 <expm1f+0x2a>
 800e484:	2a00      	cmp	r2, #0
 800e486:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800e48a:	bfb8      	it	lt
 800e48c:	eeb0 0a67 	vmovlt.f32	s0, s15
 800e490:	4770      	bx	lr
 800e492:	2a00      	cmp	r2, #0
 800e494:	db08      	blt.n	800e4a8 <expm1f+0x40>
 800e496:	4a7c      	ldr	r2, [pc, #496]	; (800e688 <expm1f+0x220>)
 800e498:	4293      	cmp	r3, r2
 800e49a:	f240 80eb 	bls.w	800e674 <expm1f+0x20c>
 800e49e:	ed9f 0a7b 	vldr	s0, [pc, #492]	; 800e68c <expm1f+0x224>
 800e4a2:	ee20 0a00 	vmul.f32	s0, s0, s0
 800e4a6:	4770      	bx	lr
 800e4a8:	eddf 7a79 	vldr	s15, [pc, #484]	; 800e690 <expm1f+0x228>
 800e4ac:	ee70 7a27 	vadd.f32	s15, s0, s15
 800e4b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e4b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4b8:	d554      	bpl.n	800e564 <expm1f+0xfc>
 800e4ba:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800e4be:	4770      	bx	lr
 800e4c0:	4974      	ldr	r1, [pc, #464]	; (800e694 <expm1f+0x22c>)
 800e4c2:	428b      	cmp	r3, r1
 800e4c4:	d96d      	bls.n	800e5a2 <expm1f+0x13a>
 800e4c6:	4974      	ldr	r1, [pc, #464]	; (800e698 <expm1f+0x230>)
 800e4c8:	428b      	cmp	r3, r1
 800e4ca:	d84b      	bhi.n	800e564 <expm1f+0xfc>
 800e4cc:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800e69c <expm1f+0x234>
 800e4d0:	2a00      	cmp	r2, #0
 800e4d2:	bfa7      	ittee	ge
 800e4d4:	ee30 7a47 	vsubge.f32	s14, s0, s14
 800e4d8:	eddf 7a71 	vldrge	s15, [pc, #452]	; 800e6a0 <expm1f+0x238>
 800e4dc:	eddf 7a71 	vldrlt	s15, [pc, #452]	; 800e6a4 <expm1f+0x23c>
 800e4e0:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 800e4e4:	bfac      	ite	ge
 800e4e6:	2301      	movge	r3, #1
 800e4e8:	f04f 33ff 	movlt.w	r3, #4294967295
 800e4ec:	ee37 0a67 	vsub.f32	s0, s14, s15
 800e4f0:	ee37 7a40 	vsub.f32	s14, s14, s0
 800e4f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e4f8:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800e4fc:	ee20 5a25 	vmul.f32	s10, s0, s11
 800e500:	eddf 6a69 	vldr	s13, [pc, #420]	; 800e6a8 <expm1f+0x240>
 800e504:	ed9f 6a69 	vldr	s12, [pc, #420]	; 800e6ac <expm1f+0x244>
 800e508:	ee20 7a05 	vmul.f32	s14, s0, s10
 800e50c:	eea7 6a26 	vfma.f32	s12, s14, s13
 800e510:	eddf 6a67 	vldr	s13, [pc, #412]	; 800e6b0 <expm1f+0x248>
 800e514:	eee6 6a07 	vfma.f32	s13, s12, s14
 800e518:	ed9f 6a66 	vldr	s12, [pc, #408]	; 800e6b4 <expm1f+0x24c>
 800e51c:	eea6 6a87 	vfma.f32	s12, s13, s14
 800e520:	eddf 6a65 	vldr	s13, [pc, #404]	; 800e6b8 <expm1f+0x250>
 800e524:	eee6 6a07 	vfma.f32	s13, s12, s14
 800e528:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800e52c:	eef0 4a46 	vmov.f32	s9, s12
 800e530:	eee6 4a87 	vfma.f32	s9, s13, s14
 800e534:	eef0 6a64 	vmov.f32	s13, s9
 800e538:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 800e53c:	eee5 4a66 	vfms.f32	s9, s10, s13
 800e540:	ee36 5ae4 	vsub.f32	s10, s13, s9
 800e544:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800e548:	eee0 6a64 	vfms.f32	s13, s0, s9
 800e54c:	eef0 4a66 	vmov.f32	s9, s13
 800e550:	eec5 6a24 	vdiv.f32	s13, s10, s9
 800e554:	ee66 6a87 	vmul.f32	s13, s13, s14
 800e558:	bb8b      	cbnz	r3, 800e5be <expm1f+0x156>
 800e55a:	eef0 7a47 	vmov.f32	s15, s14
 800e55e:	eed0 7a26 	vfnms.f32	s15, s0, s13
 800e562:	e027      	b.n	800e5b4 <expm1f+0x14c>
 800e564:	eddf 7a55 	vldr	s15, [pc, #340]	; 800e6bc <expm1f+0x254>
 800e568:	2a00      	cmp	r2, #0
 800e56a:	ee20 7a27 	vmul.f32	s14, s0, s15
 800e56e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800e572:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 800e576:	bfa8      	it	ge
 800e578:	eef0 7a66 	vmovge.f32	s15, s13
 800e57c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e580:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800e69c <expm1f+0x234>
 800e584:	eddf 6a46 	vldr	s13, [pc, #280]	; 800e6a0 <expm1f+0x238>
 800e588:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e58c:	ee17 3a90 	vmov	r3, s15
 800e590:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e594:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800e598:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e59c:	eeb0 7a40 	vmov.f32	s14, s0
 800e5a0:	e7a4      	b.n	800e4ec <expm1f+0x84>
 800e5a2:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 800e5a6:	d208      	bcs.n	800e5ba <expm1f+0x152>
 800e5a8:	eddf 7a38 	vldr	s15, [pc, #224]	; 800e68c <expm1f+0x224>
 800e5ac:	ee70 7a27 	vadd.f32	s15, s0, s15
 800e5b0:	ee77 7ae7 	vsub.f32	s15, s15, s15
 800e5b4:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e5b8:	4770      	bx	lr
 800e5ba:	2300      	movs	r3, #0
 800e5bc:	e79c      	b.n	800e4f8 <expm1f+0x90>
 800e5be:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800e5c2:	1c5a      	adds	r2, r3, #1
 800e5c4:	eed6 7a80 	vfnms.f32	s15, s13, s0
 800e5c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e5cc:	d106      	bne.n	800e5dc <expm1f+0x174>
 800e5ce:	ee70 7a67 	vsub.f32	s15, s0, s15
 800e5d2:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 800e5d6:	eea7 0aa5 	vfma.f32	s0, s15, s11
 800e5da:	4770      	bx	lr
 800e5dc:	2b01      	cmp	r3, #1
 800e5de:	d118      	bne.n	800e612 <expm1f+0x1aa>
 800e5e0:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 800e5e4:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800e5e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5ec:	bf41      	itttt	mi
 800e5ee:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 800e5f2:	ee37 0ac0 	vsubmi.f32	s0, s15, s0
 800e5f6:	eef8 7a00 	vmovmi.f32	s15, #128	; 0xc0000000 -2.0
 800e5fa:	ee20 0a27 	vmulmi.f32	s0, s0, s15
 800e5fe:	bf5f      	itttt	pl
 800e600:	ee30 0a67 	vsubpl.f32	s0, s0, s15
 800e604:	eef0 7a00 	vmovpl.f32	s15, #0	; 0x40000000  2.0
 800e608:	eea0 6a27 	vfmapl.f32	s12, s0, s15
 800e60c:	eeb0 0a46 	vmovpl.f32	s0, s12
 800e610:	4770      	bx	lr
 800e612:	1c5a      	adds	r2, r3, #1
 800e614:	2a39      	cmp	r2, #57	; 0x39
 800e616:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 800e61a:	d90b      	bls.n	800e634 <expm1f+0x1cc>
 800e61c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800e620:	ee36 0a40 	vsub.f32	s0, s12, s0
 800e624:	ee10 3a10 	vmov	r3, s0
 800e628:	440b      	add	r3, r1
 800e62a:	ee00 3a10 	vmov	s0, r3
 800e62e:	ee30 0a46 	vsub.f32	s0, s0, s12
 800e632:	4770      	bx	lr
 800e634:	2b16      	cmp	r3, #22
 800e636:	dc11      	bgt.n	800e65c <expm1f+0x1f4>
 800e638:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e63c:	fa42 f303 	asr.w	r3, r2, r3
 800e640:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 800e644:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800e648:	ee07 3a90 	vmov	s15, r3
 800e64c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800e650:	ee10 3a10 	vmov	r3, s0
 800e654:	440b      	add	r3, r1
 800e656:	ee00 3a10 	vmov	s0, r3
 800e65a:	4770      	bx	lr
 800e65c:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800e660:	05db      	lsls	r3, r3, #23
 800e662:	ee07 3a10 	vmov	s14, r3
 800e666:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e66a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e66e:	ee30 0a06 	vadd.f32	s0, s0, s12
 800e672:	e7ed      	b.n	800e650 <expm1f+0x1e8>
 800e674:	eddf 7a11 	vldr	s15, [pc, #68]	; 800e6bc <expm1f+0x254>
 800e678:	ee20 7a27 	vmul.f32	s14, s0, s15
 800e67c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e680:	e77c      	b.n	800e57c <expm1f+0x114>
 800e682:	bf00      	nop
 800e684:	4195b843 	.word	0x4195b843
 800e688:	42b17217 	.word	0x42b17217
 800e68c:	7149f2ca 	.word	0x7149f2ca
 800e690:	0da24260 	.word	0x0da24260
 800e694:	3eb17218 	.word	0x3eb17218
 800e698:	3f851591 	.word	0x3f851591
 800e69c:	3f317180 	.word	0x3f317180
 800e6a0:	3717f7d1 	.word	0x3717f7d1
 800e6a4:	b717f7d1 	.word	0xb717f7d1
 800e6a8:	b457edbb 	.word	0xb457edbb
 800e6ac:	36867e54 	.word	0x36867e54
 800e6b0:	b8a670cd 	.word	0xb8a670cd
 800e6b4:	3ad00d01 	.word	0x3ad00d01
 800e6b8:	bd088889 	.word	0xbd088889
 800e6bc:	3fb8aa3b 	.word	0x3fb8aa3b

0800e6c0 <fabsf>:
 800e6c0:	ee10 3a10 	vmov	r3, s0
 800e6c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e6c8:	ee00 3a10 	vmov	s0, r3
 800e6cc:	4770      	bx	lr

0800e6ce <finitef>:
 800e6ce:	ee10 3a10 	vmov	r3, s0
 800e6d2:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800e6d6:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800e6da:	bfac      	ite	ge
 800e6dc:	2000      	movge	r0, #0
 800e6de:	2001      	movlt	r0, #1
 800e6e0:	4770      	bx	lr
	...

0800e6e4 <nanf>:
 800e6e4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e6ec <nanf+0x8>
 800e6e8:	4770      	bx	lr
 800e6ea:	bf00      	nop
 800e6ec:	7fc00000 	.word	0x7fc00000

0800e6f0 <rintf>:
 800e6f0:	b513      	push	{r0, r1, r4, lr}
 800e6f2:	ee10 1a10 	vmov	r1, s0
 800e6f6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e6fa:	0ddc      	lsrs	r4, r3, #23
 800e6fc:	3c7f      	subs	r4, #127	; 0x7f
 800e6fe:	2c16      	cmp	r4, #22
 800e700:	dc46      	bgt.n	800e790 <rintf+0xa0>
 800e702:	b32b      	cbz	r3, 800e750 <rintf+0x60>
 800e704:	2c00      	cmp	r4, #0
 800e706:	ee10 2a10 	vmov	r2, s0
 800e70a:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 800e70e:	da21      	bge.n	800e754 <rintf+0x64>
 800e710:	f3c1 0316 	ubfx	r3, r1, #0, #23
 800e714:	425b      	negs	r3, r3
 800e716:	4a21      	ldr	r2, [pc, #132]	; (800e79c <rintf+0xac>)
 800e718:	0a5b      	lsrs	r3, r3, #9
 800e71a:	0d09      	lsrs	r1, r1, #20
 800e71c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e720:	0509      	lsls	r1, r1, #20
 800e722:	430b      	orrs	r3, r1
 800e724:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800e728:	ee07 3a90 	vmov	s15, r3
 800e72c:	edd2 6a00 	vldr	s13, [r2]
 800e730:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800e734:	ed8d 7a01 	vstr	s14, [sp, #4]
 800e738:	eddd 7a01 	vldr	s15, [sp, #4]
 800e73c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e740:	ee17 3a90 	vmov	r3, s15
 800e744:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e748:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 800e74c:	ee00 3a10 	vmov	s0, r3
 800e750:	b002      	add	sp, #8
 800e752:	bd10      	pop	{r4, pc}
 800e754:	4b12      	ldr	r3, [pc, #72]	; (800e7a0 <rintf+0xb0>)
 800e756:	4123      	asrs	r3, r4
 800e758:	4219      	tst	r1, r3
 800e75a:	d0f9      	beq.n	800e750 <rintf+0x60>
 800e75c:	085b      	lsrs	r3, r3, #1
 800e75e:	4219      	tst	r1, r3
 800e760:	d006      	beq.n	800e770 <rintf+0x80>
 800e762:	ea21 0203 	bic.w	r2, r1, r3
 800e766:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e76a:	fa43 f404 	asr.w	r4, r3, r4
 800e76e:	4322      	orrs	r2, r4
 800e770:	4b0a      	ldr	r3, [pc, #40]	; (800e79c <rintf+0xac>)
 800e772:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e776:	ed90 7a00 	vldr	s14, [r0]
 800e77a:	ee07 2a90 	vmov	s15, r2
 800e77e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e782:	edcd 7a01 	vstr	s15, [sp, #4]
 800e786:	ed9d 0a01 	vldr	s0, [sp, #4]
 800e78a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800e78e:	e7df      	b.n	800e750 <rintf+0x60>
 800e790:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e794:	d3dc      	bcc.n	800e750 <rintf+0x60>
 800e796:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e79a:	e7d9      	b.n	800e750 <rintf+0x60>
 800e79c:	0800f978 	.word	0x0800f978
 800e7a0:	007fffff 	.word	0x007fffff

0800e7a4 <scalbnf>:
 800e7a4:	b508      	push	{r3, lr}
 800e7a6:	ee10 2a10 	vmov	r2, s0
 800e7aa:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800e7ae:	ed2d 8b02 	vpush	{d8}
 800e7b2:	eef0 0a40 	vmov.f32	s1, s0
 800e7b6:	d004      	beq.n	800e7c2 <scalbnf+0x1e>
 800e7b8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e7bc:	d306      	bcc.n	800e7cc <scalbnf+0x28>
 800e7be:	ee70 0a00 	vadd.f32	s1, s0, s0
 800e7c2:	ecbd 8b02 	vpop	{d8}
 800e7c6:	eeb0 0a60 	vmov.f32	s0, s1
 800e7ca:	bd08      	pop	{r3, pc}
 800e7cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e7d0:	d21c      	bcs.n	800e80c <scalbnf+0x68>
 800e7d2:	4b1f      	ldr	r3, [pc, #124]	; (800e850 <scalbnf+0xac>)
 800e7d4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800e854 <scalbnf+0xb0>
 800e7d8:	4298      	cmp	r0, r3
 800e7da:	ee60 0a27 	vmul.f32	s1, s0, s15
 800e7de:	db10      	blt.n	800e802 <scalbnf+0x5e>
 800e7e0:	ee10 2a90 	vmov	r2, s1
 800e7e4:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800e7e8:	3b19      	subs	r3, #25
 800e7ea:	4403      	add	r3, r0
 800e7ec:	2bfe      	cmp	r3, #254	; 0xfe
 800e7ee:	dd0f      	ble.n	800e810 <scalbnf+0x6c>
 800e7f0:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800e858 <scalbnf+0xb4>
 800e7f4:	eeb0 0a48 	vmov.f32	s0, s16
 800e7f8:	f000 f834 	bl	800e864 <copysignf>
 800e7fc:	ee60 0a08 	vmul.f32	s1, s0, s16
 800e800:	e7df      	b.n	800e7c2 <scalbnf+0x1e>
 800e802:	eddf 7a16 	vldr	s15, [pc, #88]	; 800e85c <scalbnf+0xb8>
 800e806:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800e80a:	e7da      	b.n	800e7c2 <scalbnf+0x1e>
 800e80c:	0ddb      	lsrs	r3, r3, #23
 800e80e:	e7ec      	b.n	800e7ea <scalbnf+0x46>
 800e810:	2b00      	cmp	r3, #0
 800e812:	dd06      	ble.n	800e822 <scalbnf+0x7e>
 800e814:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800e818:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800e81c:	ee00 3a90 	vmov	s1, r3
 800e820:	e7cf      	b.n	800e7c2 <scalbnf+0x1e>
 800e822:	f113 0f16 	cmn.w	r3, #22
 800e826:	da06      	bge.n	800e836 <scalbnf+0x92>
 800e828:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e82c:	4298      	cmp	r0, r3
 800e82e:	dcdf      	bgt.n	800e7f0 <scalbnf+0x4c>
 800e830:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800e85c <scalbnf+0xb8>
 800e834:	e7de      	b.n	800e7f4 <scalbnf+0x50>
 800e836:	3319      	adds	r3, #25
 800e838:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800e83c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800e840:	eddf 7a07 	vldr	s15, [pc, #28]	; 800e860 <scalbnf+0xbc>
 800e844:	ee07 3a10 	vmov	s14, r3
 800e848:	ee67 0a27 	vmul.f32	s1, s14, s15
 800e84c:	e7b9      	b.n	800e7c2 <scalbnf+0x1e>
 800e84e:	bf00      	nop
 800e850:	ffff3cb0 	.word	0xffff3cb0
 800e854:	4c000000 	.word	0x4c000000
 800e858:	7149f2ca 	.word	0x7149f2ca
 800e85c:	0da24260 	.word	0x0da24260
 800e860:	33000000 	.word	0x33000000

0800e864 <copysignf>:
 800e864:	ee10 3a10 	vmov	r3, s0
 800e868:	ee10 2a90 	vmov	r2, s1
 800e86c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e870:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800e874:	4313      	orrs	r3, r2
 800e876:	ee00 3a10 	vmov	s0, r3
 800e87a:	4770      	bx	lr

0800e87c <_init>:
 800e87c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e87e:	bf00      	nop
 800e880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e882:	bc08      	pop	{r3}
 800e884:	469e      	mov	lr, r3
 800e886:	4770      	bx	lr

0800e888 <_fini>:
 800e888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e88a:	bf00      	nop
 800e88c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e88e:	bc08      	pop	{r3}
 800e890:	469e      	mov	lr, r3
 800e892:	4770      	bx	lr
