
stm32f446_hal_nand_application_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0fc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000478  0800a2d0  0800a2d0  0001a2d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a748  0800a748  00020730  2**0
                  CONTENTS
  4 .ARM          00000008  0800a748  0800a748  0001a748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a750  0800a750  00020730  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a750  0800a750  0001a750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a754  0800a754  0001a754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000730  20000000  0800a758  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000730  0800ae88  00020730  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000083c  0800ae88  0002083c  2**0
                  ALLOC
 11 .ARM.attributes 00000034  00000000  00000000  00020730  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000acb8  00000000  00000000  00020764  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e8f  00000000  00000000  0002b41c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007d0  00000000  00000000  0002d2b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006b8  00000000  00000000  0002da80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022dd1  00000000  00000000  0002e138  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008b9c  00000000  00000000  00050f09  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d06ae  00000000  00000000  00059aa5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      00001b20  00000000  00000000  0012a153  2**0
                  CONTENTS, READONLY
 20 .iar.rtmodel  0000017e  00000000  00000000  0012bc73  2**0
                  CONTENTS, READONLY
 21 .iar_vfe_header 0000001c  00000000  00000000  0012bdf4  2**2
                  CONTENTS, READONLY
 22 .debug_frame  00005b08  00000000  00000000  0012be10  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000730 	.word	0x20000730
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a2b4 	.word	0x0800a2b4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000734 	.word	0x20000734
 800020c:	0800a2b4 	.word	0x0800a2b4

08000210 <_ai_platform_get_io_buffers>:
 8000210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000214:	b081      	sub	sp, #4
 8000216:	468b      	mov	fp, r1
 8000218:	6801      	ldr	r1, [r0, #0]
 800021a:	680f      	ldr	r7, [r1, #0]
 800021c:	8901      	ldrh	r1, [r0, #8]
 800021e:	2600      	movs	r6, #0
 8000220:	46b0      	mov	r8, r6
 8000222:	f04f 0904 	mov.w	r9, #4
 8000226:	46b2      	mov	sl, r6
 8000228:	b339      	cbz	r1, 800027a <_ai_platform_get_io_buffers+0x6a>
 800022a:	4604      	mov	r4, r0
 800022c:	6860      	ldr	r0, [r4, #4]
 800022e:	683a      	ldr	r2, [r7, #0]
 8000230:	6841      	ldr	r1, [r0, #4]
 8000232:	6810      	ldr	r0, [r2, #0]
 8000234:	eb01 050a 	add.w	r5, r1, sl
 8000238:	f003 f9ae 	bl	8003598 <ai_array_to_buffer_fmt>
 800023c:	6028      	str	r0, [r5, #0]
 800023e:	2101      	movs	r1, #1
 8000240:	80a9      	strh	r1, [r5, #4]
 8000242:	1c76      	adds	r6, r6, #1
 8000244:	6938      	ldr	r0, [r7, #16]
 8000246:	80e8      	strh	r0, [r5, #6]
 8000248:	f108 0801 	add.w	r8, r8, #1
 800024c:	68f9      	ldr	r1, [r7, #12]
 800024e:	8129      	strh	r1, [r5, #8]
 8000250:	f10a 0a14 	add.w	sl, sl, #20
 8000254:	68b8      	ldr	r0, [r7, #8]
 8000256:	60e8      	str	r0, [r5, #12]
 8000258:	6839      	ldr	r1, [r7, #0]
 800025a:	6888      	ldr	r0, [r1, #8]
 800025c:	6128      	str	r0, [r5, #16]
 800025e:	6820      	ldr	r0, [r4, #0]
 8000260:	f850 7009 	ldr.w	r7, [r0, r9]
 8000264:	8920      	ldrh	r0, [r4, #8]
 8000266:	4580      	cmp	r8, r0
 8000268:	f109 0904 	add.w	r9, r9, #4
 800026c:	d3de      	bcc.n	800022c <_ai_platform_get_io_buffers+0x1c>
 800026e:	b2b0      	uxth	r0, r6
 8000270:	b118      	cbz	r0, 800027a <_ai_platform_get_io_buffers+0x6a>
 8000272:	6860      	ldr	r0, [r4, #4]
 8000274:	6841      	ldr	r1, [r0, #4]
 8000276:	f8cb 1000 	str.w	r1, [fp]
 800027a:	b2b0      	uxth	r0, r6
 800027c:	b001      	add	sp, #4
 800027e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000282 <_platform_network_state_setup>:
 8000282:	b430      	push	{r4, r5}
 8000284:	6914      	ldr	r4, [r2, #16]
 8000286:	6a13      	ldr	r3, [r2, #32]
 8000288:	435c      	muls	r4, r3
 800028a:	6084      	str	r4, [r0, #8]
 800028c:	888d      	ldrh	r5, [r1, #4]
 800028e:	436c      	muls	r4, r5
 8000290:	60c4      	str	r4, [r0, #12]
 8000292:	6909      	ldr	r1, [r1, #16]
 8000294:	68c3      	ldr	r3, [r0, #12]
 8000296:	6041      	str	r1, [r0, #4]
 8000298:	4419      	add	r1, r3
 800029a:	6001      	str	r1, [r0, #0]
 800029c:	6812      	ldr	r2, [r2, #0]
 800029e:	6814      	ldr	r4, [r2, #0]
 80002a0:	00a1      	lsls	r1, r4, #2
 80002a2:	d407      	bmi.n	80002b4 <_platform_network_state_setup+0x32>
 80002a4:	6894      	ldr	r4, [r2, #8]
 80002a6:	68d1      	ldr	r1, [r2, #12]
 80002a8:	6843      	ldr	r3, [r0, #4]
 80002aa:	1a64      	subs	r4, r4, r1
 80002ac:	1919      	adds	r1, r3, r4
 80002ae:	6091      	str	r1, [r2, #8]
 80002b0:	6840      	ldr	r0, [r0, #4]
 80002b2:	60d0      	str	r0, [r2, #12]
 80002b4:	bc30      	pop	{r4, r5}
 80002b6:	4770      	bx	lr

080002b8 <_platform_network_state_update_input>:
 80002b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80002bc:	4605      	mov	r5, r0
 80002be:	2600      	movs	r6, #0
 80002c0:	6828      	ldr	r0, [r5, #0]
 80002c2:	6801      	ldr	r1, [r0, #0]
 80002c4:	8928      	ldrh	r0, [r5, #8]
 80002c6:	2704      	movs	r7, #4
 80002c8:	46b0      	mov	r8, r6
 80002ca:	b338      	cbz	r0, 800031c <_platform_network_state_update_input+0x64>
 80002cc:	6868      	ldr	r0, [r5, #4]
 80002ce:	6802      	ldr	r2, [r0, #0]
 80002d0:	eb02 0408 	add.w	r4, r2, r8
 80002d4:	680a      	ldr	r2, [r1, #0]
 80002d6:	6813      	ldr	r3, [r2, #0]
 80002d8:	6890      	ldr	r0, [r2, #8]
 80002da:	6861      	ldr	r1, [r4, #4]
 80002dc:	009b      	lsls	r3, r3, #2
 80002de:	d503      	bpl.n	80002e8 <_platform_network_state_update_input+0x30>
 80002e0:	68a2      	ldr	r2, [r4, #8]
 80002e2:	f006 fddb 	bl	8006e9c <__aeabi_memcpy>
 80002e6:	e005      	b.n	80002f4 <_platform_network_state_update_input+0x3c>
 80002e8:	68d3      	ldr	r3, [r2, #12]
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	180b      	adds	r3, r1, r0
 80002ee:	6093      	str	r3, [r2, #8]
 80002f0:	6860      	ldr	r0, [r4, #4]
 80002f2:	60d0      	str	r0, [r2, #12]
 80002f4:	6860      	ldr	r0, [r4, #4]
 80002f6:	68a1      	ldr	r1, [r4, #8]
 80002f8:	4408      	add	r0, r1
 80002fa:	6821      	ldr	r1, [r4, #0]
 80002fc:	6060      	str	r0, [r4, #4]
 80002fe:	4288      	cmp	r0, r1
 8000300:	d302      	bcc.n	8000308 <_platform_network_state_update_input+0x50>
 8000302:	68e0      	ldr	r0, [r4, #12]
 8000304:	4240      	negs	r0, r0
 8000306:	4408      	add	r0, r1
 8000308:	6060      	str	r0, [r4, #4]
 800030a:	1c76      	adds	r6, r6, #1
 800030c:	6828      	ldr	r0, [r5, #0]
 800030e:	59c1      	ldr	r1, [r0, r7]
 8000310:	8928      	ldrh	r0, [r5, #8]
 8000312:	1d3f      	adds	r7, r7, #4
 8000314:	4286      	cmp	r6, r0
 8000316:	f108 0810 	add.w	r8, r8, #16
 800031a:	d3d7      	bcc.n	80002cc <_platform_network_state_update_input+0x14>
 800031c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000320 <_platform_network_state_update_output>:
 8000320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000324:	4605      	mov	r5, r0
 8000326:	2600      	movs	r6, #0
 8000328:	6828      	ldr	r0, [r5, #0]
 800032a:	6801      	ldr	r1, [r0, #0]
 800032c:	8928      	ldrh	r0, [r5, #8]
 800032e:	2704      	movs	r7, #4
 8000330:	46b0      	mov	r8, r6
 8000332:	b388      	cbz	r0, 8000398 <_platform_network_state_update_output+0x78>
 8000334:	6868      	ldr	r0, [r5, #4]
 8000336:	6809      	ldr	r1, [r1, #0]
 8000338:	6802      	ldr	r2, [r0, #0]
 800033a:	680b      	ldr	r3, [r1, #0]
 800033c:	eb02 0408 	add.w	r4, r2, r8
 8000340:	009b      	lsls	r3, r3, #2
 8000342:	6860      	ldr	r0, [r4, #4]
 8000344:	68a2      	ldr	r2, [r4, #8]
 8000346:	d50e      	bpl.n	8000366 <_platform_network_state_update_output+0x46>
 8000348:	6889      	ldr	r1, [r1, #8]
 800034a:	f006 fda7 	bl	8006e9c <__aeabi_memcpy>
 800034e:	6862      	ldr	r2, [r4, #4]
 8000350:	68a0      	ldr	r0, [r4, #8]
 8000352:	6821      	ldr	r1, [r4, #0]
 8000354:	4410      	add	r0, r2
 8000356:	4288      	cmp	r0, r1
 8000358:	6060      	str	r0, [r4, #4]
 800035a:	d302      	bcc.n	8000362 <_platform_network_state_update_output+0x42>
 800035c:	68e0      	ldr	r0, [r4, #12]
 800035e:	4240      	negs	r0, r0
 8000360:	4408      	add	r0, r1
 8000362:	6060      	str	r0, [r4, #4]
 8000364:	e00f      	b.n	8000386 <_platform_network_state_update_output+0x66>
 8000366:	4410      	add	r0, r2
 8000368:	6822      	ldr	r2, [r4, #0]
 800036a:	6060      	str	r0, [r4, #4]
 800036c:	4290      	cmp	r0, r2
 800036e:	d302      	bcc.n	8000376 <_platform_network_state_update_output+0x56>
 8000370:	68e0      	ldr	r0, [r4, #12]
 8000372:	4240      	negs	r0, r0
 8000374:	4410      	add	r0, r2
 8000376:	6060      	str	r0, [r4, #4]
 8000378:	688a      	ldr	r2, [r1, #8]
 800037a:	68cb      	ldr	r3, [r1, #12]
 800037c:	1ad2      	subs	r2, r2, r3
 800037e:	4410      	add	r0, r2
 8000380:	6088      	str	r0, [r1, #8]
 8000382:	6862      	ldr	r2, [r4, #4]
 8000384:	60ca      	str	r2, [r1, #12]
 8000386:	1c76      	adds	r6, r6, #1
 8000388:	6828      	ldr	r0, [r5, #0]
 800038a:	59c1      	ldr	r1, [r0, r7]
 800038c:	8928      	ldrh	r0, [r5, #8]
 800038e:	1d3f      	adds	r7, r7, #4
 8000390:	4286      	cmp	r6, r0
 8000392:	f108 0810 	add.w	r8, r8, #16
 8000396:	d3cd      	bcc.n	8000334 <_platform_network_state_update_output+0x14>
 8000398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800039c <_platform_network_io_bind>:
 800039c:	2800      	cmp	r0, #0
 800039e:	d100      	bne.n	80003a2 <_platform_network_io_bind+0x6>
 80003a0:	4770      	bx	lr
 80003a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003a6:	b081      	sub	sp, #4
 80003a8:	2300      	movs	r3, #0
 80003aa:	b405      	push	{r0, r2}
 80003ac:	b081      	sub	sp, #4
 80003ae:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80003b0:	8243      	strh	r3, [r0, #18]
 80003b2:	9801      	ldr	r0, [sp, #4]
 80003b4:	8203      	strh	r3, [r0, #16]
 80003b6:	9b01      	ldr	r3, [sp, #4]
 80003b8:	7a18      	ldrb	r0, [r3, #8]
 80003ba:	f000 0003 	and.w	r0, r0, #3
 80003be:	2803      	cmp	r0, #3
 80003c0:	d004      	beq.n	80003cc <_platform_network_io_bind+0x30>
 80003c2:	2230      	movs	r2, #48	; 0x30
 80003c4:	2111      	movs	r1, #17
 80003c6:	f103 000c 	add.w	r0, r3, #12
 80003ca:	e0ce      	b.n	800056a <_platform_network_io_bind+0x1ce>
 80003cc:	2900      	cmp	r1, #0
 80003ce:	bf1c      	itt	ne
 80003d0:	8910      	ldrhne	r0, [r2, #8]
 80003d2:	2800      	cmpne	r0, #0
 80003d4:	f000 80c3 	beq.w	800055e <_platform_network_io_bind+0x1c2>
 80003d8:	6810      	ldr	r0, [r2, #0]
 80003da:	f8b1 a004 	ldrh.w	sl, [r1, #4]
 80003de:	6804      	ldr	r4, [r0, #0]
 80003e0:	9200      	str	r2, [sp, #0]
 80003e2:	2700      	movs	r7, #0
 80003e4:	2504      	movs	r5, #4
 80003e6:	46b9      	mov	r9, r7
 80003e8:	1d0e      	adds	r6, r1, #4
 80003ea:	9800      	ldr	r0, [sp, #0]
 80003ec:	8901      	ldrh	r1, [r0, #8]
 80003ee:	428f      	cmp	r7, r1
 80003f0:	f080 80b1 	bcs.w	8000556 <_platform_network_io_bind+0x1ba>
 80003f4:	6841      	ldr	r1, [r0, #4]
 80003f6:	680a      	ldr	r2, [r1, #0]
 80003f8:	eb02 0809 	add.w	r8, r2, r9
 80003fc:	2c00      	cmp	r4, #0
 80003fe:	bf18      	it	ne
 8000400:	f1b8 0f00 	cmpne.w	r8, #0
 8000404:	f000 80ab 	beq.w	800055e <_platform_network_io_bind+0x1c2>
 8000408:	6820      	ldr	r0, [r4, #0]
 800040a:	8873      	ldrh	r3, [r6, #2]
 800040c:	f8b6 c004 	ldrh.w	ip, [r6, #4]
 8000410:	68b2      	ldr	r2, [r6, #8]
 8000412:	6841      	ldr	r1, [r0, #4]
 8000414:	fb03 fe0c 	mul.w	lr, r3, ip
 8000418:	fb02 fe0e 	mul.w	lr, r2, lr
 800041c:	4571      	cmp	r1, lr
 800041e:	f0c0 80a0 	bcc.w	8000562 <_platform_network_io_bind+0x1c6>
 8000422:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8000426:	459e      	cmp	lr, r3
 8000428:	bf04      	itt	eq
 800042a:	68e3      	ldreq	r3, [r4, #12]
 800042c:	4563      	cmpeq	r3, ip
 800042e:	bf04      	itt	eq
 8000430:	68a3      	ldreq	r3, [r4, #8]
 8000432:	4293      	cmpeq	r3, r2
 8000434:	f040 8095 	bne.w	8000562 <_platform_network_io_bind+0x1c6>
 8000438:	6800      	ldr	r0, [r0, #0]
 800043a:	f003 f985 	bl	8003748 <ai_array_get_byte_size>
 800043e:	6921      	ldr	r1, [r4, #16]
 8000440:	6a22      	ldr	r2, [r4, #32]
 8000442:	4351      	muls	r1, r2
 8000444:	4288      	cmp	r0, r1
 8000446:	f0c0 808c 	bcc.w	8000562 <_platform_network_io_bind+0x1c6>
 800044a:	6820      	ldr	r0, [r4, #0]
 800044c:	6800      	ldr	r0, [r0, #0]
 800044e:	f003 f8a3 	bl	8003598 <ai_array_to_buffer_fmt>
 8000452:	f856 1c04 	ldr.w	r1, [r6, #-4]
 8000456:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 800045a:	f021 417e 	bic.w	r1, r1, #4261412864	; 0xfe000000
 800045e:	4288      	cmp	r0, r1
 8000460:	d115      	bne.n	800048e <_platform_network_io_bind+0xf2>
 8000462:	68f0      	ldr	r0, [r6, #12]
 8000464:	2800      	cmp	r0, #0
 8000466:	d07a      	beq.n	800055e <_platform_network_io_bind+0x1c2>
 8000468:	8830      	ldrh	r0, [r6, #0]
 800046a:	b190      	cbz	r0, 8000492 <_platform_network_io_bind+0xf6>
 800046c:	4550      	cmp	r0, sl
 800046e:	bf28      	it	cs
 8000470:	4682      	movcs	sl, r0
 8000472:	4622      	mov	r2, r4
 8000474:	1f31      	subs	r1, r6, #4
 8000476:	4640      	mov	r0, r8
 8000478:	f7ff ff03 	bl	8000282 <_platform_network_state_setup>
 800047c:	9800      	ldr	r0, [sp, #0]
 800047e:	6801      	ldr	r1, [r0, #0]
 8000480:	594c      	ldr	r4, [r1, r5]
 8000482:	1c7f      	adds	r7, r7, #1
 8000484:	3614      	adds	r6, #20
 8000486:	f109 0910 	add.w	r9, r9, #16
 800048a:	1d2d      	adds	r5, r5, #4
 800048c:	e7ad      	b.n	80003ea <_platform_network_io_bind+0x4e>
 800048e:	2219      	movs	r2, #25
 8000490:	e068      	b.n	8000564 <_platform_network_io_bind+0x1c8>
 8000492:	2221      	movs	r2, #33	; 0x21
 8000494:	e066      	b.n	8000564 <_platform_network_io_bind+0x1c8>
 8000496:	9901      	ldr	r1, [sp, #4]
 8000498:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800049a:	320c      	adds	r2, #12
 800049c:	8911      	ldrh	r1, [r2, #8]
 800049e:	2900      	cmp	r1, #0
 80004a0:	d073      	beq.n	800058a <_platform_network_io_bind+0x1ee>
 80004a2:	6813      	ldr	r3, [r2, #0]
 80004a4:	681c      	ldr	r4, [r3, #0]
 80004a6:	9200      	str	r2, [sp, #0]
 80004a8:	2700      	movs	r7, #0
 80004aa:	2504      	movs	r5, #4
 80004ac:	46b9      	mov	r9, r7
 80004ae:	1d06      	adds	r6, r0, #4
 80004b0:	9800      	ldr	r0, [sp, #0]
 80004b2:	8901      	ldrh	r1, [r0, #8]
 80004b4:	428f      	cmp	r7, r1
 80004b6:	d25e      	bcs.n	8000576 <_platform_network_io_bind+0x1da>
 80004b8:	6841      	ldr	r1, [r0, #4]
 80004ba:	680a      	ldr	r2, [r1, #0]
 80004bc:	eb02 0809 	add.w	r8, r2, r9
 80004c0:	2c00      	cmp	r4, #0
 80004c2:	bf18      	it	ne
 80004c4:	f1b8 0f00 	cmpne.w	r8, #0
 80004c8:	d05c      	beq.n	8000584 <_platform_network_io_bind+0x1e8>
 80004ca:	6820      	ldr	r0, [r4, #0]
 80004cc:	8873      	ldrh	r3, [r6, #2]
 80004ce:	f8b6 c004 	ldrh.w	ip, [r6, #4]
 80004d2:	68b2      	ldr	r2, [r6, #8]
 80004d4:	6841      	ldr	r1, [r0, #4]
 80004d6:	fb03 fe0c 	mul.w	lr, r3, ip
 80004da:	fb02 fe0e 	mul.w	lr, r2, lr
 80004de:	4571      	cmp	r1, lr
 80004e0:	d353      	bcc.n	800058a <_platform_network_io_bind+0x1ee>
 80004e2:	f8d4 e010 	ldr.w	lr, [r4, #16]
 80004e6:	459e      	cmp	lr, r3
 80004e8:	bf04      	itt	eq
 80004ea:	68e3      	ldreq	r3, [r4, #12]
 80004ec:	4563      	cmpeq	r3, ip
 80004ee:	bf04      	itt	eq
 80004f0:	68a3      	ldreq	r3, [r4, #8]
 80004f2:	4293      	cmpeq	r3, r2
 80004f4:	d149      	bne.n	800058a <_platform_network_io_bind+0x1ee>
 80004f6:	6800      	ldr	r0, [r0, #0]
 80004f8:	f003 f926 	bl	8003748 <ai_array_get_byte_size>
 80004fc:	6921      	ldr	r1, [r4, #16]
 80004fe:	6a22      	ldr	r2, [r4, #32]
 8000500:	4351      	muls	r1, r2
 8000502:	4288      	cmp	r0, r1
 8000504:	d341      	bcc.n	800058a <_platform_network_io_bind+0x1ee>
 8000506:	6820      	ldr	r0, [r4, #0]
 8000508:	6800      	ldr	r0, [r0, #0]
 800050a:	f003 f845 	bl	8003598 <ai_array_to_buffer_fmt>
 800050e:	f856 1c04 	ldr.w	r1, [r6, #-4]
 8000512:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8000516:	f021 417e 	bic.w	r1, r1, #4261412864	; 0xfe000000
 800051a:	4288      	cmp	r0, r1
 800051c:	d115      	bne.n	800054a <_platform_network_io_bind+0x1ae>
 800051e:	68f0      	ldr	r0, [r6, #12]
 8000520:	2800      	cmp	r0, #0
 8000522:	d02f      	beq.n	8000584 <_platform_network_io_bind+0x1e8>
 8000524:	8830      	ldrh	r0, [r6, #0]
 8000526:	b198      	cbz	r0, 8000550 <_platform_network_io_bind+0x1b4>
 8000528:	4550      	cmp	r0, sl
 800052a:	bf28      	it	cs
 800052c:	4682      	movcs	sl, r0
 800052e:	4622      	mov	r2, r4
 8000530:	1f31      	subs	r1, r6, #4
 8000532:	4640      	mov	r0, r8
 8000534:	f7ff fea5 	bl	8000282 <_platform_network_state_setup>
 8000538:	9800      	ldr	r0, [sp, #0]
 800053a:	6801      	ldr	r1, [r0, #0]
 800053c:	594c      	ldr	r4, [r1, r5]
 800053e:	1c7f      	adds	r7, r7, #1
 8000540:	3614      	adds	r6, #20
 8000542:	f109 0910 	add.w	r9, r9, #16
 8000546:	1d2d      	adds	r5, r5, #4
 8000548:	e7b2      	b.n	80004b0 <_platform_network_io_bind+0x114>
 800054a:	2219      	movs	r2, #25
 800054c:	2113      	movs	r1, #19
 800054e:	e00a      	b.n	8000566 <_platform_network_io_bind+0x1ca>
 8000550:	2221      	movs	r2, #33	; 0x21
 8000552:	2113      	movs	r1, #19
 8000554:	e007      	b.n	8000566 <_platform_network_io_bind+0x1ca>
 8000556:	9802      	ldr	r0, [sp, #8]
 8000558:	2800      	cmp	r0, #0
 800055a:	d19c      	bne.n	8000496 <_platform_network_io_bind+0xfa>
 800055c:	e00e      	b.n	800057c <_platform_network_io_bind+0x1e0>
 800055e:	2217      	movs	r2, #23
 8000560:	e000      	b.n	8000564 <_platform_network_io_bind+0x1c8>
 8000562:	2218      	movs	r2, #24
 8000564:	2112      	movs	r1, #18
 8000566:	9801      	ldr	r0, [sp, #4]
 8000568:	300c      	adds	r0, #12
 800056a:	f000 fa8e 	bl	8000a8a <core_set_error>
 800056e:	2000      	movs	r0, #0
 8000570:	b004      	add	sp, #16
 8000572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000576:	9801      	ldr	r0, [sp, #4]
 8000578:	f8a0 a010 	strh.w	sl, [r0, #16]
 800057c:	2001      	movs	r0, #1
 800057e:	b004      	add	sp, #16
 8000580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000584:	2217      	movs	r2, #23
 8000586:	2113      	movs	r1, #19
 8000588:	e7ed      	b.n	8000566 <_platform_network_io_bind+0x1ca>
 800058a:	2218      	movs	r2, #24
 800058c:	2113      	movs	r1, #19
 800058e:	e7ea      	b.n	8000566 <_platform_network_io_bind+0x1ca>

08000590 <ai_platform_runtime_get_revision>:
 8000590:	f8df 04a8 	ldr.w	r0, [pc, #1192]	; 8000a3c <.text_21>
 8000594:	6801      	ldr	r1, [r0, #0]
 8000596:	0849      	lsrs	r1, r1, #1
 8000598:	0049      	lsls	r1, r1, #1
 800059a:	6001      	str	r1, [r0, #0]
 800059c:	2001      	movs	r0, #1
 800059e:	f8df 14a0 	ldr.w	r1, [pc, #1184]	; 8000a40 <.text_22>
 80005a2:	6088      	str	r0, [r1, #8]
 80005a4:	6888      	ldr	r0, [r1, #8]
 80005a6:	2800      	cmp	r0, #0
 80005a8:	d1fc      	bne.n	80005a4 <ai_platform_runtime_get_revision+0x14>
 80005aa:	f8df 2498 	ldr.w	r2, [pc, #1176]	; 8000a44 <.text_23>
 80005ae:	600a      	str	r2, [r1, #0]
 80005b0:	6808      	ldr	r0, [r1, #0]
 80005b2:	f8df 1494 	ldr.w	r1, [pc, #1172]	; 8000a48 <.text_24>
 80005b6:	4288      	cmp	r0, r1
 80005b8:	d000      	beq.n	80005bc <ai_platform_runtime_get_revision+0x2c>
 80005ba:	e7fe      	b.n	80005ba <ai_platform_runtime_get_revision+0x2a>
 80005bc:	a0aa      	add	r0, pc, #680	; (adr r0, 8000868 <.text_16>)
 80005be:	4770      	bx	lr

080005c0 <ai_platform_runtime_get_version>:
 80005c0:	f8df 0478 	ldr.w	r0, [pc, #1144]	; 8000a3c <.text_21>
 80005c4:	6801      	ldr	r1, [r0, #0]
 80005c6:	0849      	lsrs	r1, r1, #1
 80005c8:	0049      	lsls	r1, r1, #1
 80005ca:	6001      	str	r1, [r0, #0]
 80005cc:	2001      	movs	r0, #1
 80005ce:	f8df 1470 	ldr.w	r1, [pc, #1136]	; 8000a40 <.text_22>
 80005d2:	6088      	str	r0, [r1, #8]
 80005d4:	6888      	ldr	r0, [r1, #8]
 80005d6:	2800      	cmp	r0, #0
 80005d8:	d1fc      	bne.n	80005d4 <ai_platform_runtime_get_version+0x14>
 80005da:	f8df 2468 	ldr.w	r2, [pc, #1128]	; 8000a44 <.text_23>
 80005de:	600a      	str	r2, [r1, #0]
 80005e0:	6808      	ldr	r0, [r1, #0]
 80005e2:	f8df 1464 	ldr.w	r1, [pc, #1124]	; 8000a48 <.text_24>
 80005e6:	4288      	cmp	r0, r1
 80005e8:	d000      	beq.n	80005ec <ai_platform_runtime_get_version+0x2c>
 80005ea:	e7fe      	b.n	80005ea <ai_platform_runtime_get_version+0x2a>
 80005ec:	f20f 4264 	addw	r2, pc, #1124	; 0x464
 80005f0:	6810      	ldr	r0, [r2, #0]
 80005f2:	4770      	bx	lr

080005f4 <ai_platform_api_get_version>:
 80005f4:	f8df 0444 	ldr.w	r0, [pc, #1092]	; 8000a3c <.text_21>
 80005f8:	6801      	ldr	r1, [r0, #0]
 80005fa:	0849      	lsrs	r1, r1, #1
 80005fc:	0049      	lsls	r1, r1, #1
 80005fe:	6001      	str	r1, [r0, #0]
 8000600:	2001      	movs	r0, #1
 8000602:	f8df 143c 	ldr.w	r1, [pc, #1084]	; 8000a40 <.text_22>
 8000606:	6088      	str	r0, [r1, #8]
 8000608:	6888      	ldr	r0, [r1, #8]
 800060a:	2800      	cmp	r0, #0
 800060c:	d1fc      	bne.n	8000608 <ai_platform_api_get_version+0x14>
 800060e:	f8df 2434 	ldr.w	r2, [pc, #1076]	; 8000a44 <.text_23>
 8000612:	600a      	str	r2, [r1, #0]
 8000614:	6808      	ldr	r0, [r1, #0]
 8000616:	f8df 1430 	ldr.w	r1, [pc, #1072]	; 8000a48 <.text_24>
 800061a:	4288      	cmp	r0, r1
 800061c:	d000      	beq.n	8000620 <ai_platform_api_get_version+0x2c>
 800061e:	e7fe      	b.n	800061e <ai_platform_api_get_version+0x2a>
 8000620:	f20f 4234 	addw	r2, pc, #1076	; 0x434
 8000624:	6810      	ldr	r0, [r2, #0]
 8000626:	4770      	bx	lr

08000628 <ai_platform_interface_api_get_version>:
 8000628:	f8df 0410 	ldr.w	r0, [pc, #1040]	; 8000a3c <.text_21>
 800062c:	6801      	ldr	r1, [r0, #0]
 800062e:	0849      	lsrs	r1, r1, #1
 8000630:	0049      	lsls	r1, r1, #1
 8000632:	6001      	str	r1, [r0, #0]
 8000634:	2001      	movs	r0, #1
 8000636:	f8df 1408 	ldr.w	r1, [pc, #1032]	; 8000a40 <.text_22>
 800063a:	6088      	str	r0, [r1, #8]
 800063c:	6888      	ldr	r0, [r1, #8]
 800063e:	2800      	cmp	r0, #0
 8000640:	d1fc      	bne.n	800063c <ai_platform_interface_api_get_version+0x14>
 8000642:	f8df 2400 	ldr.w	r2, [pc, #1024]	; 8000a44 <.text_23>
 8000646:	600a      	str	r2, [r1, #0]
 8000648:	6808      	ldr	r0, [r1, #0]
 800064a:	f8df 13fc 	ldr.w	r1, [pc, #1020]	; 8000a48 <.text_24>
 800064e:	4288      	cmp	r0, r1
 8000650:	d000      	beq.n	8000654 <ai_platform_interface_api_get_version+0x2c>
 8000652:	e7fe      	b.n	8000652 <ai_platform_interface_api_get_version+0x2a>
 8000654:	f20f 4204 	addw	r2, pc, #1028	; 0x404
 8000658:	6810      	ldr	r0, [r2, #0]
 800065a:	4770      	bx	lr

0800065c <ai_platform_context_acquire>:
 800065c:	b120      	cbz	r0, 8000668 <ai_platform_context_acquire+0xc>
 800065e:	6801      	ldr	r1, [r0, #0]
 8000660:	f8df 23e8 	ldr.w	r2, [pc, #1000]	; 8000a4c <.text_25>
 8000664:	4291      	cmp	r1, r2
 8000666:	d000      	beq.n	800066a <ai_platform_context_acquire+0xe>
 8000668:	2000      	movs	r0, #0
 800066a:	f8df 13d0 	ldr.w	r1, [pc, #976]	; 8000a3c <.text_21>
 800066e:	680a      	ldr	r2, [r1, #0]
 8000670:	0852      	lsrs	r2, r2, #1
 8000672:	0052      	lsls	r2, r2, #1
 8000674:	600a      	str	r2, [r1, #0]
 8000676:	2101      	movs	r1, #1
 8000678:	f8df 23c4 	ldr.w	r2, [pc, #964]	; 8000a40 <.text_22>
 800067c:	6091      	str	r1, [r2, #8]
 800067e:	6891      	ldr	r1, [r2, #8]
 8000680:	2900      	cmp	r1, #0
 8000682:	d1fc      	bne.n	800067e <ai_platform_context_acquire+0x22>
 8000684:	f8df 33bc 	ldr.w	r3, [pc, #956]	; 8000a44 <.text_23>
 8000688:	6013      	str	r3, [r2, #0]
 800068a:	6811      	ldr	r1, [r2, #0]
 800068c:	f8df 23b8 	ldr.w	r2, [pc, #952]	; 8000a48 <.text_24>
 8000690:	4291      	cmp	r1, r2
 8000692:	d000      	beq.n	8000696 <ai_platform_context_acquire+0x3a>
 8000694:	e7fe      	b.n	8000694 <ai_platform_context_acquire+0x38>
 8000696:	4770      	bx	lr

08000698 <ai_platform_context_release>:
 8000698:	f8df 13b0 	ldr.w	r1, [pc, #944]	; 8000a4c <.text_25>
 800069c:	6001      	str	r1, [r0, #0]
 800069e:	4770      	bx	lr

080006a0 <ai_platform_network_get_error>:
 80006a0:	b120      	cbz	r0, 80006ac <ai_platform_network_get_error+0xc>
 80006a2:	6801      	ldr	r1, [r0, #0]
 80006a4:	f8df 23a4 	ldr.w	r2, [pc, #932]	; 8000a4c <.text_25>
 80006a8:	4291      	cmp	r1, r2
 80006aa:	d000      	beq.n	80006ae <ai_platform_network_get_error+0xe>
 80006ac:	2000      	movs	r0, #0
 80006ae:	f8df 138c 	ldr.w	r1, [pc, #908]	; 8000a3c <.text_21>
 80006b2:	680a      	ldr	r2, [r1, #0]
 80006b4:	0852      	lsrs	r2, r2, #1
 80006b6:	0052      	lsls	r2, r2, #1
 80006b8:	600a      	str	r2, [r1, #0]
 80006ba:	2101      	movs	r1, #1
 80006bc:	f8df 2380 	ldr.w	r2, [pc, #896]	; 8000a40 <.text_22>
 80006c0:	6091      	str	r1, [r2, #8]
 80006c2:	6891      	ldr	r1, [r2, #8]
 80006c4:	2900      	cmp	r1, #0
 80006c6:	d1fc      	bne.n	80006c2 <ai_platform_network_get_error+0x22>
 80006c8:	f8df 3378 	ldr.w	r3, [pc, #888]	; 8000a44 <.text_23>
 80006cc:	6013      	str	r3, [r2, #0]
 80006ce:	6811      	ldr	r1, [r2, #0]
 80006d0:	f8df 2374 	ldr.w	r2, [pc, #884]	; 8000a48 <.text_24>
 80006d4:	4291      	cmp	r1, r2
 80006d6:	d000      	beq.n	80006da <ai_platform_network_get_error+0x3a>
 80006d8:	e7fe      	b.n	80006d8 <ai_platform_network_get_error+0x38>
 80006da:	2800      	cmp	r0, #0
 80006dc:	bf1c      	itt	ne
 80006de:	300c      	addne	r0, #12
 80006e0:	f000 b9ce 	bne.w	8000a80 <core_get_error>
 80006e4:	f20f 3088 	addw	r0, pc, #904	; 0x388
 80006e8:	6800      	ldr	r0, [r0, #0]
 80006ea:	4770      	bx	lr

080006ec <ai_platform_network_set_error>:
 80006ec:	2800      	cmp	r0, #0
 80006ee:	bf1c      	itt	ne
 80006f0:	300c      	addne	r0, #12
 80006f2:	f000 b9ca 	bne.w	8000a8a <core_set_error>
 80006f6:	4770      	bx	lr

080006f8 <ai_platform_api_get_network_report>:
 80006f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006fc:	ea5f 0900 	movs.w	r9, r0
 8000700:	b081      	sub	sp, #4
 8000702:	460c      	mov	r4, r1
 8000704:	d005      	beq.n	8000712 <ai_platform_api_get_network_report+0x1a>
 8000706:	f8d9 0000 	ldr.w	r0, [r9]
 800070a:	f8df 1340 	ldr.w	r1, [pc, #832]	; 8000a4c <.text_25>
 800070e:	4288      	cmp	r0, r1
 8000710:	d001      	beq.n	8000716 <ai_platform_api_get_network_report+0x1e>
 8000712:	f04f 0900 	mov.w	r9, #0
 8000716:	f8df 5324 	ldr.w	r5, [pc, #804]	; 8000a3c <.text_21>
 800071a:	f8df 6324 	ldr.w	r6, [pc, #804]	; 8000a40 <.text_22>
 800071e:	6828      	ldr	r0, [r5, #0]
 8000720:	0840      	lsrs	r0, r0, #1
 8000722:	0040      	lsls	r0, r0, #1
 8000724:	6028      	str	r0, [r5, #0]
 8000726:	2101      	movs	r1, #1
 8000728:	60b1      	str	r1, [r6, #8]
 800072a:	68b0      	ldr	r0, [r6, #8]
 800072c:	2800      	cmp	r0, #0
 800072e:	d1fc      	bne.n	800072a <ai_platform_api_get_network_report+0x32>
 8000730:	f8df 7310 	ldr.w	r7, [pc, #784]	; 8000a44 <.text_23>
 8000734:	f8df 8310 	ldr.w	r8, [pc, #784]	; 8000a48 <.text_24>
 8000738:	6037      	str	r7, [r6, #0]
 800073a:	6830      	ldr	r0, [r6, #0]
 800073c:	4540      	cmp	r0, r8
 800073e:	d000      	beq.n	8000742 <ai_platform_api_get_network_report+0x4a>
 8000740:	e7fe      	b.n	8000740 <ai_platform_api_get_network_report+0x48>
 8000742:	f1b9 0f00 	cmp.w	r9, #0
 8000746:	bf18      	it	ne
 8000748:	2c00      	cmpne	r4, #0
 800074a:	f000 8088 	beq.w	800085e <ai_platform_api_get_network_report+0x166>
 800074e:	2000      	movs	r0, #0
 8000750:	6660      	str	r0, [r4, #100]	; 0x64
 8000752:	f8d9 2044 	ldr.w	r2, [r9, #68]	; 0x44
 8000756:	2a00      	cmp	r2, #0
 8000758:	f000 807b 	beq.w	8000852 <ai_platform_api_get_network_report+0x15a>
 800075c:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800075e:	1c49      	adds	r1, r1, #1
 8000760:	6661      	str	r1, [r4, #100]	; 0x64
 8000762:	6890      	ldr	r0, [r2, #8]
 8000764:	4282      	cmp	r2, r0
 8000766:	bf1c      	itt	ne
 8000768:	2800      	cmpne	r0, #0
 800076a:	4602      	movne	r2, r0
 800076c:	d1f6      	bne.n	800075c <ai_platform_api_get_network_report+0x64>
 800076e:	e06e      	b.n	800084e <ai_platform_api_get_network_report+0x156>
 8000770:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
 8000774:	f104 0134 	add.w	r1, r4, #52	; 0x34
 8000778:	f7ff fd4a 	bl	8000210 <_ai_platform_get_io_buffers>
 800077c:	8620      	strh	r0, [r4, #48]	; 0x30
 800077e:	b910      	cbnz	r0, 8000786 <ai_platform_api_get_network_report+0x8e>
 8000780:	2218      	movs	r2, #24
 8000782:	2112      	movs	r1, #18
 8000784:	e067      	b.n	8000856 <ai_platform_api_get_network_report+0x15e>
 8000786:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
 800078a:	f104 0138 	add.w	r1, r4, #56	; 0x38
 800078e:	300c      	adds	r0, #12
 8000790:	f7ff fd3e 	bl	8000210 <_ai_platform_get_io_buffers>
 8000794:	8660      	strh	r0, [r4, #50]	; 0x32
 8000796:	b910      	cbnz	r0, 800079e <ai_platform_api_get_network_report+0xa6>
 8000798:	2218      	movs	r2, #24
 800079a:	2113      	movs	r1, #19
 800079c:	e05b      	b.n	8000856 <ai_platform_api_get_network_report+0x15e>
 800079e:	f8d9 0004 	ldr.w	r0, [r9, #4]
 80007a2:	66a0      	str	r0, [r4, #104]	; 0x68
 80007a4:	f109 0228 	add.w	r2, r9, #40	; 0x28
 80007a8:	e892 5c08 	ldmia.w	r2, {r3, sl, fp, ip, lr}
 80007ac:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 80007b0:	f109 0914 	add.w	r9, r9, #20
 80007b4:	e881 5c08 	stmia.w	r1, {r3, sl, fp, ip, lr}
 80007b8:	e899 500e 	ldmia.w	r9, {r1, r2, r3, ip, lr}
 80007bc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80007c0:	e880 500e 	stmia.w	r0, {r1, r2, r3, ip, lr}
 80007c4:	6828      	ldr	r0, [r5, #0]
 80007c6:	0840      	lsrs	r0, r0, #1
 80007c8:	0040      	lsls	r0, r0, #1
 80007ca:	6028      	str	r0, [r5, #0]
 80007cc:	2301      	movs	r3, #1
 80007ce:	60b3      	str	r3, [r6, #8]
 80007d0:	68b0      	ldr	r0, [r6, #8]
 80007d2:	2800      	cmp	r0, #0
 80007d4:	d1fc      	bne.n	80007d0 <ai_platform_api_get_network_report+0xd8>
 80007d6:	6037      	str	r7, [r6, #0]
 80007d8:	6831      	ldr	r1, [r6, #0]
 80007da:	4541      	cmp	r1, r8
 80007dc:	d000      	beq.n	80007e0 <ai_platform_api_get_network_report+0xe8>
 80007de:	e7fe      	b.n	80007de <ai_platform_api_get_network_report+0xe6>
 80007e0:	a021      	add	r0, pc, #132	; (adr r0, 8000868 <.text_16>)
 80007e2:	6120      	str	r0, [r4, #16]
 80007e4:	6829      	ldr	r1, [r5, #0]
 80007e6:	0849      	lsrs	r1, r1, #1
 80007e8:	0049      	lsls	r1, r1, #1
 80007ea:	6029      	str	r1, [r5, #0]
 80007ec:	60b3      	str	r3, [r6, #8]
 80007ee:	68b0      	ldr	r0, [r6, #8]
 80007f0:	2800      	cmp	r0, #0
 80007f2:	d1fc      	bne.n	80007ee <ai_platform_api_get_network_report+0xf6>
 80007f4:	6037      	str	r7, [r6, #0]
 80007f6:	6831      	ldr	r1, [r6, #0]
 80007f8:	4541      	cmp	r1, r8
 80007fa:	d000      	beq.n	80007fe <ai_platform_api_get_network_report+0x106>
 80007fc:	e7fe      	b.n	80007fc <ai_platform_api_get_network_report+0x104>
 80007fe:	f20f 2054 	addw	r0, pc, #596	; 0x254
 8000802:	6802      	ldr	r2, [r0, #0]
 8000804:	6162      	str	r2, [r4, #20]
 8000806:	6829      	ldr	r1, [r5, #0]
 8000808:	0849      	lsrs	r1, r1, #1
 800080a:	0049      	lsls	r1, r1, #1
 800080c:	6029      	str	r1, [r5, #0]
 800080e:	60b3      	str	r3, [r6, #8]
 8000810:	68b0      	ldr	r0, [r6, #8]
 8000812:	2800      	cmp	r0, #0
 8000814:	d1fc      	bne.n	8000810 <ai_platform_api_get_network_report+0x118>
 8000816:	6037      	str	r7, [r6, #0]
 8000818:	6831      	ldr	r1, [r6, #0]
 800081a:	4541      	cmp	r1, r8
 800081c:	d000      	beq.n	8000820 <ai_platform_api_get_network_report+0x128>
 800081e:	e7fe      	b.n	800081e <ai_platform_api_get_network_report+0x126>
 8000820:	a08d      	add	r0, pc, #564	; (adr r0, 8000a58 <.text_28>)
 8000822:	6802      	ldr	r2, [r0, #0]
 8000824:	6262      	str	r2, [r4, #36]	; 0x24
 8000826:	6829      	ldr	r1, [r5, #0]
 8000828:	0849      	lsrs	r1, r1, #1
 800082a:	0049      	lsls	r1, r1, #1
 800082c:	6029      	str	r1, [r5, #0]
 800082e:	60b3      	str	r3, [r6, #8]
 8000830:	68b0      	ldr	r0, [r6, #8]
 8000832:	2800      	cmp	r0, #0
 8000834:	d1fc      	bne.n	8000830 <ai_platform_api_get_network_report+0x138>
 8000836:	6037      	str	r7, [r6, #0]
 8000838:	6831      	ldr	r1, [r6, #0]
 800083a:	4541      	cmp	r1, r8
 800083c:	d000      	beq.n	8000840 <ai_platform_api_get_network_report+0x148>
 800083e:	e7fe      	b.n	800083e <ai_platform_api_get_network_report+0x146>
 8000840:	a086      	add	r0, pc, #536	; (adr r0, 8000a5c <.text_29>)
 8000842:	6802      	ldr	r2, [r0, #0]
 8000844:	62a2      	str	r2, [r4, #40]	; 0x28
 8000846:	2001      	movs	r0, #1
 8000848:	b001      	add	sp, #4
 800084a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800084e:	2900      	cmp	r1, #0
 8000850:	d18e      	bne.n	8000770 <ai_platform_api_get_network_report+0x78>
 8000852:	2218      	movs	r2, #24
 8000854:	2111      	movs	r1, #17
 8000856:	f109 000c 	add.w	r0, r9, #12
 800085a:	f000 f916 	bl	8000a8a <core_set_error>
 800085e:	2000      	movs	r0, #0
 8000860:	b001      	add	sp, #4
 8000862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08000868 <.text_16>:
 8000868:	00000000 	.word	0x00000000

0800086c <ai_platform_network_create>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	9d04      	ldr	r5, [sp, #16]
 8000870:	4604      	mov	r4, r0
 8000872:	9805      	ldr	r0, [sp, #20]
 8000874:	b2db      	uxtb	r3, r3
 8000876:	042d      	lsls	r5, r5, #16
 8000878:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
 800087c:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
 8000880:	a07c      	add	r0, pc, #496	; (adr r0, 8000a74 <.text_35>)
 8000882:	6806      	ldr	r6, [r0, #0]
 8000884:	486d      	ldr	r0, [pc, #436]	; (8000a3c <.text_21>)
 8000886:	6801      	ldr	r1, [r0, #0]
 8000888:	0849      	lsrs	r1, r1, #1
 800088a:	0049      	lsls	r1, r1, #1
 800088c:	6001      	str	r1, [r0, #0]
 800088e:	2001      	movs	r0, #1
 8000890:	496b      	ldr	r1, [pc, #428]	; (8000a40 <.text_22>)
 8000892:	6088      	str	r0, [r1, #8]
 8000894:	6888      	ldr	r0, [r1, #8]
 8000896:	2800      	cmp	r0, #0
 8000898:	d1fc      	bne.n	8000894 <ai_platform_network_create+0x28>
 800089a:	4b6a      	ldr	r3, [pc, #424]	; (8000a44 <.text_23>)
 800089c:	600b      	str	r3, [r1, #0]
 800089e:	6808      	ldr	r0, [r1, #0]
 80008a0:	4969      	ldr	r1, [pc, #420]	; (8000a48 <.text_24>)
 80008a2:	4288      	cmp	r0, r1
 80008a4:	d000      	beq.n	80008a8 <ai_platform_network_create+0x3c>
 80008a6:	e7fe      	b.n	80008a6 <ai_platform_network_create+0x3a>
 80008a8:	b91c      	cbnz	r4, 80008b2 <ai_platform_network_create+0x46>
 80008aa:	bf00      	nop
 80008ac:	a072      	add	r0, pc, #456	; (adr r0, 8000a78 <.text_36>)
 80008ae:	6800      	ldr	r0, [r0, #0]
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	4966      	ldr	r1, [pc, #408]	; (8000a4c <.text_25>)
 80008b4:	6011      	str	r1, [r2, #0]
 80008b6:	f8c4 2000 	str.w	r2, [r4]
 80008ba:	f000 f8df 	bl	8000a7c <core_init>
 80008be:	b908      	cbnz	r0, 80008c4 <ai_platform_network_create+0x58>
 80008c0:	a067      	add	r0, pc, #412	; (adr r0, 8000a60 <.text_30>)
 80008c2:	e00a      	b.n	80008da <ai_platform_network_create+0x6e>
 80008c4:	4962      	ldr	r1, [pc, #392]	; (8000a50 <.text_26>)
 80008c6:	428d      	cmp	r5, r1
 80008c8:	bf28      	it	cs
 80008ca:	f20f 1098 	addwcs	r0, pc, #408	; 0x198
 80008ce:	d204      	bcs.n	80008da <ai_platform_network_create+0x6e>
 80008d0:	a065      	add	r0, pc, #404	; (adr r0, 8000a68 <_platform_network_sanity_check{5}::signatures>)
 80008d2:	f000 f8ef 	bl	8000ab4 <ai_check_custom_types>
 80008d6:	b918      	cbnz	r0, 80008e0 <ai_platform_network_create+0x74>
 80008d8:	a064      	add	r0, pc, #400	; (adr r0, 8000a6c <.text_33>)
 80008da:	6806      	ldr	r6, [r0, #0]
 80008dc:	2100      	movs	r1, #0
 80008de:	6021      	str	r1, [r4, #0]
 80008e0:	4630      	mov	r0, r6
 80008e2:	bd70      	pop	{r4, r5, r6, pc}

080008e4 <ai_platform_network_destroy>:
 80008e4:	b128      	cbz	r0, 80008f2 <ai_platform_network_destroy+0xe>
 80008e6:	6801      	ldr	r1, [r0, #0]
 80008e8:	4a58      	ldr	r2, [pc, #352]	; (8000a4c <.text_25>)
 80008ea:	4291      	cmp	r1, r2
 80008ec:	bf08      	it	eq
 80008ee:	4602      	moveq	r2, r0
 80008f0:	d000      	beq.n	80008f4 <ai_platform_network_destroy+0x10>
 80008f2:	2200      	movs	r2, #0
 80008f4:	4951      	ldr	r1, [pc, #324]	; (8000a3c <.text_21>)
 80008f6:	680b      	ldr	r3, [r1, #0]
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	005b      	lsls	r3, r3, #1
 80008fc:	600b      	str	r3, [r1, #0]
 80008fe:	2101      	movs	r1, #1
 8000900:	4b4f      	ldr	r3, [pc, #316]	; (8000a40 <.text_22>)
 8000902:	6099      	str	r1, [r3, #8]
 8000904:	6899      	ldr	r1, [r3, #8]
 8000906:	2900      	cmp	r1, #0
 8000908:	d1fc      	bne.n	8000904 <ai_platform_network_destroy+0x20>
 800090a:	f8df c138 	ldr.w	ip, [pc, #312]	; 8000a44 <.text_23>
 800090e:	f8c3 c000 	str.w	ip, [r3]
 8000912:	6819      	ldr	r1, [r3, #0]
 8000914:	4b4c      	ldr	r3, [pc, #304]	; (8000a48 <.text_24>)
 8000916:	4299      	cmp	r1, r3
 8000918:	d000      	beq.n	800091c <ai_platform_network_destroy+0x38>
 800091a:	e7fe      	b.n	800091a <ai_platform_network_destroy+0x36>
 800091c:	b102      	cbz	r2, 8000920 <ai_platform_network_destroy+0x3c>
 800091e:	2000      	movs	r0, #0
 8000920:	4770      	bx	lr

08000922 <ai_platform_network_init>:
 8000922:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000926:	b081      	sub	sp, #4
 8000928:	460a      	mov	r2, r1
 800092a:	b118      	cbz	r0, 8000934 <ai_platform_network_init+0x12>
 800092c:	6801      	ldr	r1, [r0, #0]
 800092e:	4b47      	ldr	r3, [pc, #284]	; (8000a4c <.text_25>)
 8000930:	4299      	cmp	r1, r3
 8000932:	d000      	beq.n	8000936 <ai_platform_network_init+0x14>
 8000934:	2000      	movs	r0, #0
 8000936:	4941      	ldr	r1, [pc, #260]	; (8000a3c <.text_21>)
 8000938:	680b      	ldr	r3, [r1, #0]
 800093a:	085b      	lsrs	r3, r3, #1
 800093c:	005b      	lsls	r3, r3, #1
 800093e:	600b      	str	r3, [r1, #0]
 8000940:	2101      	movs	r1, #1
 8000942:	4b3f      	ldr	r3, [pc, #252]	; (8000a40 <.text_22>)
 8000944:	6099      	str	r1, [r3, #8]
 8000946:	6899      	ldr	r1, [r3, #8]
 8000948:	2900      	cmp	r1, #0
 800094a:	d1fc      	bne.n	8000946 <ai_platform_network_init+0x24>
 800094c:	4c3d      	ldr	r4, [pc, #244]	; (8000a44 <.text_23>)
 800094e:	601c      	str	r4, [r3, #0]
 8000950:	6819      	ldr	r1, [r3, #0]
 8000952:	4b3d      	ldr	r3, [pc, #244]	; (8000a48 <.text_24>)
 8000954:	4299      	cmp	r1, r3
 8000956:	d000      	beq.n	800095a <ai_platform_network_init+0x38>
 8000958:	e7fe      	b.n	8000958 <ai_platform_network_init+0x36>
 800095a:	2800      	cmp	r0, #0
 800095c:	d034      	beq.n	80009c8 <ai_platform_network_init+0xa6>
 800095e:	b90a      	cbnz	r2, 8000964 <ai_platform_network_init+0x42>
 8000960:	2211      	movs	r2, #17
 8000962:	e012      	b.n	800098a <ai_platform_network_init+0x68>
 8000964:	6913      	ldr	r3, [r2, #16]
 8000966:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8000968:	b939      	cbnz	r1, 800097a <ai_platform_network_init+0x58>
 800096a:	8b91      	ldrh	r1, [r2, #28]
 800096c:	8b55      	ldrh	r5, [r2, #26]
 800096e:	6a14      	ldr	r4, [r2, #32]
 8000970:	4369      	muls	r1, r5
 8000972:	4361      	muls	r1, r4
 8000974:	bf18      	it	ne
 8000976:	2213      	movne	r2, #19
 8000978:	d107      	bne.n	800098a <ai_platform_network_init+0x68>
 800097a:	b973      	cbnz	r3, 800099a <ai_platform_network_init+0x78>
 800097c:	8911      	ldrh	r1, [r2, #8]
 800097e:	88d4      	ldrh	r4, [r2, #6]
 8000980:	68d3      	ldr	r3, [r2, #12]
 8000982:	4361      	muls	r1, r4
 8000984:	4359      	muls	r1, r3
 8000986:	d008      	beq.n	800099a <ai_platform_network_init+0x78>
 8000988:	2212      	movs	r2, #18
 800098a:	2110      	movs	r1, #16
 800098c:	300c      	adds	r0, #12
 800098e:	f000 f87c 	bl	8000a8a <core_set_error>
 8000992:	2000      	movs	r0, #0
 8000994:	b001      	add	sp, #4
 8000996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800099a:	caf8      	ldmia	r2!, {r3, r4, r5, r6, r7}
 800099c:	f100 0114 	add.w	r1, r0, #20
 80009a0:	f100 0c28 	add.w	ip, r0, #40	; 0x28
 80009a4:	e881 00f8 	stmia.w	r1, {r3, r4, r5, r6, r7}
 80009a8:	e892 4f00 	ldmia.w	r2, {r8, r9, sl, fp, lr}
 80009ac:	e88c 4f00 	stmia.w	ip, {r8, r9, sl, fp, lr}
 80009b0:	2103      	movs	r1, #3
 80009b2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80009b4:	6081      	str	r1, [r0, #8]
 80009b6:	b13a      	cbz	r2, 80009c8 <ai_platform_network_init+0xa6>
 80009b8:	6891      	ldr	r1, [r2, #8]
 80009ba:	6050      	str	r0, [r2, #4]
 80009bc:	428a      	cmp	r2, r1
 80009be:	bf18      	it	ne
 80009c0:	2900      	cmpne	r1, #0
 80009c2:	bf18      	it	ne
 80009c4:	460a      	movne	r2, r1
 80009c6:	d1f7      	bne.n	80009b8 <ai_platform_network_init+0x96>
 80009c8:	b001      	add	sp, #4
 80009ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080009ce <ai_platform_network_process>:
 80009ce:	b570      	push	{r4, r5, r6, lr}
 80009d0:	0004      	movs	r4, r0
 80009d2:	d003      	beq.n	80009dc <ai_platform_network_process+0xe>
 80009d4:	6820      	ldr	r0, [r4, #0]
 80009d6:	4b1d      	ldr	r3, [pc, #116]	; (8000a4c <.text_25>)
 80009d8:	4298      	cmp	r0, r3
 80009da:	d000      	beq.n	80009de <ai_platform_network_process+0x10>
 80009dc:	2400      	movs	r4, #0
 80009de:	4817      	ldr	r0, [pc, #92]	; (8000a3c <.text_21>)
 80009e0:	6803      	ldr	r3, [r0, #0]
 80009e2:	085b      	lsrs	r3, r3, #1
 80009e4:	005b      	lsls	r3, r3, #1
 80009e6:	6003      	str	r3, [r0, #0]
 80009e8:	2001      	movs	r0, #1
 80009ea:	4b15      	ldr	r3, [pc, #84]	; (8000a40 <.text_22>)
 80009ec:	6098      	str	r0, [r3, #8]
 80009ee:	6898      	ldr	r0, [r3, #8]
 80009f0:	2800      	cmp	r0, #0
 80009f2:	d1fc      	bne.n	80009ee <ai_platform_network_process+0x20>
 80009f4:	4d13      	ldr	r5, [pc, #76]	; (8000a44 <.text_23>)
 80009f6:	601d      	str	r5, [r3, #0]
 80009f8:	6818      	ldr	r0, [r3, #0]
 80009fa:	4b13      	ldr	r3, [pc, #76]	; (8000a48 <.text_24>)
 80009fc:	4298      	cmp	r0, r3
 80009fe:	d000      	beq.n	8000a02 <ai_platform_network_process+0x34>
 8000a00:	e7fe      	b.n	8000a00 <ai_platform_network_process+0x32>
 8000a02:	4620      	mov	r0, r4
 8000a04:	f7ff fcca 	bl	800039c <_platform_network_io_bind>
 8000a08:	b1b8      	cbz	r0, 8000a3a <ai_platform_network_process+0x6c>
 8000a0a:	8a60      	ldrh	r0, [r4, #18]
 8000a0c:	8a21      	ldrh	r1, [r4, #16]
 8000a0e:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8000a10:	4288      	cmp	r0, r1
 8000a12:	f105 060c 	add.w	r6, r5, #12
 8000a16:	d20f      	bcs.n	8000a38 <ai_platform_network_process+0x6a>
 8000a18:	4628      	mov	r0, r5
 8000a1a:	f7ff fc4d 	bl	80002b8 <_platform_network_state_update_input>
 8000a1e:	4620      	mov	r0, r4
 8000a20:	f000 f8f2 	bl	8000c08 <ai_layers_forward_all>
 8000a24:	4630      	mov	r0, r6
 8000a26:	f7ff fc7b 	bl	8000320 <_platform_network_state_update_output>
 8000a2a:	8a60      	ldrh	r0, [r4, #18]
 8000a2c:	8a21      	ldrh	r1, [r4, #16]
 8000a2e:	1c40      	adds	r0, r0, #1
 8000a30:	8260      	strh	r0, [r4, #18]
 8000a32:	b280      	uxth	r0, r0
 8000a34:	4288      	cmp	r0, r1
 8000a36:	d3ef      	bcc.n	8000a18 <ai_platform_network_process+0x4a>
 8000a38:	8a60      	ldrh	r0, [r4, #18]
 8000a3a:	bd70      	pop	{r4, r5, r6, pc}

08000a3c <.text_21>:
 8000a3c:	e0002000 	.word	0xe0002000

08000a40 <.text_22>:
 8000a40:	40023000 	.word	0x40023000

08000a44 <.text_23>:
 8000a44:	f407a5c2 	.word	0xf407a5c2

08000a48 <.text_24>:
 8000a48:	b5e8b5cd 	.word	0xb5e8b5cd

08000a4c <.text_25>:
 8000a4c:	a1c00100 	.word	0xa1c00100

08000a50 <.text_26>:
 8000a50:	01030001 	.word	0x01030001

08000a54 <.text_27>:
 8000a54:	00000004 	.word	0x00000004

08000a58 <.text_28>:
 8000a58:	00000101 	.word	0x00000101

08000a5c <.text_29>:
 8000a5c:	00000301 	.word	0x00000301

08000a60 <.text_30>:
 8000a60:	00001030 	.word	0x00001030

08000a64 <.text_31>:
 8000a64:	00001001 	.word	0x00001001

08000a68 <_platform_network_sanity_check{5}::signatures>:
 8000a68:	84048403                                ....

08000a6c <.text_33>:
 8000a6c:	00001002 	.word	0x00001002

08000a70 <.text_34>:
 8000a70:	00001010 	.word	0x00001010

08000a74 <.text_35>:
 8000a74:	00000000 	.word	0x00000000

08000a78 <.text_36>:
 8000a78:	00001010 	.word	0x00001010

08000a7c <core_init>:
 8000a7c:	2001      	movs	r0, #1
 8000a7e:	4770      	bx	lr

08000a80 <core_get_error>:
 8000a80:	4601      	mov	r1, r0
 8000a82:	2200      	movs	r2, #0
 8000a84:	6808      	ldr	r0, [r1, #0]
 8000a86:	600a      	str	r2, [r1, #0]
 8000a88:	4770      	bx	lr

08000a8a <core_set_error>:
 8000a8a:	7803      	ldrb	r3, [r0, #0]
 8000a8c:	ea5f 6c03 	movs.w	ip, r3, lsl #24
 8000a90:	d104      	bne.n	8000a9c <core_set_error+0x12>
 8000a92:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 8000a96:	6001      	str	r1, [r0, #0]
 8000a98:	2001      	movs	r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	2000      	movs	r0, #0
 8000a9e:	4770      	bx	lr

08000aa0 <ai_layers_forward_layer>:
 8000aa0:	b510      	push	{r4, lr}
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	68e1      	ldr	r1, [r4, #12]
 8000aa6:	4788      	blx	r1
 8000aa8:	68a0      	ldr	r0, [r4, #8]
 8000aaa:	42a0      	cmp	r0, r4
 8000aac:	bf08      	it	eq
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	bd10      	pop	{r4, pc}
	...

08000ab4 <ai_check_custom_types>:
 8000ab4:	b500      	push	{lr}
 8000ab6:	b081      	sub	sp, #4
 8000ab8:	b160      	cbz	r0, 8000ad4 <ai_check_custom_types+0x20>
 8000aba:	7801      	ldrb	r1, [r0, #0]
 8000abc:	2903      	cmp	r1, #3
 8000abe:	d109      	bne.n	8000ad4 <ai_check_custom_types+0x20>
 8000ac0:	f05f 0204 	movs.w	r2, #4
 8000ac4:	a18c      	add	r1, pc, #560	; (adr r1, 8000cf8 <ai_check_custom_types::ref_signatures>)
 8000ac6:	f006 fa15 	bl	8006ef4 <memcmp>
 8000aca:	1e40      	subs	r0, r0, #1
 8000acc:	4180      	sbcs	r0, r0
 8000ace:	0fc0      	lsrs	r0, r0, #31
 8000ad0:	b001      	add	sp, #4
 8000ad2:	bd00      	pop	{pc}
 8000ad4:	2000      	movs	r0, #0
 8000ad6:	b001      	add	sp, #4
 8000ad8:	bd00      	pop	{pc}
	...

08000adc <ai_layer_type_name>:
 8000adc:	f242 7211 	movw	r2, #10001	; 0x2711
 8000ae0:	1a81      	subs	r1, r0, r2
 8000ae2:	2901      	cmp	r1, #1
 8000ae4:	bf81      	itttt	hi
 8000ae6:	1ec9      	subhi	r1, r1, #3
 8000ae8:	290d      	cmphi	r1, #13
 8000aea:	390f      	subhi	r1, #15
 8000aec:	2909      	cmphi	r1, #9
 8000aee:	f200 806b 	bhi.w	8000bc8 <ai_layer_type_name+0xec>
 8000af2:	1a80      	subs	r0, r0, r2
 8000af4:	d033      	beq.n	8000b5e <ai_layer_type_name+0x82>
 8000af6:	1e40      	subs	r0, r0, #1
 8000af8:	d033      	beq.n	8000b62 <ai_layer_type_name+0x86>
 8000afa:	1e80      	subs	r0, r0, #2
 8000afc:	d033      	beq.n	8000b66 <ai_layer_type_name+0x8a>
 8000afe:	1e40      	subs	r0, r0, #1
 8000b00:	d034      	beq.n	8000b6c <ai_layer_type_name+0x90>
 8000b02:	1e40      	subs	r0, r0, #1
 8000b04:	d034      	beq.n	8000b70 <ai_layer_type_name+0x94>
 8000b06:	1e40      	subs	r0, r0, #1
 8000b08:	d034      	beq.n	8000b74 <ai_layer_type_name+0x98>
 8000b0a:	1e40      	subs	r0, r0, #1
 8000b0c:	d034      	beq.n	8000b78 <ai_layer_type_name+0x9c>
 8000b0e:	1e40      	subs	r0, r0, #1
 8000b10:	d034      	beq.n	8000b7c <ai_layer_type_name+0xa0>
 8000b12:	1e40      	subs	r0, r0, #1
 8000b14:	d034      	beq.n	8000b80 <ai_layer_type_name+0xa4>
 8000b16:	1e40      	subs	r0, r0, #1
 8000b18:	d034      	beq.n	8000b84 <ai_layer_type_name+0xa8>
 8000b1a:	1e40      	subs	r0, r0, #1
 8000b1c:	d034      	beq.n	8000b88 <ai_layer_type_name+0xac>
 8000b1e:	1e40      	subs	r0, r0, #1
 8000b20:	d034      	beq.n	8000b8c <ai_layer_type_name+0xb0>
 8000b22:	1e40      	subs	r0, r0, #1
 8000b24:	d034      	beq.n	8000b90 <ai_layer_type_name+0xb4>
 8000b26:	1e40      	subs	r0, r0, #1
 8000b28:	d034      	beq.n	8000b94 <ai_layer_type_name+0xb8>
 8000b2a:	1e40      	subs	r0, r0, #1
 8000b2c:	d034      	beq.n	8000b98 <ai_layer_type_name+0xbc>
 8000b2e:	1e40      	subs	r0, r0, #1
 8000b30:	d034      	beq.n	8000b9c <ai_layer_type_name+0xc0>
 8000b32:	1e80      	subs	r0, r0, #2
 8000b34:	d034      	beq.n	8000ba0 <ai_layer_type_name+0xc4>
 8000b36:	1e40      	subs	r0, r0, #1
 8000b38:	d034      	beq.n	8000ba4 <ai_layer_type_name+0xc8>
 8000b3a:	1e40      	subs	r0, r0, #1
 8000b3c:	d034      	beq.n	8000ba8 <ai_layer_type_name+0xcc>
 8000b3e:	1e40      	subs	r0, r0, #1
 8000b40:	d034      	beq.n	8000bac <ai_layer_type_name+0xd0>
 8000b42:	1e40      	subs	r0, r0, #1
 8000b44:	d034      	beq.n	8000bb0 <ai_layer_type_name+0xd4>
 8000b46:	1e40      	subs	r0, r0, #1
 8000b48:	d034      	beq.n	8000bb4 <ai_layer_type_name+0xd8>
 8000b4a:	1e40      	subs	r0, r0, #1
 8000b4c:	d034      	beq.n	8000bb8 <ai_layer_type_name+0xdc>
 8000b4e:	1e40      	subs	r0, r0, #1
 8000b50:	d034      	beq.n	8000bbc <ai_layer_type_name+0xe0>
 8000b52:	1e40      	subs	r0, r0, #1
 8000b54:	d034      	beq.n	8000bc0 <ai_layer_type_name+0xe4>
 8000b56:	1e40      	subs	r0, r0, #1
 8000b58:	d034      	beq.n	8000bc4 <ai_layer_type_name+0xe8>
 8000b5a:	a01c      	add	r0, pc, #112	; (adr r0, 8000bcc <.text_5>)
 8000b5c:	4770      	bx	lr
 8000b5e:	a01c      	add	r0, pc, #112	; (adr r0, 8000bd0 <.text_6>)
 8000b60:	4770      	bx	lr
 8000b62:	a01c      	add	r0, pc, #112	; (adr r0, 8000bd4 <.text_7>)
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	a031      	add	r0, pc, #196	; (adr r0, 8000c30 <.text_15>)
 8000b6a:	4770      	bx	lr
 8000b6c:	a032      	add	r0, pc, #200	; (adr r0, 8000c38 <.text_16>)
 8000b6e:	4770      	bx	lr
 8000b70:	a019      	add	r0, pc, #100	; (adr r0, 8000bd8 <.text_8>)
 8000b72:	4770      	bx	lr
 8000b74:	a019      	add	r0, pc, #100	; (adr r0, 8000bdc <.text_9>)
 8000b76:	4770      	bx	lr
 8000b78:	a031      	add	r0, pc, #196	; (adr r0, 8000c40 <.text_17>)
 8000b7a:	4770      	bx	lr
 8000b7c:	a018      	add	r0, pc, #96	; (adr r0, 8000be0 <.text_10>)
 8000b7e:	4770      	bx	lr
 8000b80:	a031      	add	r0, pc, #196	; (adr r0, 8000c48 <.text_18>)
 8000b82:	4770      	bx	lr
 8000b84:	a032      	add	r0, pc, #200	; (adr r0, 8000c50 <.text_19>)
 8000b86:	4770      	bx	lr
 8000b88:	a036      	add	r0, pc, #216	; (adr r0, 8000c64 <.text_20>)
 8000b8a:	4770      	bx	lr
 8000b8c:	a037      	add	r0, pc, #220	; (adr r0, 8000c6c <.text_21>)
 8000b8e:	4770      	bx	lr
 8000b90:	a014      	add	r0, pc, #80	; (adr r0, 8000be4 <.text_11>)
 8000b92:	4770      	bx	lr
 8000b94:	a037      	add	r0, pc, #220	; (adr r0, 8000c74 <.text_22>)
 8000b96:	4770      	bx	lr
 8000b98:	a038      	add	r0, pc, #224	; (adr r0, 8000c7c <.text_23>)
 8000b9a:	4770      	bx	lr
 8000b9c:	a03a      	add	r0, pc, #232	; (adr r0, 8000c88 <.text_24>)
 8000b9e:	4770      	bx	lr
 8000ba0:	a03e      	add	r0, pc, #248	; (adr r0, 8000c9c <.text_25>)
 8000ba2:	4770      	bx	lr
 8000ba4:	a03f      	add	r0, pc, #252	; (adr r0, 8000ca4 <.text_26>)
 8000ba6:	4770      	bx	lr
 8000ba8:	a040      	add	r0, pc, #256	; (adr r0, 8000cac <.text_27>)
 8000baa:	4770      	bx	lr
 8000bac:	a042      	add	r0, pc, #264	; (adr r0, 8000cb8 <.text_28>)
 8000bae:	4770      	bx	lr
 8000bb0:	a043      	add	r0, pc, #268	; (adr r0, 8000cc0 <.text_29>)
 8000bb2:	4770      	bx	lr
 8000bb4:	a044      	add	r0, pc, #272	; (adr r0, 8000cc8 <.text_30>)
 8000bb6:	4770      	bx	lr
 8000bb8:	a00b      	add	r0, pc, #44	; (adr r0, 8000be8 <.text_12>)
 8000bba:	4770      	bx	lr
 8000bbc:	a048      	add	r0, pc, #288	; (adr r0, 8000ce0 <.text_31>)
 8000bbe:	4770      	bx	lr
 8000bc0:	a049      	add	r0, pc, #292	; (adr r0, 8000ce8 <.text_32>)
 8000bc2:	4770      	bx	lr
 8000bc4:	a04a      	add	r0, pc, #296	; (adr r0, 8000cf0 <.text_33>)
 8000bc6:	4770      	bx	lr
 8000bc8:	a000      	add	r0, pc, #0	; (adr r0, 8000bcc <.text_5>)
 8000bca:	4770      	bx	lr

08000bcc <.text_5>:
 8000bcc:	00000000 	.word	0x00000000

08000bd0 <.text_6>:
 8000bd0:	00444441 	.word	0x00444441

08000bd4 <.text_7>:
 8000bd4:	00004e42 	.word	0x00004e42

08000bd8 <.text_8>:
 8000bd8:	00555247 	.word	0x00555247

08000bdc <.text_9>:
 8000bdc:	004e524c 	.word	0x004e524c

08000be0 <.text_10>:
 8000be0:	00004c4e 	.word	0x00004c4e

08000be4 <.text_11>:
 8000be4:	00004d53 	.word	0x00004d53

08000be8 <.text_12>:
 8000be8:	00444150 	.word	0x00444150

08000bec <ai_layer_type_is_valid>:
 8000bec:	f242 7111 	movw	r1, #10001	; 0x2711
 8000bf0:	1a40      	subs	r0, r0, r1
 8000bf2:	2801      	cmp	r0, #1
 8000bf4:	bf81      	itttt	hi
 8000bf6:	1ec0      	subhi	r0, r0, #3
 8000bf8:	280d      	cmphi	r0, #13
 8000bfa:	380f      	subhi	r0, #15
 8000bfc:	2809      	cmphi	r0, #9
 8000bfe:	d801      	bhi.n	8000c04 <ai_layer_type_is_valid+0x18>
 8000c00:	2001      	movs	r0, #1
 8000c02:	4770      	bx	lr
 8000c04:	2000      	movs	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <ai_layers_forward_all>:
 8000c08:	b530      	push	{r4, r5, lr}
 8000c0a:	4604      	mov	r4, r0
 8000c0c:	b081      	sub	sp, #4
 8000c0e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8000c10:	b158      	cbz	r0, 8000c2a <ai_layers_forward_all+0x22>
 8000c12:	64a0      	str	r0, [r4, #72]	; 0x48
 8000c14:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8000c16:	68e9      	ldr	r1, [r5, #12]
 8000c18:	4628      	mov	r0, r5
 8000c1a:	4788      	blx	r1
 8000c1c:	68a8      	ldr	r0, [r5, #8]
 8000c1e:	42a8      	cmp	r0, r5
 8000c20:	bf08      	it	eq
 8000c22:	2000      	moveq	r0, #0
 8000c24:	2800      	cmp	r0, #0
 8000c26:	64a0      	str	r0, [r4, #72]	; 0x48
 8000c28:	d1f4      	bne.n	8000c14 <ai_layers_forward_all+0xc>
 8000c2a:	b001      	add	sp, #4
 8000c2c:	bd30      	pop	{r4, r5, pc}
	...

08000c30 <.text_15>:
 8000c30:	564e4f43 	.word	0x564e4f43
 8000c34:	4432      	.short	0x4432
	...

08000c38 <.text_16>:
 8000c38:	534e4544 	.word	0x534e4544
 8000c3c:	0045      	.short	0x0045
	...

08000c40 <.text_17>:
 8000c40:	4d54534c 	.word	0x4d54534c
 8000c44:	00000000 	.word	0x00000000

08000c48 <.text_18>:
 8000c48:	4d524f4e 	.word	0x4d524f4e
 8000c4c:	00000000 	.word	0x00000000

08000c50 <.text_19>:
 8000c50:	4954504f 	.word	0x4954504f
 8000c54:	455a494d 	.word	0x455a494d
 8000c58:	4f435f44 	.word	0x4f435f44
 8000c5c:	4432564e 	.word	0x4432564e
 8000c60:	00000000 	.word	0x00000000

08000c64 <.text_20>:
 8000c64:	4d524550 	.word	0x4d524550
 8000c68:	00455455 	.word	0x00455455

08000c6c <.text_21>:
 8000c6c:	4c4f4f50 	.word	0x4c4f4f50
 8000c70:	00000000 	.word	0x00000000

08000c74 <.text_22>:
 8000c74:	494c5053 	.word	0x494c5053
 8000c78:	0054      	.short	0x0054
	...

08000c7c <.text_23>:
 8000c7c:	454d4954 	.word	0x454d4954
 8000c80:	4c45445f 	.word	0x4c45445f
 8000c84:	5941      	.short	0x5941
	...

08000c88 <.text_24>:
 8000c88:	454d4954 	.word	0x454d4954
 8000c8c:	5349445f 	.word	0x5349445f
 8000c90:	42495254 	.word	0x42495254
 8000c94:	44455455 	.word	0x44455455
 8000c98:	00000000 	.word	0x00000000

08000c9c <.text_25>:
 8000c9c:	434e4f43 	.word	0x434e4f43
 8000ca0:	5441      	.short	0x5441
	...

08000ca4 <.text_26>:
 8000ca4:	4d4d4547 	.word	0x4d4d4547
 8000ca8:	00000000 	.word	0x00000000

08000cac <.text_27>:
 8000cac:	41535055 	.word	0x41535055
 8000cb0:	454c504d 	.word	0x454c504d
 8000cb4:	00000000 	.word	0x00000000

08000cb8 <.text_28>:
 8000cb8:	57544c45 	.word	0x57544c45
 8000cbc:	00455349 	.word	0x00455349

08000cc0 <.text_29>:
 8000cc0:	454e4547 	.word	0x454e4547
 8000cc4:	00434952 	.word	0x00434952

08000cc8 <.text_30>:
 8000cc8:	54534e49 	.word	0x54534e49
 8000ccc:	45434e41 	.word	0x45434e41
 8000cd0:	4d524f4e 	.word	0x4d524f4e
 8000cd4:	5a494c41 	.word	0x5a494c41
 8000cd8:	4f495441 	.word	0x4f495441
 8000cdc:	004e      	.short	0x004e
	...

08000ce0 <.text_31>:
 8000ce0:	43494c53 	.word	0x43494c53
 8000ce4:	0045      	.short	0x0045
	...

08000ce8 <.text_32>:
 8000ce8:	454c4954 	.word	0x454c4954
 8000cec:	00000000 	.word	0x00000000

08000cf0 <.text_33>:
 8000cf0:	55444552 	.word	0x55444552
 8000cf4:	4543      	.short	0x4543
	...

08000cf8 <ai_check_custom_types::ref_signatures>:
 8000cf8:	8403 8404                                   ....

08000cfc <ai_conv2d_kernel_simple_f32>:
 8000cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d00:	b081      	sub	sp, #4
 8000d02:	468b      	mov	fp, r1
 8000d04:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8000d06:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8000d0a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8000d0c:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000d10:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8000d12:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 8000d16:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
 8000d1a:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8000d1e:	4619      	mov	r1, r3
 8000d20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8000d22:	eba5 0709 	sub.w	r7, r5, r9
 8000d26:	fb07 f708 	mul.w	r7, r7, r8
 8000d2a:	9700      	str	r7, [sp, #0]
 8000d2c:	1ae4      	subs	r4, r4, r3
 8000d2e:	fb05 f708 	mul.w	r7, r5, r8
 8000d32:	fb05 650e 	mla	r5, r5, lr, r6
 8000d36:	fb08 f505 	mul.w	r5, r8, r5
 8000d3a:	437c      	muls	r4, r7
 8000d3c:	eb01 0685 	add.w	r6, r1, r5, lsl #2
 8000d40:	45da      	cmp	sl, fp
 8000d42:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000d44:	ebac 0009 	sub.w	r0, ip, r9
 8000d48:	bf0c      	ite	eq
 8000d4a:	ed9f 0aab 	vldreq	s0, [pc, #684]	; 8000ff8 <.text_4>
 8000d4e:	eeb7 0a00 	vmovne.f32	s0, #112	; 0x3f800000  1.0
 8000d52:	fb0c f50e 	mul.w	r5, ip, lr
 8000d56:	fb00 f008 	mul.w	r0, r0, r8
 8000d5a:	fb09 f908 	mul.w	r9, r9, r8
 8000d5e:	fb08 f505 	mul.w	r5, r8, r5
 8000d62:	2900      	cmp	r1, #0
 8000d64:	eb02 0885 	add.w	r8, r2, r5, lsl #2
 8000d68:	f000 8070 	beq.w	8000e4c <ai_conv2d_kernel_simple_f32+0x150>
 8000d6c:	f029 0203 	bic.w	r2, r9, #3
 8000d70:	edda 0a00 	vldr	s1, [sl]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	ee60 0a80 	vmul.f32	s1, s1, s0
 8000d7a:	46c4      	mov	ip, r8
 8000d7c:	dd5c      	ble.n	8000e38 <ai_conv2d_kernel_simple_f32+0x13c>
 8000d7e:	9d00      	ldr	r5, [sp, #0]
 8000d80:	469e      	mov	lr, r3
 8000d82:	2700      	movs	r7, #0
 8000d84:	2a00      	cmp	r2, #0
 8000d86:	dd1d      	ble.n	8000dc4 <ai_conv2d_kernel_simple_f32+0xc8>
 8000d88:	ed96 4a00 	vldr	s8, [r6]
 8000d8c:	eddc 4a00 	vldr	s9, [ip]
 8000d90:	ed96 3a01 	vldr	s6, [r6, #4]
 8000d94:	eddc 3a01 	vldr	s7, [ip, #4]
 8000d98:	ed96 2a02 	vldr	s4, [r6, #8]
 8000d9c:	eddc 2a02 	vldr	s5, [ip, #8]
 8000da0:	ed96 1a03 	vldr	s2, [r6, #12]
 8000da4:	eddc 1a03 	vldr	s3, [ip, #12]
 8000da8:	ee44 0a24 	vmla.f32	s1, s8, s9
 8000dac:	ee43 0a23 	vmla.f32	s1, s6, s7
 8000db0:	3610      	adds	r6, #16
 8000db2:	1d3f      	adds	r7, r7, #4
 8000db4:	ee42 0a22 	vmla.f32	s1, s4, s5
 8000db8:	4297      	cmp	r7, r2
 8000dba:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000dbe:	f10c 0c10 	add.w	ip, ip, #16
 8000dc2:	dbe1      	blt.n	8000d88 <ai_conv2d_kernel_simple_f32+0x8c>
 8000dc4:	454f      	cmp	r7, r9
 8000dc6:	da2f      	bge.n	8000e28 <ai_conv2d_kernel_simple_f32+0x12c>
 8000dc8:	1c7f      	adds	r7, r7, #1
 8000dca:	ed96 1a00 	vldr	s2, [r6]
 8000dce:	eddc 1a00 	vldr	s3, [ip]
 8000dd2:	1d36      	adds	r6, r6, #4
 8000dd4:	454f      	cmp	r7, r9
 8000dd6:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000dda:	f10c 0c04 	add.w	ip, ip, #4
 8000dde:	da23      	bge.n	8000e28 <ai_conv2d_kernel_simple_f32+0x12c>
 8000de0:	1c7f      	adds	r7, r7, #1
 8000de2:	ed96 1a00 	vldr	s2, [r6]
 8000de6:	eddc 1a00 	vldr	s3, [ip]
 8000dea:	1d36      	adds	r6, r6, #4
 8000dec:	454f      	cmp	r7, r9
 8000dee:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000df2:	f10c 0c04 	add.w	ip, ip, #4
 8000df6:	da17      	bge.n	8000e28 <ai_conv2d_kernel_simple_f32+0x12c>
 8000df8:	1c7f      	adds	r7, r7, #1
 8000dfa:	ed96 1a00 	vldr	s2, [r6]
 8000dfe:	eddc 1a00 	vldr	s3, [ip]
 8000e02:	1d36      	adds	r6, r6, #4
 8000e04:	454f      	cmp	r7, r9
 8000e06:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000e0a:	f10c 0c04 	add.w	ip, ip, #4
 8000e0e:	da0b      	bge.n	8000e28 <ai_conv2d_kernel_simple_f32+0x12c>
 8000e10:	1c7f      	adds	r7, r7, #1
 8000e12:	ed96 1a00 	vldr	s2, [r6]
 8000e16:	eddc 1a00 	vldr	s3, [ip]
 8000e1a:	1d36      	adds	r6, r6, #4
 8000e1c:	454f      	cmp	r7, r9
 8000e1e:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000e22:	f10c 0c04 	add.w	ip, ip, #4
 8000e26:	dbcf      	blt.n	8000dc8 <ai_conv2d_kernel_simple_f32+0xcc>
 8000e28:	f1be 0e01 	subs.w	lr, lr, #1
 8000e2c:	eb0c 0c80 	add.w	ip, ip, r0, lsl #2
 8000e30:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 8000e34:	d1a5      	bne.n	8000d82 <ai_conv2d_kernel_simple_f32+0x86>
 8000e36:	9500      	str	r5, [sp, #0]
 8000e38:	edcb 0a00 	vstr	s1, [fp]
 8000e3c:	1e49      	subs	r1, r1, #1
 8000e3e:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 8000e42:	f10b 0b04 	add.w	fp, fp, #4
 8000e46:	f10a 0a04 	add.w	sl, sl, #4
 8000e4a:	d191      	bne.n	8000d70 <ai_conv2d_kernel_simple_f32+0x74>
 8000e4c:	b001      	add	sp, #4
 8000e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08000e54 <ai_conv2d_kernel_depthwise_f32>:
 8000e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e58:	b081      	sub	sp, #4
 8000e5a:	b402      	push	{r1}
 8000e5c:	b084      	sub	sp, #16
 8000e5e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8000e60:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 8000e64:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
 8000e68:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8000e6a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8000e6c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8000e6e:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 8000e72:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8000e74:	f8dd e050 	ldr.w	lr, [sp, #80]	; 0x50
 8000e78:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8000e7a:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8000e7e:	fbb6 f6fa 	udiv	r6, r6, sl
 8000e82:	eba8 0a00 	sub.w	sl, r8, r0
 8000e86:	fb0c fa0a 	mul.w	sl, ip, sl
 8000e8a:	1b09      	subs	r1, r1, r4
 8000e8c:	eba5 0c00 	sub.w	ip, r5, r0
 8000e90:	4369      	muls	r1, r5
 8000e92:	fb05 750e 	mla	r5, r5, lr, r7
 8000e96:	eb03 0785 	add.w	r7, r3, r5, lsl #2
 8000e9a:	9b04      	ldr	r3, [sp, #16]
 8000e9c:	4599      	cmp	r9, r3
 8000e9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8000ea0:	bf0c      	ite	eq
 8000ea2:	ed9f 0a55 	vldreq	s0, [pc, #340]	; 8000ff8 <.text_4>
 8000ea6:	eeb7 0a00 	vmovne.f32	s0, #112	; 0x3f800000  1.0
 8000eaa:	fb08 f50e 	mul.w	r5, r8, lr
 8000eae:	435d      	muls	r5, r3
 8000eb0:	eb02 0e85 	add.w	lr, r2, r5, lsl #2
 8000eb4:	eb0e 0583 	add.w	r5, lr, r3, lsl #2
 8000eb8:	45ae      	cmp	lr, r5
 8000eba:	f04f 0800 	mov.w	r8, #0
 8000ebe:	9500      	str	r5, [sp, #0]
 8000ec0:	f080 8097 	bcs.w	8000ff2 <ai_conv2d_kernel_depthwise_f32+0x19e>
 8000ec4:	f020 0303 	bic.w	r3, r0, #3
 8000ec8:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8000ecc:	9603      	str	r6, [sp, #12]
 8000ece:	9a03      	ldr	r2, [sp, #12]
 8000ed0:	2a00      	cmp	r2, #0
 8000ed2:	f000 8088 	beq.w	8000fe6 <ai_conv2d_kernel_depthwise_f32+0x192>
 8000ed6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8000ed8:	9e04      	ldr	r6, [sp, #16]
 8000eda:	eb02 0988 	add.w	r9, r2, r8, lsl #2
 8000ede:	9a03      	ldr	r2, [sp, #12]
 8000ee0:	9415      	str	r4, [sp, #84]	; 0x54
 8000ee2:	eb06 0688 	add.w	r6, r6, r8, lsl #2
 8000ee6:	9102      	str	r1, [sp, #8]
 8000ee8:	f8cd e004 	str.w	lr, [sp, #4]
 8000eec:	9915      	ldr	r1, [sp, #84]	; 0x54
 8000eee:	edd9 0a00 	vldr	s1, [r9]
 8000ef2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ef6:	2900      	cmp	r1, #0
 8000ef8:	ee60 0a80 	vmul.f32	s1, s1, s0
 8000efc:	dd63      	ble.n	8000fc6 <ai_conv2d_kernel_depthwise_f32+0x172>
 8000efe:	2400      	movs	r4, #0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	dd26      	ble.n	8000f52 <ai_conv2d_kernel_depthwise_f32+0xfe>
 8000f04:	f8dd 503c 	ldr.w	r5, [sp, #60]	; 0x3c
 8000f08:	ed97 1a00 	vldr	s2, [r7]
 8000f0c:	edde 1a00 	vldr	s3, [lr]
 8000f10:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
 8000f14:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000f18:	ed97 1a01 	vldr	s2, [r7, #4]
 8000f1c:	edde 1a00 	vldr	s3, [lr]
 8000f20:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
 8000f24:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000f28:	ed97 1a02 	vldr	s2, [r7, #8]
 8000f2c:	edde 1a00 	vldr	s3, [lr]
 8000f30:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
 8000f34:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000f38:	1d24      	adds	r4, r4, #4
 8000f3a:	ed97 1a03 	vldr	s2, [r7, #12]
 8000f3e:	edde 1a00 	vldr	s3, [lr]
 8000f42:	3710      	adds	r7, #16
 8000f44:	429c      	cmp	r4, r3
 8000f46:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000f4a:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
 8000f4e:	dbdb      	blt.n	8000f08 <ai_conv2d_kernel_depthwise_f32+0xb4>
 8000f50:	950f      	str	r5, [sp, #60]	; 0x3c
 8000f52:	4284      	cmp	r4, r0
 8000f54:	da31      	bge.n	8000fba <ai_conv2d_kernel_depthwise_f32+0x166>
 8000f56:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8000f58:	1c64      	adds	r4, r4, #1
 8000f5a:	ed97 1a00 	vldr	s2, [r7]
 8000f5e:	edde 1a00 	vldr	s3, [lr]
 8000f62:	1d3f      	adds	r7, r7, #4
 8000f64:	4284      	cmp	r4, r0
 8000f66:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000f6a:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
 8000f6e:	da23      	bge.n	8000fb8 <ai_conv2d_kernel_depthwise_f32+0x164>
 8000f70:	1c64      	adds	r4, r4, #1
 8000f72:	ed97 1a00 	vldr	s2, [r7]
 8000f76:	edde 1a00 	vldr	s3, [lr]
 8000f7a:	1d3f      	adds	r7, r7, #4
 8000f7c:	4284      	cmp	r4, r0
 8000f7e:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000f82:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
 8000f86:	da17      	bge.n	8000fb8 <ai_conv2d_kernel_depthwise_f32+0x164>
 8000f88:	1c64      	adds	r4, r4, #1
 8000f8a:	ed97 1a00 	vldr	s2, [r7]
 8000f8e:	edde 1a00 	vldr	s3, [lr]
 8000f92:	1d3f      	adds	r7, r7, #4
 8000f94:	4284      	cmp	r4, r0
 8000f96:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000f9a:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
 8000f9e:	da0b      	bge.n	8000fb8 <ai_conv2d_kernel_depthwise_f32+0x164>
 8000fa0:	1c64      	adds	r4, r4, #1
 8000fa2:	ed97 1a00 	vldr	s2, [r7]
 8000fa6:	edde 1a00 	vldr	s3, [lr]
 8000faa:	1d3f      	adds	r7, r7, #4
 8000fac:	4284      	cmp	r4, r0
 8000fae:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000fb2:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
 8000fb6:	dbcf      	blt.n	8000f58 <ai_conv2d_kernel_depthwise_f32+0x104>
 8000fb8:	950f      	str	r5, [sp, #60]	; 0x3c
 8000fba:	1e49      	subs	r1, r1, #1
 8000fbc:	eb0e 0e8a 	add.w	lr, lr, sl, lsl #2
 8000fc0:	eb07 078c 	add.w	r7, r7, ip, lsl #2
 8000fc4:	d19b      	bne.n	8000efe <ai_conv2d_kernel_depthwise_f32+0xaa>
 8000fc6:	9902      	ldr	r1, [sp, #8]
 8000fc8:	edc6 0a00 	vstr	s1, [r6]
 8000fcc:	1d36      	adds	r6, r6, #4
 8000fce:	1e52      	subs	r2, r2, #1
 8000fd0:	eb07 0781 	add.w	r7, r7, r1, lsl #2
 8000fd4:	f108 0801 	add.w	r8, r8, #1
 8000fd8:	f109 0904 	add.w	r9, r9, #4
 8000fdc:	d186      	bne.n	8000eec <ai_conv2d_kernel_depthwise_f32+0x98>
 8000fde:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8000fe0:	9902      	ldr	r1, [sp, #8]
 8000fe2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fe6:	9a00      	ldr	r2, [sp, #0]
 8000fe8:	f10e 0e04 	add.w	lr, lr, #4
 8000fec:	4596      	cmp	lr, r2
 8000fee:	f4ff af6e 	bcc.w	8000ece <ai_conv2d_kernel_depthwise_f32+0x7a>
 8000ff2:	b006      	add	sp, #24
 8000ff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08000ff8 <.text_4>:
 8000ff8:	00000000 	.word	0x00000000

08000ffc <ai_conv2d_kernel_group_f32>:
 8000ffc:	e92d 4ffa 	stmdb	sp!, {r1, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001000:	b085      	sub	sp, #20
 8001002:	4693      	mov	fp, r2
 8001004:	f9bd 9050 	ldrsh.w	r9, [sp, #80]	; 0x50
 8001008:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 800100a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800100c:	f9bd 8054 	ldrsh.w	r8, [sp, #84]	; 0x54
 8001010:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 8001014:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8001016:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8001018:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800101a:	981c      	ldr	r0, [sp, #112]	; 0x70
 800101c:	46ca      	mov	sl, r9
 800101e:	4655      	mov	r5, sl
 8001020:	ebaa 0c04 	sub.w	ip, sl, r4
 8001024:	fb94 f6f5 	sdiv	r6, r4, r5
 8001028:	fb05 c506 	mla	r5, r5, r6, ip
 800102c:	fb95 fcfa 	sdiv	ip, r5, sl
 8001030:	fb0a 551c 	mls	r5, sl, ip, r5
 8001034:	9501      	str	r5, [sp, #4]
 8001036:	4454      	add	r4, sl
 8001038:	4645      	mov	r5, r8
 800103a:	1bee      	subs	r6, r5, r7
 800103c:	fb97 fcf5 	sdiv	ip, r7, r5
 8001040:	fb05 6c0c 	mla	ip, r5, ip, r6
 8001044:	fb9c f6f5 	sdiv	r6, ip, r5
 8001048:	fb05 cc16 	mls	ip, r5, r6, ip
 800104c:	f8cd c000 	str.w	ip, [sp]
 8001050:	1e64      	subs	r4, r4, #1
 8001052:	9e01      	ldr	r6, [sp, #4]
 8001054:	1b80      	subs	r0, r0, r6
 8001056:	4450      	add	r0, sl
 8001058:	1e40      	subs	r0, r0, #1
 800105a:	fb90 f0fa 	sdiv	r0, r0, sl
 800105e:	9e00      	ldr	r6, [sp, #0]
 8001060:	1b9b      	subs	r3, r3, r6
 8001062:	fbb1 f6f2 	udiv	r6, r1, r2
 8001066:	18eb      	adds	r3, r5, r3
 8001068:	1e5b      	subs	r3, r3, #1
 800106a:	fb93 fcf5 	sdiv	ip, r3, r5
 800106e:	ebae 0e0c 	sub.w	lr, lr, ip
 8001072:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001074:	9604      	str	r6, [sp, #16]
 8001076:	fbb3 f3f2 	udiv	r3, r3, r2
 800107a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800107c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800107e:	fb01 f808 	mul.w	r8, r1, r8
 8001082:	fb00 881a 	mls	r8, r0, sl, r8
 8001086:	fb06 f808 	mul.w	r8, r6, r8
 800108a:	fb06 f109 	mul.w	r1, r6, r9
 800108e:	9e16      	ldr	r6, [sp, #88]	; 0x58
 8001090:	435e      	muls	r6, r3
 8001092:	fb0e fe06 	mul.w	lr, lr, r6
 8001096:	19ee      	adds	r6, r5, r7
 8001098:	1e76      	subs	r6, r6, #1
 800109a:	fb96 f5f5 	sdiv	r5, r6, r5
 800109e:	9e16      	ldr	r6, [sp, #88]	; 0x58
 80010a0:	fb94 f4fa 	sdiv	r4, r4, sl
 80010a4:	eba1 0903 	sub.w	r9, r1, r3
 80010a8:	fb06 4405 	mla	r4, r6, r5, r4
 80010ac:	9e06      	ldr	r6, [sp, #24]
 80010ae:	9916      	ldr	r1, [sp, #88]	; 0x58
 80010b0:	9d05      	ldr	r5, [sp, #20]
 80010b2:	435c      	muls	r4, r3
 80010b4:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 80010b8:	1a09      	subs	r1, r1, r0
 80010ba:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80010bc:	4359      	muls	r1, r3
 80010be:	42ae      	cmp	r6, r5
 80010c0:	9d00      	ldr	r5, [sp, #0]
 80010c2:	9e01      	ldr	r6, [sp, #4]
 80010c4:	442f      	add	r7, r5
 80010c6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80010c8:	fb05 6507 	mla	r5, r5, r7, r6
 80010cc:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80010ce:	bf0c      	ite	eq
 80010d0:	ed9f 0a3d 	vldreq	s0, [pc, #244]	; 80011c8 <.text_6>
 80010d4:	eeb7 0a00 	vmovne.f32	s0, #112	; 0x3f800000  1.0
 80010d8:	437d      	muls	r5, r7
 80010da:	2a00      	cmp	r2, #0
 80010dc:	eb0b 0585 	add.w	r5, fp, r5, lsl #2
 80010e0:	f04f 0a00 	mov.w	sl, #0
 80010e4:	d06d      	beq.n	80011c2 <ai_conv2d_kernel_group_f32+0x1c6>
 80010e6:	9200      	str	r2, [sp, #0]
 80010e8:	9a04      	ldr	r2, [sp, #16]
 80010ea:	2a00      	cmp	r2, #0
 80010ec:	d063      	beq.n	80011b6 <ai_conv2d_kernel_group_f32+0x1ba>
 80010ee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80010f0:	9f05      	ldr	r7, [sp, #20]
 80010f2:	f8cd c004 	str.w	ip, [sp, #4]
 80010f6:	eb02 0b8a 	add.w	fp, r2, sl, lsl #2
 80010fa:	9a04      	ldr	r2, [sp, #16]
 80010fc:	f8cd e00c 	str.w	lr, [sp, #12]
 8001100:	eb07 078a 	add.w	r7, r7, sl, lsl #2
 8001104:	f8cd 5008 	str.w	r5, [sp, #8]
 8001108:	f8dd e004 	ldr.w	lr, [sp, #4]
 800110c:	eddb 0a00 	vldr	s1, [fp]
 8001110:	9d02      	ldr	r5, [sp, #8]
 8001112:	f1be 0f01 	cmp.w	lr, #1
 8001116:	ee60 0a80 	vmul.f32	s1, s1, s0
 800111a:	db3b      	blt.n	8001194 <ai_conv2d_kernel_group_f32+0x198>
 800111c:	2801      	cmp	r0, #1
 800111e:	db32      	blt.n	8001186 <ai_conv2d_kernel_group_f32+0x18a>
 8001120:	ea4f 0c00 	mov.w	ip, r0
 8001124:	eb05 0683 	add.w	r6, r5, r3, lsl #2
 8001128:	42b5      	cmp	r5, r6
 800112a:	d227      	bcs.n	800117c <ai_conv2d_kernel_group_f32+0x180>
 800112c:	ed94 1a00 	vldr	s2, [r4]
 8001130:	edd5 1a00 	vldr	s3, [r5]
 8001134:	1d24      	adds	r4, r4, #4
 8001136:	1d2d      	adds	r5, r5, #4
 8001138:	42b5      	cmp	r5, r6
 800113a:	ee41 0a21 	vmla.f32	s1, s2, s3
 800113e:	d21d      	bcs.n	800117c <ai_conv2d_kernel_group_f32+0x180>
 8001140:	ed94 1a00 	vldr	s2, [r4]
 8001144:	edd5 1a00 	vldr	s3, [r5]
 8001148:	1d24      	adds	r4, r4, #4
 800114a:	1d2d      	adds	r5, r5, #4
 800114c:	42b5      	cmp	r5, r6
 800114e:	ee41 0a21 	vmla.f32	s1, s2, s3
 8001152:	d213      	bcs.n	800117c <ai_conv2d_kernel_group_f32+0x180>
 8001154:	ed94 1a00 	vldr	s2, [r4]
 8001158:	edd5 1a00 	vldr	s3, [r5]
 800115c:	1d24      	adds	r4, r4, #4
 800115e:	1d2d      	adds	r5, r5, #4
 8001160:	42b5      	cmp	r5, r6
 8001162:	ee41 0a21 	vmla.f32	s1, s2, s3
 8001166:	d209      	bcs.n	800117c <ai_conv2d_kernel_group_f32+0x180>
 8001168:	ed94 1a00 	vldr	s2, [r4]
 800116c:	edd5 1a00 	vldr	s3, [r5]
 8001170:	1d24      	adds	r4, r4, #4
 8001172:	1d2d      	adds	r5, r5, #4
 8001174:	42b5      	cmp	r5, r6
 8001176:	ee41 0a21 	vmla.f32	s1, s2, s3
 800117a:	d3d7      	bcc.n	800112c <ai_conv2d_kernel_group_f32+0x130>
 800117c:	f1bc 0c01 	subs.w	ip, ip, #1
 8001180:	eb05 0589 	add.w	r5, r5, r9, lsl #2
 8001184:	d1ce      	bne.n	8001124 <ai_conv2d_kernel_group_f32+0x128>
 8001186:	f1be 0e01 	subs.w	lr, lr, #1
 800118a:	eb05 0588 	add.w	r5, r5, r8, lsl #2
 800118e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8001192:	d1c3      	bne.n	800111c <ai_conv2d_kernel_group_f32+0x120>
 8001194:	9d03      	ldr	r5, [sp, #12]
 8001196:	edc7 0a00 	vstr	s1, [r7]
 800119a:	1d3f      	adds	r7, r7, #4
 800119c:	1e52      	subs	r2, r2, #1
 800119e:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 80011a2:	f10a 0a01 	add.w	sl, sl, #1
 80011a6:	f10b 0b04 	add.w	fp, fp, #4
 80011aa:	d1ad      	bne.n	8001108 <ai_conv2d_kernel_group_f32+0x10c>
 80011ac:	f8dd c004 	ldr.w	ip, [sp, #4]
 80011b0:	f8dd e00c 	ldr.w	lr, [sp, #12]
 80011b4:	9d02      	ldr	r5, [sp, #8]
 80011b6:	9a00      	ldr	r2, [sp, #0]
 80011b8:	1e52      	subs	r2, r2, #1
 80011ba:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 80011be:	9200      	str	r2, [sp, #0]
 80011c0:	d192      	bne.n	80010e8 <ai_conv2d_kernel_group_f32+0xec>
 80011c2:	b007      	add	sp, #28
 80011c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080011c8 <.text_6>:
 80011c8:	00000000 	.word	0x00000000

080011cc <ai_conv2d_kernel_f32>:
 80011cc:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011d0:	b090      	sub	sp, #64	; 0x40
 80011d2:	991a      	ldr	r1, [sp, #104]	; 0x68
 80011d4:	b901      	cbnz	r1, 80011d8 <ai_conv2d_kernel_f32+0xc>
 80011d6:	9910      	ldr	r1, [sp, #64]	; 0x40
 80011d8:	9c26      	ldr	r4, [sp, #152]	; 0x98
 80011da:	9e25      	ldr	r6, [sp, #148]	; 0x94
 80011dc:	9d24      	ldr	r5, [sp, #144]	; 0x90
 80011de:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 80011e0:	f8dd e088 	ldr.w	lr, [sp, #136]	; 0x88
 80011e4:	f9bd c078 	ldrsh.w	ip, [sp, #120]	; 0x78
 80011e8:	f9bd 807c 	ldrsh.w	r8, [sp, #124]	; 0x7c
 80011ec:	900f      	str	r0, [sp, #60]	; 0x3c
 80011ee:	1bed      	subs	r5, r5, r7
 80011f0:	1ba4      	subs	r4, r4, r6
 80011f2:	920e      	str	r2, [sp, #56]	; 0x38
 80011f4:	930d      	str	r3, [sp, #52]	; 0x34
 80011f6:	f1be 0f01 	cmp.w	lr, #1
 80011fa:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80011fc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80011fe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8001200:	f8dd 9080 	ldr.w	r9, [sp, #128]	; 0x80
 8001204:	f8dd a084 	ldr.w	sl, [sp, #132]	; 0x84
 8001208:	bf04      	itt	eq
 800120a:	fb1c fb08 	smulbbeq	fp, ip, r8
 800120e:	f1bb 0f01 	cmpeq.w	fp, #1
 8001212:	d114      	bne.n	800123e <ai_conv2d_kernel_f32+0x72>
 8001214:	9303      	str	r3, [sp, #12]
 8001216:	9202      	str	r2, [sp, #8]
 8001218:	9001      	str	r0, [sp, #4]
 800121a:	9100      	str	r1, [sp, #0]
 800121c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800121e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001220:	9910      	ldr	r1, [sp, #64]	; 0x40
 8001222:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8001224:	9409      	str	r4, [sp, #36]	; 0x24
 8001226:	9608      	str	r6, [sp, #32]
 8001228:	9507      	str	r5, [sp, #28]
 800122a:	9706      	str	r7, [sp, #24]
 800122c:	f8cd a014 	str.w	sl, [sp, #20]
 8001230:	f8cd 9010 	str.w	r9, [sp, #16]
 8001234:	f7ff fd62 	bl	8000cfc <ai_conv2d_kernel_simple_f32>
 8001238:	b011      	add	sp, #68	; 0x44
 800123a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800123e:	4586      	cmp	lr, r0
 8001240:	bf04      	itt	eq
 8001242:	fb1c fb08 	smulbbeq	fp, ip, r8
 8001246:	f1bb 0f01 	cmpeq.w	fp, #1
 800124a:	d114      	bne.n	8001276 <ai_conv2d_kernel_f32+0xaa>
 800124c:	9303      	str	r3, [sp, #12]
 800124e:	9202      	str	r2, [sp, #8]
 8001250:	9001      	str	r0, [sp, #4]
 8001252:	9100      	str	r1, [sp, #0]
 8001254:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001256:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001258:	9910      	ldr	r1, [sp, #64]	; 0x40
 800125a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800125c:	9409      	str	r4, [sp, #36]	; 0x24
 800125e:	9608      	str	r6, [sp, #32]
 8001260:	9507      	str	r5, [sp, #28]
 8001262:	9706      	str	r7, [sp, #24]
 8001264:	f8cd a014 	str.w	sl, [sp, #20]
 8001268:	f8cd 9010 	str.w	r9, [sp, #16]
 800126c:	f7ff fdf2 	bl	8000e54 <ai_conv2d_kernel_depthwise_f32>
 8001270:	b011      	add	sp, #68	; 0x44
 8001272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001276:	9303      	str	r3, [sp, #12]
 8001278:	9202      	str	r2, [sp, #8]
 800127a:	9001      	str	r0, [sp, #4]
 800127c:	9100      	str	r1, [sp, #0]
 800127e:	f8cd e020 	str.w	lr, [sp, #32]
 8001282:	f8cd c010 	str.w	ip, [sp, #16]
 8001286:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001288:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800128a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800128c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800128e:	940c      	str	r4, [sp, #48]	; 0x30
 8001290:	960b      	str	r6, [sp, #44]	; 0x2c
 8001292:	950a      	str	r5, [sp, #40]	; 0x28
 8001294:	9709      	str	r7, [sp, #36]	; 0x24
 8001296:	f8cd a01c 	str.w	sl, [sp, #28]
 800129a:	f8cd 9018 	str.w	r9, [sp, #24]
 800129e:	f8cd 8014 	str.w	r8, [sp, #20]
 80012a2:	f7ff feab 	bl	8000ffc <ai_conv2d_kernel_group_f32>
 80012a6:	b011      	add	sp, #68	; 0x44
 80012a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080012ac <ai_conv2d_stripe_f32>:
 80012ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012b0:	b091      	sub	sp, #68	; 0x44
 80012b2:	4604      	mov	r4, r0
 80012b4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80012b8:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 80012ba:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
 80012be:	9826      	ldr	r0, [sp, #152]	; 0x98
 80012c0:	fb08 b000 	mla	r0, r8, r0, fp
 80012c4:	2d00      	cmp	r5, #0
 80012c6:	9001      	str	r0, [sp, #4]
 80012c8:	d05d      	beq.n	8001386 <ai_conv2d_stripe_f32+0xda>
 80012ca:	9102      	str	r1, [sp, #8]
 80012cc:	920e      	str	r2, [sp, #56]	; 0x38
 80012ce:	9500      	str	r5, [sp, #0]
 80012d0:	930d      	str	r3, [sp, #52]	; 0x34
 80012d2:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80012d4:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80012d6:	971a      	str	r7, [sp, #104]	; 0x68
 80012d8:	4625      	mov	r5, r4
 80012da:	950f      	str	r5, [sp, #60]	; 0x3c
 80012dc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80012de:	9c20      	ldr	r4, [sp, #128]	; 0x80
 80012e0:	f8dd c088 	ldr.w	ip, [sp, #136]	; 0x88
 80012e4:	f8dd e08c 	ldr.w	lr, [sp, #140]	; 0x8c
 80012e8:	9821      	ldr	r0, [sp, #132]	; 0x84
 80012ea:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 80012ee:	f9bd 10a0 	ldrsh.w	r1, [sp, #160]	; 0xa0
 80012f2:	f9bd 20a4 	ldrsh.w	r2, [sp, #164]	; 0xa4
 80012f6:	9d02      	ldr	r5, [sp, #8]
 80012f8:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 80012fa:	931f      	str	r3, [sp, #124]	; 0x7c
 80012fc:	9420      	str	r4, [sp, #128]	; 0x80
 80012fe:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
 8001302:	f8cd e08c 	str.w	lr, [sp, #140]	; 0x8c
 8001306:	9624      	str	r6, [sp, #144]	; 0x90
 8001308:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 800130a:	f8dd a004 	ldr.w	sl, [sp, #4]
 800130e:	9c00      	ldr	r4, [sp, #0]
 8001310:	f8ad 10a0 	strh.w	r1, [sp, #160]	; 0xa0
 8001314:	f8ad 20a4 	strh.w	r2, [sp, #164]	; 0xa4
 8001318:	f8ad 0084 	strh.w	r0, [sp, #132]	; 0x84
 800131c:	f1db 0000 	rsbs	r0, fp, #0
 8001320:	bfd8      	it	le
 8001322:	2000      	movle	r0, #0
 8001324:	eba8 010b 	sub.w	r1, r8, fp
 8001328:	42b1      	cmp	r1, r6
 800132a:	bf28      	it	cs
 800132c:	4631      	movcs	r1, r6
 800132e:	910c      	str	r1, [sp, #48]	; 0x30
 8001330:	900b      	str	r0, [sp, #44]	; 0x2c
 8001332:	f8cd 800c 	str.w	r8, [sp, #12]
 8001336:	9702      	str	r7, [sp, #8]
 8001338:	f8cd 9004 	str.w	r9, [sp, #4]
 800133c:	4450      	add	r0, sl
 800133e:	9924      	ldr	r1, [sp, #144]	; 0x90
 8001340:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8001342:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001344:	910a      	str	r1, [sp, #40]	; 0x28
 8001346:	9209      	str	r2, [sp, #36]	; 0x24
 8001348:	fb00 f009 	mul.w	r0, r0, r9
 800134c:	9922      	ldr	r1, [sp, #136]	; 0x88
 800134e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8001350:	9108      	str	r1, [sp, #32]
 8001352:	9207      	str	r2, [sp, #28]
 8001354:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8001356:	f9bd 20a4 	ldrsh.w	r2, [sp, #164]	; 0xa4
 800135a:	9106      	str	r1, [sp, #24]
 800135c:	9205      	str	r2, [sp, #20]
 800135e:	f9bd 10a0 	ldrsh.w	r1, [sp, #160]	; 0xa0
 8001362:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8001364:	9104      	str	r1, [sp, #16]
 8001366:	9200      	str	r2, [sp, #0]
 8001368:	990e      	ldr	r1, [sp, #56]	; 0x38
 800136a:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 800136e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8001370:	4629      	mov	r1, r5
 8001372:	f7ff ff2b 	bl	80011cc <ai_conv2d_kernel_f32>
 8001376:	f8bd 0084 	ldrh.w	r0, [sp, #132]	; 0x84
 800137a:	1e64      	subs	r4, r4, #1
 800137c:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 8001380:	4483      	add	fp, r0
 8001382:	4482      	add	sl, r0
 8001384:	d1ca      	bne.n	800131c <ai_conv2d_stripe_f32+0x70>
 8001386:	b011      	add	sp, #68	; 0x44
 8001388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800138c <func_dummy>:
 800138c:	4770      	bx	lr
	...

08001390 <ai_dict8_dot_array_f32>:
 8001390:	b4f0      	push	{r4, r5, r6, r7}
 8001392:	4604      	mov	r4, r0
 8001394:	9804      	ldr	r0, [sp, #16]
 8001396:	eb03 0580 	add.w	r5, r3, r0, lsl #2
 800139a:	3d20      	subs	r5, #32
 800139c:	2808      	cmp	r0, #8
 800139e:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 8001704 <.text_12>
 80013a2:	d22f      	bcs.n	8001404 <ai_dict8_dot_array_f32+0x74>
 80013a4:	3520      	adds	r5, #32
 80013a6:	42ab      	cmp	r3, r5
 80013a8:	d224      	bcs.n	80013f4 <ai_dict8_dot_array_f32+0x64>
 80013aa:	7808      	ldrb	r0, [r1, #0]
 80013ac:	ed93 1a00 	vldr	s2, [r3]
 80013b0:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 80013b4:	1d18      	adds	r0, r3, #4
 80013b6:	edd6 0a00 	vldr	s1, [r6]
 80013ba:	42a8      	cmp	r0, r5
 80013bc:	ee00 0a81 	vmla.f32	s0, s1, s2
 80013c0:	d218      	bcs.n	80013f4 <ai_dict8_dot_array_f32+0x64>
 80013c2:	784b      	ldrb	r3, [r1, #1]
 80013c4:	ed90 1a00 	vldr	s2, [r0]
 80013c8:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 80013cc:	1d00      	adds	r0, r0, #4
 80013ce:	edd6 0a00 	vldr	s1, [r6]
 80013d2:	42a8      	cmp	r0, r5
 80013d4:	ee00 0a81 	vmla.f32	s0, s1, s2
 80013d8:	d20c      	bcs.n	80013f4 <ai_dict8_dot_array_f32+0x64>
 80013da:	788b      	ldrb	r3, [r1, #2]
 80013dc:	ed90 1a00 	vldr	s2, [r0]
 80013e0:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 80013e4:	1d03      	adds	r3, r0, #4
 80013e6:	1cc9      	adds	r1, r1, #3
 80013e8:	edd6 0a00 	vldr	s1, [r6]
 80013ec:	42ab      	cmp	r3, r5
 80013ee:	ee00 0a81 	vmla.f32	s0, s1, s2
 80013f2:	d3da      	bcc.n	80013aa <ai_dict8_dot_array_f32+0x1a>
 80013f4:	edd4 0a00 	vldr	s1, [r4]
 80013f8:	ee30 0a80 	vadd.f32	s0, s1, s0
 80013fc:	ed84 0a00 	vstr	s0, [r4]
 8001400:	bcf0      	pop	{r4, r5, r6, r7}
 8001402:	4770      	bx	lr
 8001404:	f001 0003 	and.w	r0, r1, #3
 8001408:	2803      	cmp	r0, #3
 800140a:	d8f3      	bhi.n	80013f4 <ai_dict8_dot_array_f32+0x64>
 800140c:	e8df f000 	tbb	[pc, r0]
 8001410:	4c413603 	.word	0x4c413603
 8001414:	e7ee      	b.n	80013f4 <ai_dict8_dot_array_f32+0x64>
 8001416:	429d      	cmp	r5, r3
 8001418:	f080 80d5 	bcs.w	80015c6 <ai_dict8_dot_array_f32+0x236>
 800141c:	3520      	adds	r5, #32
 800141e:	42ab      	cmp	r3, r5
 8001420:	d2e8      	bcs.n	80013f4 <ai_dict8_dot_array_f32+0x64>
 8001422:	7808      	ldrb	r0, [r1, #0]
 8001424:	ed93 1a00 	vldr	s2, [r3]
 8001428:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 800142c:	1d18      	adds	r0, r3, #4
 800142e:	edd6 0a00 	vldr	s1, [r6]
 8001432:	42a8      	cmp	r0, r5
 8001434:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001438:	d2dc      	bcs.n	80013f4 <ai_dict8_dot_array_f32+0x64>
 800143a:	784b      	ldrb	r3, [r1, #1]
 800143c:	ed90 1a00 	vldr	s2, [r0]
 8001440:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 8001444:	1d00      	adds	r0, r0, #4
 8001446:	edd6 0a00 	vldr	s1, [r6]
 800144a:	42a8      	cmp	r0, r5
 800144c:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001450:	d2d0      	bcs.n	80013f4 <ai_dict8_dot_array_f32+0x64>
 8001452:	788b      	ldrb	r3, [r1, #2]
 8001454:	ed90 1a00 	vldr	s2, [r0]
 8001458:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 800145c:	1d03      	adds	r3, r0, #4
 800145e:	1cc9      	adds	r1, r1, #3
 8001460:	edd6 0a00 	vldr	s1, [r6]
 8001464:	42ab      	cmp	r3, r5
 8001466:	ee00 0a81 	vmla.f32	s0, s1, s2
 800146a:	d3da      	bcc.n	8001422 <ai_dict8_dot_array_f32+0x92>
 800146c:	edd4 0a00 	vldr	s1, [r4]
 8001470:	ee30 0a80 	vadd.f32	s0, s1, s0
 8001474:	ed84 0a00 	vstr	s0, [r4]
 8001478:	bcf0      	pop	{r4, r5, r6, r7}
 800147a:	4770      	bx	lr
 800147c:	f811 0b01 	ldrb.w	r0, [r1], #1
 8001480:	ed93 1a00 	vldr	s2, [r3]
 8001484:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 8001488:	1d1b      	adds	r3, r3, #4
 800148a:	edd6 0a00 	vldr	s1, [r6]
 800148e:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001492:	f811 0b01 	ldrb.w	r0, [r1], #1
 8001496:	ed93 1a00 	vldr	s2, [r3]
 800149a:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 800149e:	1d1b      	adds	r3, r3, #4
 80014a0:	edd6 0a00 	vldr	s1, [r6]
 80014a4:	ee00 0a81 	vmla.f32	s0, s1, s2
 80014a8:	f811 0b01 	ldrb.w	r0, [r1], #1
 80014ac:	ed93 1a00 	vldr	s2, [r3]
 80014b0:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 80014b4:	1d1b      	adds	r3, r3, #4
 80014b6:	edd6 0a00 	vldr	s1, [r6]
 80014ba:	429d      	cmp	r5, r3
 80014bc:	ee00 0a81 	vmla.f32	s0, s1, s2
 80014c0:	d34e      	bcc.n	8001560 <ai_dict8_dot_array_f32+0x1d0>
 80014c2:	78cf      	ldrb	r7, [r1, #3]
 80014c4:	ed93 4a00 	vldr	s8, [r3]
 80014c8:	ed93 3a01 	vldr	s6, [r3, #4]
 80014cc:	ed93 2a02 	vldr	s4, [r3, #8]
 80014d0:	ed93 1a03 	vldr	s2, [r3, #12]
 80014d4:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 80014d8:	788f      	ldrb	r7, [r1, #2]
 80014da:	edd6 0a00 	vldr	s1, [r6]
 80014de:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 80014e2:	784f      	ldrb	r7, [r1, #1]
 80014e4:	edd6 1a00 	vldr	s3, [r6]
 80014e8:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 80014ec:	780f      	ldrb	r7, [r1, #0]
 80014ee:	edd6 2a00 	vldr	s5, [r6]
 80014f2:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 80014f6:	f103 0010 	add.w	r0, r3, #16
 80014fa:	edd6 3a00 	vldr	s7, [r6]
 80014fe:	790b      	ldrb	r3, [r1, #4]
 8001500:	ee03 0a84 	vmla.f32	s0, s7, s8
 8001504:	ee02 0a83 	vmla.f32	s0, s5, s6
 8001508:	ee01 0a82 	vmla.f32	s0, s3, s4
 800150c:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 8001510:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001514:	794b      	ldrb	r3, [r1, #5]
 8001516:	edd7 0a00 	vldr	s1, [r7]
 800151a:	ed90 4a00 	vldr	s8, [r0]
 800151e:	edd0 3a01 	vldr	s7, [r0, #4]
 8001522:	ed90 3a02 	vldr	s6, [r0, #8]
 8001526:	edd0 2a03 	vldr	s5, [r0, #12]
 800152a:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 800152e:	798b      	ldrb	r3, [r1, #6]
 8001530:	ed97 1a00 	vldr	s2, [r7]
 8001534:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 8001538:	79cb      	ldrb	r3, [r1, #7]
 800153a:	edd7 1a00 	vldr	s3, [r7]
 800153e:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 8001542:	ee00 0a84 	vmla.f32	s0, s1, s8
 8001546:	3108      	adds	r1, #8
 8001548:	f100 0310 	add.w	r3, r0, #16
 800154c:	ee01 0a23 	vmla.f32	s0, s2, s7
 8001550:	ed97 2a00 	vldr	s4, [r7]
 8001554:	ee01 0a83 	vmla.f32	s0, s3, s6
 8001558:	429d      	cmp	r5, r3
 800155a:	ee02 0a22 	vmla.f32	s0, s4, s5
 800155e:	d2b0      	bcs.n	80014c2 <ai_dict8_dot_array_f32+0x132>
 8001560:	3520      	adds	r5, #32
 8001562:	42ab      	cmp	r3, r5
 8001564:	f4bf af46 	bcs.w	80013f4 <ai_dict8_dot_array_f32+0x64>
 8001568:	7808      	ldrb	r0, [r1, #0]
 800156a:	ed93 1a00 	vldr	s2, [r3]
 800156e:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 8001572:	1d18      	adds	r0, r3, #4
 8001574:	edd6 0a00 	vldr	s1, [r6]
 8001578:	42a8      	cmp	r0, r5
 800157a:	ee00 0a81 	vmla.f32	s0, s1, s2
 800157e:	f4bf af39 	bcs.w	80013f4 <ai_dict8_dot_array_f32+0x64>
 8001582:	784b      	ldrb	r3, [r1, #1]
 8001584:	ed90 1a00 	vldr	s2, [r0]
 8001588:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 800158c:	1d00      	adds	r0, r0, #4
 800158e:	edd6 0a00 	vldr	s1, [r6]
 8001592:	42a8      	cmp	r0, r5
 8001594:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001598:	f4bf af2c 	bcs.w	80013f4 <ai_dict8_dot_array_f32+0x64>
 800159c:	788b      	ldrb	r3, [r1, #2]
 800159e:	ed90 1a00 	vldr	s2, [r0]
 80015a2:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 80015a6:	1d03      	adds	r3, r0, #4
 80015a8:	1cc9      	adds	r1, r1, #3
 80015aa:	edd6 0a00 	vldr	s1, [r6]
 80015ae:	42ab      	cmp	r3, r5
 80015b0:	ee00 0a81 	vmla.f32	s0, s1, s2
 80015b4:	d3d8      	bcc.n	8001568 <ai_dict8_dot_array_f32+0x1d8>
 80015b6:	edd4 0a00 	vldr	s1, [r4]
 80015ba:	ee30 0a80 	vadd.f32	s0, s1, s0
 80015be:	ed84 0a00 	vstr	s0, [r4]
 80015c2:	bcf0      	pop	{r4, r5, r6, r7}
 80015c4:	4770      	bx	lr
 80015c6:	78cf      	ldrb	r7, [r1, #3]
 80015c8:	ed93 4a00 	vldr	s8, [r3]
 80015cc:	ed93 3a01 	vldr	s6, [r3, #4]
 80015d0:	ed93 2a02 	vldr	s4, [r3, #8]
 80015d4:	ed93 1a03 	vldr	s2, [r3, #12]
 80015d8:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 80015dc:	788f      	ldrb	r7, [r1, #2]
 80015de:	edd6 0a00 	vldr	s1, [r6]
 80015e2:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 80015e6:	784f      	ldrb	r7, [r1, #1]
 80015e8:	edd6 1a00 	vldr	s3, [r6]
 80015ec:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 80015f0:	780f      	ldrb	r7, [r1, #0]
 80015f2:	edd6 2a00 	vldr	s5, [r6]
 80015f6:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 80015fa:	f103 0010 	add.w	r0, r3, #16
 80015fe:	edd6 3a00 	vldr	s7, [r6]
 8001602:	790b      	ldrb	r3, [r1, #4]
 8001604:	ee03 0a84 	vmla.f32	s0, s7, s8
 8001608:	ee02 0a83 	vmla.f32	s0, s5, s6
 800160c:	ee01 0a82 	vmla.f32	s0, s3, s4
 8001610:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 8001614:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001618:	794b      	ldrb	r3, [r1, #5]
 800161a:	edd7 0a00 	vldr	s1, [r7]
 800161e:	ed90 4a00 	vldr	s8, [r0]
 8001622:	edd0 3a01 	vldr	s7, [r0, #4]
 8001626:	ed90 3a02 	vldr	s6, [r0, #8]
 800162a:	edd0 2a03 	vldr	s5, [r0, #12]
 800162e:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 8001632:	798b      	ldrb	r3, [r1, #6]
 8001634:	ed97 1a00 	vldr	s2, [r7]
 8001638:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 800163c:	79cb      	ldrb	r3, [r1, #7]
 800163e:	edd7 1a00 	vldr	s3, [r7]
 8001642:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 8001646:	ee00 0a84 	vmla.f32	s0, s1, s8
 800164a:	3108      	adds	r1, #8
 800164c:	f100 0310 	add.w	r3, r0, #16
 8001650:	ee01 0a23 	vmla.f32	s0, s2, s7
 8001654:	ed97 2a00 	vldr	s4, [r7]
 8001658:	ee01 0a83 	vmla.f32	s0, s3, s6
 800165c:	429d      	cmp	r5, r3
 800165e:	ee02 0a22 	vmla.f32	s0, s4, s5
 8001662:	d2b0      	bcs.n	80015c6 <ai_dict8_dot_array_f32+0x236>
 8001664:	e6da      	b.n	800141c <ai_dict8_dot_array_f32+0x8c>
	...

08001668 <ai_dict4_dot_array_f32>:
 8001668:	b4f0      	push	{r4, r5, r6, r7}
 800166a:	9c04      	ldr	r4, [sp, #16]
 800166c:	0865      	lsrs	r5, r4, #1
 800166e:	006d      	lsls	r5, r5, #1
 8001670:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8001674:	42ab      	cmp	r3, r5
 8001676:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8001704 <.text_12>
 800167a:	d22f      	bcs.n	80016dc <ai_dict4_dot_array_f32+0x74>
 800167c:	f811 6b01 	ldrb.w	r6, [r1], #1
 8001680:	ed93 2a00 	vldr	s4, [r3]
 8001684:	ed93 1a01 	vldr	s2, [r3, #4]
 8001688:	f006 070f 	and.w	r7, r6, #15
 800168c:	0936      	lsrs	r6, r6, #4
 800168e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8001692:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8001696:	edd6 1a00 	vldr	s3, [r6]
 800169a:	edd7 0a00 	vldr	s1, [r7]
 800169e:	3308      	adds	r3, #8
 80016a0:	ee01 0a82 	vmla.f32	s0, s3, s4
 80016a4:	42ab      	cmp	r3, r5
 80016a6:	ee00 0a81 	vmla.f32	s0, s1, s2
 80016aa:	d217      	bcs.n	80016dc <ai_dict4_dot_array_f32+0x74>
 80016ac:	f811 6b01 	ldrb.w	r6, [r1], #1
 80016b0:	ed93 2a00 	vldr	s4, [r3]
 80016b4:	ed93 1a01 	vldr	s2, [r3, #4]
 80016b8:	f006 070f 	and.w	r7, r6, #15
 80016bc:	0936      	lsrs	r6, r6, #4
 80016be:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80016c2:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80016c6:	edd6 1a00 	vldr	s3, [r6]
 80016ca:	edd7 0a00 	vldr	s1, [r7]
 80016ce:	3308      	adds	r3, #8
 80016d0:	ee01 0a82 	vmla.f32	s0, s3, s4
 80016d4:	42ab      	cmp	r3, r5
 80016d6:	ee00 0a81 	vmla.f32	s0, s1, s2
 80016da:	d3cf      	bcc.n	800167c <ai_dict4_dot_array_f32+0x14>
 80016dc:	07e4      	lsls	r4, r4, #31
 80016de:	d509      	bpl.n	80016f4 <ai_dict4_dot_array_f32+0x8c>
 80016e0:	7809      	ldrb	r1, [r1, #0]
 80016e2:	ed93 1a00 	vldr	s2, [r3]
 80016e6:	0909      	lsrs	r1, r1, #4
 80016e8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80016ec:	edd2 0a00 	vldr	s1, [r2]
 80016f0:	ee00 0a81 	vmla.f32	s0, s1, s2
 80016f4:	edd0 1a00 	vldr	s3, [r0]
 80016f8:	ee31 0a80 	vadd.f32	s0, s3, s0
 80016fc:	ed80 0a00 	vstr	s0, [r0]
 8001700:	bcf0      	pop	{r4, r5, r6, r7}
 8001702:	4770      	bx	lr

08001704 <.text_12>:
 8001704:	00000000 	.word	0x00000000

08001708 <ai_dict_decompress_f32>:
 8001708:	b4f0      	push	{r4, r5, r6, r7}
 800170a:	4604      	mov	r4, r0
 800170c:	9805      	ldr	r0, [sp, #20]
 800170e:	9e04      	ldr	r6, [sp, #16]
 8001710:	2b04      	cmp	r3, #4
 8001712:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8001716:	d003      	beq.n	8001720 <ai_dict_decompress_f32+0x18>
 8001718:	2b08      	cmp	r3, #8
 800171a:	d03e      	beq.n	800179a <ai_dict_decompress_f32+0x92>
 800171c:	bcf0      	pop	{r4, r5, r6, r7}
 800171e:	4770      	bx	lr
 8001720:	42ac      	cmp	r4, r5
 8001722:	d259      	bcs.n	80017d8 <ai_dict_decompress_f32+0xd0>
 8001724:	0870      	lsrs	r0, r6, #1
 8001726:	d02e      	beq.n	8001786 <ai_dict_decompress_f32+0x7e>
 8001728:	07c3      	lsls	r3, r0, #31
 800172a:	d50c      	bpl.n	8001746 <ai_dict_decompress_f32+0x3e>
 800172c:	780f      	ldrb	r7, [r1, #0]
 800172e:	093f      	lsrs	r7, r7, #4
 8001730:	f852 3027 	ldr.w	r3, [r2, r7, lsl #2]
 8001734:	6023      	str	r3, [r4, #0]
 8001736:	f811 7b01 	ldrb.w	r7, [r1], #1
 800173a:	f007 070f 	and.w	r7, r7, #15
 800173e:	f852 3027 	ldr.w	r3, [r2, r7, lsl #2]
 8001742:	6063      	str	r3, [r4, #4]
 8001744:	3408      	adds	r4, #8
 8001746:	0840      	lsrs	r0, r0, #1
 8001748:	d01d      	beq.n	8001786 <ai_dict_decompress_f32+0x7e>
 800174a:	780b      	ldrb	r3, [r1, #0]
 800174c:	091b      	lsrs	r3, r3, #4
 800174e:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
 8001752:	6027      	str	r7, [r4, #0]
 8001754:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001758:	f003 030f 	and.w	r3, r3, #15
 800175c:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
 8001760:	6067      	str	r7, [r4, #4]
 8001762:	f104 0308 	add.w	r3, r4, #8
 8001766:	780c      	ldrb	r4, [r1, #0]
 8001768:	0924      	lsrs	r4, r4, #4
 800176a:	f852 7024 	ldr.w	r7, [r2, r4, lsl #2]
 800176e:	601f      	str	r7, [r3, #0]
 8001770:	1e40      	subs	r0, r0, #1
 8001772:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001776:	f004 040f 	and.w	r4, r4, #15
 800177a:	f852 7024 	ldr.w	r7, [r2, r4, lsl #2]
 800177e:	605f      	str	r7, [r3, #4]
 8001780:	f103 0408 	add.w	r4, r3, #8
 8001784:	d1e1      	bne.n	800174a <ai_dict_decompress_f32+0x42>
 8001786:	07f0      	lsls	r0, r6, #31
 8001788:	d5ca      	bpl.n	8001720 <ai_dict_decompress_f32+0x18>
 800178a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800178e:	091b      	lsrs	r3, r3, #4
 8001790:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001794:	f844 0b04 	str.w	r0, [r4], #4
 8001798:	e7c2      	b.n	8001720 <ai_dict_decompress_f32+0x18>
 800179a:	42ac      	cmp	r4, r5
 800179c:	d21c      	bcs.n	80017d8 <ai_dict_decompress_f32+0xd0>
 800179e:	780b      	ldrb	r3, [r1, #0]
 80017a0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80017a4:	6020      	str	r0, [r4, #0]
 80017a6:	1d20      	adds	r0, r4, #4
 80017a8:	42a8      	cmp	r0, r5
 80017aa:	bf3f      	itttt	cc
 80017ac:	784b      	ldrbcc	r3, [r1, #1]
 80017ae:	f852 4023 	ldrcc.w	r4, [r2, r3, lsl #2]
 80017b2:	f840 4b04 	strcc.w	r4, [r0], #4
 80017b6:	42a8      	cmpcc	r0, r5
 80017b8:	d20e      	bcs.n	80017d8 <ai_dict_decompress_f32+0xd0>
 80017ba:	788b      	ldrb	r3, [r1, #2]
 80017bc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80017c0:	f840 4b04 	str.w	r4, [r0], #4
 80017c4:	42a8      	cmp	r0, r5
 80017c6:	d207      	bcs.n	80017d8 <ai_dict_decompress_f32+0xd0>
 80017c8:	78cb      	ldrb	r3, [r1, #3]
 80017ca:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80017ce:	6004      	str	r4, [r0, #0]
 80017d0:	1d09      	adds	r1, r1, #4
 80017d2:	1d04      	adds	r4, r0, #4
 80017d4:	42ac      	cmp	r4, r5
 80017d6:	d3e2      	bcc.n	800179e <ai_dict_decompress_f32+0x96>
 80017d8:	bcf0      	pop	{r4, r5, r6, r7}
 80017da:	4770      	bx	lr

080017dc <forward_conv2d>:
 80017dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017e0:	4605      	mov	r5, r0
 80017e2:	b0a7      	sub	sp, #156	; 0x9c
 80017e4:	6968      	ldr	r0, [r5, #20]
 80017e6:	6800      	ldr	r0, [r0, #0]
 80017e8:	68c2      	ldr	r2, [r0, #12]
 80017ea:	6813      	ldr	r3, [r2, #0]
 80017ec:	6801      	ldr	r1, [r0, #0]
 80017ee:	6982      	ldr	r2, [r0, #24]
 80017f0:	8c00      	ldrh	r0, [r0, #32]
 80017f2:	680c      	ldr	r4, [r1, #0]
 80017f4:	f8d2 b000 	ldr.w	fp, [r2]
 80017f8:	2801      	cmp	r0, #1
 80017fa:	6890      	ldr	r0, [r2, #8]
 80017fc:	bfcc      	ite	gt
 80017fe:	6851      	ldrgt	r1, [r2, #4]
 8001800:	2100      	movle	r1, #0
 8001802:	68a2      	ldr	r2, [r4, #8]
 8001804:	921b      	str	r2, [sp, #108]	; 0x6c
 8001806:	689e      	ldr	r6, [r3, #8]
 8001808:	9603      	str	r6, [sp, #12]
 800180a:	f8d3 a010 	ldr.w	sl, [r3, #16]
 800180e:	68da      	ldr	r2, [r3, #12]
 8001810:	9215      	str	r2, [sp, #84]	; 0x54
 8001812:	6926      	ldr	r6, [r4, #16]
 8001814:	961a      	str	r6, [sp, #104]	; 0x68
 8001816:	68e7      	ldr	r7, [r4, #12]
 8001818:	9721      	str	r7, [sp, #132]	; 0x84
 800181a:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 800181c:	f8ad 6040 	strh.w	r6, [sp, #64]	; 0x40
 8001820:	8d2f      	ldrh	r7, [r5, #40]	; 0x28
 8001822:	9720      	str	r7, [sp, #128]	; 0x80
 8001824:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8001826:	6817      	ldr	r7, [r2, #0]
 8001828:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 800182c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800182e:	9219      	str	r2, [sp, #100]	; 0x64
 8001830:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8001832:	9618      	str	r6, [sp, #96]	; 0x60
 8001834:	f8db 200c 	ldr.w	r2, [fp, #12]
 8001838:	9214      	str	r2, [sp, #80]	; 0x50
 800183a:	f8db 6008 	ldr.w	r6, [fp, #8]
 800183e:	9613      	str	r6, [sp, #76]	; 0x4c
 8001840:	69aa      	ldr	r2, [r5, #24]
 8001842:	921f      	str	r2, [sp, #124]	; 0x7c
 8001844:	6822      	ldr	r2, [r4, #0]
 8001846:	6894      	ldr	r4, [r2, #8]
 8001848:	941e      	str	r4, [sp, #120]	; 0x78
 800184a:	f8db 2000 	ldr.w	r2, [fp]
 800184e:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8001852:	b119      	cbz	r1, 800185c <forward_conv2d+0x80>
 8001854:	680a      	ldr	r2, [r1, #0]
 8001856:	6894      	ldr	r4, [r2, #8]
 8001858:	9417      	str	r4, [sp, #92]	; 0x5c
 800185a:	e001      	b.n	8001860 <forward_conv2d+0x84>
 800185c:	2200      	movs	r2, #0
 800185e:	9217      	str	r2, [sp, #92]	; 0x5c
 8001860:	6819      	ldr	r1, [r3, #0]
 8001862:	688a      	ldr	r2, [r1, #8]
 8001864:	9202      	str	r2, [sp, #8]
 8001866:	69e9      	ldr	r1, [r5, #28]
 8001868:	b158      	cbz	r0, 8001882 <forward_conv2d+0xa6>
 800186a:	6803      	ldr	r3, [r0, #0]
 800186c:	689a      	ldr	r2, [r3, #8]
 800186e:	9212      	str	r2, [sp, #72]	; 0x48
 8001870:	921c      	str	r2, [sp, #112]	; 0x70
 8001872:	69c0      	ldr	r0, [r0, #28]
 8001874:	9024      	str	r0, [sp, #144]	; 0x90
 8001876:	6859      	ldr	r1, [r3, #4]
 8001878:	6818      	ldr	r0, [r3, #0]
 800187a:	f001 ff65 	bl	8003748 <ai_array_get_byte_size>
 800187e:	4604      	mov	r4, r0
 8001880:	e00a      	b.n	8001898 <forward_conv2d+0xbc>
 8001882:	b119      	cbz	r1, 800188c <forward_conv2d+0xb0>
 8001884:	6888      	ldr	r0, [r1, #8]
 8001886:	9012      	str	r0, [sp, #72]	; 0x48
 8001888:	901c      	str	r0, [sp, #112]	; 0x70
 800188a:	e002      	b.n	8001892 <forward_conv2d+0xb6>
 800188c:	2200      	movs	r2, #0
 800188e:	9212      	str	r2, [sp, #72]	; 0x48
 8001890:	911c      	str	r1, [sp, #112]	; 0x70
 8001892:	2200      	movs	r2, #0
 8001894:	9224      	str	r2, [sp, #144]	; 0x90
 8001896:	2401      	movs	r4, #1
 8001898:	6a28      	ldr	r0, [r5, #32]
 800189a:	2800      	cmp	r0, #0
 800189c:	aa18      	add	r2, sp, #96	; 0x60
 800189e:	bf12      	itee	ne
 80018a0:	9023      	strne	r0, [sp, #140]	; 0x8c
 80018a2:	f8df 1b88 	ldreq.w	r1, [pc, #2952]	; 800242c <.text_22>
 80018a6:	9123      	streq	r1, [sp, #140]	; 0x8c
 80018a8:	9914      	ldr	r1, [sp, #80]	; 0x50
 80018aa:	8813      	ldrh	r3, [r2, #0]
 80018ac:	1e48      	subs	r0, r1, #1
 80018ae:	1e5b      	subs	r3, r3, #1
 80018b0:	aa19      	add	r2, sp, #100	; 0x64
 80018b2:	fb03 1100 	mla	r1, r3, r0, r1
 80018b6:	9116      	str	r1, [sp, #88]	; 0x58
 80018b8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80018ba:	8813      	ldrh	r3, [r2, #0]
 80018bc:	1e41      	subs	r1, r0, #1
 80018be:	1e5b      	subs	r3, r3, #1
 80018c0:	fb03 0001 	mla	r0, r3, r1, r0
 80018c4:	901d      	str	r0, [sp, #116]	; 0x74
 80018c6:	2600      	movs	r6, #0
 80018c8:	f8db 1000 	ldr.w	r1, [fp]
 80018cc:	6808      	ldr	r0, [r1, #0]
 80018ce:	2200      	movs	r2, #0
 80018d0:	11c3      	asrs	r3, r0, #7
 80018d2:	ea4f 5c60 	mov.w	ip, r0, asr #21
 80018d6:	1440      	asrs	r0, r0, #17
 80018d8:	f000 000f 	and.w	r0, r0, #15
 80018dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018e0:	f00c 0c03 	and.w	ip, ip, #3
 80018e4:	2804      	cmp	r0, #4
 80018e6:	fa23 f30c 	lsr.w	r3, r3, ip
 80018ea:	bf14      	ite	ne
 80018ec:	2808      	cmpne	r0, #8
 80018ee:	68ca      	ldreq	r2, [r1, #12]
 80018f0:	b182      	cbz	r2, 8001914 <forward_conv2d+0x138>
 80018f2:	6968      	ldr	r0, [r5, #20]
 80018f4:	6800      	ldr	r0, [r0, #0]
 80018f6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80018f8:	6828      	ldr	r0, [r5, #0]
 80018fa:	b108      	cbz	r0, 8001900 <forward_conv2d+0x124>
 80018fc:	6806      	ldr	r6, [r0, #0]
 80018fe:	68b6      	ldr	r6, [r6, #8]
 8001900:	6800      	ldr	r0, [r0, #0]
 8001902:	6840      	ldr	r0, [r0, #4]
 8001904:	9001      	str	r0, [sp, #4]
 8001906:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8001908:	9000      	str	r0, [sp, #0]
 800190a:	4630      	mov	r0, r6
 800190c:	6889      	ldr	r1, [r1, #8]
 800190e:	f7ff fefb 	bl	8001708 <ai_dict_decompress_f32>
 8001912:	b906      	cbnz	r6, 8001916 <forward_conv2d+0x13a>
 8001914:	464e      	mov	r6, r9
 8001916:	b2bf      	uxth	r7, r7
 8001918:	427f      	negs	r7, r7
 800191a:	f1ba 0f00 	cmp.w	sl, #0
 800191e:	d065      	beq.n	80019ec <forward_conv2d+0x210>
 8001920:	f1c8 0800 	rsb	r8, r8, #0
 8001924:	f8cd 8094 	str.w	r8, [sp, #148]	; 0x94
 8001928:	4652      	mov	r2, sl
 800192a:	9d02      	ldr	r5, [sp, #8]
 800192c:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8001930:	9626      	str	r6, [sp, #152]	; 0x98
 8001932:	9711      	str	r7, [sp, #68]	; 0x44
 8001934:	9222      	str	r2, [sp, #136]	; 0x88
 8001936:	9825      	ldr	r0, [sp, #148]	; 0x94
 8001938:	9911      	ldr	r1, [sp, #68]	; 0x44
 800193a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800193c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800193e:	9e16      	ldr	r6, [sp, #88]	; 0x58
 8001940:	4249      	negs	r1, r1
 8001942:	bfd8      	it	le
 8001944:	2100      	movle	r1, #0
 8001946:	1ad2      	subs	r2, r2, r3
 8001948:	42b2      	cmp	r2, r6
 800194a:	bf3d      	ittte	cc
 800194c:	9b1a      	ldrcc	r3, [sp, #104]	; 0x68
 800194e:	9a11      	ldrcc	r2, [sp, #68]	; 0x44
 8001950:	1a9a      	subcc	r2, r3, r2
 8001952:	4632      	movcs	r2, r6
 8001954:	900b      	str	r0, [sp, #44]	; 0x2c
 8001956:	9109      	str	r1, [sp, #36]	; 0x24
 8001958:	920a      	str	r2, [sp, #40]	; 0x28
 800195a:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800195c:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 8001960:	9008      	str	r0, [sp, #32]
 8001962:	9107      	str	r1, [sp, #28]
 8001964:	f8cd a008 	str.w	sl, [sp, #8]
 8001968:	9814      	ldr	r0, [sp, #80]	; 0x50
 800196a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800196c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800196e:	9006      	str	r0, [sp, #24]
 8001970:	9105      	str	r1, [sp, #20]
 8001972:	b21b      	sxth	r3, r3
 8001974:	9815      	ldr	r0, [sp, #84]	; 0x54
 8001976:	9921      	ldr	r1, [sp, #132]	; 0x84
 8001978:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800197a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800197c:	930f      	str	r3, [sp, #60]	; 0x3c
 800197e:	9004      	str	r0, [sp, #16]
 8001980:	9103      	str	r1, [sp, #12]
 8001982:	b236      	sxth	r6, r6
 8001984:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8001986:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8001988:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800198a:	960e      	str	r6, [sp, #56]	; 0x38
 800198c:	930d      	str	r3, [sp, #52]	; 0x34
 800198e:	9001      	str	r0, [sp, #4]
 8001990:	9100      	str	r1, [sp, #0]
 8001992:	4629      	mov	r1, r5
 8001994:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8001996:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8001998:	960c      	str	r6, [sp, #48]	; 0x30
 800199a:	2000      	movs	r0, #0
 800199c:	f7ff fc86 	bl	80012ac <ai_conv2d_stripe_f32>
 80019a0:	9815      	ldr	r0, [sp, #84]	; 0x54
 80019a2:	b1d8      	cbz	r0, 80019dc <forward_conv2d+0x200>
 80019a4:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80019a6:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 80019a8:	f8dd 8090 	ldr.w	r8, [sp, #144]	; 0x90
 80019ac:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80019b0:	4683      	mov	fp, r0
 80019b2:	4633      	mov	r3, r6
 80019b4:	4652      	mov	r2, sl
 80019b6:	4629      	mov	r1, r5
 80019b8:	4628      	mov	r0, r5
 80019ba:	47c8      	blx	r9
 80019bc:	4446      	add	r6, r8
 80019be:	1bf0      	subs	r0, r6, r7
 80019c0:	42a0      	cmp	r0, r4
 80019c2:	bfa8      	it	ge
 80019c4:	463e      	movge	r6, r7
 80019c6:	f1bb 0b01 	subs.w	fp, fp, #1
 80019ca:	eb05 058a 	add.w	r5, r5, sl, lsl #2
 80019ce:	d1f0      	bne.n	80019b2 <forward_conv2d+0x1d6>
 80019d0:	9612      	str	r6, [sp, #72]	; 0x48
 80019d2:	971c      	str	r7, [sp, #112]	; 0x70
 80019d4:	f8cd 8090 	str.w	r8, [sp, #144]	; 0x90
 80019d8:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80019dc:	9811      	ldr	r0, [sp, #68]	; 0x44
 80019de:	9920      	ldr	r1, [sp, #128]	; 0x80
 80019e0:	1808      	adds	r0, r1, r0
 80019e2:	9011      	str	r0, [sp, #68]	; 0x44
 80019e4:	9822      	ldr	r0, [sp, #136]	; 0x88
 80019e6:	1e40      	subs	r0, r0, #1
 80019e8:	9022      	str	r0, [sp, #136]	; 0x88
 80019ea:	d1a4      	bne.n	8001936 <forward_conv2d+0x15a>
 80019ec:	b027      	add	sp, #156	; 0x9c
 80019ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080019f4 <forward_conv2d_nl_pool>:
 80019f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019f8:	4607      	mov	r7, r0
 80019fa:	b0b9      	sub	sp, #228	; 0xe4
 80019fc:	6978      	ldr	r0, [r7, #20]
 80019fe:	6800      	ldr	r0, [r0, #0]
 8001a00:	68c2      	ldr	r2, [r0, #12]
 8001a02:	6816      	ldr	r6, [r2, #0]
 8001a04:	6801      	ldr	r1, [r0, #0]
 8001a06:	6982      	ldr	r2, [r0, #24]
 8001a08:	8c00      	ldrh	r0, [r0, #32]
 8001a0a:	680b      	ldr	r3, [r1, #0]
 8001a0c:	f8d2 b000 	ldr.w	fp, [r2]
 8001a10:	689c      	ldr	r4, [r3, #8]
 8001a12:	2801      	cmp	r0, #1
 8001a14:	6890      	ldr	r0, [r2, #8]
 8001a16:	bfcc      	ite	gt
 8001a18:	6851      	ldrgt	r1, [r2, #4]
 8001a1a:	2100      	movle	r1, #0
 8001a1c:	9424      	str	r4, [sp, #144]	; 0x90
 8001a1e:	68b5      	ldr	r5, [r6, #8]
 8001a20:	9502      	str	r5, [sp, #8]
 8001a22:	6934      	ldr	r4, [r6, #16]
 8001a24:	9423      	str	r4, [sp, #140]	; 0x8c
 8001a26:	68f5      	ldr	r5, [r6, #12]
 8001a28:	9522      	str	r5, [sp, #136]	; 0x88
 8001a2a:	691c      	ldr	r4, [r3, #16]
 8001a2c:	941c      	str	r4, [sp, #112]	; 0x70
 8001a2e:	68dd      	ldr	r5, [r3, #12]
 8001a30:	952e      	str	r5, [sp, #184]	; 0xb8
 8001a32:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8001a34:	f8ad 404c 	strh.w	r4, [sp, #76]	; 0x4c
 8001a38:	8d3d      	ldrh	r5, [r7, #40]	; 0x28
 8001a3a:	9521      	str	r5, [sp, #132]	; 0x84
 8001a3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001a3e:	69bd      	ldr	r5, [r7, #24]
 8001a40:	f8b2 8000 	ldrh.w	r8, [r2]
 8001a44:	f8b2 9004 	ldrh.w	r9, [r2, #4]
 8001a48:	6894      	ldr	r4, [r2, #8]
 8001a4a:	952d      	str	r5, [sp, #180]	; 0xb4
 8001a4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a4e:	9220      	str	r2, [sp, #128]	; 0x80
 8001a50:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 8001a52:	951f      	str	r5, [sp, #124]	; 0x7c
 8001a54:	f8db 2008 	ldr.w	r2, [fp, #8]
 8001a58:	921b      	str	r2, [sp, #108]	; 0x6c
 8001a5a:	f8db 500c 	ldr.w	r5, [fp, #12]
 8001a5e:	951a      	str	r5, [sp, #104]	; 0x68
 8001a60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a62:	922c      	str	r2, [sp, #176]	; 0xb0
 8001a64:	6c7d      	ldr	r5, [r7, #68]	; 0x44
 8001a66:	952b      	str	r5, [sp, #172]	; 0xac
 8001a68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001a6a:	9216      	str	r2, [sp, #88]	; 0x58
 8001a6c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001a6e:	6815      	ldr	r5, [r2, #0]
 8001a70:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8001a74:	f8cd e0a8 	str.w	lr, [sp, #168]	; 0xa8
 8001a78:	6892      	ldr	r2, [r2, #8]
 8001a7a:	921e      	str	r2, [sp, #120]	; 0x78
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	6893      	ldr	r3, [r2, #8]
 8001a80:	9329      	str	r3, [sp, #164]	; 0xa4
 8001a82:	f8db 2000 	ldr.w	r2, [fp]
 8001a86:	f8d2 a008 	ldr.w	sl, [r2, #8]
 8001a8a:	b119      	cbz	r1, 8001a94 <forward_conv2d_nl_pool+0xa0>
 8001a8c:	680a      	ldr	r2, [r1, #0]
 8001a8e:	6893      	ldr	r3, [r2, #8]
 8001a90:	931d      	str	r3, [sp, #116]	; 0x74
 8001a92:	e001      	b.n	8001a98 <forward_conv2d_nl_pool+0xa4>
 8001a94:	2200      	movs	r2, #0
 8001a96:	921d      	str	r2, [sp, #116]	; 0x74
 8001a98:	69f9      	ldr	r1, [r7, #28]
 8001a9a:	b158      	cbz	r0, 8001ab4 <forward_conv2d_nl_pool+0xc0>
 8001a9c:	6803      	ldr	r3, [r0, #0]
 8001a9e:	689a      	ldr	r2, [r3, #8]
 8001aa0:	9218      	str	r2, [sp, #96]	; 0x60
 8001aa2:	9210      	str	r2, [sp, #64]	; 0x40
 8001aa4:	69c0      	ldr	r0, [r0, #28]
 8001aa6:	9015      	str	r0, [sp, #84]	; 0x54
 8001aa8:	6859      	ldr	r1, [r3, #4]
 8001aaa:	6818      	ldr	r0, [r3, #0]
 8001aac:	f001 fe4c 	bl	8003748 <ai_array_get_byte_size>
 8001ab0:	9014      	str	r0, [sp, #80]	; 0x50
 8001ab2:	e00b      	b.n	8001acc <forward_conv2d_nl_pool+0xd8>
 8001ab4:	b119      	cbz	r1, 8001abe <forward_conv2d_nl_pool+0xca>
 8001ab6:	6889      	ldr	r1, [r1, #8]
 8001ab8:	9118      	str	r1, [sp, #96]	; 0x60
 8001aba:	9110      	str	r1, [sp, #64]	; 0x40
 8001abc:	e002      	b.n	8001ac4 <forward_conv2d_nl_pool+0xd0>
 8001abe:	2200      	movs	r2, #0
 8001ac0:	9118      	str	r1, [sp, #96]	; 0x60
 8001ac2:	9210      	str	r2, [sp, #64]	; 0x40
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	9115      	str	r1, [sp, #84]	; 0x54
 8001aca:	9214      	str	r2, [sp, #80]	; 0x50
 8001acc:	aa1f      	add	r2, sp, #124	; 0x7c
 8001ace:	6a38      	ldr	r0, [r7, #32]
 8001ad0:	2800      	cmp	r0, #0
 8001ad2:	bf12      	itee	ne
 8001ad4:	9030      	strne	r0, [sp, #192]	; 0xc0
 8001ad6:	f8df 1954 	ldreq.w	r1, [pc, #2388]	; 800242c <.text_22>
 8001ada:	9130      	streq	r1, [sp, #192]	; 0xc0
 8001adc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001ade:	981a      	ldr	r0, [sp, #104]	; 0x68
 8001ae0:	8813      	ldrh	r3, [r2, #0]
 8001ae2:	9128      	str	r1, [sp, #160]	; 0xa0
 8001ae4:	1e5b      	subs	r3, r3, #1
 8001ae6:	1e41      	subs	r1, r0, #1
 8001ae8:	aa20      	add	r2, sp, #128	; 0x80
 8001aea:	fb03 0001 	mla	r0, r3, r1, r0
 8001aee:	9019      	str	r0, [sp, #100]	; 0x64
 8001af0:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8001af2:	8813      	ldrh	r3, [r2, #0]
 8001af4:	1e48      	subs	r0, r1, #1
 8001af6:	1e5b      	subs	r3, r3, #1
 8001af8:	fb03 1100 	mla	r1, r3, r0, r1
 8001afc:	9127      	str	r1, [sp, #156]	; 0x9c
 8001afe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001b00:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8001b02:	9819      	ldr	r0, [sp, #100]	; 0x64
 8001b04:	9112      	str	r1, [sp, #72]	; 0x48
 8001b06:	1a12      	subs	r2, r2, r0
 8001b08:	4442      	add	r2, r8
 8001b0a:	9921      	ldr	r1, [sp, #132]	; 0x84
 8001b0c:	fa12 f084 	uxtah	r0, r2, r4
 8001b10:	fbb0 f1f1 	udiv	r1, r0, r1
 8001b14:	1c49      	adds	r1, r1, #1
 8001b16:	9111      	str	r1, [sp, #68]	; 0x44
 8001b18:	2400      	movs	r4, #0
 8001b1a:	f8db 1000 	ldr.w	r1, [fp]
 8001b1e:	6808      	ldr	r0, [r1, #0]
 8001b20:	2200      	movs	r2, #0
 8001b22:	11c3      	asrs	r3, r0, #7
 8001b24:	ea4f 5c60 	mov.w	ip, r0, asr #21
 8001b28:	1440      	asrs	r0, r0, #17
 8001b2a:	f000 000f 	and.w	r0, r0, #15
 8001b2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b32:	f00c 0c03 	and.w	ip, ip, #3
 8001b36:	2804      	cmp	r0, #4
 8001b38:	fa23 f30c 	lsr.w	r3, r3, ip
 8001b3c:	bf14      	ite	ne
 8001b3e:	2808      	cmpne	r0, #8
 8001b40:	68ca      	ldreq	r2, [r1, #12]
 8001b42:	b1a2      	cbz	r2, 8001b6e <forward_conv2d_nl_pool+0x17a>
 8001b44:	6978      	ldr	r0, [r7, #20]
 8001b46:	6800      	ldr	r0, [r0, #0]
 8001b48:	f8d0 e024 	ldr.w	lr, [r0, #36]	; 0x24
 8001b4c:	f8de 0004 	ldr.w	r0, [lr, #4]
 8001b50:	b108      	cbz	r0, 8001b56 <forward_conv2d_nl_pool+0x162>
 8001b52:	6804      	ldr	r4, [r0, #0]
 8001b54:	68a4      	ldr	r4, [r4, #8]
 8001b56:	6800      	ldr	r0, [r0, #0]
 8001b58:	6840      	ldr	r0, [r0, #4]
 8001b5a:	9001      	str	r0, [sp, #4]
 8001b5c:	9824      	ldr	r0, [sp, #144]	; 0x90
 8001b5e:	9000      	str	r0, [sp, #0]
 8001b60:	4620      	mov	r0, r4
 8001b62:	6889      	ldr	r1, [r1, #8]
 8001b64:	f7ff fdd0 	bl	8001708 <ai_dict_decompress_f32>
 8001b68:	b10c      	cbz	r4, 8001b6e <forward_conv2d_nl_pool+0x17a>
 8001b6a:	4623      	mov	r3, r4
 8001b6c:	e000      	b.n	8001b70 <forward_conv2d_nl_pool+0x17c>
 8001b6e:	4653      	mov	r3, sl
 8001b70:	697a      	ldr	r2, [r7, #20]
 8001b72:	6814      	ldr	r4, [r2, #0]
 8001b74:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001b76:	6814      	ldr	r4, [r2, #0]
 8001b78:	6827      	ldr	r7, [r4, #0]
 8001b7a:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8001b7e:	68e2      	ldr	r2, [r4, #12]
 8001b80:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8001b82:	f8dd c008 	ldr.w	ip, [sp, #8]
 8001b86:	6830      	ldr	r0, [r6, #0]
 8001b88:	4357      	muls	r7, r2
 8001b8a:	fb0c f707 	mul.w	r7, ip, r7
 8001b8e:	00bf      	lsls	r7, r7, #2
 8001b90:	9736      	str	r7, [sp, #216]	; 0xd8
 8001b92:	2100      	movs	r1, #0
 8001b94:	af16      	add	r7, sp, #88	; 0x58
 8001b96:	f1c9 0900 	rsb	r9, r9, #0
 8001b9a:	5e7f      	ldrsh	r7, [r7, r1]
 8001b9c:	9735      	str	r7, [sp, #212]	; 0xd4
 8001b9e:	b22d      	sxth	r5, r5
 8001ba0:	9f02      	ldr	r7, [sp, #8]
 8001ba2:	f8dd e088 	ldr.w	lr, [sp, #136]	; 0x88
 8001ba6:	fb0e f707 	mul.w	r7, lr, r7
 8001baa:	9734      	str	r7, [sp, #208]	; 0xd0
 8001bac:	462e      	mov	r6, r5
 8001bae:	9f02      	ldr	r7, [sp, #8]
 8001bb0:	4357      	muls	r7, r2
 8001bb2:	9733      	str	r7, [sp, #204]	; 0xcc
 8001bb4:	f8cd 90c8 	str.w	r9, [sp, #200]	; 0xc8
 8001bb8:	f1c8 0800 	rsb	r8, r8, #0
 8001bbc:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8001bbe:	9731      	str	r7, [sp, #196]	; 0xc4
 8001bc0:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 8001bc2:	2f00      	cmp	r7, #0
 8001bc4:	f000 8100 	beq.w	8001dc8 <forward_conv2d_nl_pool+0x3d4>
 8001bc8:	46e1      	mov	r9, ip
 8001bca:	9337      	str	r3, [sp, #220]	; 0xdc
 8001bcc:	9026      	str	r0, [sp, #152]	; 0x98
 8001bce:	912f      	str	r1, [sp, #188]	; 0xbc
 8001bd0:	9225      	str	r2, [sp, #148]	; 0x94
 8001bd2:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8001bd6:	9811      	ldr	r0, [sp, #68]	; 0x44
 8001bd8:	2800      	cmp	r0, #0
 8001bda:	dd5d      	ble.n	8001c98 <forward_conv2d_nl_pool+0x2a4>
 8001bdc:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8001bde:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8001be0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8001be2:	9832      	ldr	r0, [sp, #200]	; 0xc8
 8001be4:	4249      	negs	r1, r1
 8001be6:	bfd8      	it	le
 8001be8:	2100      	movle	r1, #0
 8001bea:	1ad2      	subs	r2, r2, r3
 8001bec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	bf3d      	ittte	cc
 8001bf2:	9b1c      	ldrcc	r3, [sp, #112]	; 0x70
 8001bf4:	9a17      	ldrcc	r2, [sp, #92]	; 0x5c
 8001bf6:	1a9a      	subcc	r2, r3, r2
 8001bf8:	461a      	movcs	r2, r3
 8001bfa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8001bfc:	b21b      	sxth	r3, r3
 8001bfe:	930f      	str	r3, [sp, #60]	; 0x3c
 8001c00:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8001c02:	b21b      	sxth	r3, r3
 8001c04:	930e      	str	r3, [sp, #56]	; 0x38
 8001c06:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8001c08:	930d      	str	r3, [sp, #52]	; 0x34
 8001c0a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8001c0c:	930c      	str	r3, [sp, #48]	; 0x30
 8001c0e:	900b      	str	r0, [sp, #44]	; 0x2c
 8001c10:	9109      	str	r1, [sp, #36]	; 0x24
 8001c12:	920a      	str	r2, [sp, #40]	; 0x28
 8001c14:	982d      	ldr	r0, [sp, #180]	; 0xb4
 8001c16:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 8001c1a:	9008      	str	r0, [sp, #32]
 8001c1c:	9107      	str	r1, [sp, #28]
 8001c1e:	f8cd 9008 	str.w	r9, [sp, #8]
 8001c22:	981a      	ldr	r0, [sp, #104]	; 0x68
 8001c24:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8001c26:	9006      	str	r0, [sp, #24]
 8001c28:	9105      	str	r1, [sp, #20]
 8001c2a:	9825      	ldr	r0, [sp, #148]	; 0x94
 8001c2c:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8001c2e:	9004      	str	r0, [sp, #16]
 8001c30:	9103      	str	r1, [sp, #12]
 8001c32:	9824      	ldr	r0, [sp, #144]	; 0x90
 8001c34:	991d      	ldr	r1, [sp, #116]	; 0x74
 8001c36:	9001      	str	r0, [sp, #4]
 8001c38:	9100      	str	r1, [sp, #0]
 8001c3a:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8001c3c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8001c3e:	4651      	mov	r1, sl
 8001c40:	2000      	movs	r0, #0
 8001c42:	f7ff fb33 	bl	80012ac <ai_conv2d_stripe_f32>
 8001c46:	9825      	ldr	r0, [sp, #148]	; 0x94
 8001c48:	b320      	cbz	r0, 8001c94 <forward_conv2d_nl_pool+0x2a0>
 8001c4a:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8001c4e:	9f30      	ldr	r7, [sp, #192]	; 0xc0
 8001c50:	4683      	mov	fp, r0
 8001c52:	4643      	mov	r3, r8
 8001c54:	464a      	mov	r2, r9
 8001c56:	4651      	mov	r1, sl
 8001c58:	4650      	mov	r0, sl
 8001c5a:	47b8      	blx	r7
 8001c5c:	9815      	ldr	r0, [sp, #84]	; 0x54
 8001c5e:	9931      	ldr	r1, [sp, #196]	; 0xc4
 8001c60:	4480      	add	r8, r0
 8001c62:	9814      	ldr	r0, [sp, #80]	; 0x50
 8001c64:	eba8 0101 	sub.w	r1, r8, r1
 8001c68:	4281      	cmp	r1, r0
 8001c6a:	6820      	ldr	r0, [r4, #0]
 8001c6c:	6841      	ldr	r1, [r0, #4]
 8001c6e:	68c0      	ldr	r0, [r0, #12]
 8001c70:	bfa8      	it	ge
 8001c72:	f8dd 8040 	ldrge.w	r8, [sp, #64]	; 0x40
 8001c76:	eb0a 0a89 	add.w	sl, sl, r9, lsl #2
 8001c7a:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 8001c7e:	4592      	cmp	sl, r2
 8001c80:	d302      	bcc.n	8001c88 <forward_conv2d_nl_pool+0x294>
 8001c82:	0089      	lsls	r1, r1, #2
 8001c84:	4249      	negs	r1, r1
 8001c86:	448a      	add	sl, r1
 8001c88:	f1bb 0b01 	subs.w	fp, fp, #1
 8001c8c:	d1e1      	bne.n	8001c52 <forward_conv2d_nl_pool+0x25e>
 8001c8e:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
 8001c92:	9730      	str	r7, [sp, #192]	; 0xc0
 8001c94:	1c76      	adds	r6, r6, #1
 8001c96:	b236      	sxth	r6, r6
 8001c98:	9811      	ldr	r0, [sp, #68]	; 0x44
 8001c9a:	1e40      	subs	r0, r0, #1
 8001c9c:	2800      	cmp	r0, #0
 8001c9e:	9011      	str	r0, [sp, #68]	; 0x44
 8001ca0:	dc4e      	bgt.n	8001d40 <forward_conv2d_nl_pool+0x34c>
 8001ca2:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8001ca4:	4370      	muls	r0, r6
 8001ca6:	0080      	lsls	r0, r0, #2
 8001ca8:	4240      	negs	r0, r0
 8001caa:	eb0a 0100 	add.w	r1, sl, r0
 8001cae:	6820      	ldr	r0, [r4, #0]
 8001cb0:	68c2      	ldr	r2, [r0, #12]
 8001cb2:	4291      	cmp	r1, r2
 8001cb4:	bf3c      	itt	cc
 8001cb6:	6843      	ldrcc	r3, [r0, #4]
 8001cb8:	eb01 0183 	addcc.w	r1, r1, r3, lsl #2
 8001cbc:	428a      	cmp	r2, r1
 8001cbe:	4657      	mov	r7, sl
 8001cc0:	d232      	bcs.n	8001d28 <forward_conv2d_nl_pool+0x334>
 8001cc2:	ab12      	add	r3, sp, #72	; 0x48
 8001cc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cc8:	429e      	cmp	r6, r3
 8001cca:	d02d      	beq.n	8001d28 <forward_conv2d_nl_pool+0x334>
 8001ccc:	6843      	ldr	r3, [r0, #4]
 8001cce:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001cd2:	4291      	cmp	r1, r2
 8001cd4:	f080 8028 	bcs.w	8001d28 <forward_conv2d_nl_pool+0x334>
 8001cd8:	f851 3b04 	ldr.w	r3, [r1], #4
 8001cdc:	f84a 3b04 	str.w	r3, [sl], #4
 8001ce0:	68c2      	ldr	r2, [r0, #12]
 8001ce2:	6843      	ldr	r3, [r0, #4]
 8001ce4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001ce8:	4291      	cmp	r1, r2
 8001cea:	d21d      	bcs.n	8001d28 <forward_conv2d_nl_pool+0x334>
 8001cec:	f851 2b04 	ldr.w	r2, [r1], #4
 8001cf0:	f84a 2b04 	str.w	r2, [sl], #4
 8001cf4:	6843      	ldr	r3, [r0, #4]
 8001cf6:	68c2      	ldr	r2, [r0, #12]
 8001cf8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001cfc:	4291      	cmp	r1, r2
 8001cfe:	d213      	bcs.n	8001d28 <forward_conv2d_nl_pool+0x334>
 8001d00:	f851 2b04 	ldr.w	r2, [r1], #4
 8001d04:	f84a 2b04 	str.w	r2, [sl], #4
 8001d08:	6843      	ldr	r3, [r0, #4]
 8001d0a:	68c2      	ldr	r2, [r0, #12]
 8001d0c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001d10:	4291      	cmp	r1, r2
 8001d12:	d209      	bcs.n	8001d28 <forward_conv2d_nl_pool+0x334>
 8001d14:	f851 2b04 	ldr.w	r2, [r1], #4
 8001d18:	f84a 2b04 	str.w	r2, [sl], #4
 8001d1c:	6843      	ldr	r3, [r0, #4]
 8001d1e:	68c2      	ldr	r2, [r0, #12]
 8001d20:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001d24:	4291      	cmp	r1, r2
 8001d26:	d3d7      	bcc.n	8001cd8 <forward_conv2d_nl_pool+0x2e4>
 8001d28:	9811      	ldr	r0, [sp, #68]	; 0x44
 8001d2a:	2800      	cmp	r0, #0
 8001d2c:	d506      	bpl.n	8001d3c <forward_conv2d_nl_pool+0x348>
 8001d2e:	9936      	ldr	r1, [sp, #216]	; 0xd8
 8001d30:	4650      	mov	r0, sl
 8001d32:	f005 f8b0 	bl	8006e96 <__aeabi_memclr>
 8001d36:	981e      	ldr	r0, [sp, #120]	; 0x78
 8001d38:	1986      	adds	r6, r0, r6
 8001d3a:	b236      	sxth	r6, r6
 8001d3c:	9612      	str	r6, [sp, #72]	; 0x48
 8001d3e:	46ba      	mov	sl, r7
 8001d40:	9812      	ldr	r0, [sp, #72]	; 0x48
 8001d42:	4286      	cmp	r6, r0
 8001d44:	d136      	bne.n	8001db4 <forward_conv2d_nl_pool+0x3c0>
 8001d46:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8001d48:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8001d4a:	f8dd c0a0 	ldr.w	ip, [sp, #160]	; 0xa0
 8001d4e:	9916      	ldr	r1, [sp, #88]	; 0x58
 8001d50:	1c40      	adds	r0, r0, #1
 8001d52:	902f      	str	r0, [sp, #188]	; 0xbc
 8001d54:	b292      	uxth	r2, r2
 8001d56:	9826      	ldr	r0, [sp, #152]	; 0x98
 8001d58:	9008      	str	r0, [sp, #32]
 8001d5a:	9206      	str	r2, [sp, #24]
 8001d5c:	fa1f f389 	uxth.w	r3, r9
 8001d60:	9816      	ldr	r0, [sp, #88]	; 0x58
 8001d62:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8001d64:	b280      	uxth	r0, r0
 8001d66:	9005      	str	r0, [sp, #20]
 8001d68:	b292      	uxth	r2, r2
 8001d6a:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8001d6c:	b280      	uxth	r0, r0
 8001d6e:	9002      	str	r0, [sp, #8]
 8001d70:	1a76      	subs	r6, r6, r1
 8001d72:	2101      	movs	r1, #1
 8001d74:	9107      	str	r1, [sp, #28]
 8001d76:	b236      	sxth	r6, r6
 8001d78:	992b      	ldr	r1, [sp, #172]	; 0xac
 8001d7a:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8001d7c:	b289      	uxth	r1, r1
 8001d7e:	9104      	str	r1, [sp, #16]
 8001d80:	b280      	uxth	r0, r0
 8001d82:	b2a9      	uxth	r1, r5
 8001d84:	9103      	str	r1, [sp, #12]
 8001d86:	9000      	str	r0, [sp, #0]
 8001d88:	9912      	ldr	r1, [sp, #72]	; 0x48
 8001d8a:	b289      	uxth	r1, r1
 8001d8c:	9101      	str	r1, [sp, #4]
 8001d8e:	9925      	ldr	r1, [sp, #148]	; 0x94
 8001d90:	6820      	ldr	r0, [r4, #0]
 8001d92:	b289      	uxth	r1, r1
 8001d94:	47e0      	blx	ip
 8001d96:	9826      	ldr	r0, [sp, #152]	; 0x98
 8001d98:	6881      	ldr	r1, [r0, #8]
 8001d9a:	9834      	ldr	r0, [sp, #208]	; 0xd0
 8001d9c:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8001da0:	9926      	ldr	r1, [sp, #152]	; 0x98
 8001da2:	608a      	str	r2, [r1, #8]
 8001da4:	9835      	ldr	r0, [sp, #212]	; 0xd4
 8001da6:	1a28      	subs	r0, r5, r0
 8001da8:	2800      	cmp	r0, #0
 8001daa:	bfc3      	ittte	gt
 8001dac:	9816      	ldrgt	r0, [sp, #88]	; 0x58
 8001dae:	1a2d      	subgt	r5, r5, r0
 8001db0:	b22d      	sxthgt	r5, r5
 8001db2:	2500      	movle	r5, #0
 8001db4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8001db6:	9921      	ldr	r1, [sp, #132]	; 0x84
 8001db8:	1808      	adds	r0, r1, r0
 8001dba:	9017      	str	r0, [sp, #92]	; 0x5c
 8001dbc:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8001dbe:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8001dc0:	4288      	cmp	r0, r1
 8001dc2:	f4ff af08 	bcc.w	8001bd6 <forward_conv2d_nl_pool+0x1e2>
 8001dc6:	9826      	ldr	r0, [sp, #152]	; 0x98
 8001dc8:	6821      	ldr	r1, [r4, #0]
 8001dca:	68ca      	ldr	r2, [r1, #12]
 8001dcc:	608a      	str	r2, [r1, #8]
 8001dce:	68c1      	ldr	r1, [r0, #12]
 8001dd0:	6081      	str	r1, [r0, #8]
 8001dd2:	b039      	add	sp, #228	; 0xe4
 8001dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001dd8 <forward_dense>:
 8001dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ddc:	b081      	sub	sp, #4
 8001dde:	ed2d 8b02 	vpush	{d8}
 8001de2:	b088      	sub	sp, #32
 8001de4:	6940      	ldr	r0, [r0, #20]
 8001de6:	6800      	ldr	r0, [r0, #0]
 8001de8:	6801      	ldr	r1, [r0, #0]
 8001dea:	680a      	ldr	r2, [r1, #0]
 8001dec:	68c3      	ldr	r3, [r0, #12]
 8001dee:	6981      	ldr	r1, [r0, #24]
 8001df0:	8c00      	ldrh	r0, [r0, #32]
 8001df2:	681f      	ldr	r7, [r3, #0]
 8001df4:	f8d1 e000 	ldr.w	lr, [r1]
 8001df8:	6894      	ldr	r4, [r2, #8]
 8001dfa:	f8de 9000 	ldr.w	r9, [lr]
 8001dfe:	f8d7 c008 	ldr.w	ip, [r7, #8]
 8001e02:	f8d9 5000 	ldr.w	r5, [r9]
 8001e06:	6812      	ldr	r2, [r2, #0]
 8001e08:	2802      	cmp	r0, #2
 8001e0a:	bfac      	ite	ge
 8001e0c:	684b      	ldrge	r3, [r1, #4]
 8001e0e:	2300      	movlt	r3, #0
 8001e10:	68f9      	ldr	r1, [r7, #12]
 8001e12:	6938      	ldr	r0, [r7, #16]
 8001e14:	683f      	ldr	r7, [r7, #0]
 8001e16:	68bf      	ldr	r7, [r7, #8]
 8001e18:	4341      	muls	r1, r0
 8001e1a:	2000      	movs	r0, #0
 8001e1c:	11ee      	asrs	r6, r5, #7
 8001e1e:	f006 087f 	and.w	r8, r6, #127	; 0x7f
 8001e22:	156e      	asrs	r6, r5, #21
 8001e24:	146d      	asrs	r5, r5, #17
 8001e26:	f005 050f 	and.w	r5, r5, #15
 8001e2a:	2d04      	cmp	r5, #4
 8001e2c:	bf14      	ite	ne
 8001e2e:	2d08      	cmpne	r5, #8
 8001e30:	f8d9 000c 	ldreq.w	r0, [r9, #12]
 8001e34:	6895      	ldr	r5, [r2, #8]
 8001e36:	f8de 9018 	ldr.w	r9, [lr, #24]
 8001e3a:	f006 0603 	and.w	r6, r6, #3
 8001e3e:	2900      	cmp	r1, #0
 8001e40:	fa28 f806 	lsr.w	r8, r8, r6
 8001e44:	eb07 028c 	add.w	r2, r7, ip, lsl #2
 8001e48:	f000 80eb 	beq.w	8002022 <forward_dense+0x24a>
 8001e4c:	f8cd e01c 	str.w	lr, [sp, #28]
 8001e50:	9305      	str	r3, [sp, #20]
 8001e52:	f8cd c018 	str.w	ip, [sp, #24]
 8001e56:	9201      	str	r2, [sp, #4]
 8001e58:	9104      	str	r1, [sp, #16]
 8001e5a:	9907      	ldr	r1, [sp, #28]
 8001e5c:	680a      	ldr	r2, [r1, #0]
 8001e5e:	9905      	ldr	r1, [sp, #20]
 8001e60:	f8d2 b008 	ldr.w	fp, [r2, #8]
 8001e64:	9b01      	ldr	r3, [sp, #4]
 8001e66:	2900      	cmp	r1, #0
 8001e68:	bf1a      	itte	ne
 8001e6a:	680a      	ldrne	r2, [r1, #0]
 8001e6c:	6892      	ldrne	r2, [r2, #8]
 8001e6e:	2200      	moveq	r2, #0
 8001e70:	2800      	cmp	r0, #0
 8001e72:	f040 80ab 	bne.w	8001fcc <forward_dense+0x1f4>
 8001e76:	429f      	cmp	r7, r3
 8001e78:	f080 80c7 	bcs.w	800200a <forward_dense+0x232>
 8001e7c:	9003      	str	r0, [sp, #12]
 8001e7e:	2a00      	cmp	r2, #0
 8001e80:	bf0e      	itee	eq
 8001e82:	ed9f 0a6b 	vldreq	s0, [pc, #428]	; 8002030 <.text_17>
 8001e86:	ed92 0a00 	vldrne	s0, [r2]
 8001e8a:	1d12      	addne	r2, r2, #4
 8001e8c:	2c04      	cmp	r4, #4
 8001e8e:	4620      	mov	r0, r4
 8001e90:	46ae      	mov	lr, r5
 8001e92:	46dc      	mov	ip, fp
 8001e94:	eddf 0a66 	vldr	s1, [pc, #408]	; 8002030 <.text_17>
 8001e98:	d35d      	bcc.n	8001f56 <forward_dense+0x17e>
 8001e9a:	08a1      	lsrs	r1, r4, #2
 8001e9c:	07ce      	lsls	r6, r1, #31
 8001e9e:	d51c      	bpl.n	8001eda <forward_dense+0x102>
 8001ea0:	ed9c 4a00 	vldr	s8, [ip]
 8001ea4:	edde 4a00 	vldr	s9, [lr]
 8001ea8:	ed9c 3a01 	vldr	s6, [ip, #4]
 8001eac:	edde 3a01 	vldr	s7, [lr, #4]
 8001eb0:	ed9c 2a02 	vldr	s4, [ip, #8]
 8001eb4:	edde 2a02 	vldr	s5, [lr, #8]
 8001eb8:	ed9c 1a03 	vldr	s2, [ip, #12]
 8001ebc:	edde 1a03 	vldr	s3, [lr, #12]
 8001ec0:	ee44 0a24 	vmla.f32	s1, s8, s9
 8001ec4:	ee43 0a23 	vmla.f32	s1, s6, s7
 8001ec8:	ee42 0a22 	vmla.f32	s1, s4, s5
 8001ecc:	ee41 0a21 	vmla.f32	s1, s2, s3
 8001ed0:	f10e 0e10 	add.w	lr, lr, #16
 8001ed4:	f10c 0c10 	add.w	ip, ip, #16
 8001ed8:	1f00      	subs	r0, r0, #4
 8001eda:	0849      	lsrs	r1, r1, #1
 8001edc:	f000 803b 	beq.w	8001f56 <forward_dense+0x17e>
 8001ee0:	edde 4a00 	vldr	s9, [lr]
 8001ee4:	edde 3a01 	vldr	s7, [lr, #4]
 8001ee8:	edde 2a02 	vldr	s5, [lr, #8]
 8001eec:	edde 1a03 	vldr	s3, [lr, #12]
 8001ef0:	ed9c 1a03 	vldr	s2, [ip, #12]
 8001ef4:	ed9c 2a02 	vldr	s4, [ip, #8]
 8001ef8:	ed9c 3a01 	vldr	s6, [ip, #4]
 8001efc:	ed9c 4a00 	vldr	s8, [ip]
 8001f00:	ee44 0a24 	vmla.f32	s1, s8, s9
 8001f04:	ee43 0a23 	vmla.f32	s1, s6, s7
 8001f08:	ee42 0a22 	vmla.f32	s1, s4, s5
 8001f0c:	ee41 0a21 	vmla.f32	s1, s2, s3
 8001f10:	f10e 0610 	add.w	r6, lr, #16
 8001f14:	f10c 0c10 	add.w	ip, ip, #16
 8001f18:	edd6 8a00 	vldr	s17, [r6]
 8001f1c:	ed9c 8a00 	vldr	s16, [ip]
 8001f20:	ed9c 7a01 	vldr	s14, [ip, #4]
 8001f24:	edd6 7a01 	vldr	s15, [r6, #4]
 8001f28:	ed9c 6a02 	vldr	s12, [ip, #8]
 8001f2c:	edd6 6a02 	vldr	s13, [r6, #8]
 8001f30:	ed9c 5a03 	vldr	s10, [ip, #12]
 8001f34:	edd6 5a03 	vldr	s11, [r6, #12]
 8001f38:	ee48 0a28 	vmla.f32	s1, s16, s17
 8001f3c:	ee47 0a27 	vmla.f32	s1, s14, s15
 8001f40:	3808      	subs	r0, #8
 8001f42:	ee46 0a26 	vmla.f32	s1, s12, s13
 8001f46:	1e49      	subs	r1, r1, #1
 8001f48:	ee45 0a25 	vmla.f32	s1, s10, s11
 8001f4c:	f106 0e10 	add.w	lr, r6, #16
 8001f50:	f10c 0c10 	add.w	ip, ip, #16
 8001f54:	d1c4      	bne.n	8001ee0 <forward_dense+0x108>
 8001f56:	b378      	cbz	r0, 8001fb8 <forward_dense+0x1e0>
 8001f58:	f010 0103 	ands.w	r1, r0, #3
 8001f5c:	f000 800c 	beq.w	8001f78 <forward_dense+0x1a0>
 8001f60:	ed9c 1a00 	vldr	s2, [ip]
 8001f64:	edde 1a00 	vldr	s3, [lr]
 8001f68:	1e49      	subs	r1, r1, #1
 8001f6a:	ee41 0a21 	vmla.f32	s1, s2, s3
 8001f6e:	f10e 0e04 	add.w	lr, lr, #4
 8001f72:	f10c 0c04 	add.w	ip, ip, #4
 8001f76:	d1f3      	bne.n	8001f60 <forward_dense+0x188>
 8001f78:	0880      	lsrs	r0, r0, #2
 8001f7a:	d01d      	beq.n	8001fb8 <forward_dense+0x1e0>
 8001f7c:	ed9c 2a00 	vldr	s4, [ip]
 8001f80:	ed9e 1a00 	vldr	s2, [lr]
 8001f84:	eddc 1a01 	vldr	s3, [ip, #4]
 8001f88:	edde 2a01 	vldr	s5, [lr, #4]
 8001f8c:	ee42 0a01 	vmla.f32	s1, s4, s2
 8001f90:	ee41 0aa2 	vmla.f32	s1, s3, s5
 8001f94:	ed9c 2a02 	vldr	s4, [ip, #8]
 8001f98:	ed9e 1a02 	vldr	s2, [lr, #8]
 8001f9c:	eddc 1a03 	vldr	s3, [ip, #12]
 8001fa0:	edde 2a03 	vldr	s5, [lr, #12]
 8001fa4:	ee42 0a01 	vmla.f32	s1, s4, s2
 8001fa8:	1e40      	subs	r0, r0, #1
 8001faa:	ee41 0aa2 	vmla.f32	s1, s3, s5
 8001fae:	f10e 0e10 	add.w	lr, lr, #16
 8001fb2:	f10c 0c10 	add.w	ip, ip, #16
 8001fb6:	d1e1      	bne.n	8001f7c <forward_dense+0x1a4>
 8001fb8:	ee30 0a20 	vadd.f32	s0, s0, s1
 8001fbc:	ed87 0a00 	vstr	s0, [r7]
 8001fc0:	1d3f      	adds	r7, r7, #4
 8001fc2:	429f      	cmp	r7, r3
 8001fc4:	44cb      	add	fp, r9
 8001fc6:	f4ff af5a 	bcc.w	8001e7e <forward_dense+0xa6>
 8001fca:	e01d      	b.n	8002008 <forward_dense+0x230>
 8001fcc:	429f      	cmp	r7, r3
 8001fce:	d21c      	bcs.n	800200a <forward_dense+0x232>
 8001fd0:	469a      	mov	sl, r3
 8001fd2:	9003      	str	r0, [sp, #12]
 8001fd4:	4616      	mov	r6, r2
 8001fd6:	2e00      	cmp	r6, #0
 8001fd8:	bf14      	ite	ne
 8001fda:	f856 0b04 	ldrne.w	r0, [r6], #4
 8001fde:	2000      	moveq	r0, #0
 8001fe0:	9002      	str	r0, [sp, #8]
 8001fe2:	f1b8 0f04 	cmp.w	r8, #4
 8001fe6:	9a03      	ldr	r2, [sp, #12]
 8001fe8:	9400      	str	r4, [sp, #0]
 8001fea:	462b      	mov	r3, r5
 8001fec:	4659      	mov	r1, fp
 8001fee:	a802      	add	r0, sp, #8
 8001ff0:	d102      	bne.n	8001ff8 <forward_dense+0x220>
 8001ff2:	f7ff fb39 	bl	8001668 <ai_dict4_dot_array_f32>
 8001ff6:	e001      	b.n	8001ffc <forward_dense+0x224>
 8001ff8:	f7ff f9ca 	bl	8001390 <ai_dict8_dot_array_f32>
 8001ffc:	9802      	ldr	r0, [sp, #8]
 8001ffe:	f847 0b04 	str.w	r0, [r7], #4
 8002002:	4557      	cmp	r7, sl
 8002004:	44cb      	add	fp, r9
 8002006:	d3e6      	bcc.n	8001fd6 <forward_dense+0x1fe>
 8002008:	9803      	ldr	r0, [sp, #12]
 800200a:	9901      	ldr	r1, [sp, #4]
 800200c:	9a06      	ldr	r2, [sp, #24]
 800200e:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8002012:	9904      	ldr	r1, [sp, #16]
 8002014:	9301      	str	r3, [sp, #4]
 8002016:	1e49      	subs	r1, r1, #1
 8002018:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 800201c:	9104      	str	r1, [sp, #16]
 800201e:	f47f af1c 	bne.w	8001e5a <forward_dense+0x82>
 8002022:	b008      	add	sp, #32
 8002024:	ecbd 8b02 	vpop	{d8}
 8002028:	b001      	add	sp, #4
 800202a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08002030 <.text_17>:
 8002030:	00000000 	.word	0x00000000

08002034 <arm_mat_gemm_f32>:
 8002034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002038:	4615      	mov	r5, r2
 800203a:	b08a      	sub	sp, #40	; 0x28
 800203c:	6842      	ldr	r2, [r0, #4]
 800203e:	9203      	str	r2, [sp, #12]
 8002040:	4699      	mov	r9, r3
 8002042:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002044:	686c      	ldr	r4, [r5, #4]
 8002046:	9400      	str	r4, [sp, #0]
 8002048:	468b      	mov	fp, r1
 800204a:	685e      	ldr	r6, [r3, #4]
 800204c:	8804      	ldrh	r4, [r0, #0]
 800204e:	f8b3 c000 	ldrh.w	ip, [r3]
 8002052:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8002056:	8840      	ldrh	r0, [r0, #2]
 8002058:	f8bb 1000 	ldrh.w	r1, [fp]
 800205c:	f8bb 2002 	ldrh.w	r2, [fp, #2]
 8002060:	f8b5 e000 	ldrh.w	lr, [r5]
 8002064:	886f      	ldrh	r7, [r5, #2]
 8002066:	f8db 3004 	ldr.w	r3, [fp, #4]
 800206a:	9306      	str	r3, [sp, #24]
 800206c:	9305      	str	r3, [sp, #20]
 800206e:	2500      	movs	r5, #0
 8002070:	fa4f f389 	sxtb.w	r3, r9
 8002074:	2b00      	cmp	r3, #0
 8002076:	bf0c      	ite	eq
 8002078:	46a0      	moveq	r8, r4
 800207a:	4680      	movne	r8, r0
 800207c:	2f01      	cmp	r7, #1
 800207e:	bf0c      	ite	eq
 8002080:	2300      	moveq	r3, #0
 8002082:	2304      	movne	r3, #4
 8002084:	f1be 0f01 	cmp.w	lr, #1
 8002088:	d104      	bne.n	8002094 <arm_mat_gemm_f32+0x60>
 800208a:	2f01      	cmp	r7, #1
 800208c:	d007      	beq.n	800209e <arm_mat_gemm_f32+0x6a>
 800208e:	f1ca 0e00 	rsb	lr, sl, #0
 8002092:	e005      	b.n	80020a0 <arm_mat_gemm_f32+0x6c>
 8002094:	2f01      	cmp	r7, #1
 8002096:	bf08      	it	eq
 8002098:	f04f 0e01 	moveq.w	lr, #1
 800209c:	d000      	beq.n	80020a0 <arm_mat_gemm_f32+0x6c>
 800209e:	46ae      	mov	lr, r5
 80020a0:	fa0f f78e 	sxth.w	r7, lr
 80020a4:	9704      	str	r7, [sp, #16]
 80020a6:	fa4f f789 	sxtb.w	r7, r9
 80020aa:	2f00      	cmp	r7, #0
 80020ac:	bf0c      	ite	eq
 80020ae:	46a3      	moveq	fp, r4
 80020b0:	4683      	movne	fp, r0
 80020b2:	45e3      	cmp	fp, ip
 80020b4:	d117      	bne.n	80020e6 <arm_mat_gemm_f32+0xb2>
 80020b6:	f99d e04c 	ldrsb.w	lr, [sp, #76]	; 0x4c
 80020ba:	f1be 0f00 	cmp.w	lr, #0
 80020be:	bf0c      	ite	eq
 80020c0:	9201      	streq	r2, [sp, #4]
 80020c2:	9101      	strne	r1, [sp, #4]
 80020c4:	9f01      	ldr	r7, [sp, #4]
 80020c6:	4557      	cmp	r7, sl
 80020c8:	d10d      	bne.n	80020e6 <arm_mat_gemm_f32+0xb2>
 80020ca:	fa4f f789 	sxtb.w	r7, r9
 80020ce:	2f00      	cmp	r7, #0
 80020d0:	bf0c      	ite	eq
 80020d2:	4683      	moveq	fp, r0
 80020d4:	46a3      	movne	fp, r4
 80020d6:	f1be 0f00 	cmp.w	lr, #0
 80020da:	bf0c      	ite	eq
 80020dc:	460f      	moveq	r7, r1
 80020de:	4617      	movne	r7, r2
 80020e0:	45bb      	cmp	fp, r7
 80020e2:	f000 808d 	beq.w	8002200 <arm_mat_gemm_f32+0x1cc>
 80020e6:	fb0a f30c 	mul.w	r3, sl, ip
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	f06f 0002 	mvn.w	r0, #2
 80020f0:	f340 8083 	ble.w	80021fa <arm_mat_gemm_f32+0x1c6>
 80020f4:	1c6d      	adds	r5, r5, #1
 80020f6:	2100      	movs	r1, #0
 80020f8:	b2aa      	uxth	r2, r5
 80020fa:	6031      	str	r1, [r6, #0]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	bfbf      	itttt	lt
 8002100:	6071      	strlt	r1, [r6, #4]
 8002102:	1c6d      	addlt	r5, r5, #1
 8002104:	b2aa      	uxthlt	r2, r5
 8002106:	429a      	cmplt	r2, r3
 8002108:	da77      	bge.n	80021fa <arm_mat_gemm_f32+0x1c6>
 800210a:	1c6d      	adds	r5, r5, #1
 800210c:	b2aa      	uxth	r2, r5
 800210e:	429a      	cmp	r2, r3
 8002110:	60b1      	str	r1, [r6, #8]
 8002112:	da72      	bge.n	80021fa <arm_mat_gemm_f32+0x1c6>
 8002114:	60f1      	str	r1, [r6, #12]
 8002116:	1c6d      	adds	r5, r5, #1
 8002118:	3610      	adds	r6, #16
 800211a:	b2aa      	uxth	r2, r5
 800211c:	429a      	cmp	r2, r3
 800211e:	dbe9      	blt.n	80020f4 <arm_mat_gemm_f32+0xc0>
 8002120:	b00a      	add	sp, #40	; 0x28
 8002122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002126:	9d06      	ldr	r5, [sp, #24]
 8002128:	0097      	lsls	r7, r2, #2
 800212a:	9708      	str	r7, [sp, #32]
 800212c:	0087      	lsls	r7, r0, #2
 800212e:	9707      	str	r7, [sp, #28]
 8002130:	f8cd c00c 	str.w	ip, [sp, #12]
 8002134:	f8ad 4008 	strh.w	r4, [sp, #8]
 8002138:	ea4f 0408 	mov.w	r4, r8
 800213c:	f8dd c014 	ldr.w	ip, [sp, #20]
 8002140:	fa4f f789 	sxtb.w	r7, r9
 8002144:	2f00      	cmp	r7, #0
 8002146:	bf0c      	ite	eq
 8002148:	4682      	moveq	sl, r0
 800214a:	f8bd a008 	ldrhne.w	sl, [sp, #8]
 800214e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8002152:	f1ba 0f00 	cmp.w	sl, #0
 8002156:	ed9f 1ab4 	vldr	s2, [pc, #720]	; 8002428 <.text_21>
 800215a:	d018      	beq.n	800218e <arm_mat_gemm_f32+0x15a>
 800215c:	fa4f f789 	sxtb.w	r7, r9
 8002160:	2f00      	cmp	r7, #0
 8002162:	bf0c      	ite	eq
 8002164:	2704      	moveq	r7, #4
 8002166:	9f07      	ldrne	r7, [sp, #28]
 8002168:	f1be 0f00 	cmp.w	lr, #0
 800216c:	f1aa 0a01 	sub.w	sl, sl, #1
 8002170:	edd8 1a00 	vldr	s3, [r8]
 8002174:	ed95 2a00 	vldr	s4, [r5]
 8002178:	44b8      	add	r8, r7
 800217a:	bf0c      	ite	eq
 800217c:	9f08      	ldreq	r7, [sp, #32]
 800217e:	2704      	movne	r7, #4
 8002180:	19ed      	adds	r5, r5, r7
 8002182:	fa1f f78a 	uxth.w	r7, sl
 8002186:	2f00      	cmp	r7, #0
 8002188:	ee01 1a82 	vmla.f32	s2, s3, s4
 800218c:	d1e6      	bne.n	800215c <arm_mat_gemm_f32+0x128>
 800218e:	ee20 1a01 	vmul.f32	s2, s0, s2
 8002192:	eddb 1a00 	vldr	s3, [fp]
 8002196:	ee00 1aa1 	vmla.f32	s2, s1, s3
 800219a:	ed86 1a00 	vstr	s2, [r6]
 800219e:	1d36      	adds	r6, r6, #4
 80021a0:	1e64      	subs	r4, r4, #1
 80021a2:	b2a4      	uxth	r4, r4
 80021a4:	f1be 0f00 	cmp.w	lr, #0
 80021a8:	bf0e      	itee	eq
 80021aa:	1b15      	subeq	r5, r2, r4
 80021ac:	1b0d      	subne	r5, r1, r4
 80021ae:	4355      	mulne	r5, r2
 80021b0:	2c00      	cmp	r4, #0
 80021b2:	449b      	add	fp, r3
 80021b4:	eb0c 0585 	add.w	r5, ip, r5, lsl #2
 80021b8:	d1c2      	bne.n	8002140 <arm_mat_gemm_f32+0x10c>
 80021ba:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 80021be:	9d03      	ldr	r5, [sp, #12]
 80021c0:	f8bd 4008 	ldrh.w	r4, [sp, #8]
 80021c4:	f8cd c014 	str.w	ip, [sp, #20]
 80021c8:	9f01      	ldr	r7, [sp, #4]
 80021ca:	443e      	add	r6, r7
 80021cc:	f8ad 6002 	strh.w	r6, [sp, #2]
 80021d0:	fa4f f689 	sxtb.w	r6, r9
 80021d4:	2e00      	cmp	r6, #0
 80021d6:	bf0c      	ite	eq
 80021d8:	ea4f 0c80 	moveq.w	ip, r0, lsl #2
 80021dc:	f04f 0c04 	movne.w	ip, #4
 80021e0:	44ac      	add	ip, r5
 80021e2:	9d04      	ldr	r5, [sp, #16]
 80021e4:	f8bd 6000 	ldrh.w	r6, [sp]
 80021e8:	eb0b 0b85 	add.w	fp, fp, r5, lsl #2
 80021ec:	1e75      	subs	r5, r6, #1
 80021ee:	f8ad 5000 	strh.w	r5, [sp]
 80021f2:	f8bd 5000 	ldrh.w	r5, [sp]
 80021f6:	b965      	cbnz	r5, 8002212 <arm_mat_gemm_f32+0x1de>
 80021f8:	2000      	movs	r0, #0
 80021fa:	b00a      	add	sp, #40	; 0x28
 80021fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002200:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8002204:	f8dd b000 	ldr.w	fp, [sp]
 8002208:	9609      	str	r6, [sp, #36]	; 0x24
 800220a:	f8ad 5002 	strh.w	r5, [sp, #2]
 800220e:	f8ad 8000 	strh.w	r8, [sp]
 8002212:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8002214:	f8bd 5002 	ldrh.w	r5, [sp, #2]
 8002218:	f1be 0f00 	cmp.w	lr, #0
 800221c:	eb07 0685 	add.w	r6, r7, r5, lsl #2
 8002220:	bf0c      	ite	eq
 8002222:	4690      	moveq	r8, r2
 8002224:	4688      	movne	r8, r1
 8002226:	e77e      	b.n	8002126 <arm_mat_gemm_f32+0xf2>

08002228 <forward_gemm>:
 8002228:	b5f0      	push	{r4, r5, r6, r7, lr}
 800222a:	4604      	mov	r4, r0
 800222c:	b08b      	sub	sp, #44	; 0x2c
 800222e:	6960      	ldr	r0, [r4, #20]
 8002230:	6800      	ldr	r0, [r0, #0]
 8002232:	6801      	ldr	r1, [r0, #0]
 8002234:	68c3      	ldr	r3, [r0, #12]
 8002236:	8902      	ldrh	r2, [r0, #8]
 8002238:	2600      	movs	r6, #0
 800223a:	2700      	movs	r7, #0
 800223c:	680d      	ldr	r5, [r1, #0]
 800223e:	f8d3 c000 	ldr.w	ip, [r3]
 8002242:	2a03      	cmp	r2, #3
 8002244:	d102      	bne.n	800224c <forward_gemm+0x24>
 8002246:	684e      	ldr	r6, [r1, #4]
 8002248:	688f      	ldr	r7, [r1, #8]
 800224a:	e00a      	b.n	8002262 <forward_gemm+0x3a>
 800224c:	2a02      	cmp	r2, #2
 800224e:	d103      	bne.n	8002258 <forward_gemm+0x30>
 8002250:	6980      	ldr	r0, [r0, #24]
 8002252:	684e      	ldr	r6, [r1, #4]
 8002254:	6807      	ldr	r7, [r0, #0]
 8002256:	e004      	b.n	8002262 <forward_gemm+0x3a>
 8002258:	2a01      	cmp	r2, #1
 800225a:	d102      	bne.n	8002262 <forward_gemm+0x3a>
 800225c:	6980      	ldr	r0, [r0, #24]
 800225e:	6806      	ldr	r6, [r0, #0]
 8002260:	6847      	ldr	r7, [r0, #4]
 8002262:	f8dc 0000 	ldr.w	r0, [ip]
 8002266:	f8dc 2008 	ldr.w	r2, [ip, #8]
 800226a:	6883      	ldr	r3, [r0, #8]
 800226c:	f8dc 1010 	ldr.w	r1, [ip, #16]
 8002270:	b292      	uxth	r2, r2
 8002272:	b289      	uxth	r1, r1
 8002274:	a808      	add	r0, sp, #32
 8002276:	f002 fbc9 	bl	8004a0c <arm_mat_init_f32>
 800227a:	6829      	ldr	r1, [r5, #0]
 800227c:	688b      	ldr	r3, [r1, #8]
 800227e:	68aa      	ldr	r2, [r5, #8]
 8002280:	6929      	ldr	r1, [r5, #16]
 8002282:	b292      	uxth	r2, r2
 8002284:	b289      	uxth	r1, r1
 8002286:	a806      	add	r0, sp, #24
 8002288:	f002 fbc0 	bl	8004a0c <arm_mat_init_f32>
 800228c:	6830      	ldr	r0, [r6, #0]
 800228e:	68b2      	ldr	r2, [r6, #8]
 8002290:	6883      	ldr	r3, [r0, #8]
 8002292:	6931      	ldr	r1, [r6, #16]
 8002294:	b292      	uxth	r2, r2
 8002296:	b289      	uxth	r1, r1
 8002298:	a804      	add	r0, sp, #16
 800229a:	f002 fbb7 	bl	8004a0c <arm_mat_init_f32>
 800229e:	6838      	ldr	r0, [r7, #0]
 80022a0:	68ba      	ldr	r2, [r7, #8]
 80022a2:	6883      	ldr	r3, [r0, #8]
 80022a4:	6939      	ldr	r1, [r7, #16]
 80022a6:	b292      	uxth	r2, r2
 80022a8:	b289      	uxth	r1, r1
 80022aa:	a802      	add	r0, sp, #8
 80022ac:	f002 fbae 	bl	8004a0c <arm_mat_init_f32>
 80022b0:	a808      	add	r0, sp, #32
 80022b2:	9001      	str	r0, [sp, #4]
 80022b4:	aa02      	add	r2, sp, #8
 80022b6:	f994 1021 	ldrsb.w	r1, [r4, #33]	; 0x21
 80022ba:	9100      	str	r1, [sp, #0]
 80022bc:	a904      	add	r1, sp, #16
 80022be:	f994 3020 	ldrsb.w	r3, [r4, #32]
 80022c2:	edd4 0a07 	vldr	s1, [r4, #28]
 80022c6:	ed94 0a06 	vldr	s0, [r4, #24]
 80022ca:	a806      	add	r0, sp, #24
 80022cc:	f7ff feb2 	bl	8002034 <arm_mat_gemm_f32>
 80022d0:	b00b      	add	sp, #44	; 0x2c
 80022d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080022d4 <forward_matmul>:
 80022d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022d8:	b08b      	sub	sp, #44	; 0x2c
 80022da:	6940      	ldr	r0, [r0, #20]
 80022dc:	6801      	ldr	r1, [r0, #0]
 80022de:	680a      	ldr	r2, [r1, #0]
 80022e0:	6810      	ldr	r0, [r2, #0]
 80022e2:	6857      	ldr	r7, [r2, #4]
 80022e4:	68ca      	ldr	r2, [r1, #12]
 80022e6:	6814      	ldr	r4, [r2, #0]
 80022e8:	b90f      	cbnz	r7, 80022ee <forward_matmul+0x1a>
 80022ea:	6989      	ldr	r1, [r1, #24]
 80022ec:	680f      	ldr	r7, [r1, #0]
 80022ee:	68a2      	ldr	r2, [r4, #8]
 80022f0:	f8d0 e004 	ldr.w	lr, [r0, #4]
 80022f4:	687d      	ldr	r5, [r7, #4]
 80022f6:	f8d4 c004 	ldr.w	ip, [r4, #4]
 80022fa:	68c1      	ldr	r1, [r0, #12]
 80022fc:	f8d7 800c 	ldr.w	r8, [r7, #12]
 8002300:	f8d4 b00c 	ldr.w	fp, [r4, #12]
 8002304:	6923      	ldr	r3, [r4, #16]
 8002306:	9306      	str	r3, [sp, #24]
 8002308:	fb01 fa0e 	mul.w	sl, r1, lr
 800230c:	6824      	ldr	r4, [r4, #0]
 800230e:	68a3      	ldr	r3, [r4, #8]
 8002310:	6904      	ldr	r4, [r0, #16]
 8002312:	434c      	muls	r4, r1
 8002314:	fb0e f404 	mul.w	r4, lr, r4
 8002318:	940a      	str	r4, [sp, #40]	; 0x28
 800231a:	693e      	ldr	r6, [r7, #16]
 800231c:	fb08 f606 	mul.w	r6, r8, r6
 8002320:	436e      	muls	r6, r5
 8002322:	2a00      	cmp	r2, #0
 8002324:	9609      	str	r6, [sp, #36]	; 0x24
 8002326:	fb08 f805 	mul.w	r8, r8, r5
 800232a:	d079      	beq.n	8002420 <forward_matmul+0x14c>
 800232c:	2400      	movs	r4, #0
 800232e:	46a1      	mov	r9, r4
 8002330:	9202      	str	r2, [sp, #8]
 8002332:	9a06      	ldr	r2, [sp, #24]
 8002334:	2a00      	cmp	r2, #0
 8002336:	d069      	beq.n	800240c <forward_matmul+0x138>
 8002338:	2600      	movs	r6, #0
 800233a:	9600      	str	r6, [sp, #0]
 800233c:	f8cd a014 	str.w	sl, [sp, #20]
 8002340:	f8cd b00c 	str.w	fp, [sp, #12]
 8002344:	9a06      	ldr	r2, [sp, #24]
 8002346:	f8dd a000 	ldr.w	sl, [sp]
 800234a:	9201      	str	r2, [sp, #4]
 800234c:	9a03      	ldr	r2, [sp, #12]
 800234e:	2a00      	cmp	r2, #0
 8002350:	d052      	beq.n	80023f8 <forward_matmul+0x124>
 8002352:	9507      	str	r5, [sp, #28]
 8002354:	f04f 0b00 	mov.w	fp, #0
 8002358:	f8cd c010 	str.w	ip, [sp, #16]
 800235c:	9200      	str	r2, [sp, #0]
 800235e:	9a04      	ldr	r2, [sp, #16]
 8002360:	2a00      	cmp	r2, #0
 8002362:	d03f      	beq.n	80023e4 <forward_matmul+0x110>
 8002364:	f04f 0c00 	mov.w	ip, #0
 8002368:	9008      	str	r0, [sp, #32]
 800236a:	9808      	ldr	r0, [sp, #32]
 800236c:	6805      	ldr	r5, [r0, #0]
 800236e:	6838      	ldr	r0, [r7, #0]
 8002370:	68ae      	ldr	r6, [r5, #8]
 8002372:	6880      	ldr	r0, [r0, #8]
 8002374:	1936      	adds	r6, r6, r4
 8002376:	4456      	add	r6, sl
 8002378:	4448      	add	r0, r9
 800237a:	eb06 050c 	add.w	r5, r6, ip
 800237e:	4458      	add	r0, fp
 8002380:	eb00 060c 	add.w	r6, r0, ip
 8002384:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8002428 <.text_21>
 8002388:	b321      	cbz	r1, 80023d4 <forward_matmul+0x100>
 800238a:	07c8      	lsls	r0, r1, #31
 800238c:	d509      	bpl.n	80023a2 <forward_matmul+0xce>
 800238e:	edd5 0a00 	vldr	s1, [r5]
 8002392:	ed96 1a00 	vldr	s2, [r6]
 8002396:	ee00 0a81 	vmla.f32	s0, s1, s2
 800239a:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 800239e:	eb06 0688 	add.w	r6, r6, r8, lsl #2
 80023a2:	0848      	lsrs	r0, r1, #1
 80023a4:	f000 8016 	beq.w	80023d4 <forward_matmul+0x100>
 80023a8:	edd5 0a00 	vldr	s1, [r5]
 80023ac:	ed96 1a00 	vldr	s2, [r6]
 80023b0:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 80023b4:	eb06 0688 	add.w	r6, r6, r8, lsl #2
 80023b8:	ee00 0a81 	vmla.f32	s0, s1, s2
 80023bc:	edd5 0a00 	vldr	s1, [r5]
 80023c0:	ed96 1a00 	vldr	s2, [r6]
 80023c4:	1e40      	subs	r0, r0, #1
 80023c6:	ee00 0a81 	vmla.f32	s0, s1, s2
 80023ca:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 80023ce:	eb06 0688 	add.w	r6, r6, r8, lsl #2
 80023d2:	d1e9      	bne.n	80023a8 <forward_matmul+0xd4>
 80023d4:	ed83 0a00 	vstr	s0, [r3]
 80023d8:	1d1b      	adds	r3, r3, #4
 80023da:	1e52      	subs	r2, r2, #1
 80023dc:	f10c 0c04 	add.w	ip, ip, #4
 80023e0:	d1c3      	bne.n	800236a <forward_matmul+0x96>
 80023e2:	9808      	ldr	r0, [sp, #32]
 80023e4:	9d00      	ldr	r5, [sp, #0]
 80023e6:	9a07      	ldr	r2, [sp, #28]
 80023e8:	1e6d      	subs	r5, r5, #1
 80023ea:	eb0b 0b82 	add.w	fp, fp, r2, lsl #2
 80023ee:	9500      	str	r5, [sp, #0]
 80023f0:	d1b5      	bne.n	800235e <forward_matmul+0x8a>
 80023f2:	4615      	mov	r5, r2
 80023f4:	f8dd c010 	ldr.w	ip, [sp, #16]
 80023f8:	9e01      	ldr	r6, [sp, #4]
 80023fa:	9a05      	ldr	r2, [sp, #20]
 80023fc:	1e76      	subs	r6, r6, #1
 80023fe:	eb0a 0a82 	add.w	sl, sl, r2, lsl #2
 8002402:	9601      	str	r6, [sp, #4]
 8002404:	d1a2      	bne.n	800234c <forward_matmul+0x78>
 8002406:	4692      	mov	sl, r2
 8002408:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800240c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800240e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8002410:	eb09 0982 	add.w	r9, r9, r2, lsl #2
 8002414:	9a02      	ldr	r2, [sp, #8]
 8002416:	1e52      	subs	r2, r2, #1
 8002418:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 800241c:	9202      	str	r2, [sp, #8]
 800241e:	d188      	bne.n	8002332 <forward_matmul+0x5e>
 8002420:	b00b      	add	sp, #44	; 0x2c
 8002422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08002428 <.text_21>:
 8002428:	00000000 	.word	0x00000000

0800242c <.text_22>:
 800242c:	0800138d 	.word	0x0800138d

08002430 <nl_func_sm_channel_f32>:
 8002430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002434:	460f      	mov	r7, r1
 8002436:	4614      	mov	r4, r2
 8002438:	ed2d 8b02 	vpush	{d8}
 800243c:	2c02      	cmp	r4, #2
 800243e:	4606      	mov	r6, r0
 8002440:	ed97 8a00 	vldr	s16, [r7]
 8002444:	eddf 8ac5 	vldr	s17, [pc, #788]	; 800275c <.text_12>
 8002448:	d33d      	bcc.n	80024c6 <nl_func_sm_channel_f32+0x96>
 800244a:	1e61      	subs	r1, r4, #1
 800244c:	1d3a      	adds	r2, r7, #4
 800244e:	f011 0003 	ands.w	r0, r1, #3
 8002452:	d00c      	beq.n	800246e <nl_func_sm_channel_f32+0x3e>
 8002454:	ed92 0a00 	vldr	s0, [r2]
 8002458:	eeb4 0a48 	vcmp.f32	s0, s16
 800245c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002460:	bf58      	it	pl
 8002462:	eeb0 8a40 	vmovpl.f32	s16, s0
 8002466:	1e40      	subs	r0, r0, #1
 8002468:	f102 0204 	add.w	r2, r2, #4
 800246c:	d1f2      	bne.n	8002454 <nl_func_sm_channel_f32+0x24>
 800246e:	0889      	lsrs	r1, r1, #2
 8002470:	f000 802b 	beq.w	80024ca <nl_func_sm_channel_f32+0x9a>
 8002474:	ed92 0a00 	vldr	s0, [r2]
 8002478:	eeb4 0a48 	vcmp.f32	s0, s16
 800247c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002480:	bf58      	it	pl
 8002482:	eeb0 8a40 	vmovpl.f32	s16, s0
 8002486:	ed92 0a01 	vldr	s0, [r2, #4]
 800248a:	eeb4 0a48 	vcmp.f32	s0, s16
 800248e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002492:	bf58      	it	pl
 8002494:	eeb0 8a40 	vmovpl.f32	s16, s0
 8002498:	ed92 0a02 	vldr	s0, [r2, #8]
 800249c:	eeb4 0a48 	vcmp.f32	s0, s16
 80024a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024a4:	bf58      	it	pl
 80024a6:	eeb0 8a40 	vmovpl.f32	s16, s0
 80024aa:	ed92 0a03 	vldr	s0, [r2, #12]
 80024ae:	eeb4 0a48 	vcmp.f32	s0, s16
 80024b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024b6:	bf58      	it	pl
 80024b8:	eeb0 8a40 	vmovpl.f32	s16, s0
 80024bc:	1e49      	subs	r1, r1, #1
 80024be:	f102 0210 	add.w	r2, r2, #16
 80024c2:	d1d7      	bne.n	8002474 <nl_func_sm_channel_f32+0x44>
 80024c4:	e001      	b.n	80024ca <nl_func_sm_channel_f32+0x9a>
 80024c6:	2c00      	cmp	r4, #0
 80024c8:	d040      	beq.n	800254c <nl_func_sm_channel_f32+0x11c>
 80024ca:	46b0      	mov	r8, r6
 80024cc:	ea4f 0504 	mov.w	r5, r4
 80024d0:	ed97 0a00 	vldr	s0, [r7]
 80024d4:	ee30 0a48 	vsub.f32	s0, s0, s16
 80024d8:	f006 fdfc 	bl	80090d4 <expf>
 80024dc:	1d3f      	adds	r7, r7, #4
 80024de:	ed88 0a00 	vstr	s0, [r8]
 80024e2:	1e6d      	subs	r5, r5, #1
 80024e4:	ee78 8a80 	vadd.f32	s17, s17, s0
 80024e8:	f108 0804 	add.w	r8, r8, #4
 80024ec:	d1f0      	bne.n	80024d0 <nl_func_sm_channel_f32+0xa0>
 80024ee:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80024f2:	f014 0003 	ands.w	r0, r4, #3
 80024f6:	ee80 0a28 	vdiv.f32	s0, s0, s17
 80024fa:	d009      	beq.n	8002510 <nl_func_sm_channel_f32+0xe0>
 80024fc:	edd6 0a00 	vldr	s1, [r6]
 8002500:	ee60 0a80 	vmul.f32	s1, s1, s0
 8002504:	edc6 0a00 	vstr	s1, [r6]
 8002508:	1e40      	subs	r0, r0, #1
 800250a:	f106 0604 	add.w	r6, r6, #4
 800250e:	d1f5      	bne.n	80024fc <nl_func_sm_channel_f32+0xcc>
 8002510:	08a4      	lsrs	r4, r4, #2
 8002512:	d01b      	beq.n	800254c <nl_func_sm_channel_f32+0x11c>
 8002514:	edd6 0a00 	vldr	s1, [r6]
 8002518:	ee60 0a80 	vmul.f32	s1, s1, s0
 800251c:	edc6 0a00 	vstr	s1, [r6]
 8002520:	1e64      	subs	r4, r4, #1
 8002522:	ed96 1a01 	vldr	s2, [r6, #4]
 8002526:	edd6 0a02 	vldr	s1, [r6, #8]
 800252a:	ee21 1a00 	vmul.f32	s2, s2, s0
 800252e:	ed86 1a01 	vstr	s2, [r6, #4]
 8002532:	ee60 0a80 	vmul.f32	s1, s1, s0
 8002536:	ed96 1a03 	vldr	s2, [r6, #12]
 800253a:	edc6 0a02 	vstr	s1, [r6, #8]
 800253e:	ee21 1a00 	vmul.f32	s2, s2, s0
 8002542:	ed86 1a03 	vstr	s2, [r6, #12]
 8002546:	f106 0610 	add.w	r6, r6, #16
 800254a:	d1e3      	bne.n	8002514 <nl_func_sm_channel_f32+0xe4>
 800254c:	ecbd 8b02 	vpop	{d8}
 8002550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002554 <nl_func_sm_array_f32>:
 8002554:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002558:	b081      	sub	sp, #4
 800255a:	460c      	mov	r4, r1
 800255c:	9f08      	ldr	r7, [sp, #32]
 800255e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8002560:	00bf      	lsls	r7, r7, #2
 8002562:	427f      	negs	r7, r7
 8002564:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002568:	19cd      	adds	r5, r1, r7
 800256a:	00b6      	lsls	r6, r6, #2
 800256c:	4276      	negs	r6, r6
 800256e:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8002572:	42a5      	cmp	r5, r4
 8002574:	4698      	mov	r8, r3
 8002576:	eb00 0906 	add.w	r9, r0, r6
 800257a:	d309      	bcc.n	8002590 <nl_func_sm_array_f32+0x3c>
 800257c:	2300      	movs	r3, #0
 800257e:	4642      	mov	r2, r8
 8002580:	4629      	mov	r1, r5
 8002582:	4648      	mov	r0, r9
 8002584:	f7ff ff54 	bl	8002430 <nl_func_sm_channel_f32>
 8002588:	19ed      	adds	r5, r5, r7
 800258a:	42a5      	cmp	r5, r4
 800258c:	44b1      	add	r9, r6
 800258e:	d2f5      	bcs.n	800257c <nl_func_sm_array_f32+0x28>
 8002590:	b001      	add	sp, #4
 8002592:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08002598 <nl_func_tanh_array_f32>:
 8002598:	b570      	push	{r4, r5, r6, lr}
 800259a:	460c      	mov	r4, r1
 800259c:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 80025a0:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80025a4:	1f0d      	subs	r5, r1, #4
 80025a6:	1f06      	subs	r6, r0, #4
 80025a8:	42a5      	cmp	r5, r4
 80025aa:	d309      	bcc.n	80025c0 <nl_func_tanh_array_f32+0x28>
 80025ac:	ed95 0a00 	vldr	s0, [r5]
 80025b0:	f006 fd3e 	bl	8009030 <tanhf>
 80025b4:	ed86 0a00 	vstr	s0, [r6]
 80025b8:	1f2d      	subs	r5, r5, #4
 80025ba:	1f36      	subs	r6, r6, #4
 80025bc:	42a5      	cmp	r5, r4
 80025be:	d2f5      	bcs.n	80025ac <nl_func_tanh_array_f32+0x14>
 80025c0:	bd70      	pop	{r4, r5, r6, pc}
	...

080025c4 <nl_func_sigmoid_array_f32>:
 80025c4:	b570      	push	{r4, r5, r6, lr}
 80025c6:	460c      	mov	r4, r1
 80025c8:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 80025cc:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80025d0:	1f0d      	subs	r5, r1, #4
 80025d2:	1f06      	subs	r6, r0, #4
 80025d4:	42a5      	cmp	r5, r4
 80025d6:	d313      	bcc.n	8002600 <nl_func_sigmoid_array_f32+0x3c>
 80025d8:	ed95 0a00 	vldr	s0, [r5]
 80025dc:	eeb1 0a40 	vneg.f32	s0, s0
 80025e0:	f006 fd78 	bl	80090d4 <expf>
 80025e4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80025e8:	ee70 0a20 	vadd.f32	s1, s0, s1
 80025ec:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80025f0:	ee80 0a20 	vdiv.f32	s0, s0, s1
 80025f4:	ed86 0a00 	vstr	s0, [r6]
 80025f8:	1f2d      	subs	r5, r5, #4
 80025fa:	1f36      	subs	r6, r6, #4
 80025fc:	42a5      	cmp	r5, r4
 80025fe:	d2eb      	bcs.n	80025d8 <nl_func_sigmoid_array_f32+0x14>
 8002600:	bd70      	pop	{r4, r5, r6, pc}
	...

08002604 <nl_func_hard_sigmoid_array_f32>:
 8002604:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8002608:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800260c:	1f1b      	subs	r3, r3, #4
 800260e:	1f00      	subs	r0, r0, #4
 8002610:	428b      	cmp	r3, r1
 8002612:	d321      	bcc.n	8002658 <nl_func_hard_sigmoid_array_f32+0x54>
 8002614:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002618:	eddf 0aa6 	vldr	s1, [pc, #664]	; 80028b4 <.text_16>
 800261c:	edd3 1a00 	vldr	s3, [r3]
 8002620:	ed9f 2aa5 	vldr	s4, [pc, #660]	; 80028b8 <.text_17>
 8002624:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8002628:	ee01 1a82 	vmla.f32	s2, s3, s4
 800262c:	eeb4 1a60 	vcmp.f32	s2, s1
 8002630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002634:	da08      	bge.n	8002648 <nl_func_hard_sigmoid_array_f32+0x44>
 8002636:	eeb5 1a40 	vcmp.f32	s2, #0.0
 800263a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800263e:	d505      	bpl.n	800264c <nl_func_hard_sigmoid_array_f32+0x48>
 8002640:	ed9f 1a46 	vldr	s2, [pc, #280]	; 800275c <.text_12>
 8002644:	e002      	b.n	800264c <nl_func_hard_sigmoid_array_f32+0x48>
 8002646:	bf00      	nop
 8002648:	eeb0 1a40 	vmov.f32	s2, s0
 800264c:	ed80 1a00 	vstr	s2, [r0]
 8002650:	1f1b      	subs	r3, r3, #4
 8002652:	1f00      	subs	r0, r0, #4
 8002654:	428b      	cmp	r3, r1
 8002656:	d2e1      	bcs.n	800261c <nl_func_hard_sigmoid_array_f32+0x18>
 8002658:	4770      	bx	lr
	...

0800265c <nl_func_exp_array_f32>:
 800265c:	b570      	push	{r4, r5, r6, lr}
 800265e:	460c      	mov	r4, r1
 8002660:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002664:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8002668:	1f0d      	subs	r5, r1, #4
 800266a:	1f06      	subs	r6, r0, #4
 800266c:	42a5      	cmp	r5, r4
 800266e:	d309      	bcc.n	8002684 <nl_func_exp_array_f32+0x28>
 8002670:	ed95 0a00 	vldr	s0, [r5]
 8002674:	f006 fd2e 	bl	80090d4 <expf>
 8002678:	ed86 0a00 	vstr	s0, [r6]
 800267c:	1f2d      	subs	r5, r5, #4
 800267e:	1f36      	subs	r6, r6, #4
 8002680:	42a5      	cmp	r5, r4
 8002682:	d2f5      	bcs.n	8002670 <nl_func_exp_array_f32+0x14>
 8002684:	bd70      	pop	{r4, r5, r6, pc}
	...

08002688 <nl_func_sqrt_array_f32>:
 8002688:	b570      	push	{r4, r5, r6, lr}
 800268a:	460c      	mov	r4, r1
 800268c:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002690:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8002694:	1f0d      	subs	r5, r1, #4
 8002696:	1f06      	subs	r6, r0, #4
 8002698:	42a5      	cmp	r5, r4
 800269a:	d309      	bcc.n	80026b0 <nl_func_sqrt_array_f32+0x28>
 800269c:	ed95 0a00 	vldr	s0, [r5]
 80026a0:	f001 f9a8 	bl	80039f4 <ai_math_sqrt>
 80026a4:	ed86 0a00 	vstr	s0, [r6]
 80026a8:	1f2d      	subs	r5, r5, #4
 80026aa:	1f36      	subs	r6, r6, #4
 80026ac:	42a5      	cmp	r5, r4
 80026ae:	d2f5      	bcs.n	800269c <nl_func_sqrt_array_f32+0x14>
 80026b0:	bd70      	pop	{r4, r5, r6, pc}
	...

080026b4 <nl_func_soft_plus_array_f32>:
 80026b4:	b570      	push	{r4, r5, r6, lr}
 80026b6:	460c      	mov	r4, r1
 80026b8:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 80026bc:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80026c0:	1f0d      	subs	r5, r1, #4
 80026c2:	1f06      	subs	r6, r0, #4
 80026c4:	42a5      	cmp	r5, r4
 80026c6:	d30f      	bcc.n	80026e8 <nl_func_soft_plus_array_f32+0x34>
 80026c8:	ed95 0a00 	vldr	s0, [r5]
 80026cc:	f006 fd02 	bl	80090d4 <expf>
 80026d0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80026d4:	ee30 0a20 	vadd.f32	s0, s0, s1
 80026d8:	f006 fd76 	bl	80091c8 <logf>
 80026dc:	ed86 0a00 	vstr	s0, [r6]
 80026e0:	1f2d      	subs	r5, r5, #4
 80026e2:	1f36      	subs	r6, r6, #4
 80026e4:	42a5      	cmp	r5, r4
 80026e6:	d2ef      	bcs.n	80026c8 <nl_func_soft_plus_array_f32+0x14>
 80026e8:	bd70      	pop	{r4, r5, r6, pc}
	...

080026ec <nl_func_soft_sign_array_f32>:
 80026ec:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 80026f0:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80026f4:	1f1b      	subs	r3, r3, #4
 80026f6:	1f00      	subs	r0, r0, #4
 80026f8:	428b      	cmp	r3, r1
 80026fa:	d30f      	bcc.n	800271c <nl_func_soft_sign_array_f32+0x30>
 80026fc:	ed93 0a00 	vldr	s0, [r3]
 8002700:	eef0 0ac0 	vabs.f32	s1, s0
 8002704:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8002708:	ee70 0a81 	vadd.f32	s1, s1, s2
 800270c:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8002710:	ed80 0a00 	vstr	s0, [r0]
 8002714:	1f1b      	subs	r3, r3, #4
 8002716:	1f00      	subs	r0, r0, #4
 8002718:	428b      	cmp	r3, r1
 800271a:	d2ef      	bcs.n	80026fc <nl_func_soft_sign_array_f32+0x10>
 800271c:	4770      	bx	lr
	...

08002720 <nl_func_sign_array_f32>:
 8002720:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8002724:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8002728:	1f1b      	subs	r3, r3, #4
 800272a:	1f00      	subs	r0, r0, #4
 800272c:	428b      	cmp	r3, r1
 800272e:	d314      	bcc.n	800275a <nl_func_sign_array_f32+0x3a>
 8002730:	f04f 32ff 	mov.w	r2, #4294967295
 8002734:	ed93 0a00 	vldr	s0, [r3]
 8002738:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800273c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002740:	bfcc      	ite	gt
 8002742:	ed9f 0ab9 	vldrgt	s0, [pc, #740]	; 8002a28 <.text_21>
 8002746:	ee00 2a10 	vmovle	s0, r2
 800274a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800274e:	ed80 0a00 	vstr	s0, [r0]
 8002752:	1f1b      	subs	r3, r3, #4
 8002754:	1f00      	subs	r0, r0, #4
 8002756:	428b      	cmp	r3, r1
 8002758:	d2ec      	bcs.n	8002734 <nl_func_sign_array_f32+0x14>
 800275a:	4770      	bx	lr

0800275c <.text_12>:
 800275c:	00000000 	.word	0x00000000

08002760 <nl_func_clip_array_f32>:
 8002760:	ed93 0a00 	vldr	s0, [r3]
 8002764:	edd3 0a01 	vldr	s1, [r3, #4]
 8002768:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 800276c:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8002770:	1f1b      	subs	r3, r3, #4
 8002772:	1f00      	subs	r0, r0, #4
 8002774:	428b      	cmp	r3, r1
 8002776:	d315      	bcc.n	80027a4 <nl_func_clip_array_f32+0x44>
 8002778:	ed93 1a00 	vldr	s2, [r3]
 800277c:	eeb4 0a41 	vcmp.f32	s0, s2
 8002780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002784:	bf58      	it	pl
 8002786:	eeb0 1a40 	vmovpl.f32	s2, s0
 800278a:	eeb4 1a60 	vcmp.f32	s2, s1
 800278e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002792:	bf58      	it	pl
 8002794:	eeb0 1a60 	vmovpl.f32	s2, s1
 8002798:	ed80 1a00 	vstr	s2, [r0]
 800279c:	1f1b      	subs	r3, r3, #4
 800279e:	1f00      	subs	r0, r0, #4
 80027a0:	428b      	cmp	r3, r1
 80027a2:	d2e9      	bcs.n	8002778 <nl_func_clip_array_f32+0x18>
 80027a4:	4770      	bx	lr
	...

080027a8 <nl_func_hardmax_array_f32>:
 80027a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027ac:	6856      	ldr	r6, [r2, #4]
 80027ae:	68d4      	ldr	r4, [r2, #12]
 80027b0:	4688      	mov	r8, r1
 80027b2:	4374      	muls	r4, r6
 80027b4:	4605      	mov	r5, r0
 80027b6:	00a1      	lsls	r1, r4, #2
 80027b8:	f004 fb6d 	bl	8006e96 <__aeabi_memclr>
 80027bc:	2200      	movs	r2, #0
 80027be:	2c00      	cmp	r4, #0
 80027c0:	4643      	mov	r3, r8
 80027c2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80027c6:	d05a      	beq.n	800287e <nl_func_hardmax_array_f32+0xd6>
 80027c8:	f102 0c01 	add.w	ip, r2, #1
 80027cc:	eb06 0e02 	add.w	lr, r6, r2
 80027d0:	45f4      	cmp	ip, lr
 80027d2:	edd3 0a00 	vldr	s1, [r3]
 80027d6:	d249      	bcs.n	800286c <nl_func_hardmax_array_f32+0xc4>
 80027d8:	1e71      	subs	r1, r6, #1
 80027da:	f011 0003 	ands.w	r0, r1, #3
 80027de:	eb08 078c 	add.w	r7, r8, ip, lsl #2
 80027e2:	d00f      	beq.n	8002804 <nl_func_hardmax_array_f32+0x5c>
 80027e4:	ed97 1a00 	vldr	s2, [r7]
 80027e8:	eef4 0a41 	vcmp.f32	s1, s2
 80027ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027f0:	bf44      	itt	mi
 80027f2:	eef0 0a41 	vmovmi.f32	s1, s2
 80027f6:	4662      	movmi	r2, ip
 80027f8:	1e40      	subs	r0, r0, #1
 80027fa:	f10c 0c01 	add.w	ip, ip, #1
 80027fe:	f107 0704 	add.w	r7, r7, #4
 8002802:	d1ef      	bne.n	80027e4 <nl_func_hardmax_array_f32+0x3c>
 8002804:	0889      	lsrs	r1, r1, #2
 8002806:	d031      	beq.n	800286c <nl_func_hardmax_array_f32+0xc4>
 8002808:	ed97 1a00 	vldr	s2, [r7]
 800280c:	eef4 0a41 	vcmp.f32	s1, s2
 8002810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002814:	bf44      	itt	mi
 8002816:	eef0 0a41 	vmovmi.f32	s1, s2
 800281a:	4662      	movmi	r2, ip
 800281c:	ed97 1a01 	vldr	s2, [r7, #4]
 8002820:	eef4 0a41 	vcmp.f32	s1, s2
 8002824:	f10c 0001 	add.w	r0, ip, #1
 8002828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800282c:	bf44      	itt	mi
 800282e:	eef0 0a41 	vmovmi.f32	s1, s2
 8002832:	4602      	movmi	r2, r0
 8002834:	ed97 1a02 	vldr	s2, [r7, #8]
 8002838:	1c40      	adds	r0, r0, #1
 800283a:	eef4 0a41 	vcmp.f32	s1, s2
 800283e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002842:	bf44      	itt	mi
 8002844:	eef0 0a41 	vmovmi.f32	s1, s2
 8002848:	4602      	movmi	r2, r0
 800284a:	ed97 1a03 	vldr	s2, [r7, #12]
 800284e:	1c40      	adds	r0, r0, #1
 8002850:	eef4 0a41 	vcmp.f32	s1, s2
 8002854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002858:	bf44      	itt	mi
 800285a:	eef0 0a41 	vmovmi.f32	s1, s2
 800285e:	4602      	movmi	r2, r0
 8002860:	1e49      	subs	r1, r1, #1
 8002862:	f100 0c01 	add.w	ip, r0, #1
 8002866:	f107 0710 	add.w	r7, r7, #16
 800286a:	d1cd      	bne.n	8002808 <nl_func_hardmax_array_f32+0x60>
 800286c:	eb05 0082 	add.w	r0, r5, r2, lsl #2
 8002870:	4672      	mov	r2, lr
 8002872:	42a2      	cmp	r2, r4
 8002874:	ed80 0a00 	vstr	s0, [r0]
 8002878:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800287c:	d3a4      	bcc.n	80027c8 <nl_func_hardmax_array_f32+0x20>
 800287e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08002884 <nl_func_relu_array_f32>:
 8002884:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8002888:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800288c:	1f1b      	subs	r3, r3, #4
 800288e:	1f00      	subs	r0, r0, #4
 8002890:	428b      	cmp	r3, r1
 8002892:	d30e      	bcc.n	80028b2 <nl_func_relu_array_f32+0x2e>
 8002894:	ed93 0a00 	vldr	s0, [r3]
 8002898:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800289c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028a0:	bf48      	it	mi
 80028a2:	ed9f 0ab9 	vldrmi	s0, [pc, #740]	; 8002b88 <.text_25>
 80028a6:	ed80 0a00 	vstr	s0, [r0]
 80028aa:	1f1b      	subs	r3, r3, #4
 80028ac:	1f00      	subs	r0, r0, #4
 80028ae:	428b      	cmp	r3, r1
 80028b0:	d2f0      	bcs.n	8002894 <nl_func_relu_array_f32+0x10>
 80028b2:	4770      	bx	lr

080028b4 <.text_16>:
 80028b4:	3f800001 	.word	0x3f800001

080028b8 <.text_17>:
 80028b8:	3e4ccccd 	.word	0x3e4ccccd

080028bc <nl_func_relu_generic_array_f32>:
 80028bc:	ed93 0a00 	vldr	s0, [r3]
 80028c0:	edd3 0a01 	vldr	s1, [r3, #4]
 80028c4:	ed93 1a02 	vldr	s2, [r3, #8]
 80028c8:	1f00      	subs	r0, r0, #4
 80028ca:	eeb5 1a40 	vcmp.f32	s2, #0.0
 80028ce:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80028d2:	1f0b      	subs	r3, r1, #4
 80028d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028d8:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80028dc:	d52a      	bpl.n	8002934 <nl_func_relu_generic_array_f32+0x78>
 80028de:	eef5 0a40 	vcmp.f32	s1, #0.0
 80028e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028e6:	d013      	beq.n	8002910 <nl_func_relu_generic_array_f32+0x54>
 80028e8:	428a      	cmp	r2, r1
 80028ea:	d310      	bcc.n	800290e <nl_func_relu_generic_array_f32+0x52>
 80028ec:	ed92 1a00 	vldr	s2, [r2]
 80028f0:	eeb4 1a40 	vcmp.f32	s2, s0
 80028f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028f8:	bf44      	itt	mi
 80028fa:	ee31 1a40 	vsubmi.f32	s2, s2, s0
 80028fe:	ee21 1a20 	vmulmi.f32	s2, s2, s1
 8002902:	ed80 1a00 	vstr	s2, [r0]
 8002906:	1f12      	subs	r2, r2, #4
 8002908:	1f00      	subs	r0, r0, #4
 800290a:	428a      	cmp	r2, r1
 800290c:	d2ee      	bcs.n	80028ec <nl_func_relu_generic_array_f32+0x30>
 800290e:	4770      	bx	lr
 8002910:	428a      	cmp	r2, r1
 8002912:	d3fc      	bcc.n	800290e <nl_func_relu_generic_array_f32+0x52>
 8002914:	edd2 0a00 	vldr	s1, [r2]
 8002918:	eef4 0a40 	vcmp.f32	s1, s0
 800291c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002920:	bf48      	it	mi
 8002922:	eddf 0a99 	vldrmi	s1, [pc, #612]	; 8002b88 <.text_25>
 8002926:	edc0 0a00 	vstr	s1, [r0]
 800292a:	1f12      	subs	r2, r2, #4
 800292c:	1f00      	subs	r0, r0, #4
 800292e:	428a      	cmp	r2, r1
 8002930:	d2f0      	bcs.n	8002914 <nl_func_relu_generic_array_f32+0x58>
 8002932:	4770      	bx	lr
 8002934:	428a      	cmp	r2, r1
 8002936:	d3ea      	bcc.n	800290e <nl_func_relu_generic_array_f32+0x52>
 8002938:	edd2 1a00 	vldr	s3, [r2]
 800293c:	eef4 1a41 	vcmp.f32	s3, s2
 8002940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002944:	d50a      	bpl.n	800295c <nl_func_relu_generic_array_f32+0xa0>
 8002946:	eef4 1a40 	vcmp.f32	s3, s0
 800294a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800294e:	d507      	bpl.n	8002960 <nl_func_relu_generic_array_f32+0xa4>
 8002950:	ee71 1ac0 	vsub.f32	s3, s3, s0
 8002954:	ee61 1aa0 	vmul.f32	s3, s3, s1
 8002958:	e002      	b.n	8002960 <nl_func_relu_generic_array_f32+0xa4>
 800295a:	bf00      	nop
 800295c:	eef0 1a41 	vmov.f32	s3, s2
 8002960:	edc0 1a00 	vstr	s3, [r0]
 8002964:	1f12      	subs	r2, r2, #4
 8002966:	1f00      	subs	r0, r0, #4
 8002968:	428a      	cmp	r2, r1
 800296a:	d2e5      	bcs.n	8002938 <nl_func_relu_generic_array_f32+0x7c>
 800296c:	4770      	bx	lr
	...

08002970 <nl_func_relu_thresholded_array_f32>:
 8002970:	ed93 0a00 	vldr	s0, [r3]
 8002974:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8002978:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800297c:	1f1b      	subs	r3, r3, #4
 800297e:	1f00      	subs	r0, r0, #4
 8002980:	428b      	cmp	r3, r1
 8002982:	d30e      	bcc.n	80029a2 <nl_func_relu_thresholded_array_f32+0x32>
 8002984:	edd3 0a00 	vldr	s1, [r3]
 8002988:	eef4 0a40 	vcmp.f32	s1, s0
 800298c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002990:	bf48      	it	mi
 8002992:	eddf 0a7d 	vldrmi	s1, [pc, #500]	; 8002b88 <.text_25>
 8002996:	edc0 0a00 	vstr	s1, [r0]
 800299a:	1f1b      	subs	r3, r3, #4
 800299c:	1f00      	subs	r0, r0, #4
 800299e:	428b      	cmp	r3, r1
 80029a0:	d2f0      	bcs.n	8002984 <nl_func_relu_thresholded_array_f32+0x14>
 80029a2:	4770      	bx	lr

080029a4 <nl_func_elu_array_f32>:
 80029a4:	b570      	push	{r4, r5, r6, lr}
 80029a6:	460c      	mov	r4, r1
 80029a8:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 80029ac:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80029b0:	1f0d      	subs	r5, r1, #4
 80029b2:	1f06      	subs	r6, r0, #4
 80029b4:	ed2d 8b04 	vpush	{d8-d9}
 80029b8:	42a5      	cmp	r5, r4
 80029ba:	ed93 8a00 	vldr	s16, [r3]
 80029be:	d32f      	bcc.n	8002a20 <nl_func_elu_array_f32+0x7c>
 80029c0:	edd5 8a00 	vldr	s17, [r5]
 80029c4:	eef5 8a40 	vcmp.f32	s17, #0.0
 80029c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029cc:	bf4c      	ite	mi
 80029ce:	ed9f 9a6e 	vldrmi	s18, [pc, #440]	; 8002b88 <.text_25>
 80029d2:	eeb0 9a68 	vmovpl.f32	s18, s17
 80029d6:	eeb0 0a68 	vmov.f32	s0, s17
 80029da:	f006 fb7b 	bl	80090d4 <expf>
 80029de:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 80029e2:	ee30 0a20 	vadd.f32	s0, s0, s1
 80029e6:	ee20 0a08 	vmul.f32	s0, s0, s16
 80029ea:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80029ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029f2:	dd05      	ble.n	8002a00 <nl_func_elu_array_f32+0x5c>
 80029f4:	ed9f 1a64 	vldr	s2, [pc, #400]	; 8002b88 <.text_25>
 80029f8:	ee39 9a01 	vadd.f32	s18, s18, s2
 80029fc:	e00a      	b.n	8002a14 <nl_func_elu_array_f32+0x70>
 80029fe:	bf00      	nop
 8002a00:	eeb0 0a68 	vmov.f32	s0, s17
 8002a04:	f006 fb66 	bl	80090d4 <expf>
 8002a08:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8002a0c:	ee30 0a20 	vadd.f32	s0, s0, s1
 8002a10:	ee00 9a08 	vmla.f32	s18, s0, s16
 8002a14:	ed86 9a00 	vstr	s18, [r6]
 8002a18:	1f2d      	subs	r5, r5, #4
 8002a1a:	1f36      	subs	r6, r6, #4
 8002a1c:	42a5      	cmp	r5, r4
 8002a1e:	d2cf      	bcs.n	80029c0 <nl_func_elu_array_f32+0x1c>
 8002a20:	ecbd 8b04 	vpop	{d8-d9}
 8002a24:	bd70      	pop	{r4, r5, r6, pc}
	...

08002a28 <.text_21>:
 8002a28:	00000001 	.word	0x00000001

08002a2c <nl_func_selu_array_f32>:
 8002a2c:	b570      	push	{r4, r5, r6, lr}
 8002a2e:	460c      	mov	r4, r1
 8002a30:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002a34:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8002a38:	1f0d      	subs	r5, r1, #4
 8002a3a:	1f06      	subs	r6, r0, #4
 8002a3c:	ed2d 8b04 	vpush	{d8-d9}
 8002a40:	42a5      	cmp	r5, r4
 8002a42:	ed93 8a00 	vldr	s16, [r3]
 8002a46:	edd3 8a01 	vldr	s17, [r3, #4]
 8002a4a:	d331      	bcc.n	8002ab0 <nl_func_selu_array_f32+0x84>
 8002a4c:	ed95 9a00 	vldr	s18, [r5]
 8002a50:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8002a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a58:	bf4c      	ite	mi
 8002a5a:	eddf 9a4b 	vldrmi	s19, [pc, #300]	; 8002b88 <.text_25>
 8002a5e:	eef0 9a49 	vmovpl.f32	s19, s18
 8002a62:	eeb0 0a49 	vmov.f32	s0, s18
 8002a66:	f006 fb35 	bl	80090d4 <expf>
 8002a6a:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8002a6e:	ee30 0a20 	vadd.f32	s0, s0, s1
 8002a72:	ee20 0a08 	vmul.f32	s0, s0, s16
 8002a76:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a7e:	dd05      	ble.n	8002a8c <nl_func_selu_array_f32+0x60>
 8002a80:	ed9f 1a41 	vldr	s2, [pc, #260]	; 8002b88 <.text_25>
 8002a84:	ee79 9a81 	vadd.f32	s19, s19, s2
 8002a88:	e00a      	b.n	8002aa0 <nl_func_selu_array_f32+0x74>
 8002a8a:	bf00      	nop
 8002a8c:	eeb0 0a49 	vmov.f32	s0, s18
 8002a90:	f006 fb20 	bl	80090d4 <expf>
 8002a94:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8002a98:	ee30 0a20 	vadd.f32	s0, s0, s1
 8002a9c:	ee40 9a08 	vmla.f32	s19, s0, s16
 8002aa0:	ee28 0aa9 	vmul.f32	s0, s17, s19
 8002aa4:	ed86 0a00 	vstr	s0, [r6]
 8002aa8:	1f2d      	subs	r5, r5, #4
 8002aaa:	1f36      	subs	r6, r6, #4
 8002aac:	42a5      	cmp	r5, r4
 8002aae:	d2cd      	bcs.n	8002a4c <nl_func_selu_array_f32+0x20>
 8002ab0:	ecbd 8b04 	vpop	{d8-d9}
 8002ab4:	bd70      	pop	{r4, r5, r6, pc}
	...

08002ab8 <nl_func_prelu_array_f32>:
 8002ab8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8002abc:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8002ac0:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8002ac4:	1f1b      	subs	r3, r3, #4
 8002ac6:	f1ac 0c04 	sub.w	ip, ip, #4
 8002aca:	1f00      	subs	r0, r0, #4
 8002acc:	458c      	cmp	ip, r1
 8002ace:	d320      	bcc.n	8002b12 <nl_func_prelu_array_f32+0x5a>
 8002ad0:	ed9c 0a00 	vldr	s0, [ip]
 8002ad4:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002adc:	bf4c      	ite	mi
 8002ade:	eddf 0a2a 	vldrmi	s1, [pc, #168]	; 8002b88 <.text_25>
 8002ae2:	eef0 0a40 	vmovpl.f32	s1, s0
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	eeb1 0a40 	vneg.f32	s0, s0
 8002aec:	1f13      	subs	r3, r2, #4
 8002aee:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002af6:	bf48      	it	mi
 8002af8:	ed9f 0a23 	vldrmi	s0, [pc, #140]	; 8002b88 <.text_25>
 8002afc:	ed92 1a00 	vldr	s2, [r2]
 8002b00:	ee41 0a40 	vmls.f32	s1, s2, s0
 8002b04:	edc0 0a00 	vstr	s1, [r0]
 8002b08:	f1ac 0c04 	sub.w	ip, ip, #4
 8002b0c:	1f00      	subs	r0, r0, #4
 8002b0e:	458c      	cmp	ip, r1
 8002b10:	d2de      	bcs.n	8002ad0 <nl_func_prelu_array_f32+0x18>
 8002b12:	4770      	bx	lr

08002b14 <forward_relu>:
 8002b14:	b430      	push	{r4, r5}
 8002b16:	4602      	mov	r2, r0
 8002b18:	6950      	ldr	r0, [r2, #20]
 8002b1a:	6800      	ldr	r0, [r0, #0]
 8002b1c:	6801      	ldr	r1, [r0, #0]
 8002b1e:	68c0      	ldr	r0, [r0, #12]
 8002b20:	680b      	ldr	r3, [r1, #0]
 8002b22:	6805      	ldr	r5, [r0, #0]
 8002b24:	685c      	ldr	r4, [r3, #4]
 8002b26:	6898      	ldr	r0, [r3, #8]
 8002b28:	68d9      	ldr	r1, [r3, #12]
 8002b2a:	682d      	ldr	r5, [r5, #0]
 8002b2c:	6992      	ldr	r2, [r2, #24]
 8002b2e:	4344      	muls	r4, r0
 8002b30:	6918      	ldr	r0, [r3, #16]
 8002b32:	434c      	muls	r4, r1
 8002b34:	6819      	ldr	r1, [r3, #0]
 8002b36:	6889      	ldr	r1, [r1, #8]
 8002b38:	4344      	muls	r4, r0
 8002b3a:	68a8      	ldr	r0, [r5, #8]
 8002b3c:	b9ca      	cbnz	r2, 8002b72 <forward_relu+0x5e>
 8002b3e:	eb01 0284 	add.w	r2, r1, r4, lsl #2
 8002b42:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8002b46:	1f12      	subs	r2, r2, #4
 8002b48:	1f00      	subs	r0, r0, #4
 8002b4a:	428a      	cmp	r2, r1
 8002b4c:	f0c0 801a 	bcc.w	8002b84 <forward_relu+0x70>
 8002b50:	ed92 0a00 	vldr	s0, [r2]
 8002b54:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b5c:	bf48      	it	mi
 8002b5e:	ed9f 0a0a 	vldrmi	s0, [pc, #40]	; 8002b88 <.text_25>
 8002b62:	ed80 0a00 	vstr	s0, [r0]
 8002b66:	1f12      	subs	r2, r2, #4
 8002b68:	1f00      	subs	r0, r0, #4
 8002b6a:	428a      	cmp	r2, r1
 8002b6c:	d2f0      	bcs.n	8002b50 <forward_relu+0x3c>
 8002b6e:	bc30      	pop	{r4, r5}
 8002b70:	4770      	bx	lr
 8002b72:	6893      	ldr	r3, [r2, #8]
 8002b74:	6852      	ldr	r2, [r2, #4]
 8002b76:	2a01      	cmp	r2, #1
 8002b78:	4622      	mov	r2, r4
 8002b7a:	d101      	bne.n	8002b80 <forward_relu+0x6c>
 8002b7c:	bc30      	pop	{r4, r5}
 8002b7e:	e6f7      	b.n	8002970 <nl_func_relu_thresholded_array_f32>
 8002b80:	bc30      	pop	{r4, r5}
 8002b82:	e69b      	b.n	80028bc <nl_func_relu_generic_array_f32>
 8002b84:	bc30      	pop	{r4, r5}
 8002b86:	4770      	bx	lr

08002b88 <.text_25>:
 8002b88:	00000000 	.word	0x00000000

08002b8c <forward_relu_thresholded>:
 8002b8c:	b430      	push	{r4, r5}
 8002b8e:	6941      	ldr	r1, [r0, #20]
 8002b90:	6980      	ldr	r0, [r0, #24]
 8002b92:	680c      	ldr	r4, [r1, #0]
 8002b94:	6822      	ldr	r2, [r4, #0]
 8002b96:	6815      	ldr	r5, [r2, #0]
 8002b98:	686b      	ldr	r3, [r5, #4]
 8002b9a:	68a9      	ldr	r1, [r5, #8]
 8002b9c:	68ea      	ldr	r2, [r5, #12]
 8002b9e:	434b      	muls	r3, r1
 8002ba0:	6929      	ldr	r1, [r5, #16]
 8002ba2:	682d      	ldr	r5, [r5, #0]
 8002ba4:	4353      	muls	r3, r2
 8002ba6:	6882      	ldr	r2, [r0, #8]
 8002ba8:	ed92 0a00 	vldr	s0, [r2]
 8002bac:	68e2      	ldr	r2, [r4, #12]
 8002bae:	6814      	ldr	r4, [r2, #0]
 8002bb0:	434b      	muls	r3, r1
 8002bb2:	68a9      	ldr	r1, [r5, #8]
 8002bb4:	6825      	ldr	r5, [r4, #0]
 8002bb6:	68aa      	ldr	r2, [r5, #8]
 8002bb8:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8002bbc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002bc0:	1f00      	subs	r0, r0, #4
 8002bc2:	1f1a      	subs	r2, r3, #4
 8002bc4:	4288      	cmp	r0, r1
 8002bc6:	d30e      	bcc.n	8002be6 <forward_relu_thresholded+0x5a>
 8002bc8:	edd0 0a00 	vldr	s1, [r0]
 8002bcc:	eef4 0a40 	vcmp.f32	s1, s0
 8002bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bd4:	bf48      	it	mi
 8002bd6:	eddf 0ac1 	vldrmi	s1, [pc, #772]	; 8002edc <.text_34>
 8002bda:	edc2 0a00 	vstr	s1, [r2]
 8002bde:	1f00      	subs	r0, r0, #4
 8002be0:	1f12      	subs	r2, r2, #4
 8002be2:	4288      	cmp	r0, r1
 8002be4:	d2f0      	bcs.n	8002bc8 <forward_relu_thresholded+0x3c>
 8002be6:	bc30      	pop	{r4, r5}
 8002be8:	4770      	bx	lr
	...

08002bec <forward_elu>:
 8002bec:	b570      	push	{r4, r5, r6, lr}
 8002bee:	ed2d 8b04 	vpush	{d8-d9}
 8002bf2:	6941      	ldr	r1, [r0, #20]
 8002bf4:	680e      	ldr	r6, [r1, #0]
 8002bf6:	6832      	ldr	r2, [r6, #0]
 8002bf8:	6814      	ldr	r4, [r2, #0]
 8002bfa:	6863      	ldr	r3, [r4, #4]
 8002bfc:	68a1      	ldr	r1, [r4, #8]
 8002bfe:	68e2      	ldr	r2, [r4, #12]
 8002c00:	6980      	ldr	r0, [r0, #24]
 8002c02:	434b      	muls	r3, r1
 8002c04:	6921      	ldr	r1, [r4, #16]
 8002c06:	6824      	ldr	r4, [r4, #0]
 8002c08:	68a4      	ldr	r4, [r4, #8]
 8002c0a:	4353      	muls	r3, r2
 8002c0c:	434b      	muls	r3, r1
 8002c0e:	6881      	ldr	r1, [r0, #8]
 8002c10:	ed91 8a00 	vldr	s16, [r1]
 8002c14:	68f1      	ldr	r1, [r6, #12]
 8002c16:	eb04 0083 	add.w	r0, r4, r3, lsl #2
 8002c1a:	1f05      	subs	r5, r0, #4
 8002c1c:	6808      	ldr	r0, [r1, #0]
 8002c1e:	6802      	ldr	r2, [r0, #0]
 8002c20:	6891      	ldr	r1, [r2, #8]
 8002c22:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8002c26:	1f06      	subs	r6, r0, #4
 8002c28:	42a5      	cmp	r5, r4
 8002c2a:	d32f      	bcc.n	8002c8c <forward_elu+0xa0>
 8002c2c:	edd5 8a00 	vldr	s17, [r5]
 8002c30:	eef5 8a40 	vcmp.f32	s17, #0.0
 8002c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c38:	bf4c      	ite	mi
 8002c3a:	ed9f 9aa8 	vldrmi	s18, [pc, #672]	; 8002edc <.text_34>
 8002c3e:	eeb0 9a68 	vmovpl.f32	s18, s17
 8002c42:	eeb0 0a68 	vmov.f32	s0, s17
 8002c46:	f006 fa45 	bl	80090d4 <expf>
 8002c4a:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8002c4e:	ee30 0a20 	vadd.f32	s0, s0, s1
 8002c52:	ee20 0a08 	vmul.f32	s0, s0, s16
 8002c56:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c5e:	dd05      	ble.n	8002c6c <forward_elu+0x80>
 8002c60:	ed9f 1a9e 	vldr	s2, [pc, #632]	; 8002edc <.text_34>
 8002c64:	ee39 9a01 	vadd.f32	s18, s18, s2
 8002c68:	e00a      	b.n	8002c80 <forward_elu+0x94>
 8002c6a:	bf00      	nop
 8002c6c:	eeb0 0a68 	vmov.f32	s0, s17
 8002c70:	f006 fa30 	bl	80090d4 <expf>
 8002c74:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8002c78:	ee30 0a20 	vadd.f32	s0, s0, s1
 8002c7c:	ee00 9a08 	vmla.f32	s18, s0, s16
 8002c80:	ed86 9a00 	vstr	s18, [r6]
 8002c84:	1f2d      	subs	r5, r5, #4
 8002c86:	1f36      	subs	r6, r6, #4
 8002c88:	42a5      	cmp	r5, r4
 8002c8a:	d2cf      	bcs.n	8002c2c <forward_elu+0x40>
 8002c8c:	ecbd 8b04 	vpop	{d8-d9}
 8002c90:	bd70      	pop	{r4, r5, r6, pc}

08002c92 <forward_selu>:
 8002c92:	b430      	push	{r4, r5}
 8002c94:	6941      	ldr	r1, [r0, #20]
 8002c96:	680c      	ldr	r4, [r1, #0]
 8002c98:	6822      	ldr	r2, [r4, #0]
 8002c9a:	6980      	ldr	r0, [r0, #24]
 8002c9c:	6815      	ldr	r5, [r2, #0]
 8002c9e:	6883      	ldr	r3, [r0, #8]
 8002ca0:	686a      	ldr	r2, [r5, #4]
 8002ca2:	68a8      	ldr	r0, [r5, #8]
 8002ca4:	68e9      	ldr	r1, [r5, #12]
 8002ca6:	4342      	muls	r2, r0
 8002ca8:	6928      	ldr	r0, [r5, #16]
 8002caa:	682d      	ldr	r5, [r5, #0]
 8002cac:	434a      	muls	r2, r1
 8002cae:	4342      	muls	r2, r0
 8002cb0:	68e0      	ldr	r0, [r4, #12]
 8002cb2:	6804      	ldr	r4, [r0, #0]
 8002cb4:	68a9      	ldr	r1, [r5, #8]
 8002cb6:	6825      	ldr	r5, [r4, #0]
 8002cb8:	68a8      	ldr	r0, [r5, #8]
 8002cba:	bc30      	pop	{r4, r5}
 8002cbc:	e6b6      	b.n	8002a2c <nl_func_selu_array_f32>

08002cbe <forward_prelu>:
 8002cbe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002cc2:	b081      	sub	sp, #4
 8002cc4:	6940      	ldr	r0, [r0, #20]
 8002cc6:	6800      	ldr	r0, [r0, #0]
 8002cc8:	6801      	ldr	r1, [r0, #0]
 8002cca:	68c2      	ldr	r2, [r0, #12]
 8002ccc:	6980      	ldr	r0, [r0, #24]
 8002cce:	6804      	ldr	r4, [r0, #0]
 8002cd0:	6820      	ldr	r0, [r4, #0]
 8002cd2:	680d      	ldr	r5, [r1, #0]
 8002cd4:	6817      	ldr	r7, [r2, #0]
 8002cd6:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8002cda:	b12c      	cbz	r4, 8002ce8 <forward_prelu+0x2a>
 8002cdc:	6841      	ldr	r1, [r0, #4]
 8002cde:	6800      	ldr	r0, [r0, #0]
 8002ce0:	f000 fd32 	bl	8003748 <ai_array_get_byte_size>
 8002ce4:	4681      	mov	r9, r0
 8002ce6:	e001      	b.n	8002cec <forward_prelu+0x2e>
 8002ce8:	f04f 0901 	mov.w	r9, #1
 8002cec:	6828      	ldr	r0, [r5, #0]
 8002cee:	6841      	ldr	r1, [r0, #4]
 8002cf0:	6800      	ldr	r0, [r0, #0]
 8002cf2:	f000 fd29 	bl	8003748 <ai_array_get_byte_size>
 8002cf6:	6829      	ldr	r1, [r5, #0]
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	688e      	ldr	r6, [r1, #8]
 8002cfc:	6895      	ldr	r5, [r2, #8]
 8002cfe:	1837      	adds	r7, r6, r0
 8002d00:	42be      	cmp	r6, r7
 8002d02:	d20f      	bcs.n	8002d24 <forward_prelu+0x66>
 8002d04:	6862      	ldr	r2, [r4, #4]
 8002d06:	68a0      	ldr	r0, [r4, #8]
 8002d08:	68e1      	ldr	r1, [r4, #12]
 8002d0a:	4342      	muls	r2, r0
 8002d0c:	6920      	ldr	r0, [r4, #16]
 8002d0e:	434a      	muls	r2, r1
 8002d10:	4342      	muls	r2, r0
 8002d12:	4643      	mov	r3, r8
 8002d14:	4631      	mov	r1, r6
 8002d16:	4628      	mov	r0, r5
 8002d18:	f7ff fece 	bl	8002ab8 <nl_func_prelu_array_f32>
 8002d1c:	444e      	add	r6, r9
 8002d1e:	42be      	cmp	r6, r7
 8002d20:	444d      	add	r5, r9
 8002d22:	d3ef      	bcc.n	8002d04 <forward_prelu+0x46>
 8002d24:	b001      	add	sp, #4
 8002d26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08002d2c <forward_sign>:
 8002d2c:	b430      	push	{r4, r5}
 8002d2e:	6940      	ldr	r0, [r0, #20]
 8002d30:	6802      	ldr	r2, [r0, #0]
 8002d32:	6811      	ldr	r1, [r2, #0]
 8002d34:	68d2      	ldr	r2, [r2, #12]
 8002d36:	680b      	ldr	r3, [r1, #0]
 8002d38:	685c      	ldr	r4, [r3, #4]
 8002d3a:	6898      	ldr	r0, [r3, #8]
 8002d3c:	68d9      	ldr	r1, [r3, #12]
 8002d3e:	4344      	muls	r4, r0
 8002d40:	6918      	ldr	r0, [r3, #16]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	434c      	muls	r4, r1
 8002d46:	4344      	muls	r4, r0
 8002d48:	6898      	ldr	r0, [r3, #8]
 8002d4a:	6813      	ldr	r3, [r2, #0]
 8002d4c:	681d      	ldr	r5, [r3, #0]
 8002d4e:	68aa      	ldr	r2, [r5, #8]
 8002d50:	eb00 0184 	add.w	r1, r0, r4, lsl #2
 8002d54:	eb02 0384 	add.w	r3, r2, r4, lsl #2
 8002d58:	1f09      	subs	r1, r1, #4
 8002d5a:	1f1a      	subs	r2, r3, #4
 8002d5c:	4281      	cmp	r1, r0
 8002d5e:	d314      	bcc.n	8002d8a <forward_sign+0x5e>
 8002d60:	f04f 33ff 	mov.w	r3, #4294967295
 8002d64:	ed91 0a00 	vldr	s0, [r1]
 8002d68:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d70:	bfcc      	ite	gt
 8002d72:	ed9f 0a5b 	vldrgt	s0, [pc, #364]	; 8002ee0 <.text_35>
 8002d76:	ee00 3a10 	vmovle	s0, r3
 8002d7a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8002d7e:	ed82 0a00 	vstr	s0, [r2]
 8002d82:	1f09      	subs	r1, r1, #4
 8002d84:	1f12      	subs	r2, r2, #4
 8002d86:	4281      	cmp	r1, r0
 8002d88:	d2ec      	bcs.n	8002d64 <forward_sign+0x38>
 8002d8a:	bc30      	pop	{r4, r5}
 8002d8c:	4770      	bx	lr
	...

08002d90 <forward_clip>:
 8002d90:	b430      	push	{r4, r5}
 8002d92:	6941      	ldr	r1, [r0, #20]
 8002d94:	680c      	ldr	r4, [r1, #0]
 8002d96:	6822      	ldr	r2, [r4, #0]
 8002d98:	6815      	ldr	r5, [r2, #0]
 8002d9a:	686b      	ldr	r3, [r5, #4]
 8002d9c:	68a9      	ldr	r1, [r5, #8]
 8002d9e:	68ea      	ldr	r2, [r5, #12]
 8002da0:	6980      	ldr	r0, [r0, #24]
 8002da2:	434b      	muls	r3, r1
 8002da4:	6929      	ldr	r1, [r5, #16]
 8002da6:	4353      	muls	r3, r2
 8002da8:	434b      	muls	r3, r1
 8002daa:	682a      	ldr	r2, [r5, #0]
 8002dac:	6881      	ldr	r1, [r0, #8]
 8002dae:	6890      	ldr	r0, [r2, #8]
 8002db0:	68e2      	ldr	r2, [r4, #12]
 8002db2:	ed91 0a00 	vldr	s0, [r1]
 8002db6:	6814      	ldr	r4, [r2, #0]
 8002db8:	edd1 0a01 	vldr	s1, [r1, #4]
 8002dbc:	6825      	ldr	r5, [r4, #0]
 8002dbe:	68aa      	ldr	r2, [r5, #8]
 8002dc0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8002dc4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002dc8:	1f09      	subs	r1, r1, #4
 8002dca:	1f1a      	subs	r2, r3, #4
 8002dcc:	4281      	cmp	r1, r0
 8002dce:	d315      	bcc.n	8002dfc <forward_clip+0x6c>
 8002dd0:	ed91 1a00 	vldr	s2, [r1]
 8002dd4:	eeb4 0a41 	vcmp.f32	s0, s2
 8002dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ddc:	bf58      	it	pl
 8002dde:	eeb0 1a40 	vmovpl.f32	s2, s0
 8002de2:	eeb4 1a60 	vcmp.f32	s2, s1
 8002de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dea:	bf58      	it	pl
 8002dec:	eeb0 1a60 	vmovpl.f32	s2, s1
 8002df0:	ed82 1a00 	vstr	s2, [r2]
 8002df4:	1f09      	subs	r1, r1, #4
 8002df6:	1f12      	subs	r2, r2, #4
 8002df8:	4281      	cmp	r1, r0
 8002dfa:	d2e9      	bcs.n	8002dd0 <forward_clip+0x40>
 8002dfc:	bc30      	pop	{r4, r5}
 8002dfe:	4770      	bx	lr

08002e00 <forward_sigmoid>:
 8002e00:	b570      	push	{r4, r5, r6, lr}
 8002e02:	6940      	ldr	r0, [r0, #20]
 8002e04:	6802      	ldr	r2, [r0, #0]
 8002e06:	6811      	ldr	r1, [r2, #0]
 8002e08:	680b      	ldr	r3, [r1, #0]
 8002e0a:	685e      	ldr	r6, [r3, #4]
 8002e0c:	6898      	ldr	r0, [r3, #8]
 8002e0e:	68d9      	ldr	r1, [r3, #12]
 8002e10:	4346      	muls	r6, r0
 8002e12:	6918      	ldr	r0, [r3, #16]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	689c      	ldr	r4, [r3, #8]
 8002e18:	434e      	muls	r6, r1
 8002e1a:	4346      	muls	r6, r0
 8002e1c:	68d1      	ldr	r1, [r2, #12]
 8002e1e:	eb04 0086 	add.w	r0, r4, r6, lsl #2
 8002e22:	1f05      	subs	r5, r0, #4
 8002e24:	6808      	ldr	r0, [r1, #0]
 8002e26:	6802      	ldr	r2, [r0, #0]
 8002e28:	6891      	ldr	r1, [r2, #8]
 8002e2a:	eb01 0086 	add.w	r0, r1, r6, lsl #2
 8002e2e:	1f06      	subs	r6, r0, #4
 8002e30:	42a5      	cmp	r5, r4
 8002e32:	d313      	bcc.n	8002e5c <forward_sigmoid+0x5c>
 8002e34:	ed95 0a00 	vldr	s0, [r5]
 8002e38:	eeb1 0a40 	vneg.f32	s0, s0
 8002e3c:	f006 f94a 	bl	80090d4 <expf>
 8002e40:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002e44:	ee70 0a20 	vadd.f32	s1, s0, s1
 8002e48:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002e4c:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8002e50:	ed86 0a00 	vstr	s0, [r6]
 8002e54:	1f2d      	subs	r5, r5, #4
 8002e56:	1f36      	subs	r6, r6, #4
 8002e58:	42a5      	cmp	r5, r4
 8002e5a:	d2eb      	bcs.n	8002e34 <forward_sigmoid+0x34>
 8002e5c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002e60 <forward_hard_sigmoid>:
 8002e60:	b430      	push	{r4, r5}
 8002e62:	6940      	ldr	r0, [r0, #20]
 8002e64:	6802      	ldr	r2, [r0, #0]
 8002e66:	6811      	ldr	r1, [r2, #0]
 8002e68:	68d2      	ldr	r2, [r2, #12]
 8002e6a:	680b      	ldr	r3, [r1, #0]
 8002e6c:	685c      	ldr	r4, [r3, #4]
 8002e6e:	6898      	ldr	r0, [r3, #8]
 8002e70:	68d9      	ldr	r1, [r3, #12]
 8002e72:	4344      	muls	r4, r0
 8002e74:	6918      	ldr	r0, [r3, #16]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	434c      	muls	r4, r1
 8002e7a:	4344      	muls	r4, r0
 8002e7c:	6898      	ldr	r0, [r3, #8]
 8002e7e:	6813      	ldr	r3, [r2, #0]
 8002e80:	681d      	ldr	r5, [r3, #0]
 8002e82:	68aa      	ldr	r2, [r5, #8]
 8002e84:	eb00 0184 	add.w	r1, r0, r4, lsl #2
 8002e88:	eb02 0384 	add.w	r3, r2, r4, lsl #2
 8002e8c:	1f09      	subs	r1, r1, #4
 8002e8e:	1f1a      	subs	r2, r3, #4
 8002e90:	4281      	cmp	r1, r0
 8002e92:	d321      	bcc.n	8002ed8 <forward_hard_sigmoid+0x78>
 8002e94:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002e98:	eddf 0a12 	vldr	s1, [pc, #72]	; 8002ee4 <.text_36>
 8002e9c:	edd1 1a00 	vldr	s3, [r1]
 8002ea0:	ed9f 2a11 	vldr	s4, [pc, #68]	; 8002ee8 <.text_37>
 8002ea4:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8002ea8:	ee01 1a82 	vmla.f32	s2, s3, s4
 8002eac:	eeb4 1a60 	vcmp.f32	s2, s1
 8002eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eb4:	da08      	bge.n	8002ec8 <forward_hard_sigmoid+0x68>
 8002eb6:	eeb5 1a40 	vcmp.f32	s2, #0.0
 8002eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ebe:	d505      	bpl.n	8002ecc <forward_hard_sigmoid+0x6c>
 8002ec0:	ed9f 1a06 	vldr	s2, [pc, #24]	; 8002edc <.text_34>
 8002ec4:	e002      	b.n	8002ecc <forward_hard_sigmoid+0x6c>
 8002ec6:	bf00      	nop
 8002ec8:	eeb0 1a40 	vmov.f32	s2, s0
 8002ecc:	ed82 1a00 	vstr	s2, [r2]
 8002ed0:	1f09      	subs	r1, r1, #4
 8002ed2:	1f12      	subs	r2, r2, #4
 8002ed4:	4281      	cmp	r1, r0
 8002ed6:	d2e1      	bcs.n	8002e9c <forward_hard_sigmoid+0x3c>
 8002ed8:	bc30      	pop	{r4, r5}
 8002eda:	4770      	bx	lr

08002edc <.text_34>:
 8002edc:	00000000 	.word	0x00000000

08002ee0 <.text_35>:
 8002ee0:	00000001 	.word	0x00000001

08002ee4 <.text_36>:
 8002ee4:	3f800001 	.word	0x3f800001

08002ee8 <.text_37>:
 8002ee8:	3e4ccccd 	.word	0x3e4ccccd

08002eec <forward_exp>:
 8002eec:	b570      	push	{r4, r5, r6, lr}
 8002eee:	6940      	ldr	r0, [r0, #20]
 8002ef0:	6802      	ldr	r2, [r0, #0]
 8002ef2:	6811      	ldr	r1, [r2, #0]
 8002ef4:	680b      	ldr	r3, [r1, #0]
 8002ef6:	685e      	ldr	r6, [r3, #4]
 8002ef8:	6898      	ldr	r0, [r3, #8]
 8002efa:	68d9      	ldr	r1, [r3, #12]
 8002efc:	4346      	muls	r6, r0
 8002efe:	6918      	ldr	r0, [r3, #16]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	689c      	ldr	r4, [r3, #8]
 8002f04:	434e      	muls	r6, r1
 8002f06:	4346      	muls	r6, r0
 8002f08:	68d1      	ldr	r1, [r2, #12]
 8002f0a:	eb04 0086 	add.w	r0, r4, r6, lsl #2
 8002f0e:	1f05      	subs	r5, r0, #4
 8002f10:	6808      	ldr	r0, [r1, #0]
 8002f12:	6802      	ldr	r2, [r0, #0]
 8002f14:	6891      	ldr	r1, [r2, #8]
 8002f16:	eb01 0086 	add.w	r0, r1, r6, lsl #2
 8002f1a:	1f06      	subs	r6, r0, #4
 8002f1c:	42a5      	cmp	r5, r4
 8002f1e:	d309      	bcc.n	8002f34 <forward_exp+0x48>
 8002f20:	ed95 0a00 	vldr	s0, [r5]
 8002f24:	f006 f8d6 	bl	80090d4 <expf>
 8002f28:	ed86 0a00 	vstr	s0, [r6]
 8002f2c:	1f2d      	subs	r5, r5, #4
 8002f2e:	1f36      	subs	r6, r6, #4
 8002f30:	42a5      	cmp	r5, r4
 8002f32:	d2f5      	bcs.n	8002f20 <forward_exp+0x34>
 8002f34:	bd70      	pop	{r4, r5, r6, pc}
	...

08002f38 <forward_sqrt>:
 8002f38:	b570      	push	{r4, r5, r6, lr}
 8002f3a:	6940      	ldr	r0, [r0, #20]
 8002f3c:	6802      	ldr	r2, [r0, #0]
 8002f3e:	6811      	ldr	r1, [r2, #0]
 8002f40:	680b      	ldr	r3, [r1, #0]
 8002f42:	685e      	ldr	r6, [r3, #4]
 8002f44:	6898      	ldr	r0, [r3, #8]
 8002f46:	68d9      	ldr	r1, [r3, #12]
 8002f48:	4346      	muls	r6, r0
 8002f4a:	6918      	ldr	r0, [r3, #16]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	689c      	ldr	r4, [r3, #8]
 8002f50:	434e      	muls	r6, r1
 8002f52:	4346      	muls	r6, r0
 8002f54:	68d1      	ldr	r1, [r2, #12]
 8002f56:	eb04 0086 	add.w	r0, r4, r6, lsl #2
 8002f5a:	1f05      	subs	r5, r0, #4
 8002f5c:	6808      	ldr	r0, [r1, #0]
 8002f5e:	6802      	ldr	r2, [r0, #0]
 8002f60:	6891      	ldr	r1, [r2, #8]
 8002f62:	eb01 0086 	add.w	r0, r1, r6, lsl #2
 8002f66:	1f06      	subs	r6, r0, #4
 8002f68:	42a5      	cmp	r5, r4
 8002f6a:	d309      	bcc.n	8002f80 <forward_sqrt+0x48>
 8002f6c:	ed95 0a00 	vldr	s0, [r5]
 8002f70:	f000 fd40 	bl	80039f4 <ai_math_sqrt>
 8002f74:	ed86 0a00 	vstr	s0, [r6]
 8002f78:	1f2d      	subs	r5, r5, #4
 8002f7a:	1f36      	subs	r6, r6, #4
 8002f7c:	42a5      	cmp	r5, r4
 8002f7e:	d2f5      	bcs.n	8002f6c <forward_sqrt+0x34>
 8002f80:	bd70      	pop	{r4, r5, r6, pc}
	...

08002f84 <forward_soft_plus>:
 8002f84:	b570      	push	{r4, r5, r6, lr}
 8002f86:	6940      	ldr	r0, [r0, #20]
 8002f88:	6802      	ldr	r2, [r0, #0]
 8002f8a:	6811      	ldr	r1, [r2, #0]
 8002f8c:	680b      	ldr	r3, [r1, #0]
 8002f8e:	685e      	ldr	r6, [r3, #4]
 8002f90:	6898      	ldr	r0, [r3, #8]
 8002f92:	68d9      	ldr	r1, [r3, #12]
 8002f94:	4346      	muls	r6, r0
 8002f96:	6918      	ldr	r0, [r3, #16]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	689c      	ldr	r4, [r3, #8]
 8002f9c:	434e      	muls	r6, r1
 8002f9e:	4346      	muls	r6, r0
 8002fa0:	68d1      	ldr	r1, [r2, #12]
 8002fa2:	eb04 0086 	add.w	r0, r4, r6, lsl #2
 8002fa6:	1f05      	subs	r5, r0, #4
 8002fa8:	6808      	ldr	r0, [r1, #0]
 8002faa:	6802      	ldr	r2, [r0, #0]
 8002fac:	6891      	ldr	r1, [r2, #8]
 8002fae:	eb01 0086 	add.w	r0, r1, r6, lsl #2
 8002fb2:	1f06      	subs	r6, r0, #4
 8002fb4:	42a5      	cmp	r5, r4
 8002fb6:	d30f      	bcc.n	8002fd8 <forward_soft_plus+0x54>
 8002fb8:	ed95 0a00 	vldr	s0, [r5]
 8002fbc:	f006 f88a 	bl	80090d4 <expf>
 8002fc0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002fc4:	ee30 0a20 	vadd.f32	s0, s0, s1
 8002fc8:	f006 f8fe 	bl	80091c8 <logf>
 8002fcc:	ed86 0a00 	vstr	s0, [r6]
 8002fd0:	1f2d      	subs	r5, r5, #4
 8002fd2:	1f36      	subs	r6, r6, #4
 8002fd4:	42a5      	cmp	r5, r4
 8002fd6:	d2ef      	bcs.n	8002fb8 <forward_soft_plus+0x34>
 8002fd8:	bd70      	pop	{r4, r5, r6, pc}
	...

08002fdc <forward_soft_sign>:
 8002fdc:	b430      	push	{r4, r5}
 8002fde:	6940      	ldr	r0, [r0, #20]
 8002fe0:	6802      	ldr	r2, [r0, #0]
 8002fe2:	6811      	ldr	r1, [r2, #0]
 8002fe4:	68d2      	ldr	r2, [r2, #12]
 8002fe6:	680b      	ldr	r3, [r1, #0]
 8002fe8:	685c      	ldr	r4, [r3, #4]
 8002fea:	6898      	ldr	r0, [r3, #8]
 8002fec:	68d9      	ldr	r1, [r3, #12]
 8002fee:	4344      	muls	r4, r0
 8002ff0:	6918      	ldr	r0, [r3, #16]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	434c      	muls	r4, r1
 8002ff6:	4344      	muls	r4, r0
 8002ff8:	6898      	ldr	r0, [r3, #8]
 8002ffa:	6813      	ldr	r3, [r2, #0]
 8002ffc:	681d      	ldr	r5, [r3, #0]
 8002ffe:	68aa      	ldr	r2, [r5, #8]
 8003000:	eb00 0184 	add.w	r1, r0, r4, lsl #2
 8003004:	eb02 0384 	add.w	r3, r2, r4, lsl #2
 8003008:	1f09      	subs	r1, r1, #4
 800300a:	1f1a      	subs	r2, r3, #4
 800300c:	4281      	cmp	r1, r0
 800300e:	d30f      	bcc.n	8003030 <forward_soft_sign+0x54>
 8003010:	ed91 0a00 	vldr	s0, [r1]
 8003014:	eef0 0ac0 	vabs.f32	s1, s0
 8003018:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800301c:	ee70 0a81 	vadd.f32	s1, s1, s2
 8003020:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8003024:	ed82 0a00 	vstr	s0, [r2]
 8003028:	1f09      	subs	r1, r1, #4
 800302a:	1f12      	subs	r2, r2, #4
 800302c:	4281      	cmp	r1, r0
 800302e:	d2ef      	bcs.n	8003010 <forward_soft_sign+0x34>
 8003030:	bc30      	pop	{r4, r5}
 8003032:	4770      	bx	lr

08003034 <forward_tanh>:
 8003034:	b570      	push	{r4, r5, r6, lr}
 8003036:	6940      	ldr	r0, [r0, #20]
 8003038:	6802      	ldr	r2, [r0, #0]
 800303a:	6811      	ldr	r1, [r2, #0]
 800303c:	680b      	ldr	r3, [r1, #0]
 800303e:	685e      	ldr	r6, [r3, #4]
 8003040:	6898      	ldr	r0, [r3, #8]
 8003042:	68d9      	ldr	r1, [r3, #12]
 8003044:	4346      	muls	r6, r0
 8003046:	6918      	ldr	r0, [r3, #16]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	689c      	ldr	r4, [r3, #8]
 800304c:	434e      	muls	r6, r1
 800304e:	4346      	muls	r6, r0
 8003050:	68d1      	ldr	r1, [r2, #12]
 8003052:	eb04 0086 	add.w	r0, r4, r6, lsl #2
 8003056:	1f05      	subs	r5, r0, #4
 8003058:	6808      	ldr	r0, [r1, #0]
 800305a:	6802      	ldr	r2, [r0, #0]
 800305c:	6891      	ldr	r1, [r2, #8]
 800305e:	eb01 0086 	add.w	r0, r1, r6, lsl #2
 8003062:	1f06      	subs	r6, r0, #4
 8003064:	42a5      	cmp	r5, r4
 8003066:	d309      	bcc.n	800307c <forward_tanh+0x48>
 8003068:	ed95 0a00 	vldr	s0, [r5]
 800306c:	f005 ffe0 	bl	8009030 <tanhf>
 8003070:	ed86 0a00 	vstr	s0, [r6]
 8003074:	1f2d      	subs	r5, r5, #4
 8003076:	1f36      	subs	r6, r6, #4
 8003078:	42a5      	cmp	r5, r4
 800307a:	d2f5      	bcs.n	8003068 <forward_tanh+0x34>
 800307c:	bd70      	pop	{r4, r5, r6, pc}

0800307e <forward_sm>:
 800307e:	b570      	push	{r4, r5, r6, lr}
 8003080:	b082      	sub	sp, #8
 8003082:	6940      	ldr	r0, [r0, #20]
 8003084:	6800      	ldr	r0, [r0, #0]
 8003086:	6801      	ldr	r1, [r0, #0]
 8003088:	68c0      	ldr	r0, [r0, #12]
 800308a:	680c      	ldr	r4, [r1, #0]
 800308c:	6805      	ldr	r5, [r0, #0]
 800308e:	68a2      	ldr	r2, [r4, #8]
 8003090:	68a8      	ldr	r0, [r5, #8]
 8003092:	9001      	str	r0, [sp, #4]
 8003094:	9200      	str	r2, [sp, #0]
 8003096:	4613      	mov	r3, r2
 8003098:	6866      	ldr	r6, [r4, #4]
 800309a:	68e1      	ldr	r1, [r4, #12]
 800309c:	6920      	ldr	r0, [r4, #16]
 800309e:	6824      	ldr	r4, [r4, #0]
 80030a0:	4372      	muls	r2, r6
 80030a2:	434a      	muls	r2, r1
 80030a4:	4342      	muls	r2, r0
 80030a6:	6828      	ldr	r0, [r5, #0]
 80030a8:	68a1      	ldr	r1, [r4, #8]
 80030aa:	6880      	ldr	r0, [r0, #8]
 80030ac:	f7ff fa52 	bl	8002554 <nl_func_sm_array_f32>
 80030b0:	b002      	add	sp, #8
 80030b2:	bd70      	pop	{r4, r5, r6, pc}

080030b4 <forward_hardmax>:
 80030b4:	b430      	push	{r4, r5}
 80030b6:	6941      	ldr	r1, [r0, #20]
 80030b8:	680c      	ldr	r4, [r1, #0]
 80030ba:	6980      	ldr	r0, [r0, #24]
 80030bc:	6822      	ldr	r2, [r4, #0]
 80030be:	6883      	ldr	r3, [r0, #8]
 80030c0:	6811      	ldr	r1, [r2, #0]
 80030c2:	6808      	ldr	r0, [r1, #0]
 80030c4:	1d0a      	adds	r2, r1, #4
 80030c6:	6881      	ldr	r1, [r0, #8]
 80030c8:	68e0      	ldr	r0, [r4, #12]
 80030ca:	6804      	ldr	r4, [r0, #0]
 80030cc:	6825      	ldr	r5, [r4, #0]
 80030ce:	68a8      	ldr	r0, [r5, #8]
 80030d0:	bc30      	pop	{r4, r5}
 80030d2:	f7ff bb69 	b.w	80027a8 <nl_func_hardmax_array_f32>
	...

080030d8 <ai_array_fmt_name>:
 80030d8:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 80030dc:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 80030e0:	d062      	beq.n	80031a8 <ai_array_fmt_name+0xd0>
 80030e2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80030e6:	1a89      	subs	r1, r1, r2
 80030e8:	f000 8094 	beq.w	8003214 <ai_array_fmt_name+0x13c>
 80030ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030f0:	1a89      	subs	r1, r1, r2
 80030f2:	d071      	beq.n	80031d8 <ai_array_fmt_name+0x100>
 80030f4:	1a89      	subs	r1, r1, r2
 80030f6:	d063      	beq.n	80031c0 <ai_array_fmt_name+0xe8>
 80030f8:	1fc9      	subs	r1, r1, #7
 80030fa:	f000 808e 	beq.w	800321a <ai_array_fmt_name+0x142>
 80030fe:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8003102:	1a89      	subs	r1, r1, r2
 8003104:	d05f      	beq.n	80031c6 <ai_array_fmt_name+0xee>
 8003106:	390f      	subs	r1, #15
 8003108:	f000 808a 	beq.w	8003220 <ai_array_fmt_name+0x148>
 800310c:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8003110:	1a89      	subs	r1, r1, r2
 8003112:	d05b      	beq.n	80031cc <ai_array_fmt_name+0xf4>
 8003114:	391f      	subs	r1, #31
 8003116:	f000 8086 	beq.w	8003226 <ai_array_fmt_name+0x14e>
 800311a:	f640 72e1 	movw	r2, #4065	; 0xfe1
 800311e:	1a89      	subs	r1, r1, r2
 8003120:	d057      	beq.n	80031d2 <ai_array_fmt_name+0xfa>
 8003122:	f8df 25d4 	ldr.w	r2, [pc, #1492]	; 80036f8 <.text_15>
 8003126:	1a89      	subs	r1, r1, r2
 8003128:	f000 808f 	beq.w	800324a <ai_array_fmt_name+0x172>
 800312c:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8003130:	1a89      	subs	r1, r1, r2
 8003132:	f000 8087 	beq.w	8003244 <ai_array_fmt_name+0x16c>
 8003136:	f8df 25c4 	ldr.w	r2, [pc, #1476]	; 80036fc <.text_16>
 800313a:	1a89      	subs	r1, r1, r2
 800313c:	d05e      	beq.n	80031fc <ai_array_fmt_name+0x124>
 800313e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003142:	1a89      	subs	r1, r1, r2
 8003144:	d057      	beq.n	80031f6 <ai_array_fmt_name+0x11e>
 8003146:	1a89      	subs	r1, r1, r2
 8003148:	d049      	beq.n	80031de <ai_array_fmt_name+0x106>
 800314a:	1fc9      	subs	r1, r1, #7
 800314c:	d059      	beq.n	8003202 <ai_array_fmt_name+0x12a>
 800314e:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8003152:	1a89      	subs	r1, r1, r2
 8003154:	d046      	beq.n	80031e4 <ai_array_fmt_name+0x10c>
 8003156:	390f      	subs	r1, #15
 8003158:	d056      	beq.n	8003208 <ai_array_fmt_name+0x130>
 800315a:	f240 72f1 	movw	r2, #2033	; 0x7f1
 800315e:	1a89      	subs	r1, r1, r2
 8003160:	d043      	beq.n	80031ea <ai_array_fmt_name+0x112>
 8003162:	391f      	subs	r1, #31
 8003164:	d053      	beq.n	800320e <ai_array_fmt_name+0x136>
 8003166:	f640 72e1 	movw	r2, #4065	; 0xfe1
 800316a:	1a89      	subs	r1, r1, r2
 800316c:	d040      	beq.n	80031f0 <ai_array_fmt_name+0x118>
 800316e:	f8df 2588 	ldr.w	r2, [pc, #1416]	; 80036f8 <.text_15>
 8003172:	1a89      	subs	r1, r1, r2
 8003174:	d063      	beq.n	800323e <ai_array_fmt_name+0x166>
 8003176:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 800317a:	1a89      	subs	r1, r1, r2
 800317c:	d05c      	beq.n	8003238 <ai_array_fmt_name+0x160>
 800317e:	f8df 2580 	ldr.w	r2, [pc, #1408]	; 8003700 <.text_17>
 8003182:	1a89      	subs	r1, r1, r2
 8003184:	d019      	beq.n	80031ba <ai_array_fmt_name+0xe2>
 8003186:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800318a:	1a89      	subs	r1, r1, r2
 800318c:	d00f      	beq.n	80031ae <ai_array_fmt_name+0xd6>
 800318e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003192:	1a89      	subs	r1, r1, r2
 8003194:	d00e      	beq.n	80031b4 <ai_array_fmt_name+0xdc>
 8003196:	f8df 256c 	ldr.w	r2, [pc, #1388]	; 8003704 <.text_18>
 800319a:	1a89      	subs	r1, r1, r2
 800319c:	d049      	beq.n	8003232 <ai_array_fmt_name+0x15a>
 800319e:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 80031a2:	1a89      	subs	r1, r1, r2
 80031a4:	d042      	beq.n	800322c <ai_array_fmt_name+0x154>
 80031a6:	e053      	b.n	8003250 <ai_array_fmt_name+0x178>
 80031a8:	f20f 6074 	addw	r0, pc, #1652	; 0x674
 80031ac:	4770      	bx	lr
 80031ae:	f20f 607c 	addw	r0, pc, #1660	; 0x67c
 80031b2:	4770      	bx	lr
 80031b4:	f20f 6080 	addw	r0, pc, #1664	; 0x680
 80031b8:	4770      	bx	lr
 80031ba:	f20f 6088 	addw	r0, pc, #1672	; 0x688
 80031be:	4770      	bx	lr
 80031c0:	f20f 608c 	addw	r0, pc, #1676	; 0x68c
 80031c4:	4770      	bx	lr
 80031c6:	f20f 6090 	addw	r0, pc, #1680	; 0x690
 80031ca:	4770      	bx	lr
 80031cc:	f20f 6090 	addw	r0, pc, #1680	; 0x690
 80031d0:	4770      	bx	lr
 80031d2:	f20f 6094 	addw	r0, pc, #1684	; 0x694
 80031d6:	4770      	bx	lr
 80031d8:	f20f 6094 	addw	r0, pc, #1684	; 0x694
 80031dc:	4770      	bx	lr
 80031de:	f20f 6098 	addw	r0, pc, #1688	; 0x698
 80031e2:	4770      	bx	lr
 80031e4:	f20f 6098 	addw	r0, pc, #1688	; 0x698
 80031e8:	4770      	bx	lr
 80031ea:	f20f 609c 	addw	r0, pc, #1692	; 0x69c
 80031ee:	4770      	bx	lr
 80031f0:	f20f 609c 	addw	r0, pc, #1692	; 0x69c
 80031f4:	4770      	bx	lr
 80031f6:	f20f 60a0 	addw	r0, pc, #1696	; 0x6a0
 80031fa:	4770      	bx	lr
 80031fc:	f20f 60a0 	addw	r0, pc, #1696	; 0x6a0
 8003200:	4770      	bx	lr
 8003202:	f20f 60a4 	addw	r0, pc, #1700	; 0x6a4
 8003206:	4770      	bx	lr
 8003208:	f20f 60a4 	addw	r0, pc, #1700	; 0x6a4
 800320c:	4770      	bx	lr
 800320e:	f20f 60a8 	addw	r0, pc, #1704	; 0x6a8
 8003212:	4770      	bx	lr
 8003214:	f20f 60a8 	addw	r0, pc, #1704	; 0x6a8
 8003218:	4770      	bx	lr
 800321a:	f20f 60ac 	addw	r0, pc, #1708	; 0x6ac
 800321e:	4770      	bx	lr
 8003220:	f20f 60ac 	addw	r0, pc, #1708	; 0x6ac
 8003224:	4770      	bx	lr
 8003226:	f20f 60b4 	addw	r0, pc, #1716	; 0x6b4
 800322a:	4770      	bx	lr
 800322c:	f20f 60b8 	addw	r0, pc, #1720	; 0x6b8
 8003230:	4770      	bx	lr
 8003232:	f20f 60c4 	addw	r0, pc, #1732	; 0x6c4
 8003236:	4770      	bx	lr
 8003238:	f20f 60cc 	addw	r0, pc, #1740	; 0x6cc
 800323c:	4770      	bx	lr
 800323e:	f20f 60d8 	addw	r0, pc, #1752	; 0x6d8
 8003242:	4770      	bx	lr
 8003244:	f20f 60e0 	addw	r0, pc, #1760	; 0x6e0
 8003248:	4770      	bx	lr
 800324a:	f20f 60ec 	addw	r0, pc, #1772	; 0x6ec
 800324e:	4770      	bx	lr
 8003250:	f36f 000d 	bfc	r0, #0, #14
 8003254:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8003258:	2840      	cmp	r0, #64	; 0x40
 800325a:	d009      	beq.n	8003270 <ai_array_fmt_name+0x198>
 800325c:	f8df 14a8 	ldr.w	r1, [pc, #1192]	; 8003708 <.text_19>
 8003260:	4288      	cmp	r0, r1
 8003262:	d00b      	beq.n	800327c <ai_array_fmt_name+0x1a4>
 8003264:	f8df 14a4 	ldr.w	r1, [pc, #1188]	; 800370c <.text_20>
 8003268:	4288      	cmp	r0, r1
 800326a:	d004      	beq.n	8003276 <ai_array_fmt_name+0x19e>
 800326c:	a07a      	add	r0, pc, #488	; (adr r0, 8003458 <.text_8>)
 800326e:	4770      	bx	lr
 8003270:	f20f 60d4 	addw	r0, pc, #1748	; 0x6d4
 8003274:	4770      	bx	lr
 8003276:	f20f 60e8 	addw	r0, pc, #1768	; 0x6e8
 800327a:	4770      	bx	lr
 800327c:	f20f 60f4 	addw	r0, pc, #1780	; 0x6f4
 8003280:	4770      	bx	lr

08003282 <ai_array_fmt_exported>:
 8003282:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8003286:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 800328a:	d068      	beq.n	800335e <ai_array_fmt_exported+0xdc>
 800328c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003290:	1a89      	subs	r1, r1, r2
 8003292:	d064      	beq.n	800335e <ai_array_fmt_exported+0xdc>
 8003294:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003298:	1a89      	subs	r1, r1, r2
 800329a:	d062      	beq.n	8003362 <ai_array_fmt_exported+0xe0>
 800329c:	1a89      	subs	r1, r1, r2
 800329e:	d05e      	beq.n	800335e <ai_array_fmt_exported+0xdc>
 80032a0:	1fc9      	subs	r1, r1, #7
 80032a2:	d05c      	beq.n	800335e <ai_array_fmt_exported+0xdc>
 80032a4:	f240 32f9 	movw	r2, #1017	; 0x3f9
 80032a8:	1a89      	subs	r1, r1, r2
 80032aa:	d058      	beq.n	800335e <ai_array_fmt_exported+0xdc>
 80032ac:	390f      	subs	r1, #15
 80032ae:	d056      	beq.n	800335e <ai_array_fmt_exported+0xdc>
 80032b0:	f240 72f1 	movw	r2, #2033	; 0x7f1
 80032b4:	1a89      	subs	r1, r1, r2
 80032b6:	d054      	beq.n	8003362 <ai_array_fmt_exported+0xe0>
 80032b8:	391f      	subs	r1, #31
 80032ba:	d052      	beq.n	8003362 <ai_array_fmt_exported+0xe0>
 80032bc:	f640 72e1 	movw	r2, #4065	; 0xfe1
 80032c0:	1a89      	subs	r1, r1, r2
 80032c2:	d04e      	beq.n	8003362 <ai_array_fmt_exported+0xe0>
 80032c4:	f8df 2430 	ldr.w	r2, [pc, #1072]	; 80036f8 <.text_15>
 80032c8:	1a89      	subs	r1, r1, r2
 80032ca:	d04a      	beq.n	8003362 <ai_array_fmt_exported+0xe0>
 80032cc:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 80032d0:	1a89      	subs	r1, r1, r2
 80032d2:	d046      	beq.n	8003362 <ai_array_fmt_exported+0xe0>
 80032d4:	f8df 2424 	ldr.w	r2, [pc, #1060]	; 80036fc <.text_16>
 80032d8:	1a89      	subs	r1, r1, r2
 80032da:	d040      	beq.n	800335e <ai_array_fmt_exported+0xdc>
 80032dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032e0:	1a89      	subs	r1, r1, r2
 80032e2:	d03e      	beq.n	8003362 <ai_array_fmt_exported+0xe0>
 80032e4:	1a89      	subs	r1, r1, r2
 80032e6:	d03a      	beq.n	800335e <ai_array_fmt_exported+0xdc>
 80032e8:	1fc9      	subs	r1, r1, #7
 80032ea:	d038      	beq.n	800335e <ai_array_fmt_exported+0xdc>
 80032ec:	f240 32f9 	movw	r2, #1017	; 0x3f9
 80032f0:	1a89      	subs	r1, r1, r2
 80032f2:	d034      	beq.n	800335e <ai_array_fmt_exported+0xdc>
 80032f4:	390f      	subs	r1, #15
 80032f6:	d032      	beq.n	800335e <ai_array_fmt_exported+0xdc>
 80032f8:	f240 72f1 	movw	r2, #2033	; 0x7f1
 80032fc:	1a89      	subs	r1, r1, r2
 80032fe:	d030      	beq.n	8003362 <ai_array_fmt_exported+0xe0>
 8003300:	391f      	subs	r1, #31
 8003302:	d02e      	beq.n	8003362 <ai_array_fmt_exported+0xe0>
 8003304:	f640 72e1 	movw	r2, #4065	; 0xfe1
 8003308:	1a89      	subs	r1, r1, r2
 800330a:	d02a      	beq.n	8003362 <ai_array_fmt_exported+0xe0>
 800330c:	f8df 23e8 	ldr.w	r2, [pc, #1000]	; 80036f8 <.text_15>
 8003310:	1a89      	subs	r1, r1, r2
 8003312:	d026      	beq.n	8003362 <ai_array_fmt_exported+0xe0>
 8003314:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8003318:	1a89      	subs	r1, r1, r2
 800331a:	d022      	beq.n	8003362 <ai_array_fmt_exported+0xe0>
 800331c:	f8df 23e0 	ldr.w	r2, [pc, #992]	; 8003700 <.text_17>
 8003320:	1a89      	subs	r1, r1, r2
 8003322:	d01e      	beq.n	8003362 <ai_array_fmt_exported+0xe0>
 8003324:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003328:	1a89      	subs	r1, r1, r2
 800332a:	d018      	beq.n	800335e <ai_array_fmt_exported+0xdc>
 800332c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003330:	1a89      	subs	r1, r1, r2
 8003332:	d016      	beq.n	8003362 <ai_array_fmt_exported+0xe0>
 8003334:	f8df 23cc 	ldr.w	r2, [pc, #972]	; 8003704 <.text_18>
 8003338:	1a89      	subs	r1, r1, r2
 800333a:	d012      	beq.n	8003362 <ai_array_fmt_exported+0xe0>
 800333c:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8003340:	1a89      	subs	r1, r1, r2
 8003342:	d00e      	beq.n	8003362 <ai_array_fmt_exported+0xe0>
 8003344:	f36f 000d 	bfc	r0, #0, #14
 8003348:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 800334c:	2840      	cmp	r0, #64	; 0x40
 800334e:	bf1f      	itttt	ne
 8003350:	f8df 33b4 	ldrne.w	r3, [pc, #948]	; 8003708 <.text_19>
 8003354:	4298      	cmpne	r0, r3
 8003356:	f8df 33b4 	ldrne.w	r3, [pc, #948]	; 800370c <.text_20>
 800335a:	4298      	cmpne	r0, r3
 800335c:	d101      	bne.n	8003362 <ai_array_fmt_exported+0xe0>
 800335e:	2001      	movs	r0, #1
 8003360:	4770      	bx	lr
 8003362:	2000      	movs	r0, #0
 8003364:	4770      	bx	lr

08003366 <ai_array_fmt_valid>:
 8003366:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 800336a:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 800336e:	d069      	beq.n	8003444 <ai_array_fmt_valid+0xde>
 8003370:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003374:	1a89      	subs	r1, r1, r2
 8003376:	d065      	beq.n	8003444 <ai_array_fmt_valid+0xde>
 8003378:	f44f 7200 	mov.w	r2, #512	; 0x200
 800337c:	1a89      	subs	r1, r1, r2
 800337e:	d061      	beq.n	8003444 <ai_array_fmt_valid+0xde>
 8003380:	1a89      	subs	r1, r1, r2
 8003382:	d05f      	beq.n	8003444 <ai_array_fmt_valid+0xde>
 8003384:	1fc9      	subs	r1, r1, #7
 8003386:	d05d      	beq.n	8003444 <ai_array_fmt_valid+0xde>
 8003388:	f240 32f9 	movw	r2, #1017	; 0x3f9
 800338c:	1a89      	subs	r1, r1, r2
 800338e:	d059      	beq.n	8003444 <ai_array_fmt_valid+0xde>
 8003390:	390f      	subs	r1, #15
 8003392:	d057      	beq.n	8003444 <ai_array_fmt_valid+0xde>
 8003394:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8003398:	1a89      	subs	r1, r1, r2
 800339a:	d053      	beq.n	8003444 <ai_array_fmt_valid+0xde>
 800339c:	391f      	subs	r1, #31
 800339e:	d051      	beq.n	8003444 <ai_array_fmt_valid+0xde>
 80033a0:	f640 72e1 	movw	r2, #4065	; 0xfe1
 80033a4:	1a89      	subs	r1, r1, r2
 80033a6:	d04d      	beq.n	8003444 <ai_array_fmt_valid+0xde>
 80033a8:	f8df 234c 	ldr.w	r2, [pc, #844]	; 80036f8 <.text_15>
 80033ac:	1a89      	subs	r1, r1, r2
 80033ae:	d049      	beq.n	8003444 <ai_array_fmt_valid+0xde>
 80033b0:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 80033b4:	1a89      	subs	r1, r1, r2
 80033b6:	d045      	beq.n	8003444 <ai_array_fmt_valid+0xde>
 80033b8:	f8df 2340 	ldr.w	r2, [pc, #832]	; 80036fc <.text_16>
 80033bc:	1a89      	subs	r1, r1, r2
 80033be:	d041      	beq.n	8003444 <ai_array_fmt_valid+0xde>
 80033c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033c4:	1a89      	subs	r1, r1, r2
 80033c6:	d03d      	beq.n	8003444 <ai_array_fmt_valid+0xde>
 80033c8:	1a89      	subs	r1, r1, r2
 80033ca:	d03b      	beq.n	8003444 <ai_array_fmt_valid+0xde>
 80033cc:	1fc9      	subs	r1, r1, #7
 80033ce:	d039      	beq.n	8003444 <ai_array_fmt_valid+0xde>
 80033d0:	f240 32f9 	movw	r2, #1017	; 0x3f9
 80033d4:	1a89      	subs	r1, r1, r2
 80033d6:	d035      	beq.n	8003444 <ai_array_fmt_valid+0xde>
 80033d8:	390f      	subs	r1, #15
 80033da:	d033      	beq.n	8003444 <ai_array_fmt_valid+0xde>
 80033dc:	f240 72f1 	movw	r2, #2033	; 0x7f1
 80033e0:	1a89      	subs	r1, r1, r2
 80033e2:	d02f      	beq.n	8003444 <ai_array_fmt_valid+0xde>
 80033e4:	391f      	subs	r1, #31
 80033e6:	d02d      	beq.n	8003444 <ai_array_fmt_valid+0xde>
 80033e8:	f640 72e1 	movw	r2, #4065	; 0xfe1
 80033ec:	1a89      	subs	r1, r1, r2
 80033ee:	d029      	beq.n	8003444 <ai_array_fmt_valid+0xde>
 80033f0:	f8df 2304 	ldr.w	r2, [pc, #772]	; 80036f8 <.text_15>
 80033f4:	1a89      	subs	r1, r1, r2
 80033f6:	d025      	beq.n	8003444 <ai_array_fmt_valid+0xde>
 80033f8:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 80033fc:	1a89      	subs	r1, r1, r2
 80033fe:	d021      	beq.n	8003444 <ai_array_fmt_valid+0xde>
 8003400:	f8df 22fc 	ldr.w	r2, [pc, #764]	; 8003700 <.text_17>
 8003404:	1a89      	subs	r1, r1, r2
 8003406:	d01d      	beq.n	8003444 <ai_array_fmt_valid+0xde>
 8003408:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800340c:	1a89      	subs	r1, r1, r2
 800340e:	d019      	beq.n	8003444 <ai_array_fmt_valid+0xde>
 8003410:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003414:	1a89      	subs	r1, r1, r2
 8003416:	d015      	beq.n	8003444 <ai_array_fmt_valid+0xde>
 8003418:	f8df 22e8 	ldr.w	r2, [pc, #744]	; 8003704 <.text_18>
 800341c:	1a89      	subs	r1, r1, r2
 800341e:	d011      	beq.n	8003444 <ai_array_fmt_valid+0xde>
 8003420:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8003424:	1a89      	subs	r1, r1, r2
 8003426:	bf1e      	ittt	ne
 8003428:	f36f 000d 	bfcne	r0, #0, #14
 800342c:	f040 0040 	orrne.w	r0, r0, #64	; 0x40
 8003430:	2840      	cmpne	r0, #64	; 0x40
 8003432:	d007      	beq.n	8003444 <ai_array_fmt_valid+0xde>
 8003434:	f8df 32d0 	ldr.w	r3, [pc, #720]	; 8003708 <.text_19>
 8003438:	4298      	cmp	r0, r3
 800343a:	bf1c      	itt	ne
 800343c:	f8df 32cc 	ldrne.w	r3, [pc, #716]	; 800370c <.text_20>
 8003440:	4298      	cmpne	r0, r3
 8003442:	d101      	bne.n	8003448 <ai_array_fmt_valid+0xe2>
 8003444:	2001      	movs	r0, #1
 8003446:	4770      	bx	lr
 8003448:	2000      	movs	r0, #0
 800344a:	4770      	bx	lr

0800344c <ai_array_fmt_get_formats>:
 800344c:	f8df 12c0 	ldr.w	r1, [pc, #704]	; 8003710 <.text_21>
 8003450:	6001      	str	r1, [r0, #0]
 8003452:	201c      	movs	r0, #28
 8003454:	4770      	bx	lr
	...

08003458 <.text_8>:
 8003458:	00000000 	.word	0x00000000

0800345c <ai_buffer_fmt_name>:
 800345c:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8003460:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 8003464:	d022      	beq.n	80034ac <ai_buffer_fmt_name+0x50>
 8003466:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800346a:	1a89      	subs	r1, r1, r2
 800346c:	d039      	beq.n	80034e2 <ai_buffer_fmt_name+0x86>
 800346e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003472:	1a89      	subs	r1, r1, r2
 8003474:	d020      	beq.n	80034b8 <ai_buffer_fmt_name+0x5c>
 8003476:	1fc9      	subs	r1, r1, #7
 8003478:	d036      	beq.n	80034e8 <ai_buffer_fmt_name+0x8c>
 800347a:	f240 32f9 	movw	r2, #1017	; 0x3f9
 800347e:	1a89      	subs	r1, r1, r2
 8003480:	d01d      	beq.n	80034be <ai_buffer_fmt_name+0x62>
 8003482:	390f      	subs	r1, #15
 8003484:	d033      	beq.n	80034ee <ai_buffer_fmt_name+0x92>
 8003486:	4aa3      	ldr	r2, [pc, #652]	; (8003714 <.text_22>)
 8003488:	1a89      	subs	r1, r1, r2
 800348a:	d021      	beq.n	80034d0 <ai_buffer_fmt_name+0x74>
 800348c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003490:	1a89      	subs	r1, r1, r2
 8003492:	d017      	beq.n	80034c4 <ai_buffer_fmt_name+0x68>
 8003494:	1fc9      	subs	r1, r1, #7
 8003496:	d01e      	beq.n	80034d6 <ai_buffer_fmt_name+0x7a>
 8003498:	f240 32f9 	movw	r2, #1017	; 0x3f9
 800349c:	1a89      	subs	r1, r1, r2
 800349e:	d014      	beq.n	80034ca <ai_buffer_fmt_name+0x6e>
 80034a0:	390f      	subs	r1, #15
 80034a2:	d01b      	beq.n	80034dc <ai_buffer_fmt_name+0x80>
 80034a4:	4a9c      	ldr	r2, [pc, #624]	; (8003718 <.text_23>)
 80034a6:	1a89      	subs	r1, r1, r2
 80034a8:	d003      	beq.n	80034b2 <ai_buffer_fmt_name+0x56>
 80034aa:	e023      	b.n	80034f4 <ai_buffer_fmt_name+0x98>
 80034ac:	f20f 3070 	addw	r0, pc, #880	; 0x370
 80034b0:	4770      	bx	lr
 80034b2:	f20f 3078 	addw	r0, pc, #888	; 0x378
 80034b6:	4770      	bx	lr
 80034b8:	f20f 3094 	addw	r0, pc, #916	; 0x394
 80034bc:	4770      	bx	lr
 80034be:	f20f 3098 	addw	r0, pc, #920	; 0x398
 80034c2:	4770      	bx	lr
 80034c4:	f20f 30b0 	addw	r0, pc, #944	; 0x3b0
 80034c8:	4770      	bx	lr
 80034ca:	f20f 30b4 	addw	r0, pc, #948	; 0x3b4
 80034ce:	4770      	bx	lr
 80034d0:	f20f 30cc 	addw	r0, pc, #972	; 0x3cc
 80034d4:	4770      	bx	lr
 80034d6:	f20f 30d0 	addw	r0, pc, #976	; 0x3d0
 80034da:	4770      	bx	lr
 80034dc:	f20f 30d0 	addw	r0, pc, #976	; 0x3d0
 80034e0:	4770      	bx	lr
 80034e2:	f20f 30dc 	addw	r0, pc, #988	; 0x3dc
 80034e6:	4770      	bx	lr
 80034e8:	f20f 30dc 	addw	r0, pc, #988	; 0x3dc
 80034ec:	4770      	bx	lr
 80034ee:	f20f 30e0 	addw	r0, pc, #992	; 0x3e0
 80034f2:	4770      	bx	lr
 80034f4:	0b80      	lsrs	r0, r0, #14
 80034f6:	0380      	lsls	r0, r0, #14
 80034f8:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 80034fc:	2840      	cmp	r0, #64	; 0x40
 80034fe:	d007      	beq.n	8003510 <ai_buffer_fmt_name+0xb4>
 8003500:	4981      	ldr	r1, [pc, #516]	; (8003708 <.text_19>)
 8003502:	4288      	cmp	r0, r1
 8003504:	d00a      	beq.n	800351c <ai_buffer_fmt_name+0xc0>
 8003506:	4981      	ldr	r1, [pc, #516]	; (800370c <.text_20>)
 8003508:	4288      	cmp	r0, r1
 800350a:	d004      	beq.n	8003516 <ai_buffer_fmt_name+0xba>
 800350c:	a079      	add	r0, pc, #484	; (adr r0, 80036f4 <.text_14>)
 800350e:	4770      	bx	lr
 8003510:	f20f 4074 	addw	r0, pc, #1140	; 0x474
 8003514:	4770      	bx	lr
 8003516:	f20f 4088 	addw	r0, pc, #1160	; 0x488
 800351a:	4770      	bx	lr
 800351c:	f20f 4094 	addw	r0, pc, #1172	; 0x494
 8003520:	4770      	bx	lr

08003522 <ai_buffer_fmt_valid>:
 8003522:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8003526:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 800352a:	d02d      	beq.n	8003588 <ai_buffer_fmt_valid+0x66>
 800352c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003530:	1a89      	subs	r1, r1, r2
 8003532:	d029      	beq.n	8003588 <ai_buffer_fmt_valid+0x66>
 8003534:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003538:	1a89      	subs	r1, r1, r2
 800353a:	d025      	beq.n	8003588 <ai_buffer_fmt_valid+0x66>
 800353c:	1fc9      	subs	r1, r1, #7
 800353e:	d023      	beq.n	8003588 <ai_buffer_fmt_valid+0x66>
 8003540:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8003544:	1a89      	subs	r1, r1, r2
 8003546:	d01f      	beq.n	8003588 <ai_buffer_fmt_valid+0x66>
 8003548:	390f      	subs	r1, #15
 800354a:	d01d      	beq.n	8003588 <ai_buffer_fmt_valid+0x66>
 800354c:	4a71      	ldr	r2, [pc, #452]	; (8003714 <.text_22>)
 800354e:	1a89      	subs	r1, r1, r2
 8003550:	d01a      	beq.n	8003588 <ai_buffer_fmt_valid+0x66>
 8003552:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003556:	1a89      	subs	r1, r1, r2
 8003558:	d016      	beq.n	8003588 <ai_buffer_fmt_valid+0x66>
 800355a:	1fc9      	subs	r1, r1, #7
 800355c:	d014      	beq.n	8003588 <ai_buffer_fmt_valid+0x66>
 800355e:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8003562:	1a89      	subs	r1, r1, r2
 8003564:	d010      	beq.n	8003588 <ai_buffer_fmt_valid+0x66>
 8003566:	390f      	subs	r1, #15
 8003568:	d00e      	beq.n	8003588 <ai_buffer_fmt_valid+0x66>
 800356a:	4a6b      	ldr	r2, [pc, #428]	; (8003718 <.text_23>)
 800356c:	1a89      	subs	r1, r1, r2
 800356e:	bf1f      	itttt	ne
 8003570:	0b80      	lsrne	r0, r0, #14
 8003572:	0380      	lslne	r0, r0, #14
 8003574:	f040 0040 	orrne.w	r0, r0, #64	; 0x40
 8003578:	2840      	cmpne	r0, #64	; 0x40
 800357a:	d005      	beq.n	8003588 <ai_buffer_fmt_valid+0x66>
 800357c:	4b62      	ldr	r3, [pc, #392]	; (8003708 <.text_19>)
 800357e:	4298      	cmp	r0, r3
 8003580:	bf1c      	itt	ne
 8003582:	4b62      	ldrne	r3, [pc, #392]	; (800370c <.text_20>)
 8003584:	4298      	cmpne	r0, r3
 8003586:	d101      	bne.n	800358c <ai_buffer_fmt_valid+0x6a>
 8003588:	2001      	movs	r0, #1
 800358a:	4770      	bx	lr
 800358c:	2000      	movs	r0, #0
 800358e:	4770      	bx	lr

08003590 <ai_buffer_fmt_get_formats>:
 8003590:	4962      	ldr	r1, [pc, #392]	; (800371c <.text_24>)
 8003592:	6001      	str	r1, [r0, #0]
 8003594:	200c      	movs	r0, #12
 8003596:	4770      	bx	lr

08003598 <ai_array_to_buffer_fmt>:
 8003598:	4601      	mov	r1, r0
 800359a:	2040      	movs	r0, #64	; 0x40
 800359c:	f3c1 4243 	ubfx	r2, r1, #17, #4
 80035a0:	2a02      	cmp	r2, #2
 80035a2:	d104      	bne.n	80035ae <ai_array_to_buffer_fmt+0x16>
 80035a4:	485e      	ldr	r0, [pc, #376]	; (8003720 <.text_25>)
 80035a6:	4008      	ands	r0, r1
 80035a8:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
 80035ac:	e037      	b.n	800361e <ai_array_to_buffer_fmt+0x86>
 80035ae:	f021 427e 	bic.w	r2, r1, #4261412864	; 0xfe000000
 80035b2:	4b55      	ldr	r3, [pc, #340]	; (8003708 <.text_19>)
 80035b4:	1ad2      	subs	r2, r2, r3
 80035b6:	d02d      	beq.n	8003614 <ai_array_to_buffer_fmt+0x7c>
 80035b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035bc:	1ad2      	subs	r2, r2, r3
 80035be:	d01b      	beq.n	80035f8 <ai_array_to_buffer_fmt+0x60>
 80035c0:	1fd2      	subs	r2, r2, #7
 80035c2:	d029      	beq.n	8003618 <ai_array_to_buffer_fmt+0x80>
 80035c4:	f240 33f9 	movw	r3, #1017	; 0x3f9
 80035c8:	1ad2      	subs	r2, r2, r3
 80035ca:	d017      	beq.n	80035fc <ai_array_to_buffer_fmt+0x64>
 80035cc:	3a0f      	subs	r2, #15
 80035ce:	d025      	beq.n	800361c <ai_array_to_buffer_fmt+0x84>
 80035d0:	4b50      	ldr	r3, [pc, #320]	; (8003714 <.text_22>)
 80035d2:	1ad2      	subs	r2, r2, r3
 80035d4:	d018      	beq.n	8003608 <ai_array_to_buffer_fmt+0x70>
 80035d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035da:	1ad2      	subs	r2, r2, r3
 80035dc:	d010      	beq.n	8003600 <ai_array_to_buffer_fmt+0x68>
 80035de:	1fd2      	subs	r2, r2, #7
 80035e0:	d014      	beq.n	800360c <ai_array_to_buffer_fmt+0x74>
 80035e2:	f240 33f9 	movw	r3, #1017	; 0x3f9
 80035e6:	1ad2      	subs	r2, r2, r3
 80035e8:	d00c      	beq.n	8003604 <ai_array_to_buffer_fmt+0x6c>
 80035ea:	3a0f      	subs	r2, #15
 80035ec:	d010      	beq.n	8003610 <ai_array_to_buffer_fmt+0x78>
 80035ee:	4b4a      	ldr	r3, [pc, #296]	; (8003718 <.text_23>)
 80035f0:	1ad2      	subs	r2, r2, r3
 80035f2:	d114      	bne.n	800361e <ai_array_to_buffer_fmt+0x86>
 80035f4:	484b      	ldr	r0, [pc, #300]	; (8003724 <.text_26>)
 80035f6:	e012      	b.n	800361e <ai_array_to_buffer_fmt+0x86>
 80035f8:	484b      	ldr	r0, [pc, #300]	; (8003728 <.text_27>)
 80035fa:	e010      	b.n	800361e <ai_array_to_buffer_fmt+0x86>
 80035fc:	484b      	ldr	r0, [pc, #300]	; (800372c <.text_28>)
 80035fe:	e00e      	b.n	800361e <ai_array_to_buffer_fmt+0x86>
 8003600:	484b      	ldr	r0, [pc, #300]	; (8003730 <.text_29>)
 8003602:	e00c      	b.n	800361e <ai_array_to_buffer_fmt+0x86>
 8003604:	484b      	ldr	r0, [pc, #300]	; (8003734 <.text_30>)
 8003606:	e00a      	b.n	800361e <ai_array_to_buffer_fmt+0x86>
 8003608:	4840      	ldr	r0, [pc, #256]	; (800370c <.text_20>)
 800360a:	e008      	b.n	800361e <ai_array_to_buffer_fmt+0x86>
 800360c:	484a      	ldr	r0, [pc, #296]	; (8003738 <.text_31>)
 800360e:	e006      	b.n	800361e <ai_array_to_buffer_fmt+0x86>
 8003610:	484a      	ldr	r0, [pc, #296]	; (800373c <.text_32>)
 8003612:	e004      	b.n	800361e <ai_array_to_buffer_fmt+0x86>
 8003614:	4618      	mov	r0, r3
 8003616:	e002      	b.n	800361e <ai_array_to_buffer_fmt+0x86>
 8003618:	4849      	ldr	r0, [pc, #292]	; (8003740 <.text_33>)
 800361a:	e000      	b.n	800361e <ai_array_to_buffer_fmt+0x86>
 800361c:	4849      	ldr	r0, [pc, #292]	; (8003744 <.text_34>)
 800361e:	004a      	lsls	r2, r1, #1
 8003620:	bf4c      	ite	mi
 8003622:	f04f 4280 	movmi.w	r2, #1073741824	; 0x40000000
 8003626:	2200      	movpl	r2, #0
 8003628:	4310      	orrs	r0, r2
 800362a:	008a      	lsls	r2, r1, #2
 800362c:	bf4c      	ite	mi
 800362e:	f04f 5200 	movmi.w	r2, #536870912	; 0x20000000
 8003632:	2200      	movpl	r2, #0
 8003634:	4310      	orrs	r0, r2
 8003636:	0109      	lsls	r1, r1, #4
 8003638:	bf4c      	ite	mi
 800363a:	f04f 6100 	movmi.w	r1, #134217728	; 0x8000000
 800363e:	2100      	movpl	r1, #0
 8003640:	4308      	orrs	r0, r1
 8003642:	4770      	bx	lr

08003644 <ai_buffer_to_array_fmt>:
 8003644:	4602      	mov	r2, r0
 8003646:	f022 407e 	bic.w	r0, r2, #4261412864	; 0xfe000000
 800364a:	3840      	subs	r0, #64	; 0x40
 800364c:	d022      	beq.n	8003694 <ai_buffer_to_array_fmt+0x50>
 800364e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8003652:	1a40      	subs	r0, r0, r1
 8003654:	d030      	beq.n	80036b8 <ai_buffer_to_array_fmt+0x74>
 8003656:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800365a:	1a40      	subs	r0, r0, r1
 800365c:	d01e      	beq.n	800369c <ai_buffer_to_array_fmt+0x58>
 800365e:	1fc0      	subs	r0, r0, #7
 8003660:	d02c      	beq.n	80036bc <ai_buffer_to_array_fmt+0x78>
 8003662:	f240 31f9 	movw	r1, #1017	; 0x3f9
 8003666:	1a40      	subs	r0, r0, r1
 8003668:	d01a      	beq.n	80036a0 <ai_buffer_to_array_fmt+0x5c>
 800366a:	380f      	subs	r0, #15
 800366c:	d028      	beq.n	80036c0 <ai_buffer_to_array_fmt+0x7c>
 800366e:	4929      	ldr	r1, [pc, #164]	; (8003714 <.text_22>)
 8003670:	1a40      	subs	r0, r0, r1
 8003672:	d01b      	beq.n	80036ac <ai_buffer_to_array_fmt+0x68>
 8003674:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003678:	1a40      	subs	r0, r0, r1
 800367a:	d013      	beq.n	80036a4 <ai_buffer_to_array_fmt+0x60>
 800367c:	1fc0      	subs	r0, r0, #7
 800367e:	d017      	beq.n	80036b0 <ai_buffer_to_array_fmt+0x6c>
 8003680:	f240 31f9 	movw	r1, #1017	; 0x3f9
 8003684:	1a40      	subs	r0, r0, r1
 8003686:	d00f      	beq.n	80036a8 <ai_buffer_to_array_fmt+0x64>
 8003688:	380f      	subs	r0, #15
 800368a:	d013      	beq.n	80036b4 <ai_buffer_to_array_fmt+0x70>
 800368c:	4922      	ldr	r1, [pc, #136]	; (8003718 <.text_23>)
 800368e:	1a40      	subs	r0, r0, r1
 8003690:	d002      	beq.n	8003698 <ai_buffer_to_array_fmt+0x54>
 8003692:	e017      	b.n	80036c4 <ai_buffer_to_array_fmt+0x80>
 8003694:	2040      	movs	r0, #64	; 0x40
 8003696:	e01f      	b.n	80036d8 <ai_buffer_to_array_fmt+0x94>
 8003698:	4822      	ldr	r0, [pc, #136]	; (8003724 <.text_26>)
 800369a:	e01d      	b.n	80036d8 <ai_buffer_to_array_fmt+0x94>
 800369c:	4822      	ldr	r0, [pc, #136]	; (8003728 <.text_27>)
 800369e:	e01b      	b.n	80036d8 <ai_buffer_to_array_fmt+0x94>
 80036a0:	4822      	ldr	r0, [pc, #136]	; (800372c <.text_28>)
 80036a2:	e019      	b.n	80036d8 <ai_buffer_to_array_fmt+0x94>
 80036a4:	4822      	ldr	r0, [pc, #136]	; (8003730 <.text_29>)
 80036a6:	e017      	b.n	80036d8 <ai_buffer_to_array_fmt+0x94>
 80036a8:	4822      	ldr	r0, [pc, #136]	; (8003734 <.text_30>)
 80036aa:	e015      	b.n	80036d8 <ai_buffer_to_array_fmt+0x94>
 80036ac:	4817      	ldr	r0, [pc, #92]	; (800370c <.text_20>)
 80036ae:	e013      	b.n	80036d8 <ai_buffer_to_array_fmt+0x94>
 80036b0:	4821      	ldr	r0, [pc, #132]	; (8003738 <.text_31>)
 80036b2:	e011      	b.n	80036d8 <ai_buffer_to_array_fmt+0x94>
 80036b4:	4821      	ldr	r0, [pc, #132]	; (800373c <.text_32>)
 80036b6:	e00f      	b.n	80036d8 <ai_buffer_to_array_fmt+0x94>
 80036b8:	4813      	ldr	r0, [pc, #76]	; (8003708 <.text_19>)
 80036ba:	e00d      	b.n	80036d8 <ai_buffer_to_array_fmt+0x94>
 80036bc:	4820      	ldr	r0, [pc, #128]	; (8003740 <.text_33>)
 80036be:	e00b      	b.n	80036d8 <ai_buffer_to_array_fmt+0x94>
 80036c0:	4820      	ldr	r0, [pc, #128]	; (8003744 <.text_34>)
 80036c2:	e009      	b.n	80036d8 <ai_buffer_to_array_fmt+0x94>
 80036c4:	f3c2 51c0 	ubfx	r1, r2, #23, #1
 80036c8:	f3c2 000d 	ubfx	r0, r2, #0, #14
 80036cc:	2900      	cmp	r1, #0
 80036ce:	bf14      	ite	ne
 80036d0:	f440 0004 	orrne.w	r0, r0, #8650752	; 0x840000
 80036d4:	f440 2080 	orreq.w	r0, r0, #262144	; 0x40000
 80036d8:	0051      	lsls	r1, r2, #1
 80036da:	bf48      	it	mi
 80036dc:	f040 4080 	orrmi.w	r0, r0, #1073741824	; 0x40000000
 80036e0:	0091      	lsls	r1, r2, #2
 80036e2:	bf48      	it	mi
 80036e4:	f040 5000 	orrmi.w	r0, r0, #536870912	; 0x20000000
 80036e8:	0111      	lsls	r1, r2, #4
 80036ea:	bf48      	it	mi
 80036ec:	f040 6000 	orrmi.w	r0, r0, #134217728	; 0x8000000
 80036f0:	4770      	bx	lr
	...

080036f4 <.text_14>:
 80036f4:	00000000 	.word	0x00000000

080036f8 <.text_15>:
 80036f8:	002be80f 	.word	0x002be80f

080036fc <.text_16>:
 80036fc:	003bf7f1 	.word	0x003bf7f1

08003700 <.text_17>:
 8003700:	00b9fff1 	.word	0x00b9fff1

08003704 <.text_18>:
 8003704:	004df000 	.word	0x004df000

08003708 <.text_19>:
 8003708:	00040040 	.word	0x00040040

0800370c <.text_20>:
 800370c:	00840040 	.word	0x00840040

08003710 <.text_21>:
 8003710:	0800a358 	.word	0x0800a358

08003714 <.text_22>:
 8003714:	007ff7f1 	.word	0x007ff7f1

08003718 <.text_23>:
 8003718:	00fe07f1 	.word	0x00fe07f1

0800371c <.text_24>:
 800371c:	0800a3c8 	.word	0x0800a3c8

08003720 <.text_25>:
 8003720:	00803fff 	.word	0x00803fff

08003724 <.text_26>:
 8003724:	01821040 	.word	0x01821040

08003728 <.text_27>:
 8003728:	00040440 	.word	0x00040440

0800372c <.text_28>:
 800372c:	00040840 	.word	0x00040840

08003730 <.text_29>:
 8003730:	00840440 	.word	0x00840440

08003734 <.text_30>:
 8003734:	00840840 	.word	0x00840840

08003738 <.text_31>:
 8003738:	00840447 	.word	0x00840447

0800373c <.text_32>:
 800373c:	0084084f 	.word	0x0084084f

08003740 <.text_33>:
 8003740:	00040447 	.word	0x00040447

08003744 <.text_34>:
 8003744:	0004084f 	.word	0x0004084f

08003748 <ai_array_get_byte_size>:
 8003748:	b909      	cbnz	r1, 800374e <ai_array_get_byte_size+0x6>
 800374a:	2000      	movs	r0, #0
 800374c:	4770      	bx	lr
 800374e:	11c2      	asrs	r2, r0, #7
 8003750:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003754:	f3c0 3382 	ubfx	r3, r0, #14, #3
 8003758:	189b      	adds	r3, r3, r2
 800375a:	4359      	muls	r1, r3
 800375c:	1dc9      	adds	r1, r1, #7
 800375e:	08c9      	lsrs	r1, r1, #3
 8003760:	1543      	asrs	r3, r0, #21
 8003762:	00c9      	lsls	r1, r1, #3
 8003764:	f003 0303 	and.w	r3, r3, #3
 8003768:	ea4f 4c60 	mov.w	ip, r0, asr #17
 800376c:	40d9      	lsrs	r1, r3
 800376e:	f00c 0c0f 	and.w	ip, ip, #15
 8003772:	f1bc 0f04 	cmp.w	ip, #4
 8003776:	d00a      	beq.n	800378e <ai_array_get_byte_size+0x46>
 8003778:	f1bc 0f08 	cmp.w	ip, #8
 800377c:	bf02      	ittt	eq
 800377e:	f3c0 3082 	ubfxeq	r0, r0, #14, #3
 8003782:	1882      	addeq	r2, r0, r2
 8003784:	eb01 2102 	addeq.w	r1, r1, r2, lsl #8
 8003788:	1dc9      	adds	r1, r1, #7
 800378a:	08c8      	lsrs	r0, r1, #3
 800378c:	4770      	bx	lr
 800378e:	f3c0 3082 	ubfx	r0, r0, #14, #3
 8003792:	1882      	adds	r2, r0, r2
 8003794:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 8003798:	1dc9      	adds	r1, r1, #7
 800379a:	08c8      	lsrs	r0, r1, #3
 800379c:	4770      	bx	lr

0800379e <ai_array_get_data_byte_size>:
 800379e:	b909      	cbnz	r1, 80037a4 <ai_array_get_data_byte_size+0x6>
 80037a0:	2000      	movs	r0, #0
 80037a2:	4770      	bx	lr
 80037a4:	11c2      	asrs	r2, r0, #7
 80037a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80037aa:	f3c0 3382 	ubfx	r3, r0, #14, #3
 80037ae:	189a      	adds	r2, r3, r2
 80037b0:	4351      	muls	r1, r2
 80037b2:	1dc9      	adds	r1, r1, #7
 80037b4:	08c9      	lsrs	r1, r1, #3
 80037b6:	1540      	asrs	r0, r0, #21
 80037b8:	00c9      	lsls	r1, r1, #3
 80037ba:	f000 0003 	and.w	r0, r0, #3
 80037be:	40c1      	lsrs	r1, r0
 80037c0:	1dc9      	adds	r1, r1, #7
 80037c2:	08c8      	lsrs	r0, r1, #3
 80037c4:	4770      	bx	lr

080037c6 <ai_array_get_elems_from_size>:
 80037c6:	b909      	cbnz	r1, 80037cc <ai_array_get_elems_from_size+0x6>
 80037c8:	2000      	movs	r0, #0
 80037ca:	4770      	bx	lr
 80037cc:	1442      	asrs	r2, r0, #17
 80037ce:	00c9      	lsls	r1, r1, #3
 80037d0:	f002 020f 	and.w	r2, r2, #15
 80037d4:	2a04      	cmp	r2, #4
 80037d6:	d002      	beq.n	80037de <ai_array_get_elems_from_size+0x18>
 80037d8:	2a08      	cmp	r2, #8
 80037da:	d009      	beq.n	80037f0 <ai_array_get_elems_from_size+0x2a>
 80037dc:	e010      	b.n	8003800 <ai_array_get_elems_from_size+0x3a>
 80037de:	11c3      	asrs	r3, r0, #7
 80037e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037e4:	f3c0 3282 	ubfx	r2, r0, #14, #3
 80037e8:	18d2      	adds	r2, r2, r3
 80037ea:	eba1 1102 	sub.w	r1, r1, r2, lsl #4
 80037ee:	e007      	b.n	8003800 <ai_array_get_elems_from_size+0x3a>
 80037f0:	11c2      	asrs	r2, r0, #7
 80037f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80037f6:	f3c0 3382 	ubfx	r3, r0, #14, #3
 80037fa:	189a      	adds	r2, r3, r2
 80037fc:	eba1 2102 	sub.w	r1, r1, r2, lsl #8
 8003800:	1542      	asrs	r2, r0, #21
 8003802:	f002 0203 	and.w	r2, r2, #3
 8003806:	4091      	lsls	r1, r2
 8003808:	1dc9      	adds	r1, r1, #7
 800380a:	11c2      	asrs	r2, r0, #7
 800380c:	08c9      	lsrs	r1, r1, #3
 800380e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003812:	f3c0 3082 	ubfx	r0, r0, #14, #3
 8003816:	00c9      	lsls	r1, r1, #3
 8003818:	1880      	adds	r0, r0, r2
 800381a:	fbb1 f0f0 	udiv	r0, r1, r0
 800381e:	4770      	bx	lr

08003820 <.text_38>:
 8003820:	5f544d46 	.word	0x5f544d46
 8003824:	454e4f4e 	.word	0x454e4f4e
 8003828:	00000000 	.word	0x00000000

0800382c <.text_39>:
 800382c:	5f544d46 	.word	0x5f544d46
 8003830:	414f4c46 	.word	0x414f4c46
 8003834:	0054      	.short	0x0054
	...

08003838 <.text_40>:
 8003838:	5f544d46 	.word	0x5f544d46
 800383c:	414f4c46 	.word	0x414f4c46
 8003840:	00343654 	.word	0x00343654

08003844 <.text_41>:
 8003844:	5f544d46 	.word	0x5f544d46
 8003848:	414f4c46 	.word	0x414f4c46
 800384c:	00363154 	.word	0x00363154

08003850 <.text_42>:
 8003850:	5f544d46 	.word	0x5f544d46
 8003854:	3855      	.short	0x3855
	...

08003858 <.text_43>:
 8003858:	5f544d46 	.word	0x5f544d46
 800385c:	00363155 	.word	0x00363155

08003860 <.text_44>:
 8003860:	5f544d46 	.word	0x5f544d46
 8003864:	00323355 	.word	0x00323355

08003868 <.text_45>:
 8003868:	5f544d46 	.word	0x5f544d46
 800386c:	00343655 	.word	0x00343655

08003870 <.text_46>:
 8003870:	5f544d46 	.word	0x5f544d46
 8003874:	3455      	.short	0x3455
	...

08003878 <.text_47>:
 8003878:	5f544d46 	.word	0x5f544d46
 800387c:	3853      	.short	0x3853
	...

08003880 <.text_48>:
 8003880:	5f544d46 	.word	0x5f544d46
 8003884:	00363153 	.word	0x00363153

08003888 <.text_49>:
 8003888:	5f544d46 	.word	0x5f544d46
 800388c:	00323353 	.word	0x00323353

08003890 <.text_50>:
 8003890:	5f544d46 	.word	0x5f544d46
 8003894:	00343653 	.word	0x00343653

08003898 <.text_51>:
 8003898:	5f544d46 	.word	0x5f544d46
 800389c:	3453      	.short	0x3453
	...

080038a0 <.text_52>:
 80038a0:	5f544d46 	.word	0x5f544d46
 80038a4:	0051      	.short	0x0051
	...

080038a8 <.text_53>:
 80038a8:	5f544d46 	.word	0x5f544d46
 80038ac:	3751      	.short	0x3751
	...

080038b0 <.text_54>:
 80038b0:	5f544d46 	.word	0x5f544d46
 80038b4:	00353151 	.word	0x00353151

080038b8 <.text_55>:
 80038b8:	5f544d46 	.word	0x5f544d46
 80038bc:	00313351 	.word	0x00313351

080038c0 <.text_56>:
 80038c0:	5f544d46 	.word	0x5f544d46
 80038c4:	5155      	.short	0x5155
	...

080038c8 <.text_57>:
 80038c8:	5f544d46 	.word	0x5f544d46
 80038cc:	00375155 	.word	0x00375155

080038d0 <.text_58>:
 80038d0:	5f544d46 	.word	0x5f544d46
 80038d4:	35315155 	.word	0x35315155
 80038d8:	00000000 	.word	0x00000000

080038dc <.text_59>:
 80038dc:	5f544d46 	.word	0x5f544d46
 80038e0:	31335155 	.word	0x31335155
 80038e4:	00000000 	.word	0x00000000

080038e8 <.text_60>:
 80038e8:	5f544d46 	.word	0x5f544d46
 80038ec:	3454554c 	.word	0x3454554c
 80038f0:	4f4c465f 	.word	0x4f4c465f
 80038f4:	5441      	.short	0x5441
	...

080038f8 <.text_61>:
 80038f8:	5f544d46 	.word	0x5f544d46
 80038fc:	3854554c 	.word	0x3854554c
 8003900:	4f4c465f 	.word	0x4f4c465f
 8003904:	5441      	.short	0x5441
	...

08003908 <.text_62>:
 8003908:	5f544d46 	.word	0x5f544d46
 800390c:	3454554c 	.word	0x3454554c
 8003910:	3531515f 	.word	0x3531515f
 8003914:	00000000 	.word	0x00000000

08003918 <.text_63>:
 8003918:	5f544d46 	.word	0x5f544d46
 800391c:	3854554c 	.word	0x3854554c
 8003920:	3531515f 	.word	0x3531515f
 8003924:	00000000 	.word	0x00000000

08003928 <.text_64>:
 8003928:	5f544d46 	.word	0x5f544d46
 800392c:	3454554c 	.word	0x3454554c
 8003930:	3151555f 	.word	0x3151555f
 8003934:	0035      	.short	0x0035
	...

08003938 <.text_65>:
 8003938:	5f544d46 	.word	0x5f544d46
 800393c:	3854554c 	.word	0x3854554c
 8003940:	3151555f 	.word	0x3151555f
 8003944:	0035      	.short	0x0035
	...

08003948 <.text_66>:
 8003948:	415f4941 	.word	0x415f4941
 800394c:	59415252 	.word	0x59415252
 8003950:	524f465f 	.word	0x524f465f
 8003954:	5f54414d 	.word	0x5f54414d
 8003958:	454e4f4e 	.word	0x454e4f4e
 800395c:	00000000 	.word	0x00000000

08003960 <.text_67>:
 8003960:	415f4941 	.word	0x415f4941
 8003964:	59415252 	.word	0x59415252
 8003968:	524f465f 	.word	0x524f465f
 800396c:	5f54414d 	.word	0x5f54414d
 8003970:	0051      	.short	0x0051
	...

08003974 <.text_68>:
 8003974:	415f4941 	.word	0x415f4941
 8003978:	59415252 	.word	0x59415252
 800397c:	524f465f 	.word	0x524f465f
 8003980:	5f54414d 	.word	0x5f54414d
 8003984:	5155      	.short	0x5155
	...

08003988 <.text_69>:
 8003988:	425f4941 	.word	0x425f4941
 800398c:	45464655 	.word	0x45464655
 8003990:	4f465f52 	.word	0x4f465f52
 8003994:	54414d52 	.word	0x54414d52
 8003998:	4e4f4e5f 	.word	0x4e4f4e5f
 800399c:	0045      	.short	0x0045
	...

080039a0 <.text_70>:
 80039a0:	425f4941 	.word	0x425f4941
 80039a4:	45464655 	.word	0x45464655
 80039a8:	4f465f52 	.word	0x4f465f52
 80039ac:	54414d52 	.word	0x54414d52
 80039b0:	515f      	.short	0x515f
	...

080039b4 <.text_71>:
 80039b4:	425f4941 	.word	0x425f4941
 80039b8:	45464655 	.word	0x45464655
 80039bc:	4f465f52 	.word	0x4f465f52
 80039c0:	54414d52 	.word	0x54414d52
 80039c4:	0051555f 	.word	0x0051555f

080039c8 <ai_math_dot_array>:
 80039c8:	b530      	push	{r4, r5, lr}
 80039ca:	4604      	mov	r4, r0
 80039cc:	4608      	mov	r0, r1
 80039ce:	b081      	sub	sp, #4
 80039d0:	4611      	mov	r1, r2
 80039d2:	461a      	mov	r2, r3
 80039d4:	2500      	movs	r5, #0
 80039d6:	9500      	str	r5, [sp, #0]
 80039d8:	466b      	mov	r3, sp
 80039da:	f000 ff95 	bl	8004908 <arm_dot_prod_f32>
 80039de:	ed94 0a00 	vldr	s0, [r4]
 80039e2:	eddd 0a00 	vldr	s1, [sp]
 80039e6:	ee70 0a20 	vadd.f32	s1, s0, s1
 80039ea:	edc4 0a00 	vstr	s1, [r4]
 80039ee:	b001      	add	sp, #4
 80039f0:	bd30      	pop	{r4, r5, pc}
	...

080039f4 <ai_math_sqrt>:
 80039f4:	eef0 0a40 	vmov.f32	s1, s0
 80039f8:	eef5 0a40 	vcmp.f32	s1, #0.0
 80039fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a00:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8003aa4 <.text_12>
 8003a04:	db01      	blt.n	8003a0a <ai_math_sqrt+0x16>
 8003a06:	eeb1 0ae0 	vsqrt.f32	s0, s1
 8003a0a:	4770      	bx	lr

08003a0c <ai_math_exp>:
 8003a0c:	f005 bb62 	b.w	80090d4 <expf>

08003a10 <ai_math_pow>:
 8003a10:	f005 bc50 	b.w	80092b4 <powf>

08003a14 <ai_math_tanh>:
 8003a14:	f005 bb0c 	b.w	8009030 <tanhf>

08003a18 <ai_math_relu>:
 8003a18:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a20:	bf48      	it	mi
 8003a22:	ed9f 0a20 	vldrmi	s0, [pc, #128]	; 8003aa4 <.text_12>
 8003a26:	4770      	bx	lr

08003a28 <ai_math_prelu>:
 8003a28:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a30:	bf48      	it	mi
 8003a32:	ee20 0a20 	vmulmi.f32	s0, s0, s1
 8003a36:	4770      	bx	lr

08003a38 <ai_math_sigmoid>:
 8003a38:	b500      	push	{lr}
 8003a3a:	b081      	sub	sp, #4
 8003a3c:	eeb1 0a40 	vneg.f32	s0, s0
 8003a40:	f005 fb48 	bl	80090d4 <expf>
 8003a44:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003a48:	ee30 0a20 	vadd.f32	s0, s0, s1
 8003a4c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003a50:	ee81 0a00 	vdiv.f32	s0, s2, s0
 8003a54:	b001      	add	sp, #4
 8003a56:	bd00      	pop	{pc}

08003a58 <ai_math_hard_sigmoid>:
 8003a58:	eef0 0a40 	vmov.f32	s1, s0
 8003a5c:	ed9f 1a12 	vldr	s2, [pc, #72]	; 8003aa8 <.text_13>
 8003a60:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8003a64:	ee00 0a81 	vmla.f32	s0, s1, s2
 8003a68:	eddf 0a10 	vldr	s1, [pc, #64]	; 8003aac <.text_14>
 8003a6c:	eeb4 0a60 	vcmp.f32	s0, s1
 8003a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a74:	da07      	bge.n	8003a86 <ai_math_hard_sigmoid+0x2e>
 8003a76:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a7e:	d504      	bpl.n	8003a8a <ai_math_hard_sigmoid+0x32>
 8003a80:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8003aa4 <.text_12>
 8003a84:	4770      	bx	lr
 8003a86:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003a8a:	4770      	bx	lr

08003a8c <ai_math_sign>:
 8003a8c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a94:	bfcc      	ite	gt
 8003a96:	ed9f 0a06 	vldrgt	s0, [pc, #24]	; 8003ab0 <.text_15>
 8003a9a:	ed9f 0a06 	vldrle	s0, [pc, #24]	; 8003ab4 <.text_16>
 8003a9e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8003aa2:	4770      	bx	lr

08003aa4 <.text_12>:
 8003aa4:	00000000 	.word	0x00000000

08003aa8 <.text_13>:
 8003aa8:	3e4ccccd 	.word	0x3e4ccccd

08003aac <.text_14>:
 8003aac:	3f800001 	.word	0x3f800001

08003ab0 <.text_15>:
 8003ab0:	00000001 	.word	0x00000001

08003ab4 <.text_16>:
 8003ab4:	ffffffff 	.word	0xffffffff

08003ab8 <ai_sum>:
 8003ab8:	ee30 0a20 	vadd.f32	s0, s0, s1
 8003abc:	4770      	bx	lr

08003abe <ai_sub>:
 8003abe:	ee30 0a60 	vsub.f32	s0, s0, s1
 8003ac2:	4770      	bx	lr

08003ac4 <ai_mul>:
 8003ac4:	ee20 0a20 	vmul.f32	s0, s0, s1
 8003ac8:	4770      	bx	lr

08003aca <ai_div>:
 8003aca:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8003ace:	4770      	bx	lr

08003ad0 <ai_max>:
 8003ad0:	eef4 0a40 	vcmp.f32	s1, s0
 8003ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ad8:	bf58      	it	pl
 8003ada:	eeb0 0a60 	vmovpl.f32	s0, s1
 8003ade:	4770      	bx	lr

08003ae0 <ai_min>:
 8003ae0:	eeb4 0a60 	vcmp.f32	s0, s1
 8003ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ae8:	bf58      	it	pl
 8003aea:	eeb0 0a60 	vmovpl.f32	s0, s1
 8003aee:	4770      	bx	lr

08003af0 <__aeabi_memset>:
 8003af0:	b470      	push	{r4, r5, r6}
 8003af2:	0784      	lsls	r4, r0, #30
 8003af4:	d046      	beq.n	8003b84 <__aeabi_memset+0x94>
 8003af6:	1e4c      	subs	r4, r1, #1
 8003af8:	2900      	cmp	r1, #0
 8003afa:	d041      	beq.n	8003b80 <__aeabi_memset+0x90>
 8003afc:	b2d5      	uxtb	r5, r2
 8003afe:	4603      	mov	r3, r0
 8003b00:	e002      	b.n	8003b08 <__aeabi_memset+0x18>
 8003b02:	1e61      	subs	r1, r4, #1
 8003b04:	b3e4      	cbz	r4, 8003b80 <__aeabi_memset+0x90>
 8003b06:	460c      	mov	r4, r1
 8003b08:	f803 5b01 	strb.w	r5, [r3], #1
 8003b0c:	0799      	lsls	r1, r3, #30
 8003b0e:	d1f8      	bne.n	8003b02 <__aeabi_memset+0x12>
 8003b10:	2c03      	cmp	r4, #3
 8003b12:	d92e      	bls.n	8003b72 <__aeabi_memset+0x82>
 8003b14:	b2d5      	uxtb	r5, r2
 8003b16:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8003b1a:	2c0f      	cmp	r4, #15
 8003b1c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8003b20:	d919      	bls.n	8003b56 <__aeabi_memset+0x66>
 8003b22:	4626      	mov	r6, r4
 8003b24:	f103 0110 	add.w	r1, r3, #16
 8003b28:	3e10      	subs	r6, #16
 8003b2a:	2e0f      	cmp	r6, #15
 8003b2c:	f841 5c10 	str.w	r5, [r1, #-16]
 8003b30:	f841 5c0c 	str.w	r5, [r1, #-12]
 8003b34:	f841 5c08 	str.w	r5, [r1, #-8]
 8003b38:	f841 5c04 	str.w	r5, [r1, #-4]
 8003b3c:	f101 0110 	add.w	r1, r1, #16
 8003b40:	d8f2      	bhi.n	8003b28 <__aeabi_memset+0x38>
 8003b42:	f1a4 0110 	sub.w	r1, r4, #16
 8003b46:	f021 010f 	bic.w	r1, r1, #15
 8003b4a:	f004 040f 	and.w	r4, r4, #15
 8003b4e:	3110      	adds	r1, #16
 8003b50:	2c03      	cmp	r4, #3
 8003b52:	440b      	add	r3, r1
 8003b54:	d90d      	bls.n	8003b72 <__aeabi_memset+0x82>
 8003b56:	461e      	mov	r6, r3
 8003b58:	4621      	mov	r1, r4
 8003b5a:	3904      	subs	r1, #4
 8003b5c:	2903      	cmp	r1, #3
 8003b5e:	f846 5b04 	str.w	r5, [r6], #4
 8003b62:	d8fa      	bhi.n	8003b5a <__aeabi_memset+0x6a>
 8003b64:	1f21      	subs	r1, r4, #4
 8003b66:	f021 0103 	bic.w	r1, r1, #3
 8003b6a:	3104      	adds	r1, #4
 8003b6c:	440b      	add	r3, r1
 8003b6e:	f004 0403 	and.w	r4, r4, #3
 8003b72:	b12c      	cbz	r4, 8003b80 <__aeabi_memset+0x90>
 8003b74:	b2d2      	uxtb	r2, r2
 8003b76:	441c      	add	r4, r3
 8003b78:	f803 2b01 	strb.w	r2, [r3], #1
 8003b7c:	42a3      	cmp	r3, r4
 8003b7e:	d1fb      	bne.n	8003b78 <__aeabi_memset+0x88>
 8003b80:	bc70      	pop	{r4, r5, r6}
 8003b82:	4770      	bx	lr
 8003b84:	460c      	mov	r4, r1
 8003b86:	4603      	mov	r3, r0
 8003b88:	e7c2      	b.n	8003b10 <__aeabi_memset+0x20>

08003b8a <strlen>:
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b90:	2a00      	cmp	r2, #0
 8003b92:	d1fb      	bne.n	8003b8c <strlen+0x2>
 8003b94:	1a18      	subs	r0, r3, r0
 8003b96:	3801      	subs	r0, #1
 8003b98:	4770      	bx	lr
 8003b9a:	0000      	movs	r0, r0
 8003b9c:	0000      	movs	r0, r0
	...

08003ba0 <memchr>:
 8003ba0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8003ba4:	2a10      	cmp	r2, #16
 8003ba6:	db2b      	blt.n	8003c00 <memchr+0x60>
 8003ba8:	f010 0f07 	tst.w	r0, #7
 8003bac:	d008      	beq.n	8003bc0 <memchr+0x20>
 8003bae:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003bb2:	3a01      	subs	r2, #1
 8003bb4:	428b      	cmp	r3, r1
 8003bb6:	d02d      	beq.n	8003c14 <memchr+0x74>
 8003bb8:	f010 0f07 	tst.w	r0, #7
 8003bbc:	b342      	cbz	r2, 8003c10 <memchr+0x70>
 8003bbe:	d1f6      	bne.n	8003bae <memchr+0xe>
 8003bc0:	b4f0      	push	{r4, r5, r6, r7}
 8003bc2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8003bc6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8003bca:	f022 0407 	bic.w	r4, r2, #7
 8003bce:	f07f 0700 	mvns.w	r7, #0
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8003bd8:	3c08      	subs	r4, #8
 8003bda:	ea85 0501 	eor.w	r5, r5, r1
 8003bde:	ea86 0601 	eor.w	r6, r6, r1
 8003be2:	fa85 f547 	uadd8	r5, r5, r7
 8003be6:	faa3 f587 	sel	r5, r3, r7
 8003bea:	fa86 f647 	uadd8	r6, r6, r7
 8003bee:	faa5 f687 	sel	r6, r5, r7
 8003bf2:	b98e      	cbnz	r6, 8003c18 <memchr+0x78>
 8003bf4:	d1ee      	bne.n	8003bd4 <memchr+0x34>
 8003bf6:	bcf0      	pop	{r4, r5, r6, r7}
 8003bf8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8003bfc:	f002 0207 	and.w	r2, r2, #7
 8003c00:	b132      	cbz	r2, 8003c10 <memchr+0x70>
 8003c02:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003c06:	3a01      	subs	r2, #1
 8003c08:	ea83 0301 	eor.w	r3, r3, r1
 8003c0c:	b113      	cbz	r3, 8003c14 <memchr+0x74>
 8003c0e:	d1f8      	bne.n	8003c02 <memchr+0x62>
 8003c10:	2000      	movs	r0, #0
 8003c12:	4770      	bx	lr
 8003c14:	3801      	subs	r0, #1
 8003c16:	4770      	bx	lr
 8003c18:	2d00      	cmp	r5, #0
 8003c1a:	bf06      	itte	eq
 8003c1c:	4635      	moveq	r5, r6
 8003c1e:	3803      	subeq	r0, #3
 8003c20:	3807      	subne	r0, #7
 8003c22:	f015 0f01 	tst.w	r5, #1
 8003c26:	d107      	bne.n	8003c38 <memchr+0x98>
 8003c28:	3001      	adds	r0, #1
 8003c2a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8003c2e:	bf02      	ittt	eq
 8003c30:	3001      	addeq	r0, #1
 8003c32:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8003c36:	3001      	addeq	r0, #1
 8003c38:	bcf0      	pop	{r4, r5, r6, r7}
 8003c3a:	3801      	subs	r0, #1
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop

08003c40 <__aeabi_drsub>:
 8003c40:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8003c44:	e002      	b.n	8003c4c <__adddf3>
 8003c46:	bf00      	nop

08003c48 <__aeabi_dsub>:
 8003c48:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08003c4c <__adddf3>:
 8003c4c:	b530      	push	{r4, r5, lr}
 8003c4e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8003c52:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8003c56:	ea94 0f05 	teq	r4, r5
 8003c5a:	bf08      	it	eq
 8003c5c:	ea90 0f02 	teqeq	r0, r2
 8003c60:	bf1f      	itttt	ne
 8003c62:	ea54 0c00 	orrsne.w	ip, r4, r0
 8003c66:	ea55 0c02 	orrsne.w	ip, r5, r2
 8003c6a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8003c6e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8003c72:	f000 80e2 	beq.w	8003e3a <__adddf3+0x1ee>
 8003c76:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8003c7a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8003c7e:	bfb8      	it	lt
 8003c80:	426d      	neglt	r5, r5
 8003c82:	dd0c      	ble.n	8003c9e <__adddf3+0x52>
 8003c84:	442c      	add	r4, r5
 8003c86:	ea80 0202 	eor.w	r2, r0, r2
 8003c8a:	ea81 0303 	eor.w	r3, r1, r3
 8003c8e:	ea82 0000 	eor.w	r0, r2, r0
 8003c92:	ea83 0101 	eor.w	r1, r3, r1
 8003c96:	ea80 0202 	eor.w	r2, r0, r2
 8003c9a:	ea81 0303 	eor.w	r3, r1, r3
 8003c9e:	2d36      	cmp	r5, #54	; 0x36
 8003ca0:	bf88      	it	hi
 8003ca2:	bd30      	pophi	{r4, r5, pc}
 8003ca4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8003ca8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8003cac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8003cb0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8003cb4:	d002      	beq.n	8003cbc <__adddf3+0x70>
 8003cb6:	4240      	negs	r0, r0
 8003cb8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8003cbc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8003cc0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8003cc4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8003cc8:	d002      	beq.n	8003cd0 <__adddf3+0x84>
 8003cca:	4252      	negs	r2, r2
 8003ccc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8003cd0:	ea94 0f05 	teq	r4, r5
 8003cd4:	f000 80a7 	beq.w	8003e26 <__adddf3+0x1da>
 8003cd8:	f1a4 0401 	sub.w	r4, r4, #1
 8003cdc:	f1d5 0e20 	rsbs	lr, r5, #32
 8003ce0:	db0d      	blt.n	8003cfe <__adddf3+0xb2>
 8003ce2:	fa02 fc0e 	lsl.w	ip, r2, lr
 8003ce6:	fa22 f205 	lsr.w	r2, r2, r5
 8003cea:	1880      	adds	r0, r0, r2
 8003cec:	f141 0100 	adc.w	r1, r1, #0
 8003cf0:	fa03 f20e 	lsl.w	r2, r3, lr
 8003cf4:	1880      	adds	r0, r0, r2
 8003cf6:	fa43 f305 	asr.w	r3, r3, r5
 8003cfa:	4159      	adcs	r1, r3
 8003cfc:	e00e      	b.n	8003d1c <__adddf3+0xd0>
 8003cfe:	f1a5 0520 	sub.w	r5, r5, #32
 8003d02:	f10e 0e20 	add.w	lr, lr, #32
 8003d06:	2a01      	cmp	r2, #1
 8003d08:	fa03 fc0e 	lsl.w	ip, r3, lr
 8003d0c:	bf28      	it	cs
 8003d0e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8003d12:	fa43 f305 	asr.w	r3, r3, r5
 8003d16:	18c0      	adds	r0, r0, r3
 8003d18:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8003d1c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8003d20:	d507      	bpl.n	8003d32 <__adddf3+0xe6>
 8003d22:	f04f 0e00 	mov.w	lr, #0
 8003d26:	f1dc 0c00 	rsbs	ip, ip, #0
 8003d2a:	eb7e 0000 	sbcs.w	r0, lr, r0
 8003d2e:	eb6e 0101 	sbc.w	r1, lr, r1
 8003d32:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8003d36:	d31b      	bcc.n	8003d70 <__adddf3+0x124>
 8003d38:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8003d3c:	d30c      	bcc.n	8003d58 <__adddf3+0x10c>
 8003d3e:	0849      	lsrs	r1, r1, #1
 8003d40:	ea5f 0030 	movs.w	r0, r0, rrx
 8003d44:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8003d48:	f104 0401 	add.w	r4, r4, #1
 8003d4c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8003d50:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8003d54:	f080 809a 	bcs.w	8003e8c <__adddf3+0x240>
 8003d58:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8003d5c:	bf08      	it	eq
 8003d5e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8003d62:	f150 0000 	adcs.w	r0, r0, #0
 8003d66:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8003d6a:	ea41 0105 	orr.w	r1, r1, r5
 8003d6e:	bd30      	pop	{r4, r5, pc}
 8003d70:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8003d74:	4140      	adcs	r0, r0
 8003d76:	eb41 0101 	adc.w	r1, r1, r1
 8003d7a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003d7e:	f1a4 0401 	sub.w	r4, r4, #1
 8003d82:	d1e9      	bne.n	8003d58 <__adddf3+0x10c>
 8003d84:	f091 0f00 	teq	r1, #0
 8003d88:	bf04      	itt	eq
 8003d8a:	4601      	moveq	r1, r0
 8003d8c:	2000      	moveq	r0, #0
 8003d8e:	fab1 f381 	clz	r3, r1
 8003d92:	bf08      	it	eq
 8003d94:	3320      	addeq	r3, #32
 8003d96:	f1a3 030b 	sub.w	r3, r3, #11
 8003d9a:	f1b3 0220 	subs.w	r2, r3, #32
 8003d9e:	da0c      	bge.n	8003dba <__adddf3+0x16e>
 8003da0:	320c      	adds	r2, #12
 8003da2:	dd08      	ble.n	8003db6 <__adddf3+0x16a>
 8003da4:	f102 0c14 	add.w	ip, r2, #20
 8003da8:	f1c2 020c 	rsb	r2, r2, #12
 8003dac:	fa01 f00c 	lsl.w	r0, r1, ip
 8003db0:	fa21 f102 	lsr.w	r1, r1, r2
 8003db4:	e00c      	b.n	8003dd0 <__adddf3+0x184>
 8003db6:	f102 0214 	add.w	r2, r2, #20
 8003dba:	bfd8      	it	le
 8003dbc:	f1c2 0c20 	rsble	ip, r2, #32
 8003dc0:	fa01 f102 	lsl.w	r1, r1, r2
 8003dc4:	fa20 fc0c 	lsr.w	ip, r0, ip
 8003dc8:	bfdc      	itt	le
 8003dca:	ea41 010c 	orrle.w	r1, r1, ip
 8003dce:	4090      	lslle	r0, r2
 8003dd0:	1ae4      	subs	r4, r4, r3
 8003dd2:	bfa2      	ittt	ge
 8003dd4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8003dd8:	4329      	orrge	r1, r5
 8003dda:	bd30      	popge	{r4, r5, pc}
 8003ddc:	ea6f 0404 	mvn.w	r4, r4
 8003de0:	3c1f      	subs	r4, #31
 8003de2:	da1c      	bge.n	8003e1e <__adddf3+0x1d2>
 8003de4:	340c      	adds	r4, #12
 8003de6:	dc0e      	bgt.n	8003e06 <__adddf3+0x1ba>
 8003de8:	f104 0414 	add.w	r4, r4, #20
 8003dec:	f1c4 0220 	rsb	r2, r4, #32
 8003df0:	fa20 f004 	lsr.w	r0, r0, r4
 8003df4:	fa01 f302 	lsl.w	r3, r1, r2
 8003df8:	ea40 0003 	orr.w	r0, r0, r3
 8003dfc:	fa21 f304 	lsr.w	r3, r1, r4
 8003e00:	ea45 0103 	orr.w	r1, r5, r3
 8003e04:	bd30      	pop	{r4, r5, pc}
 8003e06:	f1c4 040c 	rsb	r4, r4, #12
 8003e0a:	f1c4 0220 	rsb	r2, r4, #32
 8003e0e:	fa20 f002 	lsr.w	r0, r0, r2
 8003e12:	fa01 f304 	lsl.w	r3, r1, r4
 8003e16:	ea40 0003 	orr.w	r0, r0, r3
 8003e1a:	4629      	mov	r1, r5
 8003e1c:	bd30      	pop	{r4, r5, pc}
 8003e1e:	fa21 f004 	lsr.w	r0, r1, r4
 8003e22:	4629      	mov	r1, r5
 8003e24:	bd30      	pop	{r4, r5, pc}
 8003e26:	f094 0f00 	teq	r4, #0
 8003e2a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8003e2e:	bf06      	itte	eq
 8003e30:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8003e34:	3401      	addeq	r4, #1
 8003e36:	3d01      	subne	r5, #1
 8003e38:	e74e      	b.n	8003cd8 <__adddf3+0x8c>
 8003e3a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8003e3e:	bf18      	it	ne
 8003e40:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8003e44:	d029      	beq.n	8003e9a <__adddf3+0x24e>
 8003e46:	ea94 0f05 	teq	r4, r5
 8003e4a:	bf08      	it	eq
 8003e4c:	ea90 0f02 	teqeq	r0, r2
 8003e50:	d005      	beq.n	8003e5e <__adddf3+0x212>
 8003e52:	ea54 0c00 	orrs.w	ip, r4, r0
 8003e56:	bf04      	itt	eq
 8003e58:	4619      	moveq	r1, r3
 8003e5a:	4610      	moveq	r0, r2
 8003e5c:	bd30      	pop	{r4, r5, pc}
 8003e5e:	ea91 0f03 	teq	r1, r3
 8003e62:	bf1e      	ittt	ne
 8003e64:	2100      	movne	r1, #0
 8003e66:	2000      	movne	r0, #0
 8003e68:	bd30      	popne	{r4, r5, pc}
 8003e6a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8003e6e:	d105      	bne.n	8003e7c <__adddf3+0x230>
 8003e70:	0040      	lsls	r0, r0, #1
 8003e72:	4149      	adcs	r1, r1
 8003e74:	bf28      	it	cs
 8003e76:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8003e7a:	bd30      	pop	{r4, r5, pc}
 8003e7c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8003e80:	bf3c      	itt	cc
 8003e82:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8003e86:	bd30      	popcc	{r4, r5, pc}
 8003e88:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8003e8c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8003e90:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003e94:	f04f 0000 	mov.w	r0, #0
 8003e98:	bd30      	pop	{r4, r5, pc}
 8003e9a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8003e9e:	bf1a      	itte	ne
 8003ea0:	4619      	movne	r1, r3
 8003ea2:	4610      	movne	r0, r2
 8003ea4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8003ea8:	bf1c      	itt	ne
 8003eaa:	460b      	movne	r3, r1
 8003eac:	4602      	movne	r2, r0
 8003eae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8003eb2:	bf06      	itte	eq
 8003eb4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8003eb8:	ea91 0f03 	teqeq	r1, r3
 8003ebc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8003ec0:	bd30      	pop	{r4, r5, pc}
 8003ec2:	bf00      	nop

08003ec4 <__aeabi_ui2d>:
 8003ec4:	f090 0f00 	teq	r0, #0
 8003ec8:	bf04      	itt	eq
 8003eca:	2100      	moveq	r1, #0
 8003ecc:	4770      	bxeq	lr
 8003ece:	b530      	push	{r4, r5, lr}
 8003ed0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8003ed4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8003ed8:	f04f 0500 	mov.w	r5, #0
 8003edc:	f04f 0100 	mov.w	r1, #0
 8003ee0:	e750      	b.n	8003d84 <__adddf3+0x138>
 8003ee2:	bf00      	nop

08003ee4 <__aeabi_i2d>:
 8003ee4:	f090 0f00 	teq	r0, #0
 8003ee8:	bf04      	itt	eq
 8003eea:	2100      	moveq	r1, #0
 8003eec:	4770      	bxeq	lr
 8003eee:	b530      	push	{r4, r5, lr}
 8003ef0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8003ef4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8003ef8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8003efc:	bf48      	it	mi
 8003efe:	4240      	negmi	r0, r0
 8003f00:	f04f 0100 	mov.w	r1, #0
 8003f04:	e73e      	b.n	8003d84 <__adddf3+0x138>
 8003f06:	bf00      	nop

08003f08 <__aeabi_f2d>:
 8003f08:	0042      	lsls	r2, r0, #1
 8003f0a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8003f0e:	ea4f 0131 	mov.w	r1, r1, rrx
 8003f12:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8003f16:	bf1f      	itttt	ne
 8003f18:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8003f1c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8003f20:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8003f24:	4770      	bxne	lr
 8003f26:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8003f2a:	bf08      	it	eq
 8003f2c:	4770      	bxeq	lr
 8003f2e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8003f32:	bf04      	itt	eq
 8003f34:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8003f38:	4770      	bxeq	lr
 8003f3a:	b530      	push	{r4, r5, lr}
 8003f3c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8003f40:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8003f44:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003f48:	e71c      	b.n	8003d84 <__adddf3+0x138>
 8003f4a:	bf00      	nop

08003f4c <__aeabi_ul2d>:
 8003f4c:	ea50 0201 	orrs.w	r2, r0, r1
 8003f50:	bf08      	it	eq
 8003f52:	4770      	bxeq	lr
 8003f54:	b530      	push	{r4, r5, lr}
 8003f56:	f04f 0500 	mov.w	r5, #0
 8003f5a:	e00a      	b.n	8003f72 <__aeabi_l2d+0x16>

08003f5c <__aeabi_l2d>:
 8003f5c:	ea50 0201 	orrs.w	r2, r0, r1
 8003f60:	bf08      	it	eq
 8003f62:	4770      	bxeq	lr
 8003f64:	b530      	push	{r4, r5, lr}
 8003f66:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8003f6a:	d502      	bpl.n	8003f72 <__aeabi_l2d+0x16>
 8003f6c:	4240      	negs	r0, r0
 8003f6e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8003f72:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8003f76:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8003f7a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8003f7e:	f43f aed8 	beq.w	8003d32 <__adddf3+0xe6>
 8003f82:	f04f 0203 	mov.w	r2, #3
 8003f86:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8003f8a:	bf18      	it	ne
 8003f8c:	3203      	addne	r2, #3
 8003f8e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8003f92:	bf18      	it	ne
 8003f94:	3203      	addne	r2, #3
 8003f96:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8003f9a:	f1c2 0320 	rsb	r3, r2, #32
 8003f9e:	fa00 fc03 	lsl.w	ip, r0, r3
 8003fa2:	fa20 f002 	lsr.w	r0, r0, r2
 8003fa6:	fa01 fe03 	lsl.w	lr, r1, r3
 8003faa:	ea40 000e 	orr.w	r0, r0, lr
 8003fae:	fa21 f102 	lsr.w	r1, r1, r2
 8003fb2:	4414      	add	r4, r2
 8003fb4:	e6bd      	b.n	8003d32 <__adddf3+0xe6>
 8003fb6:	bf00      	nop

08003fb8 <__aeabi_dmul>:
 8003fb8:	b570      	push	{r4, r5, r6, lr}
 8003fba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8003fbe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8003fc2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8003fc6:	bf1d      	ittte	ne
 8003fc8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8003fcc:	ea94 0f0c 	teqne	r4, ip
 8003fd0:	ea95 0f0c 	teqne	r5, ip
 8003fd4:	f000 f8de 	bleq	8004194 <__aeabi_dmul+0x1dc>
 8003fd8:	442c      	add	r4, r5
 8003fda:	ea81 0603 	eor.w	r6, r1, r3
 8003fde:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8003fe2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8003fe6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8003fea:	bf18      	it	ne
 8003fec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8003ff0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003ff4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ff8:	d038      	beq.n	800406c <__aeabi_dmul+0xb4>
 8003ffa:	fba0 ce02 	umull	ip, lr, r0, r2
 8003ffe:	f04f 0500 	mov.w	r5, #0
 8004002:	fbe1 e502 	umlal	lr, r5, r1, r2
 8004006:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800400a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800400e:	f04f 0600 	mov.w	r6, #0
 8004012:	fbe1 5603 	umlal	r5, r6, r1, r3
 8004016:	f09c 0f00 	teq	ip, #0
 800401a:	bf18      	it	ne
 800401c:	f04e 0e01 	orrne.w	lr, lr, #1
 8004020:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8004024:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8004028:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800402c:	d204      	bcs.n	8004038 <__aeabi_dmul+0x80>
 800402e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8004032:	416d      	adcs	r5, r5
 8004034:	eb46 0606 	adc.w	r6, r6, r6
 8004038:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800403c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8004040:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8004044:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8004048:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800404c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8004050:	bf88      	it	hi
 8004052:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8004056:	d81e      	bhi.n	8004096 <__aeabi_dmul+0xde>
 8004058:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800405c:	bf08      	it	eq
 800405e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8004062:	f150 0000 	adcs.w	r0, r0, #0
 8004066:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800406a:	bd70      	pop	{r4, r5, r6, pc}
 800406c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8004070:	ea46 0101 	orr.w	r1, r6, r1
 8004074:	ea40 0002 	orr.w	r0, r0, r2
 8004078:	ea81 0103 	eor.w	r1, r1, r3
 800407c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8004080:	bfc2      	ittt	gt
 8004082:	ebd4 050c 	rsbsgt	r5, r4, ip
 8004086:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800408a:	bd70      	popgt	{r4, r5, r6, pc}
 800408c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004090:	f04f 0e00 	mov.w	lr, #0
 8004094:	3c01      	subs	r4, #1
 8004096:	f300 80ab 	bgt.w	80041f0 <__aeabi_dmul+0x238>
 800409a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800409e:	bfde      	ittt	le
 80040a0:	2000      	movle	r0, #0
 80040a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80040a6:	bd70      	pople	{r4, r5, r6, pc}
 80040a8:	f1c4 0400 	rsb	r4, r4, #0
 80040ac:	3c20      	subs	r4, #32
 80040ae:	da35      	bge.n	800411c <__aeabi_dmul+0x164>
 80040b0:	340c      	adds	r4, #12
 80040b2:	dc1b      	bgt.n	80040ec <__aeabi_dmul+0x134>
 80040b4:	f104 0414 	add.w	r4, r4, #20
 80040b8:	f1c4 0520 	rsb	r5, r4, #32
 80040bc:	fa00 f305 	lsl.w	r3, r0, r5
 80040c0:	fa20 f004 	lsr.w	r0, r0, r4
 80040c4:	fa01 f205 	lsl.w	r2, r1, r5
 80040c8:	ea40 0002 	orr.w	r0, r0, r2
 80040cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80040d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80040d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80040d8:	fa21 f604 	lsr.w	r6, r1, r4
 80040dc:	eb42 0106 	adc.w	r1, r2, r6
 80040e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80040e4:	bf08      	it	eq
 80040e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80040ea:	bd70      	pop	{r4, r5, r6, pc}
 80040ec:	f1c4 040c 	rsb	r4, r4, #12
 80040f0:	f1c4 0520 	rsb	r5, r4, #32
 80040f4:	fa00 f304 	lsl.w	r3, r0, r4
 80040f8:	fa20 f005 	lsr.w	r0, r0, r5
 80040fc:	fa01 f204 	lsl.w	r2, r1, r4
 8004100:	ea40 0002 	orr.w	r0, r0, r2
 8004104:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8004108:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800410c:	f141 0100 	adc.w	r1, r1, #0
 8004110:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004114:	bf08      	it	eq
 8004116:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800411a:	bd70      	pop	{r4, r5, r6, pc}
 800411c:	f1c4 0520 	rsb	r5, r4, #32
 8004120:	fa00 f205 	lsl.w	r2, r0, r5
 8004124:	ea4e 0e02 	orr.w	lr, lr, r2
 8004128:	fa20 f304 	lsr.w	r3, r0, r4
 800412c:	fa01 f205 	lsl.w	r2, r1, r5
 8004130:	ea43 0302 	orr.w	r3, r3, r2
 8004134:	fa21 f004 	lsr.w	r0, r1, r4
 8004138:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800413c:	fa21 f204 	lsr.w	r2, r1, r4
 8004140:	ea20 0002 	bic.w	r0, r0, r2
 8004144:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8004148:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800414c:	bf08      	it	eq
 800414e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8004152:	bd70      	pop	{r4, r5, r6, pc}
 8004154:	f094 0f00 	teq	r4, #0
 8004158:	d10f      	bne.n	800417a <__aeabi_dmul+0x1c2>
 800415a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800415e:	0040      	lsls	r0, r0, #1
 8004160:	eb41 0101 	adc.w	r1, r1, r1
 8004164:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004168:	bf08      	it	eq
 800416a:	3c01      	subeq	r4, #1
 800416c:	d0f7      	beq.n	800415e <__aeabi_dmul+0x1a6>
 800416e:	ea41 0106 	orr.w	r1, r1, r6
 8004172:	f095 0f00 	teq	r5, #0
 8004176:	bf18      	it	ne
 8004178:	4770      	bxne	lr
 800417a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800417e:	0052      	lsls	r2, r2, #1
 8004180:	eb43 0303 	adc.w	r3, r3, r3
 8004184:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8004188:	bf08      	it	eq
 800418a:	3d01      	subeq	r5, #1
 800418c:	d0f7      	beq.n	800417e <__aeabi_dmul+0x1c6>
 800418e:	ea43 0306 	orr.w	r3, r3, r6
 8004192:	4770      	bx	lr
 8004194:	ea94 0f0c 	teq	r4, ip
 8004198:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800419c:	bf18      	it	ne
 800419e:	ea95 0f0c 	teqne	r5, ip
 80041a2:	d00c      	beq.n	80041be <__aeabi_dmul+0x206>
 80041a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80041a8:	bf18      	it	ne
 80041aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80041ae:	d1d1      	bne.n	8004154 <__aeabi_dmul+0x19c>
 80041b0:	ea81 0103 	eor.w	r1, r1, r3
 80041b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80041b8:	f04f 0000 	mov.w	r0, #0
 80041bc:	bd70      	pop	{r4, r5, r6, pc}
 80041be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80041c2:	bf06      	itte	eq
 80041c4:	4610      	moveq	r0, r2
 80041c6:	4619      	moveq	r1, r3
 80041c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80041cc:	d019      	beq.n	8004202 <__aeabi_dmul+0x24a>
 80041ce:	ea94 0f0c 	teq	r4, ip
 80041d2:	d102      	bne.n	80041da <__aeabi_dmul+0x222>
 80041d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80041d8:	d113      	bne.n	8004202 <__aeabi_dmul+0x24a>
 80041da:	ea95 0f0c 	teq	r5, ip
 80041de:	d105      	bne.n	80041ec <__aeabi_dmul+0x234>
 80041e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80041e4:	bf1c      	itt	ne
 80041e6:	4610      	movne	r0, r2
 80041e8:	4619      	movne	r1, r3
 80041ea:	d10a      	bne.n	8004202 <__aeabi_dmul+0x24a>
 80041ec:	ea81 0103 	eor.w	r1, r1, r3
 80041f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80041f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80041f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80041fc:	f04f 0000 	mov.w	r0, #0
 8004200:	bd70      	pop	{r4, r5, r6, pc}
 8004202:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8004206:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800420a:	bd70      	pop	{r4, r5, r6, pc}

0800420c <__aeabi_ddiv>:
 800420c:	b570      	push	{r4, r5, r6, lr}
 800420e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8004212:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8004216:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800421a:	bf1d      	ittte	ne
 800421c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8004220:	ea94 0f0c 	teqne	r4, ip
 8004224:	ea95 0f0c 	teqne	r5, ip
 8004228:	f000 f8a7 	bleq	800437a <__aeabi_ddiv+0x16e>
 800422c:	eba4 0405 	sub.w	r4, r4, r5
 8004230:	ea81 0e03 	eor.w	lr, r1, r3
 8004234:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8004238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800423c:	f000 8088 	beq.w	8004350 <__aeabi_ddiv+0x144>
 8004240:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8004244:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8004248:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800424c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8004250:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8004254:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8004258:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800425c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8004260:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8004264:	429d      	cmp	r5, r3
 8004266:	bf08      	it	eq
 8004268:	4296      	cmpeq	r6, r2
 800426a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800426e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8004272:	d202      	bcs.n	800427a <__aeabi_ddiv+0x6e>
 8004274:	085b      	lsrs	r3, r3, #1
 8004276:	ea4f 0232 	mov.w	r2, r2, rrx
 800427a:	1ab6      	subs	r6, r6, r2
 800427c:	eb65 0503 	sbc.w	r5, r5, r3
 8004280:	085b      	lsrs	r3, r3, #1
 8004282:	ea4f 0232 	mov.w	r2, r2, rrx
 8004286:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800428a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800428e:	ebb6 0e02 	subs.w	lr, r6, r2
 8004292:	eb75 0e03 	sbcs.w	lr, r5, r3
 8004296:	bf22      	ittt	cs
 8004298:	1ab6      	subcs	r6, r6, r2
 800429a:	4675      	movcs	r5, lr
 800429c:	ea40 000c 	orrcs.w	r0, r0, ip
 80042a0:	085b      	lsrs	r3, r3, #1
 80042a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80042a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80042aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80042ae:	bf22      	ittt	cs
 80042b0:	1ab6      	subcs	r6, r6, r2
 80042b2:	4675      	movcs	r5, lr
 80042b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80042b8:	085b      	lsrs	r3, r3, #1
 80042ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80042be:	ebb6 0e02 	subs.w	lr, r6, r2
 80042c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80042c6:	bf22      	ittt	cs
 80042c8:	1ab6      	subcs	r6, r6, r2
 80042ca:	4675      	movcs	r5, lr
 80042cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80042d0:	085b      	lsrs	r3, r3, #1
 80042d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80042d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80042da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80042de:	bf22      	ittt	cs
 80042e0:	1ab6      	subcs	r6, r6, r2
 80042e2:	4675      	movcs	r5, lr
 80042e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80042e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80042ec:	d018      	beq.n	8004320 <__aeabi_ddiv+0x114>
 80042ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80042f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80042f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80042fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80042fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8004302:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8004306:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800430a:	d1c0      	bne.n	800428e <__aeabi_ddiv+0x82>
 800430c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004310:	d10b      	bne.n	800432a <__aeabi_ddiv+0x11e>
 8004312:	ea41 0100 	orr.w	r1, r1, r0
 8004316:	f04f 0000 	mov.w	r0, #0
 800431a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800431e:	e7b6      	b.n	800428e <__aeabi_ddiv+0x82>
 8004320:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004324:	bf04      	itt	eq
 8004326:	4301      	orreq	r1, r0
 8004328:	2000      	moveq	r0, #0
 800432a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800432e:	bf88      	it	hi
 8004330:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8004334:	f63f aeaf 	bhi.w	8004096 <__aeabi_dmul+0xde>
 8004338:	ebb5 0c03 	subs.w	ip, r5, r3
 800433c:	bf04      	itt	eq
 800433e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8004342:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8004346:	f150 0000 	adcs.w	r0, r0, #0
 800434a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800434e:	bd70      	pop	{r4, r5, r6, pc}
 8004350:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8004354:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8004358:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800435c:	bfc2      	ittt	gt
 800435e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8004362:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8004366:	bd70      	popgt	{r4, r5, r6, pc}
 8004368:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800436c:	f04f 0e00 	mov.w	lr, #0
 8004370:	3c01      	subs	r4, #1
 8004372:	e690      	b.n	8004096 <__aeabi_dmul+0xde>
 8004374:	ea45 0e06 	orr.w	lr, r5, r6
 8004378:	e68d      	b.n	8004096 <__aeabi_dmul+0xde>
 800437a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800437e:	ea94 0f0c 	teq	r4, ip
 8004382:	bf08      	it	eq
 8004384:	ea95 0f0c 	teqeq	r5, ip
 8004388:	f43f af3b 	beq.w	8004202 <__aeabi_dmul+0x24a>
 800438c:	ea94 0f0c 	teq	r4, ip
 8004390:	d10a      	bne.n	80043a8 <__aeabi_ddiv+0x19c>
 8004392:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8004396:	f47f af34 	bne.w	8004202 <__aeabi_dmul+0x24a>
 800439a:	ea95 0f0c 	teq	r5, ip
 800439e:	f47f af25 	bne.w	80041ec <__aeabi_dmul+0x234>
 80043a2:	4610      	mov	r0, r2
 80043a4:	4619      	mov	r1, r3
 80043a6:	e72c      	b.n	8004202 <__aeabi_dmul+0x24a>
 80043a8:	ea95 0f0c 	teq	r5, ip
 80043ac:	d106      	bne.n	80043bc <__aeabi_ddiv+0x1b0>
 80043ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80043b2:	f43f aefd 	beq.w	80041b0 <__aeabi_dmul+0x1f8>
 80043b6:	4610      	mov	r0, r2
 80043b8:	4619      	mov	r1, r3
 80043ba:	e722      	b.n	8004202 <__aeabi_dmul+0x24a>
 80043bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80043c0:	bf18      	it	ne
 80043c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80043c6:	f47f aec5 	bne.w	8004154 <__aeabi_dmul+0x19c>
 80043ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80043ce:	f47f af0d 	bne.w	80041ec <__aeabi_dmul+0x234>
 80043d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80043d6:	f47f aeeb 	bne.w	80041b0 <__aeabi_dmul+0x1f8>
 80043da:	e712      	b.n	8004202 <__aeabi_dmul+0x24a>

080043dc <__gedf2>:
 80043dc:	f04f 3cff 	mov.w	ip, #4294967295
 80043e0:	e006      	b.n	80043f0 <__cmpdf2+0x4>
 80043e2:	bf00      	nop

080043e4 <__ledf2>:
 80043e4:	f04f 0c01 	mov.w	ip, #1
 80043e8:	e002      	b.n	80043f0 <__cmpdf2+0x4>
 80043ea:	bf00      	nop

080043ec <__cmpdf2>:
 80043ec:	f04f 0c01 	mov.w	ip, #1
 80043f0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80043f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80043f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80043fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004400:	bf18      	it	ne
 8004402:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8004406:	d01b      	beq.n	8004440 <__cmpdf2+0x54>
 8004408:	b001      	add	sp, #4
 800440a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800440e:	bf0c      	ite	eq
 8004410:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8004414:	ea91 0f03 	teqne	r1, r3
 8004418:	bf02      	ittt	eq
 800441a:	ea90 0f02 	teqeq	r0, r2
 800441e:	2000      	moveq	r0, #0
 8004420:	4770      	bxeq	lr
 8004422:	f110 0f00 	cmn.w	r0, #0
 8004426:	ea91 0f03 	teq	r1, r3
 800442a:	bf58      	it	pl
 800442c:	4299      	cmppl	r1, r3
 800442e:	bf08      	it	eq
 8004430:	4290      	cmpeq	r0, r2
 8004432:	bf2c      	ite	cs
 8004434:	17d8      	asrcs	r0, r3, #31
 8004436:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800443a:	f040 0001 	orr.w	r0, r0, #1
 800443e:	4770      	bx	lr
 8004440:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8004444:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004448:	d102      	bne.n	8004450 <__cmpdf2+0x64>
 800444a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800444e:	d107      	bne.n	8004460 <__cmpdf2+0x74>
 8004450:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004454:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004458:	d1d6      	bne.n	8004408 <__cmpdf2+0x1c>
 800445a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800445e:	d0d3      	beq.n	8004408 <__cmpdf2+0x1c>
 8004460:	f85d 0b04 	ldr.w	r0, [sp], #4
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop

08004468 <__aeabi_cdrcmple>:
 8004468:	4684      	mov	ip, r0
 800446a:	4610      	mov	r0, r2
 800446c:	4662      	mov	r2, ip
 800446e:	468c      	mov	ip, r1
 8004470:	4619      	mov	r1, r3
 8004472:	4663      	mov	r3, ip
 8004474:	e000      	b.n	8004478 <__aeabi_cdcmpeq>
 8004476:	bf00      	nop

08004478 <__aeabi_cdcmpeq>:
 8004478:	b501      	push	{r0, lr}
 800447a:	f7ff ffb7 	bl	80043ec <__cmpdf2>
 800447e:	2800      	cmp	r0, #0
 8004480:	bf48      	it	mi
 8004482:	f110 0f00 	cmnmi.w	r0, #0
 8004486:	bd01      	pop	{r0, pc}

08004488 <__aeabi_dcmpeq>:
 8004488:	f84d ed08 	str.w	lr, [sp, #-8]!
 800448c:	f7ff fff4 	bl	8004478 <__aeabi_cdcmpeq>
 8004490:	bf0c      	ite	eq
 8004492:	2001      	moveq	r0, #1
 8004494:	2000      	movne	r0, #0
 8004496:	f85d fb08 	ldr.w	pc, [sp], #8
 800449a:	bf00      	nop

0800449c <__aeabi_dcmplt>:
 800449c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80044a0:	f7ff ffea 	bl	8004478 <__aeabi_cdcmpeq>
 80044a4:	bf34      	ite	cc
 80044a6:	2001      	movcc	r0, #1
 80044a8:	2000      	movcs	r0, #0
 80044aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80044ae:	bf00      	nop

080044b0 <__aeabi_dcmple>:
 80044b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80044b4:	f7ff ffe0 	bl	8004478 <__aeabi_cdcmpeq>
 80044b8:	bf94      	ite	ls
 80044ba:	2001      	movls	r0, #1
 80044bc:	2000      	movhi	r0, #0
 80044be:	f85d fb08 	ldr.w	pc, [sp], #8
 80044c2:	bf00      	nop

080044c4 <__aeabi_dcmpge>:
 80044c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80044c8:	f7ff ffce 	bl	8004468 <__aeabi_cdrcmple>
 80044cc:	bf94      	ite	ls
 80044ce:	2001      	movls	r0, #1
 80044d0:	2000      	movhi	r0, #0
 80044d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80044d6:	bf00      	nop

080044d8 <__aeabi_dcmpgt>:
 80044d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80044dc:	f7ff ffc4 	bl	8004468 <__aeabi_cdrcmple>
 80044e0:	bf34      	ite	cc
 80044e2:	2001      	movcc	r0, #1
 80044e4:	2000      	movcs	r0, #0
 80044e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80044ea:	bf00      	nop

080044ec <__aeabi_dcmpun>:
 80044ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80044f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80044f4:	d102      	bne.n	80044fc <__aeabi_dcmpun+0x10>
 80044f6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80044fa:	d10a      	bne.n	8004512 <__aeabi_dcmpun+0x26>
 80044fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004500:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004504:	d102      	bne.n	800450c <__aeabi_dcmpun+0x20>
 8004506:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800450a:	d102      	bne.n	8004512 <__aeabi_dcmpun+0x26>
 800450c:	f04f 0000 	mov.w	r0, #0
 8004510:	4770      	bx	lr
 8004512:	f04f 0001 	mov.w	r0, #1
 8004516:	4770      	bx	lr

08004518 <__aeabi_d2iz>:
 8004518:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800451c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8004520:	d215      	bcs.n	800454e <__aeabi_d2iz+0x36>
 8004522:	d511      	bpl.n	8004548 <__aeabi_d2iz+0x30>
 8004524:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8004528:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800452c:	d912      	bls.n	8004554 <__aeabi_d2iz+0x3c>
 800452e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8004532:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004536:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800453a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800453e:	fa23 f002 	lsr.w	r0, r3, r2
 8004542:	bf18      	it	ne
 8004544:	4240      	negne	r0, r0
 8004546:	4770      	bx	lr
 8004548:	f04f 0000 	mov.w	r0, #0
 800454c:	4770      	bx	lr
 800454e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8004552:	d105      	bne.n	8004560 <__aeabi_d2iz+0x48>
 8004554:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8004558:	bf08      	it	eq
 800455a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800455e:	4770      	bx	lr
 8004560:	f04f 0000 	mov.w	r0, #0
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop

08004568 <__aeabi_d2f>:
 8004568:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800456c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8004570:	bf24      	itt	cs
 8004572:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8004576:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800457a:	d90d      	bls.n	8004598 <__aeabi_d2f+0x30>
 800457c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8004580:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8004584:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8004588:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800458c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8004590:	bf08      	it	eq
 8004592:	f020 0001 	biceq.w	r0, r0, #1
 8004596:	4770      	bx	lr
 8004598:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800459c:	d121      	bne.n	80045e2 <__aeabi_d2f+0x7a>
 800459e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80045a2:	bfbc      	itt	lt
 80045a4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80045a8:	4770      	bxlt	lr
 80045aa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80045ae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80045b2:	f1c2 0218 	rsb	r2, r2, #24
 80045b6:	f1c2 0c20 	rsb	ip, r2, #32
 80045ba:	fa10 f30c 	lsls.w	r3, r0, ip
 80045be:	fa20 f002 	lsr.w	r0, r0, r2
 80045c2:	bf18      	it	ne
 80045c4:	f040 0001 	orrne.w	r0, r0, #1
 80045c8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80045cc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80045d0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80045d4:	ea40 000c 	orr.w	r0, r0, ip
 80045d8:	fa23 f302 	lsr.w	r3, r3, r2
 80045dc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80045e0:	e7cc      	b.n	800457c <__aeabi_d2f+0x14>
 80045e2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80045e6:	d107      	bne.n	80045f8 <__aeabi_d2f+0x90>
 80045e8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80045ec:	bf1e      	ittt	ne
 80045ee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80045f2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80045f6:	4770      	bxne	lr
 80045f8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80045fc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8004600:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop

08004608 <__aeabi_uldivmod>:
 8004608:	b953      	cbnz	r3, 8004620 <__aeabi_uldivmod+0x18>
 800460a:	b94a      	cbnz	r2, 8004620 <__aeabi_uldivmod+0x18>
 800460c:	2900      	cmp	r1, #0
 800460e:	bf08      	it	eq
 8004610:	2800      	cmpeq	r0, #0
 8004612:	bf1c      	itt	ne
 8004614:	f04f 31ff 	movne.w	r1, #4294967295
 8004618:	f04f 30ff 	movne.w	r0, #4294967295
 800461c:	f000 b972 	b.w	8004904 <__aeabi_idiv0>
 8004620:	f1ad 0c08 	sub.w	ip, sp, #8
 8004624:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8004628:	f000 f806 	bl	8004638 <__udivmoddi4>
 800462c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8004630:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004634:	b004      	add	sp, #16
 8004636:	4770      	bx	lr

08004638 <__udivmoddi4>:
 8004638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800463c:	9e08      	ldr	r6, [sp, #32]
 800463e:	4604      	mov	r4, r0
 8004640:	4688      	mov	r8, r1
 8004642:	2b00      	cmp	r3, #0
 8004644:	d14b      	bne.n	80046de <__udivmoddi4+0xa6>
 8004646:	428a      	cmp	r2, r1
 8004648:	4615      	mov	r5, r2
 800464a:	d967      	bls.n	800471c <__udivmoddi4+0xe4>
 800464c:	fab2 f282 	clz	r2, r2
 8004650:	b14a      	cbz	r2, 8004666 <__udivmoddi4+0x2e>
 8004652:	f1c2 0720 	rsb	r7, r2, #32
 8004656:	fa01 f302 	lsl.w	r3, r1, r2
 800465a:	fa20 f707 	lsr.w	r7, r0, r7
 800465e:	4095      	lsls	r5, r2
 8004660:	ea47 0803 	orr.w	r8, r7, r3
 8004664:	4094      	lsls	r4, r2
 8004666:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800466a:	0c23      	lsrs	r3, r4, #16
 800466c:	fbb8 f7fe 	udiv	r7, r8, lr
 8004670:	fa1f fc85 	uxth.w	ip, r5
 8004674:	fb0e 8817 	mls	r8, lr, r7, r8
 8004678:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800467c:	fb07 f10c 	mul.w	r1, r7, ip
 8004680:	4299      	cmp	r1, r3
 8004682:	d909      	bls.n	8004698 <__udivmoddi4+0x60>
 8004684:	18eb      	adds	r3, r5, r3
 8004686:	f107 30ff 	add.w	r0, r7, #4294967295
 800468a:	f080 811b 	bcs.w	80048c4 <__udivmoddi4+0x28c>
 800468e:	4299      	cmp	r1, r3
 8004690:	f240 8118 	bls.w	80048c4 <__udivmoddi4+0x28c>
 8004694:	3f02      	subs	r7, #2
 8004696:	442b      	add	r3, r5
 8004698:	1a5b      	subs	r3, r3, r1
 800469a:	b2a4      	uxth	r4, r4
 800469c:	fbb3 f0fe 	udiv	r0, r3, lr
 80046a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80046a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80046a8:	fb00 fc0c 	mul.w	ip, r0, ip
 80046ac:	45a4      	cmp	ip, r4
 80046ae:	d909      	bls.n	80046c4 <__udivmoddi4+0x8c>
 80046b0:	192c      	adds	r4, r5, r4
 80046b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80046b6:	f080 8107 	bcs.w	80048c8 <__udivmoddi4+0x290>
 80046ba:	45a4      	cmp	ip, r4
 80046bc:	f240 8104 	bls.w	80048c8 <__udivmoddi4+0x290>
 80046c0:	3802      	subs	r0, #2
 80046c2:	442c      	add	r4, r5
 80046c4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80046c8:	eba4 040c 	sub.w	r4, r4, ip
 80046cc:	2700      	movs	r7, #0
 80046ce:	b11e      	cbz	r6, 80046d8 <__udivmoddi4+0xa0>
 80046d0:	40d4      	lsrs	r4, r2
 80046d2:	2300      	movs	r3, #0
 80046d4:	e9c6 4300 	strd	r4, r3, [r6]
 80046d8:	4639      	mov	r1, r7
 80046da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046de:	428b      	cmp	r3, r1
 80046e0:	d909      	bls.n	80046f6 <__udivmoddi4+0xbe>
 80046e2:	2e00      	cmp	r6, #0
 80046e4:	f000 80eb 	beq.w	80048be <__udivmoddi4+0x286>
 80046e8:	2700      	movs	r7, #0
 80046ea:	e9c6 0100 	strd	r0, r1, [r6]
 80046ee:	4638      	mov	r0, r7
 80046f0:	4639      	mov	r1, r7
 80046f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046f6:	fab3 f783 	clz	r7, r3
 80046fa:	2f00      	cmp	r7, #0
 80046fc:	d147      	bne.n	800478e <__udivmoddi4+0x156>
 80046fe:	428b      	cmp	r3, r1
 8004700:	d302      	bcc.n	8004708 <__udivmoddi4+0xd0>
 8004702:	4282      	cmp	r2, r0
 8004704:	f200 80fa 	bhi.w	80048fc <__udivmoddi4+0x2c4>
 8004708:	1a84      	subs	r4, r0, r2
 800470a:	eb61 0303 	sbc.w	r3, r1, r3
 800470e:	2001      	movs	r0, #1
 8004710:	4698      	mov	r8, r3
 8004712:	2e00      	cmp	r6, #0
 8004714:	d0e0      	beq.n	80046d8 <__udivmoddi4+0xa0>
 8004716:	e9c6 4800 	strd	r4, r8, [r6]
 800471a:	e7dd      	b.n	80046d8 <__udivmoddi4+0xa0>
 800471c:	b902      	cbnz	r2, 8004720 <__udivmoddi4+0xe8>
 800471e:	deff      	udf	#255	; 0xff
 8004720:	fab2 f282 	clz	r2, r2
 8004724:	2a00      	cmp	r2, #0
 8004726:	f040 808f 	bne.w	8004848 <__udivmoddi4+0x210>
 800472a:	1b49      	subs	r1, r1, r5
 800472c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8004730:	fa1f f885 	uxth.w	r8, r5
 8004734:	2701      	movs	r7, #1
 8004736:	fbb1 fcfe 	udiv	ip, r1, lr
 800473a:	0c23      	lsrs	r3, r4, #16
 800473c:	fb0e 111c 	mls	r1, lr, ip, r1
 8004740:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8004744:	fb08 f10c 	mul.w	r1, r8, ip
 8004748:	4299      	cmp	r1, r3
 800474a:	d907      	bls.n	800475c <__udivmoddi4+0x124>
 800474c:	18eb      	adds	r3, r5, r3
 800474e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8004752:	d202      	bcs.n	800475a <__udivmoddi4+0x122>
 8004754:	4299      	cmp	r1, r3
 8004756:	f200 80cd 	bhi.w	80048f4 <__udivmoddi4+0x2bc>
 800475a:	4684      	mov	ip, r0
 800475c:	1a59      	subs	r1, r3, r1
 800475e:	b2a3      	uxth	r3, r4
 8004760:	fbb1 f0fe 	udiv	r0, r1, lr
 8004764:	fb0e 1410 	mls	r4, lr, r0, r1
 8004768:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800476c:	fb08 f800 	mul.w	r8, r8, r0
 8004770:	45a0      	cmp	r8, r4
 8004772:	d907      	bls.n	8004784 <__udivmoddi4+0x14c>
 8004774:	192c      	adds	r4, r5, r4
 8004776:	f100 33ff 	add.w	r3, r0, #4294967295
 800477a:	d202      	bcs.n	8004782 <__udivmoddi4+0x14a>
 800477c:	45a0      	cmp	r8, r4
 800477e:	f200 80b6 	bhi.w	80048ee <__udivmoddi4+0x2b6>
 8004782:	4618      	mov	r0, r3
 8004784:	eba4 0408 	sub.w	r4, r4, r8
 8004788:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800478c:	e79f      	b.n	80046ce <__udivmoddi4+0x96>
 800478e:	f1c7 0c20 	rsb	ip, r7, #32
 8004792:	40bb      	lsls	r3, r7
 8004794:	fa22 fe0c 	lsr.w	lr, r2, ip
 8004798:	ea4e 0e03 	orr.w	lr, lr, r3
 800479c:	fa01 f407 	lsl.w	r4, r1, r7
 80047a0:	fa20 f50c 	lsr.w	r5, r0, ip
 80047a4:	fa21 f30c 	lsr.w	r3, r1, ip
 80047a8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80047ac:	4325      	orrs	r5, r4
 80047ae:	fbb3 f9f8 	udiv	r9, r3, r8
 80047b2:	0c2c      	lsrs	r4, r5, #16
 80047b4:	fb08 3319 	mls	r3, r8, r9, r3
 80047b8:	fa1f fa8e 	uxth.w	sl, lr
 80047bc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80047c0:	fb09 f40a 	mul.w	r4, r9, sl
 80047c4:	429c      	cmp	r4, r3
 80047c6:	fa02 f207 	lsl.w	r2, r2, r7
 80047ca:	fa00 f107 	lsl.w	r1, r0, r7
 80047ce:	d90b      	bls.n	80047e8 <__udivmoddi4+0x1b0>
 80047d0:	eb1e 0303 	adds.w	r3, lr, r3
 80047d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80047d8:	f080 8087 	bcs.w	80048ea <__udivmoddi4+0x2b2>
 80047dc:	429c      	cmp	r4, r3
 80047de:	f240 8084 	bls.w	80048ea <__udivmoddi4+0x2b2>
 80047e2:	f1a9 0902 	sub.w	r9, r9, #2
 80047e6:	4473      	add	r3, lr
 80047e8:	1b1b      	subs	r3, r3, r4
 80047ea:	b2ad      	uxth	r5, r5
 80047ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80047f0:	fb08 3310 	mls	r3, r8, r0, r3
 80047f4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80047f8:	fb00 fa0a 	mul.w	sl, r0, sl
 80047fc:	45a2      	cmp	sl, r4
 80047fe:	d908      	bls.n	8004812 <__udivmoddi4+0x1da>
 8004800:	eb1e 0404 	adds.w	r4, lr, r4
 8004804:	f100 33ff 	add.w	r3, r0, #4294967295
 8004808:	d26b      	bcs.n	80048e2 <__udivmoddi4+0x2aa>
 800480a:	45a2      	cmp	sl, r4
 800480c:	d969      	bls.n	80048e2 <__udivmoddi4+0x2aa>
 800480e:	3802      	subs	r0, #2
 8004810:	4474      	add	r4, lr
 8004812:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8004816:	fba0 8902 	umull	r8, r9, r0, r2
 800481a:	eba4 040a 	sub.w	r4, r4, sl
 800481e:	454c      	cmp	r4, r9
 8004820:	46c2      	mov	sl, r8
 8004822:	464b      	mov	r3, r9
 8004824:	d354      	bcc.n	80048d0 <__udivmoddi4+0x298>
 8004826:	d051      	beq.n	80048cc <__udivmoddi4+0x294>
 8004828:	2e00      	cmp	r6, #0
 800482a:	d069      	beq.n	8004900 <__udivmoddi4+0x2c8>
 800482c:	ebb1 050a 	subs.w	r5, r1, sl
 8004830:	eb64 0403 	sbc.w	r4, r4, r3
 8004834:	fa04 fc0c 	lsl.w	ip, r4, ip
 8004838:	40fd      	lsrs	r5, r7
 800483a:	40fc      	lsrs	r4, r7
 800483c:	ea4c 0505 	orr.w	r5, ip, r5
 8004840:	e9c6 5400 	strd	r5, r4, [r6]
 8004844:	2700      	movs	r7, #0
 8004846:	e747      	b.n	80046d8 <__udivmoddi4+0xa0>
 8004848:	f1c2 0320 	rsb	r3, r2, #32
 800484c:	fa20 f703 	lsr.w	r7, r0, r3
 8004850:	4095      	lsls	r5, r2
 8004852:	fa01 f002 	lsl.w	r0, r1, r2
 8004856:	fa21 f303 	lsr.w	r3, r1, r3
 800485a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800485e:	4338      	orrs	r0, r7
 8004860:	0c01      	lsrs	r1, r0, #16
 8004862:	fbb3 f7fe 	udiv	r7, r3, lr
 8004866:	fa1f f885 	uxth.w	r8, r5
 800486a:	fb0e 3317 	mls	r3, lr, r7, r3
 800486e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8004872:	fb07 f308 	mul.w	r3, r7, r8
 8004876:	428b      	cmp	r3, r1
 8004878:	fa04 f402 	lsl.w	r4, r4, r2
 800487c:	d907      	bls.n	800488e <__udivmoddi4+0x256>
 800487e:	1869      	adds	r1, r5, r1
 8004880:	f107 3cff 	add.w	ip, r7, #4294967295
 8004884:	d22f      	bcs.n	80048e6 <__udivmoddi4+0x2ae>
 8004886:	428b      	cmp	r3, r1
 8004888:	d92d      	bls.n	80048e6 <__udivmoddi4+0x2ae>
 800488a:	3f02      	subs	r7, #2
 800488c:	4429      	add	r1, r5
 800488e:	1acb      	subs	r3, r1, r3
 8004890:	b281      	uxth	r1, r0
 8004892:	fbb3 f0fe 	udiv	r0, r3, lr
 8004896:	fb0e 3310 	mls	r3, lr, r0, r3
 800489a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800489e:	fb00 f308 	mul.w	r3, r0, r8
 80048a2:	428b      	cmp	r3, r1
 80048a4:	d907      	bls.n	80048b6 <__udivmoddi4+0x27e>
 80048a6:	1869      	adds	r1, r5, r1
 80048a8:	f100 3cff 	add.w	ip, r0, #4294967295
 80048ac:	d217      	bcs.n	80048de <__udivmoddi4+0x2a6>
 80048ae:	428b      	cmp	r3, r1
 80048b0:	d915      	bls.n	80048de <__udivmoddi4+0x2a6>
 80048b2:	3802      	subs	r0, #2
 80048b4:	4429      	add	r1, r5
 80048b6:	1ac9      	subs	r1, r1, r3
 80048b8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80048bc:	e73b      	b.n	8004736 <__udivmoddi4+0xfe>
 80048be:	4637      	mov	r7, r6
 80048c0:	4630      	mov	r0, r6
 80048c2:	e709      	b.n	80046d8 <__udivmoddi4+0xa0>
 80048c4:	4607      	mov	r7, r0
 80048c6:	e6e7      	b.n	8004698 <__udivmoddi4+0x60>
 80048c8:	4618      	mov	r0, r3
 80048ca:	e6fb      	b.n	80046c4 <__udivmoddi4+0x8c>
 80048cc:	4541      	cmp	r1, r8
 80048ce:	d2ab      	bcs.n	8004828 <__udivmoddi4+0x1f0>
 80048d0:	ebb8 0a02 	subs.w	sl, r8, r2
 80048d4:	eb69 020e 	sbc.w	r2, r9, lr
 80048d8:	3801      	subs	r0, #1
 80048da:	4613      	mov	r3, r2
 80048dc:	e7a4      	b.n	8004828 <__udivmoddi4+0x1f0>
 80048de:	4660      	mov	r0, ip
 80048e0:	e7e9      	b.n	80048b6 <__udivmoddi4+0x27e>
 80048e2:	4618      	mov	r0, r3
 80048e4:	e795      	b.n	8004812 <__udivmoddi4+0x1da>
 80048e6:	4667      	mov	r7, ip
 80048e8:	e7d1      	b.n	800488e <__udivmoddi4+0x256>
 80048ea:	4681      	mov	r9, r0
 80048ec:	e77c      	b.n	80047e8 <__udivmoddi4+0x1b0>
 80048ee:	3802      	subs	r0, #2
 80048f0:	442c      	add	r4, r5
 80048f2:	e747      	b.n	8004784 <__udivmoddi4+0x14c>
 80048f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80048f8:	442b      	add	r3, r5
 80048fa:	e72f      	b.n	800475c <__udivmoddi4+0x124>
 80048fc:	4638      	mov	r0, r7
 80048fe:	e708      	b.n	8004712 <__udivmoddi4+0xda>
 8004900:	4637      	mov	r7, r6
 8004902:	e6e9      	b.n	80046d8 <__udivmoddi4+0xa0>

08004904 <__aeabi_idiv0>:
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop

08004908 <arm_dot_prod_f32>:
void arm_dot_prod_f32(
  float32_t * pSrcA,
  float32_t * pSrcB,
  uint32_t blockSize,
  float32_t * result)
{
 8004908:	b480      	push	{r7}
 800490a:	b087      	sub	sp, #28
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	607a      	str	r2, [r7, #4]
 8004914:	603b      	str	r3, [r7, #0]
  float32_t sum = 0.0f;                          /* Temporary result storage */
 8004916:	f04f 0300 	mov.w	r3, #0
 800491a:	617b      	str	r3, [r7, #20]

#if defined (ARM_MATH_DSP)

/* Run the below code for Cortex-M4 and Cortex-M3 */
  /*loop Unrolling */
  blkCnt = blockSize >> 2U;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	089b      	lsrs	r3, r3, #2
 8004920:	613b      	str	r3, [r7, #16]

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 8004922:	e04a      	b.n	80049ba <arm_dot_prod_f32+0xb2>
  {
    /* C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1] */
    /* Calculate dot product and then store the result in a temporary buffer */
    sum += (*pSrcA++) * (*pSrcB++);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	1d1a      	adds	r2, r3, #4
 8004928:	60fa      	str	r2, [r7, #12]
 800492a:	ed93 7a00 	vldr	s14, [r3]
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	1d1a      	adds	r2, r3, #4
 8004932:	60ba      	str	r2, [r7, #8]
 8004934:	edd3 7a00 	vldr	s15, [r3]
 8004938:	ee67 7a27 	vmul.f32	s15, s14, s15
 800493c:	ed97 7a05 	vldr	s14, [r7, #20]
 8004940:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004944:	edc7 7a05 	vstr	s15, [r7, #20]
    sum += (*pSrcA++) * (*pSrcB++);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	1d1a      	adds	r2, r3, #4
 800494c:	60fa      	str	r2, [r7, #12]
 800494e:	ed93 7a00 	vldr	s14, [r3]
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	1d1a      	adds	r2, r3, #4
 8004956:	60ba      	str	r2, [r7, #8]
 8004958:	edd3 7a00 	vldr	s15, [r3]
 800495c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004960:	ed97 7a05 	vldr	s14, [r7, #20]
 8004964:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004968:	edc7 7a05 	vstr	s15, [r7, #20]
    sum += (*pSrcA++) * (*pSrcB++);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	1d1a      	adds	r2, r3, #4
 8004970:	60fa      	str	r2, [r7, #12]
 8004972:	ed93 7a00 	vldr	s14, [r3]
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	1d1a      	adds	r2, r3, #4
 800497a:	60ba      	str	r2, [r7, #8]
 800497c:	edd3 7a00 	vldr	s15, [r3]
 8004980:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004984:	ed97 7a05 	vldr	s14, [r7, #20]
 8004988:	ee77 7a27 	vadd.f32	s15, s14, s15
 800498c:	edc7 7a05 	vstr	s15, [r7, #20]
    sum += (*pSrcA++) * (*pSrcB++);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	1d1a      	adds	r2, r3, #4
 8004994:	60fa      	str	r2, [r7, #12]
 8004996:	ed93 7a00 	vldr	s14, [r3]
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	1d1a      	adds	r2, r3, #4
 800499e:	60ba      	str	r2, [r7, #8]
 80049a0:	edd3 7a00 	vldr	s15, [r3]
 80049a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049a8:	ed97 7a05 	vldr	s14, [r7, #20]
 80049ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049b0:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Decrement the loop counter */
    blkCnt--;
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	3b01      	subs	r3, #1
 80049b8:	613b      	str	r3, [r7, #16]
  while (blkCnt > 0U)
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d1b1      	bne.n	8004924 <arm_dot_prod_f32+0x1c>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4U;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f003 0303 	and.w	r3, r3, #3
 80049c6:	613b      	str	r3, [r7, #16]
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_DSP) */


  while (blkCnt > 0U)
 80049c8:	e014      	b.n	80049f4 <arm_dot_prod_f32+0xec>
  {
    /* C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1] */
    /* Calculate dot product and then store the result in a temporary buffer. */
    sum += (*pSrcA++) * (*pSrcB++);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	1d1a      	adds	r2, r3, #4
 80049ce:	60fa      	str	r2, [r7, #12]
 80049d0:	ed93 7a00 	vldr	s14, [r3]
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	1d1a      	adds	r2, r3, #4
 80049d8:	60ba      	str	r2, [r7, #8]
 80049da:	edd3 7a00 	vldr	s15, [r3]
 80049de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049e2:	ed97 7a05 	vldr	s14, [r7, #20]
 80049e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049ea:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Decrement the loop counter */
    blkCnt--;
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	3b01      	subs	r3, #1
 80049f2:	613b      	str	r3, [r7, #16]
  while (blkCnt > 0U)
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1e7      	bne.n	80049ca <arm_dot_prod_f32+0xc2>
  }
  /* Store the result back in the destination buffer */
  *result = sum;
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	697a      	ldr	r2, [r7, #20]
 80049fe:	601a      	str	r2, [r3, #0]
}
 8004a00:	bf00      	nop
 8004a02:	371c      	adds	r7, #28
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b085      	sub	sp, #20
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	607b      	str	r3, [r7, #4]
 8004a16:	460b      	mov	r3, r1
 8004a18:	817b      	strh	r3, [r7, #10]
 8004a1a:	4613      	mov	r3, r2
 8004a1c:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	897a      	ldrh	r2, [r7, #10]
 8004a22:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	893a      	ldrh	r2, [r7, #8]
 8004a28:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	605a      	str	r2, [r3, #4]
}
 8004a30:	bf00      	nop
 8004a32:	3714      	adds	r7, #20
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004a40:	4b0e      	ldr	r3, [pc, #56]	; (8004a7c <HAL_Init+0x40>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a0d      	ldr	r2, [pc, #52]	; (8004a7c <HAL_Init+0x40>)
 8004a46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004a4c:	4b0b      	ldr	r3, [pc, #44]	; (8004a7c <HAL_Init+0x40>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a0a      	ldr	r2, [pc, #40]	; (8004a7c <HAL_Init+0x40>)
 8004a52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004a58:	4b08      	ldr	r3, [pc, #32]	; (8004a7c <HAL_Init+0x40>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a07      	ldr	r2, [pc, #28]	; (8004a7c <HAL_Init+0x40>)
 8004a5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a64:	2003      	movs	r0, #3
 8004a66:	f000 f92f 	bl	8004cc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004a6a:	2000      	movs	r0, #0
 8004a6c:	f000 f808 	bl	8004a80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004a70:	f002 f8c6 	bl	8006c00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	40023c00 	.word	0x40023c00

08004a80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004a88:	4b12      	ldr	r3, [pc, #72]	; (8004ad4 <HAL_InitTick+0x54>)
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	4b12      	ldr	r3, [pc, #72]	; (8004ad8 <HAL_InitTick+0x58>)
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	4619      	mov	r1, r3
 8004a92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a96:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f000 f939 	bl	8004d16 <HAL_SYSTICK_Config>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d001      	beq.n	8004aae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e00e      	b.n	8004acc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2b0f      	cmp	r3, #15
 8004ab2:	d80a      	bhi.n	8004aca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	6879      	ldr	r1, [r7, #4]
 8004ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8004abc:	f000 f90f 	bl	8004cde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004ac0:	4a06      	ldr	r2, [pc, #24]	; (8004adc <HAL_InitTick+0x5c>)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	e000      	b.n	8004acc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3708      	adds	r7, #8
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	20000558 	.word	0x20000558
 8004ad8:	20000004 	.word	0x20000004
 8004adc:	20000000 	.word	0x20000000

08004ae0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004ae4:	4b06      	ldr	r3, [pc, #24]	; (8004b00 <HAL_IncTick+0x20>)
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	461a      	mov	r2, r3
 8004aea:	4b06      	ldr	r3, [pc, #24]	; (8004b04 <HAL_IncTick+0x24>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4413      	add	r3, r2
 8004af0:	4a04      	ldr	r2, [pc, #16]	; (8004b04 <HAL_IncTick+0x24>)
 8004af2:	6013      	str	r3, [r2, #0]
}
 8004af4:	bf00      	nop
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	20000004 	.word	0x20000004
 8004b04:	200007ec 	.word	0x200007ec

08004b08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	af00      	add	r7, sp, #0
  return uwTick;
 8004b0c:	4b03      	ldr	r3, [pc, #12]	; (8004b1c <HAL_GetTick+0x14>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	200007ec 	.word	0x200007ec

08004b20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004b28:	f7ff ffee 	bl	8004b08 <HAL_GetTick>
 8004b2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b38:	d005      	beq.n	8004b46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004b3a:	4b09      	ldr	r3, [pc, #36]	; (8004b60 <HAL_Delay+0x40>)
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	461a      	mov	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	4413      	add	r3, r2
 8004b44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004b46:	bf00      	nop
 8004b48:	f7ff ffde 	bl	8004b08 <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d8f7      	bhi.n	8004b48 <HAL_Delay+0x28>
  {
  }
}
 8004b58:	bf00      	nop
 8004b5a:	3710      	adds	r7, #16
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	20000004 	.word	0x20000004

08004b64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b085      	sub	sp, #20
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f003 0307 	and.w	r3, r3, #7
 8004b72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b74:	4b0c      	ldr	r3, [pc, #48]	; (8004ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b7a:	68ba      	ldr	r2, [r7, #8]
 8004b7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b80:	4013      	ands	r3, r2
 8004b82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004b90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b96:	4a04      	ldr	r2, [pc, #16]	; (8004ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	60d3      	str	r3, [r2, #12]
}
 8004b9c:	bf00      	nop
 8004b9e:	3714      	adds	r7, #20
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr
 8004ba8:	e000ed00 	.word	0xe000ed00

08004bac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004bac:	b480      	push	{r7}
 8004bae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004bb0:	4b04      	ldr	r3, [pc, #16]	; (8004bc4 <__NVIC_GetPriorityGrouping+0x18>)
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	0a1b      	lsrs	r3, r3, #8
 8004bb6:	f003 0307 	and.w	r3, r3, #7
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr
 8004bc4:	e000ed00 	.word	0xe000ed00

08004bc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	4603      	mov	r3, r0
 8004bd0:	6039      	str	r1, [r7, #0]
 8004bd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	db0a      	blt.n	8004bf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	b2da      	uxtb	r2, r3
 8004be0:	490c      	ldr	r1, [pc, #48]	; (8004c14 <__NVIC_SetPriority+0x4c>)
 8004be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004be6:	0112      	lsls	r2, r2, #4
 8004be8:	b2d2      	uxtb	r2, r2
 8004bea:	440b      	add	r3, r1
 8004bec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004bf0:	e00a      	b.n	8004c08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	b2da      	uxtb	r2, r3
 8004bf6:	4908      	ldr	r1, [pc, #32]	; (8004c18 <__NVIC_SetPriority+0x50>)
 8004bf8:	79fb      	ldrb	r3, [r7, #7]
 8004bfa:	f003 030f 	and.w	r3, r3, #15
 8004bfe:	3b04      	subs	r3, #4
 8004c00:	0112      	lsls	r2, r2, #4
 8004c02:	b2d2      	uxtb	r2, r2
 8004c04:	440b      	add	r3, r1
 8004c06:	761a      	strb	r2, [r3, #24]
}
 8004c08:	bf00      	nop
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr
 8004c14:	e000e100 	.word	0xe000e100
 8004c18:	e000ed00 	.word	0xe000ed00

08004c1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b089      	sub	sp, #36	; 0x24
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f003 0307 	and.w	r3, r3, #7
 8004c2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	f1c3 0307 	rsb	r3, r3, #7
 8004c36:	2b04      	cmp	r3, #4
 8004c38:	bf28      	it	cs
 8004c3a:	2304      	movcs	r3, #4
 8004c3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	3304      	adds	r3, #4
 8004c42:	2b06      	cmp	r3, #6
 8004c44:	d902      	bls.n	8004c4c <NVIC_EncodePriority+0x30>
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	3b03      	subs	r3, #3
 8004c4a:	e000      	b.n	8004c4e <NVIC_EncodePriority+0x32>
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c50:	f04f 32ff 	mov.w	r2, #4294967295
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	fa02 f303 	lsl.w	r3, r2, r3
 8004c5a:	43da      	mvns	r2, r3
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	401a      	ands	r2, r3
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c64:	f04f 31ff 	mov.w	r1, #4294967295
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c6e:	43d9      	mvns	r1, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c74:	4313      	orrs	r3, r2
         );
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3724      	adds	r7, #36	; 0x24
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
	...

08004c84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b082      	sub	sp, #8
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c94:	d301      	bcc.n	8004c9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c96:	2301      	movs	r3, #1
 8004c98:	e00f      	b.n	8004cba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c9a:	4a0a      	ldr	r2, [pc, #40]	; (8004cc4 <SysTick_Config+0x40>)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ca2:	210f      	movs	r1, #15
 8004ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ca8:	f7ff ff8e 	bl	8004bc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004cac:	4b05      	ldr	r3, [pc, #20]	; (8004cc4 <SysTick_Config+0x40>)
 8004cae:	2200      	movs	r2, #0
 8004cb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004cb2:	4b04      	ldr	r3, [pc, #16]	; (8004cc4 <SysTick_Config+0x40>)
 8004cb4:	2207      	movs	r2, #7
 8004cb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3708      	adds	r7, #8
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	e000e010 	.word	0xe000e010

08004cc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f7ff ff47 	bl	8004b64 <__NVIC_SetPriorityGrouping>
}
 8004cd6:	bf00      	nop
 8004cd8:	3708      	adds	r7, #8
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}

08004cde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004cde:	b580      	push	{r7, lr}
 8004ce0:	b086      	sub	sp, #24
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	60b9      	str	r1, [r7, #8]
 8004ce8:	607a      	str	r2, [r7, #4]
 8004cea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004cec:	2300      	movs	r3, #0
 8004cee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004cf0:	f7ff ff5c 	bl	8004bac <__NVIC_GetPriorityGrouping>
 8004cf4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	68b9      	ldr	r1, [r7, #8]
 8004cfa:	6978      	ldr	r0, [r7, #20]
 8004cfc:	f7ff ff8e 	bl	8004c1c <NVIC_EncodePriority>
 8004d00:	4602      	mov	r2, r0
 8004d02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d06:	4611      	mov	r1, r2
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f7ff ff5d 	bl	8004bc8 <__NVIC_SetPriority>
}
 8004d0e:	bf00      	nop
 8004d10:	3718      	adds	r7, #24
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}

08004d16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d16:	b580      	push	{r7, lr}
 8004d18:	b082      	sub	sp, #8
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f7ff ffb0 	bl	8004c84 <SysTick_Config>
 8004d24:	4603      	mov	r3, r0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3708      	adds	r7, #8
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}

08004d2e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004d2e:	b580      	push	{r7, lr}
 8004d30:	b082      	sub	sp, #8
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d101      	bne.n	8004d40 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e011      	b.n	8004d64 <HAL_CRC_Init+0x36>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	795b      	ldrb	r3, [r3, #5]
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d105      	bne.n	8004d56 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f001 ff7d 	bl	8006c50 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2202      	movs	r2, #2
 8004d5a:	715a      	strb	r2, [r3, #5]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004d62:	2300      	movs	r3, #0
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3708      	adds	r7, #8
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b089      	sub	sp, #36	; 0x24
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004d76:	2300      	movs	r3, #0
 8004d78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d82:	2300      	movs	r3, #0
 8004d84:	61fb      	str	r3, [r7, #28]
 8004d86:	e165      	b.n	8005054 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004d88:	2201      	movs	r2, #1
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	697a      	ldr	r2, [r7, #20]
 8004d98:	4013      	ands	r3, r2
 8004d9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004d9c:	693a      	ldr	r2, [r7, #16]
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	f040 8154 	bne.w	800504e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d003      	beq.n	8004db6 <HAL_GPIO_Init+0x4a>
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	2b12      	cmp	r3, #18
 8004db4:	d123      	bne.n	8004dfe <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	08da      	lsrs	r2, r3, #3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	3208      	adds	r2, #8
 8004dbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	f003 0307 	and.w	r3, r3, #7
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	220f      	movs	r2, #15
 8004dce:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd2:	43db      	mvns	r3, r3
 8004dd4:	69ba      	ldr	r2, [r7, #24]
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	691a      	ldr	r2, [r3, #16]
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	f003 0307 	and.w	r3, r3, #7
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dea:	69ba      	ldr	r2, [r7, #24]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	08da      	lsrs	r2, r3, #3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	3208      	adds	r2, #8
 8004df8:	69b9      	ldr	r1, [r7, #24]
 8004dfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	005b      	lsls	r3, r3, #1
 8004e08:	2203      	movs	r2, #3
 8004e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0e:	43db      	mvns	r3, r3
 8004e10:	69ba      	ldr	r2, [r7, #24]
 8004e12:	4013      	ands	r3, r2
 8004e14:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	f003 0203 	and.w	r2, r3, #3
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	005b      	lsls	r3, r3, #1
 8004e22:	fa02 f303 	lsl.w	r3, r2, r3
 8004e26:	69ba      	ldr	r2, [r7, #24]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	69ba      	ldr	r2, [r7, #24]
 8004e30:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d00b      	beq.n	8004e52 <HAL_GPIO_Init+0xe6>
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d007      	beq.n	8004e52 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004e46:	2b11      	cmp	r3, #17
 8004e48:	d003      	beq.n	8004e52 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	2b12      	cmp	r3, #18
 8004e50:	d130      	bne.n	8004eb4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	005b      	lsls	r3, r3, #1
 8004e5c:	2203      	movs	r2, #3
 8004e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e62:	43db      	mvns	r3, r3
 8004e64:	69ba      	ldr	r2, [r7, #24]
 8004e66:	4013      	ands	r3, r2
 8004e68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	68da      	ldr	r2, [r3, #12]
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	005b      	lsls	r3, r3, #1
 8004e72:	fa02 f303 	lsl.w	r3, r2, r3
 8004e76:	69ba      	ldr	r2, [r7, #24]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	69ba      	ldr	r2, [r7, #24]
 8004e80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e88:	2201      	movs	r2, #1
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e90:	43db      	mvns	r3, r3
 8004e92:	69ba      	ldr	r2, [r7, #24]
 8004e94:	4013      	ands	r3, r2
 8004e96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	091b      	lsrs	r3, r3, #4
 8004e9e:	f003 0201 	and.w	r2, r3, #1
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea8:	69ba      	ldr	r2, [r7, #24]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	69ba      	ldr	r2, [r7, #24]
 8004eb2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	005b      	lsls	r3, r3, #1
 8004ebe:	2203      	movs	r2, #3
 8004ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec4:	43db      	mvns	r3, r3
 8004ec6:	69ba      	ldr	r2, [r7, #24]
 8004ec8:	4013      	ands	r3, r2
 8004eca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	689a      	ldr	r2, [r3, #8]
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	005b      	lsls	r3, r3, #1
 8004ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed8:	69ba      	ldr	r2, [r7, #24]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	69ba      	ldr	r2, [r7, #24]
 8004ee2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	f000 80ae 	beq.w	800504e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	60fb      	str	r3, [r7, #12]
 8004ef6:	4b5c      	ldr	r3, [pc, #368]	; (8005068 <HAL_GPIO_Init+0x2fc>)
 8004ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004efa:	4a5b      	ldr	r2, [pc, #364]	; (8005068 <HAL_GPIO_Init+0x2fc>)
 8004efc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f00:	6453      	str	r3, [r2, #68]	; 0x44
 8004f02:	4b59      	ldr	r3, [pc, #356]	; (8005068 <HAL_GPIO_Init+0x2fc>)
 8004f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f0a:	60fb      	str	r3, [r7, #12]
 8004f0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f0e:	4a57      	ldr	r2, [pc, #348]	; (800506c <HAL_GPIO_Init+0x300>)
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	089b      	lsrs	r3, r3, #2
 8004f14:	3302      	adds	r3, #2
 8004f16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	f003 0303 	and.w	r3, r3, #3
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	220f      	movs	r2, #15
 8004f26:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2a:	43db      	mvns	r3, r3
 8004f2c:	69ba      	ldr	r2, [r7, #24]
 8004f2e:	4013      	ands	r3, r2
 8004f30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a4e      	ldr	r2, [pc, #312]	; (8005070 <HAL_GPIO_Init+0x304>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d025      	beq.n	8004f86 <HAL_GPIO_Init+0x21a>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a4d      	ldr	r2, [pc, #308]	; (8005074 <HAL_GPIO_Init+0x308>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d01f      	beq.n	8004f82 <HAL_GPIO_Init+0x216>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a4c      	ldr	r2, [pc, #304]	; (8005078 <HAL_GPIO_Init+0x30c>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d019      	beq.n	8004f7e <HAL_GPIO_Init+0x212>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a4b      	ldr	r2, [pc, #300]	; (800507c <HAL_GPIO_Init+0x310>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d013      	beq.n	8004f7a <HAL_GPIO_Init+0x20e>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a4a      	ldr	r2, [pc, #296]	; (8005080 <HAL_GPIO_Init+0x314>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d00d      	beq.n	8004f76 <HAL_GPIO_Init+0x20a>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a49      	ldr	r2, [pc, #292]	; (8005084 <HAL_GPIO_Init+0x318>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d007      	beq.n	8004f72 <HAL_GPIO_Init+0x206>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a48      	ldr	r2, [pc, #288]	; (8005088 <HAL_GPIO_Init+0x31c>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d101      	bne.n	8004f6e <HAL_GPIO_Init+0x202>
 8004f6a:	2306      	movs	r3, #6
 8004f6c:	e00c      	b.n	8004f88 <HAL_GPIO_Init+0x21c>
 8004f6e:	2307      	movs	r3, #7
 8004f70:	e00a      	b.n	8004f88 <HAL_GPIO_Init+0x21c>
 8004f72:	2305      	movs	r3, #5
 8004f74:	e008      	b.n	8004f88 <HAL_GPIO_Init+0x21c>
 8004f76:	2304      	movs	r3, #4
 8004f78:	e006      	b.n	8004f88 <HAL_GPIO_Init+0x21c>
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e004      	b.n	8004f88 <HAL_GPIO_Init+0x21c>
 8004f7e:	2302      	movs	r3, #2
 8004f80:	e002      	b.n	8004f88 <HAL_GPIO_Init+0x21c>
 8004f82:	2301      	movs	r3, #1
 8004f84:	e000      	b.n	8004f88 <HAL_GPIO_Init+0x21c>
 8004f86:	2300      	movs	r3, #0
 8004f88:	69fa      	ldr	r2, [r7, #28]
 8004f8a:	f002 0203 	and.w	r2, r2, #3
 8004f8e:	0092      	lsls	r2, r2, #2
 8004f90:	4093      	lsls	r3, r2
 8004f92:	69ba      	ldr	r2, [r7, #24]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f98:	4934      	ldr	r1, [pc, #208]	; (800506c <HAL_GPIO_Init+0x300>)
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	089b      	lsrs	r3, r3, #2
 8004f9e:	3302      	adds	r3, #2
 8004fa0:	69ba      	ldr	r2, [r7, #24]
 8004fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004fa6:	4b39      	ldr	r3, [pc, #228]	; (800508c <HAL_GPIO_Init+0x320>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	43db      	mvns	r3, r3
 8004fb0:	69ba      	ldr	r2, [r7, #24]
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d003      	beq.n	8004fca <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004fc2:	69ba      	ldr	r2, [r7, #24]
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004fca:	4a30      	ldr	r2, [pc, #192]	; (800508c <HAL_GPIO_Init+0x320>)
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004fd0:	4b2e      	ldr	r3, [pc, #184]	; (800508c <HAL_GPIO_Init+0x320>)
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	43db      	mvns	r3, r3
 8004fda:	69ba      	ldr	r2, [r7, #24]
 8004fdc:	4013      	ands	r3, r2
 8004fde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d003      	beq.n	8004ff4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004fec:	69ba      	ldr	r2, [r7, #24]
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004ff4:	4a25      	ldr	r2, [pc, #148]	; (800508c <HAL_GPIO_Init+0x320>)
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004ffa:	4b24      	ldr	r3, [pc, #144]	; (800508c <HAL_GPIO_Init+0x320>)
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	43db      	mvns	r3, r3
 8005004:	69ba      	ldr	r2, [r7, #24]
 8005006:	4013      	ands	r3, r2
 8005008:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d003      	beq.n	800501e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005016:	69ba      	ldr	r2, [r7, #24]
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	4313      	orrs	r3, r2
 800501c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800501e:	4a1b      	ldr	r2, [pc, #108]	; (800508c <HAL_GPIO_Init+0x320>)
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005024:	4b19      	ldr	r3, [pc, #100]	; (800508c <HAL_GPIO_Init+0x320>)
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	43db      	mvns	r3, r3
 800502e:	69ba      	ldr	r2, [r7, #24]
 8005030:	4013      	ands	r3, r2
 8005032:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d003      	beq.n	8005048 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005040:	69ba      	ldr	r2, [r7, #24]
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	4313      	orrs	r3, r2
 8005046:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005048:	4a10      	ldr	r2, [pc, #64]	; (800508c <HAL_GPIO_Init+0x320>)
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	3301      	adds	r3, #1
 8005052:	61fb      	str	r3, [r7, #28]
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	2b0f      	cmp	r3, #15
 8005058:	f67f ae96 	bls.w	8004d88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800505c:	bf00      	nop
 800505e:	3724      	adds	r7, #36	; 0x24
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr
 8005068:	40023800 	.word	0x40023800
 800506c:	40013800 	.word	0x40013800
 8005070:	40020000 	.word	0x40020000
 8005074:	40020400 	.word	0x40020400
 8005078:	40020800 	.word	0x40020800
 800507c:	40020c00 	.word	0x40020c00
 8005080:	40021000 	.word	0x40021000
 8005084:	40021400 	.word	0x40021400
 8005088:	40021800 	.word	0x40021800
 800508c:	40013c00 	.word	0x40013c00

08005090 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	460b      	mov	r3, r1
 800509a:	807b      	strh	r3, [r7, #2]
 800509c:	4613      	mov	r3, r2
 800509e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80050a0:	787b      	ldrb	r3, [r7, #1]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d003      	beq.n	80050ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80050a6:	887a      	ldrh	r2, [r7, #2]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80050ac:	e003      	b.n	80050b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80050ae:	887b      	ldrh	r3, [r7, #2]
 80050b0:	041a      	lsls	r2, r3, #16
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	619a      	str	r2, [r3, #24]
}
 80050b6:	bf00      	nop
 80050b8:	370c      	adds	r7, #12
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr
	...

080050c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b084      	sub	sp, #16
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d101      	bne.n	80050d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e0ca      	b.n	800526e <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050d8:	4b67      	ldr	r3, [pc, #412]	; (8005278 <HAL_RCC_ClockConfig+0x1b4>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 030f 	and.w	r3, r3, #15
 80050e0:	683a      	ldr	r2, [r7, #0]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d90c      	bls.n	8005100 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050e6:	4b64      	ldr	r3, [pc, #400]	; (8005278 <HAL_RCC_ClockConfig+0x1b4>)
 80050e8:	683a      	ldr	r2, [r7, #0]
 80050ea:	b2d2      	uxtb	r2, r2
 80050ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050ee:	4b62      	ldr	r3, [pc, #392]	; (8005278 <HAL_RCC_ClockConfig+0x1b4>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 030f 	and.w	r3, r3, #15
 80050f6:	683a      	ldr	r2, [r7, #0]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d001      	beq.n	8005100 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e0b6      	b.n	800526e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0302 	and.w	r3, r3, #2
 8005108:	2b00      	cmp	r3, #0
 800510a:	d020      	beq.n	800514e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0304 	and.w	r3, r3, #4
 8005114:	2b00      	cmp	r3, #0
 8005116:	d005      	beq.n	8005124 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005118:	4b58      	ldr	r3, [pc, #352]	; (800527c <HAL_RCC_ClockConfig+0x1b8>)
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	4a57      	ldr	r2, [pc, #348]	; (800527c <HAL_RCC_ClockConfig+0x1b8>)
 800511e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005122:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0308 	and.w	r3, r3, #8
 800512c:	2b00      	cmp	r3, #0
 800512e:	d005      	beq.n	800513c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005130:	4b52      	ldr	r3, [pc, #328]	; (800527c <HAL_RCC_ClockConfig+0x1b8>)
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	4a51      	ldr	r2, [pc, #324]	; (800527c <HAL_RCC_ClockConfig+0x1b8>)
 8005136:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800513a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800513c:	4b4f      	ldr	r3, [pc, #316]	; (800527c <HAL_RCC_ClockConfig+0x1b8>)
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	494c      	ldr	r1, [pc, #304]	; (800527c <HAL_RCC_ClockConfig+0x1b8>)
 800514a:	4313      	orrs	r3, r2
 800514c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 0301 	and.w	r3, r3, #1
 8005156:	2b00      	cmp	r3, #0
 8005158:	d044      	beq.n	80051e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	2b01      	cmp	r3, #1
 8005160:	d107      	bne.n	8005172 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005162:	4b46      	ldr	r3, [pc, #280]	; (800527c <HAL_RCC_ClockConfig+0x1b8>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800516a:	2b00      	cmp	r3, #0
 800516c:	d119      	bne.n	80051a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e07d      	b.n	800526e <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	2b02      	cmp	r3, #2
 8005178:	d003      	beq.n	8005182 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800517e:	2b03      	cmp	r3, #3
 8005180:	d107      	bne.n	8005192 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005182:	4b3e      	ldr	r3, [pc, #248]	; (800527c <HAL_RCC_ClockConfig+0x1b8>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d109      	bne.n	80051a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e06d      	b.n	800526e <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005192:	4b3a      	ldr	r3, [pc, #232]	; (800527c <HAL_RCC_ClockConfig+0x1b8>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0302 	and.w	r3, r3, #2
 800519a:	2b00      	cmp	r3, #0
 800519c:	d101      	bne.n	80051a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e065      	b.n	800526e <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051a2:	4b36      	ldr	r3, [pc, #216]	; (800527c <HAL_RCC_ClockConfig+0x1b8>)
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	f023 0203 	bic.w	r2, r3, #3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	4933      	ldr	r1, [pc, #204]	; (800527c <HAL_RCC_ClockConfig+0x1b8>)
 80051b0:	4313      	orrs	r3, r2
 80051b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051b4:	f7ff fca8 	bl	8004b08 <HAL_GetTick>
 80051b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051ba:	e00a      	b.n	80051d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051bc:	f7ff fca4 	bl	8004b08 <HAL_GetTick>
 80051c0:	4602      	mov	r2, r0
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d901      	bls.n	80051d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e04d      	b.n	800526e <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051d2:	4b2a      	ldr	r3, [pc, #168]	; (800527c <HAL_RCC_ClockConfig+0x1b8>)
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	f003 020c 	and.w	r2, r3, #12
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d1eb      	bne.n	80051bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80051e4:	4b24      	ldr	r3, [pc, #144]	; (8005278 <HAL_RCC_ClockConfig+0x1b4>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 030f 	and.w	r3, r3, #15
 80051ec:	683a      	ldr	r2, [r7, #0]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d20c      	bcs.n	800520c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051f2:	4b21      	ldr	r3, [pc, #132]	; (8005278 <HAL_RCC_ClockConfig+0x1b4>)
 80051f4:	683a      	ldr	r2, [r7, #0]
 80051f6:	b2d2      	uxtb	r2, r2
 80051f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051fa:	4b1f      	ldr	r3, [pc, #124]	; (8005278 <HAL_RCC_ClockConfig+0x1b4>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 030f 	and.w	r3, r3, #15
 8005202:	683a      	ldr	r2, [r7, #0]
 8005204:	429a      	cmp	r2, r3
 8005206:	d001      	beq.n	800520c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e030      	b.n	800526e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 0304 	and.w	r3, r3, #4
 8005214:	2b00      	cmp	r3, #0
 8005216:	d008      	beq.n	800522a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005218:	4b18      	ldr	r3, [pc, #96]	; (800527c <HAL_RCC_ClockConfig+0x1b8>)
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	4915      	ldr	r1, [pc, #84]	; (800527c <HAL_RCC_ClockConfig+0x1b8>)
 8005226:	4313      	orrs	r3, r2
 8005228:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 0308 	and.w	r3, r3, #8
 8005232:	2b00      	cmp	r3, #0
 8005234:	d009      	beq.n	800524a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005236:	4b11      	ldr	r3, [pc, #68]	; (800527c <HAL_RCC_ClockConfig+0x1b8>)
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	00db      	lsls	r3, r3, #3
 8005244:	490d      	ldr	r1, [pc, #52]	; (800527c <HAL_RCC_ClockConfig+0x1b8>)
 8005246:	4313      	orrs	r3, r2
 8005248:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800524a:	f000 f851 	bl	80052f0 <HAL_RCC_GetSysClockFreq>
 800524e:	4601      	mov	r1, r0
 8005250:	4b0a      	ldr	r3, [pc, #40]	; (800527c <HAL_RCC_ClockConfig+0x1b8>)
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	091b      	lsrs	r3, r3, #4
 8005256:	f003 030f 	and.w	r3, r3, #15
 800525a:	4a09      	ldr	r2, [pc, #36]	; (8005280 <HAL_RCC_ClockConfig+0x1bc>)
 800525c:	5cd3      	ldrb	r3, [r2, r3]
 800525e:	fa21 f303 	lsr.w	r3, r1, r3
 8005262:	4a08      	ldr	r2, [pc, #32]	; (8005284 <HAL_RCC_ClockConfig+0x1c0>)
 8005264:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8005266:	2000      	movs	r0, #0
 8005268:	f7ff fc0a 	bl	8004a80 <HAL_InitTick>

  return HAL_OK;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	3710      	adds	r7, #16
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	40023c00 	.word	0x40023c00
 800527c:	40023800 	.word	0x40023800
 8005280:	0800a48c 	.word	0x0800a48c
 8005284:	20000558 	.word	0x20000558

08005288 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005288:	b480      	push	{r7}
 800528a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800528c:	4b03      	ldr	r3, [pc, #12]	; (800529c <HAL_RCC_GetHCLKFreq+0x14>)
 800528e:	681b      	ldr	r3, [r3, #0]
}
 8005290:	4618      	mov	r0, r3
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr
 800529a:	bf00      	nop
 800529c:	20000558 	.word	0x20000558

080052a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80052a4:	f7ff fff0 	bl	8005288 <HAL_RCC_GetHCLKFreq>
 80052a8:	4601      	mov	r1, r0
 80052aa:	4b05      	ldr	r3, [pc, #20]	; (80052c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	0a9b      	lsrs	r3, r3, #10
 80052b0:	f003 0307 	and.w	r3, r3, #7
 80052b4:	4a03      	ldr	r2, [pc, #12]	; (80052c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052b6:	5cd3      	ldrb	r3, [r2, r3]
 80052b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80052bc:	4618      	mov	r0, r3
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	40023800 	.word	0x40023800
 80052c4:	0800a49c 	.word	0x0800a49c

080052c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80052cc:	f7ff ffdc 	bl	8005288 <HAL_RCC_GetHCLKFreq>
 80052d0:	4601      	mov	r1, r0
 80052d2:	4b05      	ldr	r3, [pc, #20]	; (80052e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	0b5b      	lsrs	r3, r3, #13
 80052d8:	f003 0307 	and.w	r3, r3, #7
 80052dc:	4a03      	ldr	r2, [pc, #12]	; (80052ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80052de:	5cd3      	ldrb	r3, [r2, r3]
 80052e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	40023800 	.word	0x40023800
 80052ec:	0800a49c 	.word	0x0800a49c

080052f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052f2:	b087      	sub	sp, #28
 80052f4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80052f6:	2300      	movs	r3, #0
 80052f8:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80052fa:	2300      	movs	r3, #0
 80052fc:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80052fe:	2300      	movs	r3, #0
 8005300:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8005302:	2300      	movs	r3, #0
 8005304:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005306:	2300      	movs	r3, #0
 8005308:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800530a:	4bc6      	ldr	r3, [pc, #792]	; (8005624 <HAL_RCC_GetSysClockFreq+0x334>)
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	f003 030c 	and.w	r3, r3, #12
 8005312:	2b0c      	cmp	r3, #12
 8005314:	f200 817e 	bhi.w	8005614 <HAL_RCC_GetSysClockFreq+0x324>
 8005318:	a201      	add	r2, pc, #4	; (adr r2, 8005320 <HAL_RCC_GetSysClockFreq+0x30>)
 800531a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800531e:	bf00      	nop
 8005320:	08005355 	.word	0x08005355
 8005324:	08005615 	.word	0x08005615
 8005328:	08005615 	.word	0x08005615
 800532c:	08005615 	.word	0x08005615
 8005330:	0800535b 	.word	0x0800535b
 8005334:	08005615 	.word	0x08005615
 8005338:	08005615 	.word	0x08005615
 800533c:	08005615 	.word	0x08005615
 8005340:	08005361 	.word	0x08005361
 8005344:	08005615 	.word	0x08005615
 8005348:	08005615 	.word	0x08005615
 800534c:	08005615 	.word	0x08005615
 8005350:	080054bd 	.word	0x080054bd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005354:	4bb4      	ldr	r3, [pc, #720]	; (8005628 <HAL_RCC_GetSysClockFreq+0x338>)
 8005356:	613b      	str	r3, [r7, #16]
       break;
 8005358:	e15f      	b.n	800561a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800535a:	4bb4      	ldr	r3, [pc, #720]	; (800562c <HAL_RCC_GetSysClockFreq+0x33c>)
 800535c:	613b      	str	r3, [r7, #16]
      break;
 800535e:	e15c      	b.n	800561a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005360:	4bb0      	ldr	r3, [pc, #704]	; (8005624 <HAL_RCC_GetSysClockFreq+0x334>)
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005368:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800536a:	4bae      	ldr	r3, [pc, #696]	; (8005624 <HAL_RCC_GetSysClockFreq+0x334>)
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005372:	2b00      	cmp	r3, #0
 8005374:	d04a      	beq.n	800540c <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005376:	4bab      	ldr	r3, [pc, #684]	; (8005624 <HAL_RCC_GetSysClockFreq+0x334>)
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	099b      	lsrs	r3, r3, #6
 800537c:	f04f 0400 	mov.w	r4, #0
 8005380:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005384:	f04f 0200 	mov.w	r2, #0
 8005388:	ea03 0501 	and.w	r5, r3, r1
 800538c:	ea04 0602 	and.w	r6, r4, r2
 8005390:	4629      	mov	r1, r5
 8005392:	4632      	mov	r2, r6
 8005394:	f04f 0300 	mov.w	r3, #0
 8005398:	f04f 0400 	mov.w	r4, #0
 800539c:	0154      	lsls	r4, r2, #5
 800539e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80053a2:	014b      	lsls	r3, r1, #5
 80053a4:	4619      	mov	r1, r3
 80053a6:	4622      	mov	r2, r4
 80053a8:	1b49      	subs	r1, r1, r5
 80053aa:	eb62 0206 	sbc.w	r2, r2, r6
 80053ae:	f04f 0300 	mov.w	r3, #0
 80053b2:	f04f 0400 	mov.w	r4, #0
 80053b6:	0194      	lsls	r4, r2, #6
 80053b8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80053bc:	018b      	lsls	r3, r1, #6
 80053be:	1a5b      	subs	r3, r3, r1
 80053c0:	eb64 0402 	sbc.w	r4, r4, r2
 80053c4:	f04f 0100 	mov.w	r1, #0
 80053c8:	f04f 0200 	mov.w	r2, #0
 80053cc:	00e2      	lsls	r2, r4, #3
 80053ce:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80053d2:	00d9      	lsls	r1, r3, #3
 80053d4:	460b      	mov	r3, r1
 80053d6:	4614      	mov	r4, r2
 80053d8:	195b      	adds	r3, r3, r5
 80053da:	eb44 0406 	adc.w	r4, r4, r6
 80053de:	f04f 0100 	mov.w	r1, #0
 80053e2:	f04f 0200 	mov.w	r2, #0
 80053e6:	0262      	lsls	r2, r4, #9
 80053e8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80053ec:	0259      	lsls	r1, r3, #9
 80053ee:	460b      	mov	r3, r1
 80053f0:	4614      	mov	r4, r2
 80053f2:	4618      	mov	r0, r3
 80053f4:	4621      	mov	r1, r4
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f04f 0400 	mov.w	r4, #0
 80053fc:	461a      	mov	r2, r3
 80053fe:	4623      	mov	r3, r4
 8005400:	f7ff f902 	bl	8004608 <__aeabi_uldivmod>
 8005404:	4603      	mov	r3, r0
 8005406:	460c      	mov	r4, r1
 8005408:	617b      	str	r3, [r7, #20]
 800540a:	e049      	b.n	80054a0 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800540c:	4b85      	ldr	r3, [pc, #532]	; (8005624 <HAL_RCC_GetSysClockFreq+0x334>)
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	099b      	lsrs	r3, r3, #6
 8005412:	f04f 0400 	mov.w	r4, #0
 8005416:	f240 11ff 	movw	r1, #511	; 0x1ff
 800541a:	f04f 0200 	mov.w	r2, #0
 800541e:	ea03 0501 	and.w	r5, r3, r1
 8005422:	ea04 0602 	and.w	r6, r4, r2
 8005426:	4629      	mov	r1, r5
 8005428:	4632      	mov	r2, r6
 800542a:	f04f 0300 	mov.w	r3, #0
 800542e:	f04f 0400 	mov.w	r4, #0
 8005432:	0154      	lsls	r4, r2, #5
 8005434:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005438:	014b      	lsls	r3, r1, #5
 800543a:	4619      	mov	r1, r3
 800543c:	4622      	mov	r2, r4
 800543e:	1b49      	subs	r1, r1, r5
 8005440:	eb62 0206 	sbc.w	r2, r2, r6
 8005444:	f04f 0300 	mov.w	r3, #0
 8005448:	f04f 0400 	mov.w	r4, #0
 800544c:	0194      	lsls	r4, r2, #6
 800544e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005452:	018b      	lsls	r3, r1, #6
 8005454:	1a5b      	subs	r3, r3, r1
 8005456:	eb64 0402 	sbc.w	r4, r4, r2
 800545a:	f04f 0100 	mov.w	r1, #0
 800545e:	f04f 0200 	mov.w	r2, #0
 8005462:	00e2      	lsls	r2, r4, #3
 8005464:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005468:	00d9      	lsls	r1, r3, #3
 800546a:	460b      	mov	r3, r1
 800546c:	4614      	mov	r4, r2
 800546e:	195b      	adds	r3, r3, r5
 8005470:	eb44 0406 	adc.w	r4, r4, r6
 8005474:	f04f 0100 	mov.w	r1, #0
 8005478:	f04f 0200 	mov.w	r2, #0
 800547c:	02a2      	lsls	r2, r4, #10
 800547e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005482:	0299      	lsls	r1, r3, #10
 8005484:	460b      	mov	r3, r1
 8005486:	4614      	mov	r4, r2
 8005488:	4618      	mov	r0, r3
 800548a:	4621      	mov	r1, r4
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f04f 0400 	mov.w	r4, #0
 8005492:	461a      	mov	r2, r3
 8005494:	4623      	mov	r3, r4
 8005496:	f7ff f8b7 	bl	8004608 <__aeabi_uldivmod>
 800549a:	4603      	mov	r3, r0
 800549c:	460c      	mov	r4, r1
 800549e:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80054a0:	4b60      	ldr	r3, [pc, #384]	; (8005624 <HAL_RCC_GetSysClockFreq+0x334>)
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	0c1b      	lsrs	r3, r3, #16
 80054a6:	f003 0303 	and.w	r3, r3, #3
 80054aa:	3301      	adds	r3, #1
 80054ac:	005b      	lsls	r3, r3, #1
 80054ae:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80054b0:	697a      	ldr	r2, [r7, #20]
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b8:	613b      	str	r3, [r7, #16]
      break;
 80054ba:	e0ae      	b.n	800561a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054bc:	4b59      	ldr	r3, [pc, #356]	; (8005624 <HAL_RCC_GetSysClockFreq+0x334>)
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054c4:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054c6:	4b57      	ldr	r3, [pc, #348]	; (8005624 <HAL_RCC_GetSysClockFreq+0x334>)
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d04a      	beq.n	8005568 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054d2:	4b54      	ldr	r3, [pc, #336]	; (8005624 <HAL_RCC_GetSysClockFreq+0x334>)
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	099b      	lsrs	r3, r3, #6
 80054d8:	f04f 0400 	mov.w	r4, #0
 80054dc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80054e0:	f04f 0200 	mov.w	r2, #0
 80054e4:	ea03 0501 	and.w	r5, r3, r1
 80054e8:	ea04 0602 	and.w	r6, r4, r2
 80054ec:	4629      	mov	r1, r5
 80054ee:	4632      	mov	r2, r6
 80054f0:	f04f 0300 	mov.w	r3, #0
 80054f4:	f04f 0400 	mov.w	r4, #0
 80054f8:	0154      	lsls	r4, r2, #5
 80054fa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80054fe:	014b      	lsls	r3, r1, #5
 8005500:	4619      	mov	r1, r3
 8005502:	4622      	mov	r2, r4
 8005504:	1b49      	subs	r1, r1, r5
 8005506:	eb62 0206 	sbc.w	r2, r2, r6
 800550a:	f04f 0300 	mov.w	r3, #0
 800550e:	f04f 0400 	mov.w	r4, #0
 8005512:	0194      	lsls	r4, r2, #6
 8005514:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005518:	018b      	lsls	r3, r1, #6
 800551a:	1a5b      	subs	r3, r3, r1
 800551c:	eb64 0402 	sbc.w	r4, r4, r2
 8005520:	f04f 0100 	mov.w	r1, #0
 8005524:	f04f 0200 	mov.w	r2, #0
 8005528:	00e2      	lsls	r2, r4, #3
 800552a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800552e:	00d9      	lsls	r1, r3, #3
 8005530:	460b      	mov	r3, r1
 8005532:	4614      	mov	r4, r2
 8005534:	195b      	adds	r3, r3, r5
 8005536:	eb44 0406 	adc.w	r4, r4, r6
 800553a:	f04f 0100 	mov.w	r1, #0
 800553e:	f04f 0200 	mov.w	r2, #0
 8005542:	0262      	lsls	r2, r4, #9
 8005544:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005548:	0259      	lsls	r1, r3, #9
 800554a:	460b      	mov	r3, r1
 800554c:	4614      	mov	r4, r2
 800554e:	4618      	mov	r0, r3
 8005550:	4621      	mov	r1, r4
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	f04f 0400 	mov.w	r4, #0
 8005558:	461a      	mov	r2, r3
 800555a:	4623      	mov	r3, r4
 800555c:	f7ff f854 	bl	8004608 <__aeabi_uldivmod>
 8005560:	4603      	mov	r3, r0
 8005562:	460c      	mov	r4, r1
 8005564:	617b      	str	r3, [r7, #20]
 8005566:	e049      	b.n	80055fc <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005568:	4b2e      	ldr	r3, [pc, #184]	; (8005624 <HAL_RCC_GetSysClockFreq+0x334>)
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	099b      	lsrs	r3, r3, #6
 800556e:	f04f 0400 	mov.w	r4, #0
 8005572:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005576:	f04f 0200 	mov.w	r2, #0
 800557a:	ea03 0501 	and.w	r5, r3, r1
 800557e:	ea04 0602 	and.w	r6, r4, r2
 8005582:	4629      	mov	r1, r5
 8005584:	4632      	mov	r2, r6
 8005586:	f04f 0300 	mov.w	r3, #0
 800558a:	f04f 0400 	mov.w	r4, #0
 800558e:	0154      	lsls	r4, r2, #5
 8005590:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005594:	014b      	lsls	r3, r1, #5
 8005596:	4619      	mov	r1, r3
 8005598:	4622      	mov	r2, r4
 800559a:	1b49      	subs	r1, r1, r5
 800559c:	eb62 0206 	sbc.w	r2, r2, r6
 80055a0:	f04f 0300 	mov.w	r3, #0
 80055a4:	f04f 0400 	mov.w	r4, #0
 80055a8:	0194      	lsls	r4, r2, #6
 80055aa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80055ae:	018b      	lsls	r3, r1, #6
 80055b0:	1a5b      	subs	r3, r3, r1
 80055b2:	eb64 0402 	sbc.w	r4, r4, r2
 80055b6:	f04f 0100 	mov.w	r1, #0
 80055ba:	f04f 0200 	mov.w	r2, #0
 80055be:	00e2      	lsls	r2, r4, #3
 80055c0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80055c4:	00d9      	lsls	r1, r3, #3
 80055c6:	460b      	mov	r3, r1
 80055c8:	4614      	mov	r4, r2
 80055ca:	195b      	adds	r3, r3, r5
 80055cc:	eb44 0406 	adc.w	r4, r4, r6
 80055d0:	f04f 0100 	mov.w	r1, #0
 80055d4:	f04f 0200 	mov.w	r2, #0
 80055d8:	02a2      	lsls	r2, r4, #10
 80055da:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80055de:	0299      	lsls	r1, r3, #10
 80055e0:	460b      	mov	r3, r1
 80055e2:	4614      	mov	r4, r2
 80055e4:	4618      	mov	r0, r3
 80055e6:	4621      	mov	r1, r4
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f04f 0400 	mov.w	r4, #0
 80055ee:	461a      	mov	r2, r3
 80055f0:	4623      	mov	r3, r4
 80055f2:	f7ff f809 	bl	8004608 <__aeabi_uldivmod>
 80055f6:	4603      	mov	r3, r0
 80055f8:	460c      	mov	r4, r1
 80055fa:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80055fc:	4b09      	ldr	r3, [pc, #36]	; (8005624 <HAL_RCC_GetSysClockFreq+0x334>)
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	0f1b      	lsrs	r3, r3, #28
 8005602:	f003 0307 	and.w	r3, r3, #7
 8005606:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8005608:	697a      	ldr	r2, [r7, #20]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005610:	613b      	str	r3, [r7, #16]
      break;
 8005612:	e002      	b.n	800561a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005614:	4b04      	ldr	r3, [pc, #16]	; (8005628 <HAL_RCC_GetSysClockFreq+0x338>)
 8005616:	613b      	str	r3, [r7, #16]
      break;
 8005618:	bf00      	nop
    }
  }
  return sysclockfreq;
 800561a:	693b      	ldr	r3, [r7, #16]
}
 800561c:	4618      	mov	r0, r3
 800561e:	371c      	adds	r7, #28
 8005620:	46bd      	mov	sp, r7
 8005622:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005624:	40023800 	.word	0x40023800
 8005628:	00f42400 	.word	0x00f42400
 800562c:	007a1200 	.word	0x007a1200

08005630 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b086      	sub	sp, #24
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005638:	2300      	movs	r3, #0
 800563a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 0301 	and.w	r3, r3, #1
 8005644:	2b00      	cmp	r3, #0
 8005646:	f000 8083 	beq.w	8005750 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800564a:	4b95      	ldr	r3, [pc, #596]	; (80058a0 <HAL_RCC_OscConfig+0x270>)
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	f003 030c 	and.w	r3, r3, #12
 8005652:	2b04      	cmp	r3, #4
 8005654:	d019      	beq.n	800568a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005656:	4b92      	ldr	r3, [pc, #584]	; (80058a0 <HAL_RCC_OscConfig+0x270>)
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800565e:	2b08      	cmp	r3, #8
 8005660:	d106      	bne.n	8005670 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005662:	4b8f      	ldr	r3, [pc, #572]	; (80058a0 <HAL_RCC_OscConfig+0x270>)
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800566a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800566e:	d00c      	beq.n	800568a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005670:	4b8b      	ldr	r3, [pc, #556]	; (80058a0 <HAL_RCC_OscConfig+0x270>)
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005678:	2b0c      	cmp	r3, #12
 800567a:	d112      	bne.n	80056a2 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800567c:	4b88      	ldr	r3, [pc, #544]	; (80058a0 <HAL_RCC_OscConfig+0x270>)
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005684:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005688:	d10b      	bne.n	80056a2 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800568a:	4b85      	ldr	r3, [pc, #532]	; (80058a0 <HAL_RCC_OscConfig+0x270>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005692:	2b00      	cmp	r3, #0
 8005694:	d05b      	beq.n	800574e <HAL_RCC_OscConfig+0x11e>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d157      	bne.n	800574e <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e216      	b.n	8005ad0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056aa:	d106      	bne.n	80056ba <HAL_RCC_OscConfig+0x8a>
 80056ac:	4b7c      	ldr	r3, [pc, #496]	; (80058a0 <HAL_RCC_OscConfig+0x270>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a7b      	ldr	r2, [pc, #492]	; (80058a0 <HAL_RCC_OscConfig+0x270>)
 80056b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056b6:	6013      	str	r3, [r2, #0]
 80056b8:	e01d      	b.n	80056f6 <HAL_RCC_OscConfig+0xc6>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056c2:	d10c      	bne.n	80056de <HAL_RCC_OscConfig+0xae>
 80056c4:	4b76      	ldr	r3, [pc, #472]	; (80058a0 <HAL_RCC_OscConfig+0x270>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a75      	ldr	r2, [pc, #468]	; (80058a0 <HAL_RCC_OscConfig+0x270>)
 80056ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056ce:	6013      	str	r3, [r2, #0]
 80056d0:	4b73      	ldr	r3, [pc, #460]	; (80058a0 <HAL_RCC_OscConfig+0x270>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a72      	ldr	r2, [pc, #456]	; (80058a0 <HAL_RCC_OscConfig+0x270>)
 80056d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056da:	6013      	str	r3, [r2, #0]
 80056dc:	e00b      	b.n	80056f6 <HAL_RCC_OscConfig+0xc6>
 80056de:	4b70      	ldr	r3, [pc, #448]	; (80058a0 <HAL_RCC_OscConfig+0x270>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a6f      	ldr	r2, [pc, #444]	; (80058a0 <HAL_RCC_OscConfig+0x270>)
 80056e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056e8:	6013      	str	r3, [r2, #0]
 80056ea:	4b6d      	ldr	r3, [pc, #436]	; (80058a0 <HAL_RCC_OscConfig+0x270>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a6c      	ldr	r2, [pc, #432]	; (80058a0 <HAL_RCC_OscConfig+0x270>)
 80056f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056f4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d013      	beq.n	8005726 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056fe:	f7ff fa03 	bl	8004b08 <HAL_GetTick>
 8005702:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005704:	e008      	b.n	8005718 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005706:	f7ff f9ff 	bl	8004b08 <HAL_GetTick>
 800570a:	4602      	mov	r2, r0
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	2b64      	cmp	r3, #100	; 0x64
 8005712:	d901      	bls.n	8005718 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005714:	2303      	movs	r3, #3
 8005716:	e1db      	b.n	8005ad0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005718:	4b61      	ldr	r3, [pc, #388]	; (80058a0 <HAL_RCC_OscConfig+0x270>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005720:	2b00      	cmp	r3, #0
 8005722:	d0f0      	beq.n	8005706 <HAL_RCC_OscConfig+0xd6>
 8005724:	e014      	b.n	8005750 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005726:	f7ff f9ef 	bl	8004b08 <HAL_GetTick>
 800572a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800572c:	e008      	b.n	8005740 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800572e:	f7ff f9eb 	bl	8004b08 <HAL_GetTick>
 8005732:	4602      	mov	r2, r0
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	1ad3      	subs	r3, r2, r3
 8005738:	2b64      	cmp	r3, #100	; 0x64
 800573a:	d901      	bls.n	8005740 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 800573c:	2303      	movs	r3, #3
 800573e:	e1c7      	b.n	8005ad0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005740:	4b57      	ldr	r3, [pc, #348]	; (80058a0 <HAL_RCC_OscConfig+0x270>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005748:	2b00      	cmp	r3, #0
 800574a:	d1f0      	bne.n	800572e <HAL_RCC_OscConfig+0xfe>
 800574c:	e000      	b.n	8005750 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800574e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0302 	and.w	r3, r3, #2
 8005758:	2b00      	cmp	r3, #0
 800575a:	d06f      	beq.n	800583c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800575c:	4b50      	ldr	r3, [pc, #320]	; (80058a0 <HAL_RCC_OscConfig+0x270>)
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	f003 030c 	and.w	r3, r3, #12
 8005764:	2b00      	cmp	r3, #0
 8005766:	d017      	beq.n	8005798 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005768:	4b4d      	ldr	r3, [pc, #308]	; (80058a0 <HAL_RCC_OscConfig+0x270>)
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005770:	2b08      	cmp	r3, #8
 8005772:	d105      	bne.n	8005780 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005774:	4b4a      	ldr	r3, [pc, #296]	; (80058a0 <HAL_RCC_OscConfig+0x270>)
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800577c:	2b00      	cmp	r3, #0
 800577e:	d00b      	beq.n	8005798 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005780:	4b47      	ldr	r3, [pc, #284]	; (80058a0 <HAL_RCC_OscConfig+0x270>)
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005788:	2b0c      	cmp	r3, #12
 800578a:	d11c      	bne.n	80057c6 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800578c:	4b44      	ldr	r3, [pc, #272]	; (80058a0 <HAL_RCC_OscConfig+0x270>)
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005794:	2b00      	cmp	r3, #0
 8005796:	d116      	bne.n	80057c6 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005798:	4b41      	ldr	r3, [pc, #260]	; (80058a0 <HAL_RCC_OscConfig+0x270>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 0302 	and.w	r3, r3, #2
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d005      	beq.n	80057b0 <HAL_RCC_OscConfig+0x180>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d001      	beq.n	80057b0 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e18f      	b.n	8005ad0 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057b0:	4b3b      	ldr	r3, [pc, #236]	; (80058a0 <HAL_RCC_OscConfig+0x270>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	691b      	ldr	r3, [r3, #16]
 80057bc:	00db      	lsls	r3, r3, #3
 80057be:	4938      	ldr	r1, [pc, #224]	; (80058a0 <HAL_RCC_OscConfig+0x270>)
 80057c0:	4313      	orrs	r3, r2
 80057c2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057c4:	e03a      	b.n	800583c <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d020      	beq.n	8005810 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057ce:	4b35      	ldr	r3, [pc, #212]	; (80058a4 <HAL_RCC_OscConfig+0x274>)
 80057d0:	2201      	movs	r2, #1
 80057d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057d4:	f7ff f998 	bl	8004b08 <HAL_GetTick>
 80057d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057da:	e008      	b.n	80057ee <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057dc:	f7ff f994 	bl	8004b08 <HAL_GetTick>
 80057e0:	4602      	mov	r2, r0
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	2b02      	cmp	r3, #2
 80057e8:	d901      	bls.n	80057ee <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80057ea:	2303      	movs	r3, #3
 80057ec:	e170      	b.n	8005ad0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057ee:	4b2c      	ldr	r3, [pc, #176]	; (80058a0 <HAL_RCC_OscConfig+0x270>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 0302 	and.w	r3, r3, #2
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d0f0      	beq.n	80057dc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057fa:	4b29      	ldr	r3, [pc, #164]	; (80058a0 <HAL_RCC_OscConfig+0x270>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	00db      	lsls	r3, r3, #3
 8005808:	4925      	ldr	r1, [pc, #148]	; (80058a0 <HAL_RCC_OscConfig+0x270>)
 800580a:	4313      	orrs	r3, r2
 800580c:	600b      	str	r3, [r1, #0]
 800580e:	e015      	b.n	800583c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005810:	4b24      	ldr	r3, [pc, #144]	; (80058a4 <HAL_RCC_OscConfig+0x274>)
 8005812:	2200      	movs	r2, #0
 8005814:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005816:	f7ff f977 	bl	8004b08 <HAL_GetTick>
 800581a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800581c:	e008      	b.n	8005830 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800581e:	f7ff f973 	bl	8004b08 <HAL_GetTick>
 8005822:	4602      	mov	r2, r0
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	1ad3      	subs	r3, r2, r3
 8005828:	2b02      	cmp	r3, #2
 800582a:	d901      	bls.n	8005830 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800582c:	2303      	movs	r3, #3
 800582e:	e14f      	b.n	8005ad0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005830:	4b1b      	ldr	r3, [pc, #108]	; (80058a0 <HAL_RCC_OscConfig+0x270>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 0302 	and.w	r3, r3, #2
 8005838:	2b00      	cmp	r3, #0
 800583a:	d1f0      	bne.n	800581e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 0308 	and.w	r3, r3, #8
 8005844:	2b00      	cmp	r3, #0
 8005846:	d037      	beq.n	80058b8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	695b      	ldr	r3, [r3, #20]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d016      	beq.n	800587e <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005850:	4b15      	ldr	r3, [pc, #84]	; (80058a8 <HAL_RCC_OscConfig+0x278>)
 8005852:	2201      	movs	r2, #1
 8005854:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005856:	f7ff f957 	bl	8004b08 <HAL_GetTick>
 800585a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800585c:	e008      	b.n	8005870 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800585e:	f7ff f953 	bl	8004b08 <HAL_GetTick>
 8005862:	4602      	mov	r2, r0
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	1ad3      	subs	r3, r2, r3
 8005868:	2b02      	cmp	r3, #2
 800586a:	d901      	bls.n	8005870 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800586c:	2303      	movs	r3, #3
 800586e:	e12f      	b.n	8005ad0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005870:	4b0b      	ldr	r3, [pc, #44]	; (80058a0 <HAL_RCC_OscConfig+0x270>)
 8005872:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005874:	f003 0302 	and.w	r3, r3, #2
 8005878:	2b00      	cmp	r3, #0
 800587a:	d0f0      	beq.n	800585e <HAL_RCC_OscConfig+0x22e>
 800587c:	e01c      	b.n	80058b8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800587e:	4b0a      	ldr	r3, [pc, #40]	; (80058a8 <HAL_RCC_OscConfig+0x278>)
 8005880:	2200      	movs	r2, #0
 8005882:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005884:	f7ff f940 	bl	8004b08 <HAL_GetTick>
 8005888:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800588a:	e00f      	b.n	80058ac <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800588c:	f7ff f93c 	bl	8004b08 <HAL_GetTick>
 8005890:	4602      	mov	r2, r0
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	2b02      	cmp	r3, #2
 8005898:	d908      	bls.n	80058ac <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800589a:	2303      	movs	r3, #3
 800589c:	e118      	b.n	8005ad0 <HAL_RCC_OscConfig+0x4a0>
 800589e:	bf00      	nop
 80058a0:	40023800 	.word	0x40023800
 80058a4:	42470000 	.word	0x42470000
 80058a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058ac:	4b8a      	ldr	r3, [pc, #552]	; (8005ad8 <HAL_RCC_OscConfig+0x4a8>)
 80058ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058b0:	f003 0302 	and.w	r3, r3, #2
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d1e9      	bne.n	800588c <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0304 	and.w	r3, r3, #4
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	f000 8097 	beq.w	80059f4 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058c6:	2300      	movs	r3, #0
 80058c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058ca:	4b83      	ldr	r3, [pc, #524]	; (8005ad8 <HAL_RCC_OscConfig+0x4a8>)
 80058cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d10f      	bne.n	80058f6 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058d6:	2300      	movs	r3, #0
 80058d8:	60fb      	str	r3, [r7, #12]
 80058da:	4b7f      	ldr	r3, [pc, #508]	; (8005ad8 <HAL_RCC_OscConfig+0x4a8>)
 80058dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058de:	4a7e      	ldr	r2, [pc, #504]	; (8005ad8 <HAL_RCC_OscConfig+0x4a8>)
 80058e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058e4:	6413      	str	r3, [r2, #64]	; 0x40
 80058e6:	4b7c      	ldr	r3, [pc, #496]	; (8005ad8 <HAL_RCC_OscConfig+0x4a8>)
 80058e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058ee:	60fb      	str	r3, [r7, #12]
 80058f0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80058f2:	2301      	movs	r3, #1
 80058f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058f6:	4b79      	ldr	r3, [pc, #484]	; (8005adc <HAL_RCC_OscConfig+0x4ac>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d118      	bne.n	8005934 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005902:	4b76      	ldr	r3, [pc, #472]	; (8005adc <HAL_RCC_OscConfig+0x4ac>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a75      	ldr	r2, [pc, #468]	; (8005adc <HAL_RCC_OscConfig+0x4ac>)
 8005908:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800590c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800590e:	f7ff f8fb 	bl	8004b08 <HAL_GetTick>
 8005912:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005914:	e008      	b.n	8005928 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005916:	f7ff f8f7 	bl	8004b08 <HAL_GetTick>
 800591a:	4602      	mov	r2, r0
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	1ad3      	subs	r3, r2, r3
 8005920:	2b02      	cmp	r3, #2
 8005922:	d901      	bls.n	8005928 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005924:	2303      	movs	r3, #3
 8005926:	e0d3      	b.n	8005ad0 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005928:	4b6c      	ldr	r3, [pc, #432]	; (8005adc <HAL_RCC_OscConfig+0x4ac>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005930:	2b00      	cmp	r3, #0
 8005932:	d0f0      	beq.n	8005916 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	2b01      	cmp	r3, #1
 800593a:	d106      	bne.n	800594a <HAL_RCC_OscConfig+0x31a>
 800593c:	4b66      	ldr	r3, [pc, #408]	; (8005ad8 <HAL_RCC_OscConfig+0x4a8>)
 800593e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005940:	4a65      	ldr	r2, [pc, #404]	; (8005ad8 <HAL_RCC_OscConfig+0x4a8>)
 8005942:	f043 0301 	orr.w	r3, r3, #1
 8005946:	6713      	str	r3, [r2, #112]	; 0x70
 8005948:	e01c      	b.n	8005984 <HAL_RCC_OscConfig+0x354>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	2b05      	cmp	r3, #5
 8005950:	d10c      	bne.n	800596c <HAL_RCC_OscConfig+0x33c>
 8005952:	4b61      	ldr	r3, [pc, #388]	; (8005ad8 <HAL_RCC_OscConfig+0x4a8>)
 8005954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005956:	4a60      	ldr	r2, [pc, #384]	; (8005ad8 <HAL_RCC_OscConfig+0x4a8>)
 8005958:	f043 0304 	orr.w	r3, r3, #4
 800595c:	6713      	str	r3, [r2, #112]	; 0x70
 800595e:	4b5e      	ldr	r3, [pc, #376]	; (8005ad8 <HAL_RCC_OscConfig+0x4a8>)
 8005960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005962:	4a5d      	ldr	r2, [pc, #372]	; (8005ad8 <HAL_RCC_OscConfig+0x4a8>)
 8005964:	f043 0301 	orr.w	r3, r3, #1
 8005968:	6713      	str	r3, [r2, #112]	; 0x70
 800596a:	e00b      	b.n	8005984 <HAL_RCC_OscConfig+0x354>
 800596c:	4b5a      	ldr	r3, [pc, #360]	; (8005ad8 <HAL_RCC_OscConfig+0x4a8>)
 800596e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005970:	4a59      	ldr	r2, [pc, #356]	; (8005ad8 <HAL_RCC_OscConfig+0x4a8>)
 8005972:	f023 0301 	bic.w	r3, r3, #1
 8005976:	6713      	str	r3, [r2, #112]	; 0x70
 8005978:	4b57      	ldr	r3, [pc, #348]	; (8005ad8 <HAL_RCC_OscConfig+0x4a8>)
 800597a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800597c:	4a56      	ldr	r2, [pc, #344]	; (8005ad8 <HAL_RCC_OscConfig+0x4a8>)
 800597e:	f023 0304 	bic.w	r3, r3, #4
 8005982:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d015      	beq.n	80059b8 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800598c:	f7ff f8bc 	bl	8004b08 <HAL_GetTick>
 8005990:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005992:	e00a      	b.n	80059aa <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005994:	f7ff f8b8 	bl	8004b08 <HAL_GetTick>
 8005998:	4602      	mov	r2, r0
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	1ad3      	subs	r3, r2, r3
 800599e:	f241 3288 	movw	r2, #5000	; 0x1388
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d901      	bls.n	80059aa <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80059a6:	2303      	movs	r3, #3
 80059a8:	e092      	b.n	8005ad0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059aa:	4b4b      	ldr	r3, [pc, #300]	; (8005ad8 <HAL_RCC_OscConfig+0x4a8>)
 80059ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ae:	f003 0302 	and.w	r3, r3, #2
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d0ee      	beq.n	8005994 <HAL_RCC_OscConfig+0x364>
 80059b6:	e014      	b.n	80059e2 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059b8:	f7ff f8a6 	bl	8004b08 <HAL_GetTick>
 80059bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059be:	e00a      	b.n	80059d6 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059c0:	f7ff f8a2 	bl	8004b08 <HAL_GetTick>
 80059c4:	4602      	mov	r2, r0
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	1ad3      	subs	r3, r2, r3
 80059ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d901      	bls.n	80059d6 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80059d2:	2303      	movs	r3, #3
 80059d4:	e07c      	b.n	8005ad0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059d6:	4b40      	ldr	r3, [pc, #256]	; (8005ad8 <HAL_RCC_OscConfig+0x4a8>)
 80059d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059da:	f003 0302 	and.w	r3, r3, #2
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d1ee      	bne.n	80059c0 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80059e2:	7dfb      	ldrb	r3, [r7, #23]
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d105      	bne.n	80059f4 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059e8:	4b3b      	ldr	r3, [pc, #236]	; (8005ad8 <HAL_RCC_OscConfig+0x4a8>)
 80059ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ec:	4a3a      	ldr	r2, [pc, #232]	; (8005ad8 <HAL_RCC_OscConfig+0x4a8>)
 80059ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	699b      	ldr	r3, [r3, #24]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d068      	beq.n	8005ace <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80059fc:	4b36      	ldr	r3, [pc, #216]	; (8005ad8 <HAL_RCC_OscConfig+0x4a8>)
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	f003 030c 	and.w	r3, r3, #12
 8005a04:	2b08      	cmp	r3, #8
 8005a06:	d060      	beq.n	8005aca <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	699b      	ldr	r3, [r3, #24]
 8005a0c:	2b02      	cmp	r3, #2
 8005a0e:	d145      	bne.n	8005a9c <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a10:	4b33      	ldr	r3, [pc, #204]	; (8005ae0 <HAL_RCC_OscConfig+0x4b0>)
 8005a12:	2200      	movs	r2, #0
 8005a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a16:	f7ff f877 	bl	8004b08 <HAL_GetTick>
 8005a1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a1c:	e008      	b.n	8005a30 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a1e:	f7ff f873 	bl	8004b08 <HAL_GetTick>
 8005a22:	4602      	mov	r2, r0
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	1ad3      	subs	r3, r2, r3
 8005a28:	2b02      	cmp	r3, #2
 8005a2a:	d901      	bls.n	8005a30 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	e04f      	b.n	8005ad0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a30:	4b29      	ldr	r3, [pc, #164]	; (8005ad8 <HAL_RCC_OscConfig+0x4a8>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d1f0      	bne.n	8005a1e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	69da      	ldr	r2, [r3, #28]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a1b      	ldr	r3, [r3, #32]
 8005a44:	431a      	orrs	r2, r3
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4a:	019b      	lsls	r3, r3, #6
 8005a4c:	431a      	orrs	r2, r3
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a52:	085b      	lsrs	r3, r3, #1
 8005a54:	3b01      	subs	r3, #1
 8005a56:	041b      	lsls	r3, r3, #16
 8005a58:	431a      	orrs	r2, r3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a5e:	061b      	lsls	r3, r3, #24
 8005a60:	431a      	orrs	r2, r3
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a66:	071b      	lsls	r3, r3, #28
 8005a68:	491b      	ldr	r1, [pc, #108]	; (8005ad8 <HAL_RCC_OscConfig+0x4a8>)
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a6e:	4b1c      	ldr	r3, [pc, #112]	; (8005ae0 <HAL_RCC_OscConfig+0x4b0>)
 8005a70:	2201      	movs	r2, #1
 8005a72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a74:	f7ff f848 	bl	8004b08 <HAL_GetTick>
 8005a78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a7a:	e008      	b.n	8005a8e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a7c:	f7ff f844 	bl	8004b08 <HAL_GetTick>
 8005a80:	4602      	mov	r2, r0
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d901      	bls.n	8005a8e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	e020      	b.n	8005ad0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a8e:	4b12      	ldr	r3, [pc, #72]	; (8005ad8 <HAL_RCC_OscConfig+0x4a8>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d0f0      	beq.n	8005a7c <HAL_RCC_OscConfig+0x44c>
 8005a9a:	e018      	b.n	8005ace <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a9c:	4b10      	ldr	r3, [pc, #64]	; (8005ae0 <HAL_RCC_OscConfig+0x4b0>)
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aa2:	f7ff f831 	bl	8004b08 <HAL_GetTick>
 8005aa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005aa8:	e008      	b.n	8005abc <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005aaa:	f7ff f82d 	bl	8004b08 <HAL_GetTick>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	1ad3      	subs	r3, r2, r3
 8005ab4:	2b02      	cmp	r3, #2
 8005ab6:	d901      	bls.n	8005abc <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8005ab8:	2303      	movs	r3, #3
 8005aba:	e009      	b.n	8005ad0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005abc:	4b06      	ldr	r3, [pc, #24]	; (8005ad8 <HAL_RCC_OscConfig+0x4a8>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d1f0      	bne.n	8005aaa <HAL_RCC_OscConfig+0x47a>
 8005ac8:	e001      	b.n	8005ace <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e000      	b.n	8005ad0 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8005ace:	2300      	movs	r3, #0
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3718      	adds	r7, #24
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	40023800 	.word	0x40023800
 8005adc:	40007000 	.word	0x40007000
 8005ae0:	42470060 	.word	0x42470060

08005ae4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b082      	sub	sp, #8
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d101      	bne.n	8005af6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e03f      	b.n	8005b76 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d106      	bne.n	8005b10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f001 f8c2 	bl	8006c94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2224      	movs	r2, #36	; 0x24
 8005b14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	68da      	ldr	r2, [r3, #12]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 f90b 	bl	8005d44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	691a      	ldr	r2, [r3, #16]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	695a      	ldr	r2, [r3, #20]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	68da      	ldr	r2, [r3, #12]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2220      	movs	r2, #32
 8005b68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2220      	movs	r2, #32
 8005b70:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005b74:	2300      	movs	r3, #0
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3708      	adds	r7, #8
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}

08005b7e <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b7e:	b580      	push	{r7, lr}
 8005b80:	b088      	sub	sp, #32
 8005b82:	af02      	add	r7, sp, #8
 8005b84:	60f8      	str	r0, [r7, #12]
 8005b86:	60b9      	str	r1, [r7, #8]
 8005b88:	603b      	str	r3, [r7, #0]
 8005b8a:	4613      	mov	r3, r2
 8005b8c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	2b20      	cmp	r3, #32
 8005b9c:	f040 8083 	bne.w	8005ca6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d002      	beq.n	8005bac <HAL_UART_Transmit+0x2e>
 8005ba6:	88fb      	ldrh	r3, [r7, #6]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d101      	bne.n	8005bb0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	e07b      	b.n	8005ca8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d101      	bne.n	8005bbe <HAL_UART_Transmit+0x40>
 8005bba:	2302      	movs	r3, #2
 8005bbc:	e074      	b.n	8005ca8 <HAL_UART_Transmit+0x12a>
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2221      	movs	r2, #33	; 0x21
 8005bd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005bd4:	f7fe ff98 	bl	8004b08 <HAL_GetTick>
 8005bd8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	88fa      	ldrh	r2, [r7, #6]
 8005bde:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	88fa      	ldrh	r2, [r7, #6]
 8005be4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005be6:	e042      	b.n	8005c6e <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	3b01      	subs	r3, #1
 8005bf0:	b29a      	uxth	r2, r3
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bfe:	d122      	bne.n	8005c46 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	9300      	str	r3, [sp, #0]
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	2200      	movs	r2, #0
 8005c08:	2180      	movs	r1, #128	; 0x80
 8005c0a:	68f8      	ldr	r0, [r7, #12]
 8005c0c:	f000 f850 	bl	8005cb0 <UART_WaitOnFlagUntilTimeout>
 8005c10:	4603      	mov	r3, r0
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d001      	beq.n	8005c1a <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8005c16:	2303      	movs	r3, #3
 8005c18:	e046      	b.n	8005ca8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	881b      	ldrh	r3, [r3, #0]
 8005c22:	461a      	mov	r2, r3
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c2c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d103      	bne.n	8005c3e <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	3302      	adds	r3, #2
 8005c3a:	60bb      	str	r3, [r7, #8]
 8005c3c:	e017      	b.n	8005c6e <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	3301      	adds	r3, #1
 8005c42:	60bb      	str	r3, [r7, #8]
 8005c44:	e013      	b.n	8005c6e <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	9300      	str	r3, [sp, #0]
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	2180      	movs	r1, #128	; 0x80
 8005c50:	68f8      	ldr	r0, [r7, #12]
 8005c52:	f000 f82d 	bl	8005cb0 <UART_WaitOnFlagUntilTimeout>
 8005c56:	4603      	mov	r3, r0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d001      	beq.n	8005c60 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8005c5c:	2303      	movs	r3, #3
 8005c5e:	e023      	b.n	8005ca8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	1c5a      	adds	r2, r3, #1
 8005c64:	60ba      	str	r2, [r7, #8]
 8005c66:	781a      	ldrb	r2, [r3, #0]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d1b7      	bne.n	8005be8 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	9300      	str	r3, [sp, #0]
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	2140      	movs	r1, #64	; 0x40
 8005c82:	68f8      	ldr	r0, [r7, #12]
 8005c84:	f000 f814 	bl	8005cb0 <UART_WaitOnFlagUntilTimeout>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d001      	beq.n	8005c92 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005c8e:	2303      	movs	r3, #3
 8005c90:	e00a      	b.n	8005ca8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2220      	movs	r2, #32
 8005c96:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	e000      	b.n	8005ca8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005ca6:	2302      	movs	r3, #2
  }
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3718      	adds	r7, #24
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	60f8      	str	r0, [r7, #12]
 8005cb8:	60b9      	str	r1, [r7, #8]
 8005cba:	603b      	str	r3, [r7, #0]
 8005cbc:	4613      	mov	r3, r2
 8005cbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cc0:	e02c      	b.n	8005d1c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cc8:	d028      	beq.n	8005d1c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d007      	beq.n	8005ce0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005cd0:	f7fe ff1a 	bl	8004b08 <HAL_GetTick>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	1ad3      	subs	r3, r2, r3
 8005cda:	69ba      	ldr	r2, [r7, #24]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d21d      	bcs.n	8005d1c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68da      	ldr	r2, [r3, #12]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005cee:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	695a      	ldr	r2, [r3, #20]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f022 0201 	bic.w	r2, r2, #1
 8005cfe:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2220      	movs	r2, #32
 8005d04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2220      	movs	r2, #32
 8005d0c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005d18:	2303      	movs	r3, #3
 8005d1a:	e00f      	b.n	8005d3c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	4013      	ands	r3, r2
 8005d26:	68ba      	ldr	r2, [r7, #8]
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	bf0c      	ite	eq
 8005d2c:	2301      	moveq	r3, #1
 8005d2e:	2300      	movne	r3, #0
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	461a      	mov	r2, r3
 8005d34:	79fb      	ldrb	r3, [r7, #7]
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d0c3      	beq.n	8005cc2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d3a:	2300      	movs	r3, #0
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3710      	adds	r7, #16
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}

08005d44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d44:	b5b0      	push	{r4, r5, r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	68da      	ldr	r2, [r3, #12]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	430a      	orrs	r2, r1
 8005d60:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	689a      	ldr	r2, [r3, #8]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	691b      	ldr	r3, [r3, #16]
 8005d6a:	431a      	orrs	r2, r3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	695b      	ldr	r3, [r3, #20]
 8005d70:	431a      	orrs	r2, r3
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	69db      	ldr	r3, [r3, #28]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005d84:	f023 030c 	bic.w	r3, r3, #12
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	6812      	ldr	r2, [r2, #0]
 8005d8c:	68f9      	ldr	r1, [r7, #12]
 8005d8e:	430b      	orrs	r3, r1
 8005d90:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	695b      	ldr	r3, [r3, #20]
 8005d98:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	699a      	ldr	r2, [r3, #24]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	430a      	orrs	r2, r1
 8005da6:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	69db      	ldr	r3, [r3, #28]
 8005dac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005db0:	f040 80e4 	bne.w	8005f7c <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4aab      	ldr	r2, [pc, #684]	; (8006068 <UART_SetConfig+0x324>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d004      	beq.n	8005dc8 <UART_SetConfig+0x84>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4aaa      	ldr	r2, [pc, #680]	; (800606c <UART_SetConfig+0x328>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d16c      	bne.n	8005ea2 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8005dc8:	f7ff fa7e 	bl	80052c8 <HAL_RCC_GetPCLK2Freq>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	4613      	mov	r3, r2
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	4413      	add	r3, r2
 8005dd4:	009a      	lsls	r2, r3, #2
 8005dd6:	441a      	add	r2, r3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	005b      	lsls	r3, r3, #1
 8005dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8005de2:	4aa3      	ldr	r2, [pc, #652]	; (8006070 <UART_SetConfig+0x32c>)
 8005de4:	fba2 2303 	umull	r2, r3, r2, r3
 8005de8:	095b      	lsrs	r3, r3, #5
 8005dea:	011c      	lsls	r4, r3, #4
 8005dec:	f7ff fa6c 	bl	80052c8 <HAL_RCC_GetPCLK2Freq>
 8005df0:	4602      	mov	r2, r0
 8005df2:	4613      	mov	r3, r2
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	4413      	add	r3, r2
 8005df8:	009a      	lsls	r2, r3, #2
 8005dfa:	441a      	add	r2, r3
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	005b      	lsls	r3, r3, #1
 8005e02:	fbb2 f5f3 	udiv	r5, r2, r3
 8005e06:	f7ff fa5f 	bl	80052c8 <HAL_RCC_GetPCLK2Freq>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	4613      	mov	r3, r2
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	4413      	add	r3, r2
 8005e12:	009a      	lsls	r2, r3, #2
 8005e14:	441a      	add	r2, r3
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	005b      	lsls	r3, r3, #1
 8005e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e20:	4a93      	ldr	r2, [pc, #588]	; (8006070 <UART_SetConfig+0x32c>)
 8005e22:	fba2 2303 	umull	r2, r3, r2, r3
 8005e26:	095b      	lsrs	r3, r3, #5
 8005e28:	2264      	movs	r2, #100	; 0x64
 8005e2a:	fb02 f303 	mul.w	r3, r2, r3
 8005e2e:	1aeb      	subs	r3, r5, r3
 8005e30:	00db      	lsls	r3, r3, #3
 8005e32:	3332      	adds	r3, #50	; 0x32
 8005e34:	4a8e      	ldr	r2, [pc, #568]	; (8006070 <UART_SetConfig+0x32c>)
 8005e36:	fba2 2303 	umull	r2, r3, r2, r3
 8005e3a:	095b      	lsrs	r3, r3, #5
 8005e3c:	005b      	lsls	r3, r3, #1
 8005e3e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005e42:	441c      	add	r4, r3
 8005e44:	f7ff fa40 	bl	80052c8 <HAL_RCC_GetPCLK2Freq>
 8005e48:	4602      	mov	r2, r0
 8005e4a:	4613      	mov	r3, r2
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	4413      	add	r3, r2
 8005e50:	009a      	lsls	r2, r3, #2
 8005e52:	441a      	add	r2, r3
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	005b      	lsls	r3, r3, #1
 8005e5a:	fbb2 f5f3 	udiv	r5, r2, r3
 8005e5e:	f7ff fa33 	bl	80052c8 <HAL_RCC_GetPCLK2Freq>
 8005e62:	4602      	mov	r2, r0
 8005e64:	4613      	mov	r3, r2
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	4413      	add	r3, r2
 8005e6a:	009a      	lsls	r2, r3, #2
 8005e6c:	441a      	add	r2, r3
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	005b      	lsls	r3, r3, #1
 8005e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e78:	4a7d      	ldr	r2, [pc, #500]	; (8006070 <UART_SetConfig+0x32c>)
 8005e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e7e:	095b      	lsrs	r3, r3, #5
 8005e80:	2264      	movs	r2, #100	; 0x64
 8005e82:	fb02 f303 	mul.w	r3, r2, r3
 8005e86:	1aeb      	subs	r3, r5, r3
 8005e88:	00db      	lsls	r3, r3, #3
 8005e8a:	3332      	adds	r3, #50	; 0x32
 8005e8c:	4a78      	ldr	r2, [pc, #480]	; (8006070 <UART_SetConfig+0x32c>)
 8005e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e92:	095b      	lsrs	r3, r3, #5
 8005e94:	f003 0207 	and.w	r2, r3, #7
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4422      	add	r2, r4
 8005e9e:	609a      	str	r2, [r3, #8]
 8005ea0:	e154      	b.n	800614c <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005ea2:	f7ff f9fd 	bl	80052a0 <HAL_RCC_GetPCLK1Freq>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	4613      	mov	r3, r2
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	4413      	add	r3, r2
 8005eae:	009a      	lsls	r2, r3, #2
 8005eb0:	441a      	add	r2, r3
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	005b      	lsls	r3, r3, #1
 8005eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ebc:	4a6c      	ldr	r2, [pc, #432]	; (8006070 <UART_SetConfig+0x32c>)
 8005ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8005ec2:	095b      	lsrs	r3, r3, #5
 8005ec4:	011c      	lsls	r4, r3, #4
 8005ec6:	f7ff f9eb 	bl	80052a0 <HAL_RCC_GetPCLK1Freq>
 8005eca:	4602      	mov	r2, r0
 8005ecc:	4613      	mov	r3, r2
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	4413      	add	r3, r2
 8005ed2:	009a      	lsls	r2, r3, #2
 8005ed4:	441a      	add	r2, r3
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	005b      	lsls	r3, r3, #1
 8005edc:	fbb2 f5f3 	udiv	r5, r2, r3
 8005ee0:	f7ff f9de 	bl	80052a0 <HAL_RCC_GetPCLK1Freq>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	4613      	mov	r3, r2
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	4413      	add	r3, r2
 8005eec:	009a      	lsls	r2, r3, #2
 8005eee:	441a      	add	r2, r3
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	005b      	lsls	r3, r3, #1
 8005ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005efa:	4a5d      	ldr	r2, [pc, #372]	; (8006070 <UART_SetConfig+0x32c>)
 8005efc:	fba2 2303 	umull	r2, r3, r2, r3
 8005f00:	095b      	lsrs	r3, r3, #5
 8005f02:	2264      	movs	r2, #100	; 0x64
 8005f04:	fb02 f303 	mul.w	r3, r2, r3
 8005f08:	1aeb      	subs	r3, r5, r3
 8005f0a:	00db      	lsls	r3, r3, #3
 8005f0c:	3332      	adds	r3, #50	; 0x32
 8005f0e:	4a58      	ldr	r2, [pc, #352]	; (8006070 <UART_SetConfig+0x32c>)
 8005f10:	fba2 2303 	umull	r2, r3, r2, r3
 8005f14:	095b      	lsrs	r3, r3, #5
 8005f16:	005b      	lsls	r3, r3, #1
 8005f18:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f1c:	441c      	add	r4, r3
 8005f1e:	f7ff f9bf 	bl	80052a0 <HAL_RCC_GetPCLK1Freq>
 8005f22:	4602      	mov	r2, r0
 8005f24:	4613      	mov	r3, r2
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	4413      	add	r3, r2
 8005f2a:	009a      	lsls	r2, r3, #2
 8005f2c:	441a      	add	r2, r3
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	005b      	lsls	r3, r3, #1
 8005f34:	fbb2 f5f3 	udiv	r5, r2, r3
 8005f38:	f7ff f9b2 	bl	80052a0 <HAL_RCC_GetPCLK1Freq>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	4613      	mov	r3, r2
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	4413      	add	r3, r2
 8005f44:	009a      	lsls	r2, r3, #2
 8005f46:	441a      	add	r2, r3
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	005b      	lsls	r3, r3, #1
 8005f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f52:	4a47      	ldr	r2, [pc, #284]	; (8006070 <UART_SetConfig+0x32c>)
 8005f54:	fba2 2303 	umull	r2, r3, r2, r3
 8005f58:	095b      	lsrs	r3, r3, #5
 8005f5a:	2264      	movs	r2, #100	; 0x64
 8005f5c:	fb02 f303 	mul.w	r3, r2, r3
 8005f60:	1aeb      	subs	r3, r5, r3
 8005f62:	00db      	lsls	r3, r3, #3
 8005f64:	3332      	adds	r3, #50	; 0x32
 8005f66:	4a42      	ldr	r2, [pc, #264]	; (8006070 <UART_SetConfig+0x32c>)
 8005f68:	fba2 2303 	umull	r2, r3, r2, r3
 8005f6c:	095b      	lsrs	r3, r3, #5
 8005f6e:	f003 0207 	and.w	r2, r3, #7
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4422      	add	r2, r4
 8005f78:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8005f7a:	e0e7      	b.n	800614c <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a39      	ldr	r2, [pc, #228]	; (8006068 <UART_SetConfig+0x324>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d004      	beq.n	8005f90 <UART_SetConfig+0x24c>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a38      	ldr	r2, [pc, #224]	; (800606c <UART_SetConfig+0x328>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d171      	bne.n	8006074 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8005f90:	f7ff f99a 	bl	80052c8 <HAL_RCC_GetPCLK2Freq>
 8005f94:	4602      	mov	r2, r0
 8005f96:	4613      	mov	r3, r2
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	4413      	add	r3, r2
 8005f9c:	009a      	lsls	r2, r3, #2
 8005f9e:	441a      	add	r2, r3
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005faa:	4a31      	ldr	r2, [pc, #196]	; (8006070 <UART_SetConfig+0x32c>)
 8005fac:	fba2 2303 	umull	r2, r3, r2, r3
 8005fb0:	095b      	lsrs	r3, r3, #5
 8005fb2:	011c      	lsls	r4, r3, #4
 8005fb4:	f7ff f988 	bl	80052c8 <HAL_RCC_GetPCLK2Freq>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	4613      	mov	r3, r2
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	4413      	add	r3, r2
 8005fc0:	009a      	lsls	r2, r3, #2
 8005fc2:	441a      	add	r2, r3
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	fbb2 f5f3 	udiv	r5, r2, r3
 8005fce:	f7ff f97b 	bl	80052c8 <HAL_RCC_GetPCLK2Freq>
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	4613      	mov	r3, r2
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	4413      	add	r3, r2
 8005fda:	009a      	lsls	r2, r3, #2
 8005fdc:	441a      	add	r2, r3
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fe8:	4a21      	ldr	r2, [pc, #132]	; (8006070 <UART_SetConfig+0x32c>)
 8005fea:	fba2 2303 	umull	r2, r3, r2, r3
 8005fee:	095b      	lsrs	r3, r3, #5
 8005ff0:	2264      	movs	r2, #100	; 0x64
 8005ff2:	fb02 f303 	mul.w	r3, r2, r3
 8005ff6:	1aeb      	subs	r3, r5, r3
 8005ff8:	011b      	lsls	r3, r3, #4
 8005ffa:	3332      	adds	r3, #50	; 0x32
 8005ffc:	4a1c      	ldr	r2, [pc, #112]	; (8006070 <UART_SetConfig+0x32c>)
 8005ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8006002:	095b      	lsrs	r3, r3, #5
 8006004:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006008:	441c      	add	r4, r3
 800600a:	f7ff f95d 	bl	80052c8 <HAL_RCC_GetPCLK2Freq>
 800600e:	4602      	mov	r2, r0
 8006010:	4613      	mov	r3, r2
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	4413      	add	r3, r2
 8006016:	009a      	lsls	r2, r3, #2
 8006018:	441a      	add	r2, r3
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	fbb2 f5f3 	udiv	r5, r2, r3
 8006024:	f7ff f950 	bl	80052c8 <HAL_RCC_GetPCLK2Freq>
 8006028:	4602      	mov	r2, r0
 800602a:	4613      	mov	r3, r2
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	4413      	add	r3, r2
 8006030:	009a      	lsls	r2, r3, #2
 8006032:	441a      	add	r2, r3
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	fbb2 f3f3 	udiv	r3, r2, r3
 800603e:	4a0c      	ldr	r2, [pc, #48]	; (8006070 <UART_SetConfig+0x32c>)
 8006040:	fba2 2303 	umull	r2, r3, r2, r3
 8006044:	095b      	lsrs	r3, r3, #5
 8006046:	2264      	movs	r2, #100	; 0x64
 8006048:	fb02 f303 	mul.w	r3, r2, r3
 800604c:	1aeb      	subs	r3, r5, r3
 800604e:	011b      	lsls	r3, r3, #4
 8006050:	3332      	adds	r3, #50	; 0x32
 8006052:	4a07      	ldr	r2, [pc, #28]	; (8006070 <UART_SetConfig+0x32c>)
 8006054:	fba2 2303 	umull	r2, r3, r2, r3
 8006058:	095b      	lsrs	r3, r3, #5
 800605a:	f003 020f 	and.w	r2, r3, #15
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4422      	add	r2, r4
 8006064:	609a      	str	r2, [r3, #8]
 8006066:	e071      	b.n	800614c <UART_SetConfig+0x408>
 8006068:	40011000 	.word	0x40011000
 800606c:	40011400 	.word	0x40011400
 8006070:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8006074:	f7ff f914 	bl	80052a0 <HAL_RCC_GetPCLK1Freq>
 8006078:	4602      	mov	r2, r0
 800607a:	4613      	mov	r3, r2
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	4413      	add	r3, r2
 8006080:	009a      	lsls	r2, r3, #2
 8006082:	441a      	add	r2, r3
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	fbb2 f3f3 	udiv	r3, r2, r3
 800608e:	4a31      	ldr	r2, [pc, #196]	; (8006154 <UART_SetConfig+0x410>)
 8006090:	fba2 2303 	umull	r2, r3, r2, r3
 8006094:	095b      	lsrs	r3, r3, #5
 8006096:	011c      	lsls	r4, r3, #4
 8006098:	f7ff f902 	bl	80052a0 <HAL_RCC_GetPCLK1Freq>
 800609c:	4602      	mov	r2, r0
 800609e:	4613      	mov	r3, r2
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	4413      	add	r3, r2
 80060a4:	009a      	lsls	r2, r3, #2
 80060a6:	441a      	add	r2, r3
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	fbb2 f5f3 	udiv	r5, r2, r3
 80060b2:	f7ff f8f5 	bl	80052a0 <HAL_RCC_GetPCLK1Freq>
 80060b6:	4602      	mov	r2, r0
 80060b8:	4613      	mov	r3, r2
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	4413      	add	r3, r2
 80060be:	009a      	lsls	r2, r3, #2
 80060c0:	441a      	add	r2, r3
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80060cc:	4a21      	ldr	r2, [pc, #132]	; (8006154 <UART_SetConfig+0x410>)
 80060ce:	fba2 2303 	umull	r2, r3, r2, r3
 80060d2:	095b      	lsrs	r3, r3, #5
 80060d4:	2264      	movs	r2, #100	; 0x64
 80060d6:	fb02 f303 	mul.w	r3, r2, r3
 80060da:	1aeb      	subs	r3, r5, r3
 80060dc:	011b      	lsls	r3, r3, #4
 80060de:	3332      	adds	r3, #50	; 0x32
 80060e0:	4a1c      	ldr	r2, [pc, #112]	; (8006154 <UART_SetConfig+0x410>)
 80060e2:	fba2 2303 	umull	r2, r3, r2, r3
 80060e6:	095b      	lsrs	r3, r3, #5
 80060e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060ec:	441c      	add	r4, r3
 80060ee:	f7ff f8d7 	bl	80052a0 <HAL_RCC_GetPCLK1Freq>
 80060f2:	4602      	mov	r2, r0
 80060f4:	4613      	mov	r3, r2
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	4413      	add	r3, r2
 80060fa:	009a      	lsls	r2, r3, #2
 80060fc:	441a      	add	r2, r3
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	fbb2 f5f3 	udiv	r5, r2, r3
 8006108:	f7ff f8ca 	bl	80052a0 <HAL_RCC_GetPCLK1Freq>
 800610c:	4602      	mov	r2, r0
 800610e:	4613      	mov	r3, r2
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	4413      	add	r3, r2
 8006114:	009a      	lsls	r2, r3, #2
 8006116:	441a      	add	r2, r3
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006122:	4a0c      	ldr	r2, [pc, #48]	; (8006154 <UART_SetConfig+0x410>)
 8006124:	fba2 2303 	umull	r2, r3, r2, r3
 8006128:	095b      	lsrs	r3, r3, #5
 800612a:	2264      	movs	r2, #100	; 0x64
 800612c:	fb02 f303 	mul.w	r3, r2, r3
 8006130:	1aeb      	subs	r3, r5, r3
 8006132:	011b      	lsls	r3, r3, #4
 8006134:	3332      	adds	r3, #50	; 0x32
 8006136:	4a07      	ldr	r2, [pc, #28]	; (8006154 <UART_SetConfig+0x410>)
 8006138:	fba2 2303 	umull	r2, r3, r2, r3
 800613c:	095b      	lsrs	r3, r3, #5
 800613e:	f003 020f 	and.w	r2, r3, #15
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4422      	add	r2, r4
 8006148:	609a      	str	r2, [r3, #8]
}
 800614a:	e7ff      	b.n	800614c <UART_SetConfig+0x408>
 800614c:	bf00      	nop
 800614e:	3710      	adds	r7, #16
 8006150:	46bd      	mov	sp, r7
 8006152:	bdb0      	pop	{r4, r5, r7, pc}
 8006154:	51eb851f 	.word	0x51eb851f

08006158 <aiInit>:

/*
 * Init function to create and initialize a NN.
 */
int aiInit(const ai_u8* activations)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b08e      	sub	sp, #56	; 0x38
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
    ai_error err;

    /* 1 - Specific AI data structure to provide the references of the
     * activation/working memory chunk and the weights/bias parameters */
    const ai_network_params params = {
 8006160:	4b25      	ldr	r3, [pc, #148]	; (80061f8 <aiInit+0xa0>)
 8006162:	60fb      	str	r3, [r7, #12]
 8006164:	2301      	movs	r3, #1
 8006166:	823b      	strh	r3, [r7, #16]
 8006168:	2301      	movs	r3, #1
 800616a:	827b      	strh	r3, [r7, #18]
 800616c:	2301      	movs	r3, #1
 800616e:	82bb      	strh	r3, [r7, #20]
 8006170:	2364      	movs	r3, #100	; 0x64
 8006172:	61bb      	str	r3, [r7, #24]
            AI_NETWORK_DATA_WEIGHTS(ai_network_data_weights_get()),
 8006174:	f000 fd3a 	bl	8006bec <ai_network_data_weights_get>
 8006178:	4603      	mov	r3, r0
    const ai_network_params params = {
 800617a:	61fb      	str	r3, [r7, #28]
 800617c:	4b1f      	ldr	r3, [pc, #124]	; (80061fc <aiInit+0xa4>)
 800617e:	623b      	str	r3, [r7, #32]
 8006180:	2301      	movs	r3, #1
 8006182:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006184:	2301      	movs	r3, #1
 8006186:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006188:	2301      	movs	r3, #1
 800618a:	853b      	strh	r3, [r7, #40]	; 0x28
 800618c:	2318      	movs	r3, #24
 800618e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	633b      	str	r3, [r7, #48]	; 0x30
            AI_NETWORK_DATA_ACTIVATIONS(activations)
    };

    /* 2 - Create an instance of the NN */
    err = ai_network_create(&network, AI_NETWORK_DATA_CONFIG);
 8006194:	2100      	movs	r1, #0
 8006196:	481a      	ldr	r0, [pc, #104]	; (8006200 <aiInit+0xa8>)
 8006198:	f000 fcc2 	bl	8006b20 <ai_network_create>
 800619c:	4603      	mov	r3, r0
 800619e:	637b      	str	r3, [r7, #52]	; 0x34
    if (err.type != AI_ERROR_NONE) {
 80061a0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d002      	beq.n	80061ae <aiInit+0x56>
	    return -1;
 80061a8:	f04f 33ff 	mov.w	r3, #4294967295
 80061ac:	e020      	b.n	80061f0 <aiInit+0x98>
    }

    /* 3 - Initialize the NN - Ready to be used */
    if (!ai_network_init(network, &params)) {
 80061ae:	4b14      	ldr	r3, [pc, #80]	; (8006200 <aiInit+0xa8>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f107 020c 	add.w	r2, r7, #12
 80061b6:	4611      	mov	r1, r2
 80061b8:	4618      	mov	r0, r3
 80061ba:	f000 fcd3 	bl	8006b64 <ai_network_init>
 80061be:	4603      	mov	r3, r0
 80061c0:	f083 0301 	eor.w	r3, r3, #1
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d011      	beq.n	80061ee <aiInit+0x96>
        err = ai_network_get_error(network);
 80061ca:	4b0d      	ldr	r3, [pc, #52]	; (8006200 <aiInit+0xa8>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4618      	mov	r0, r3
 80061d0:	f000 fc9a 	bl	8006b08 <ai_network_get_error>
 80061d4:	4603      	mov	r3, r0
 80061d6:	637b      	str	r3, [r7, #52]	; 0x34
        ai_network_destroy(network);
 80061d8:	4b09      	ldr	r3, [pc, #36]	; (8006200 <aiInit+0xa8>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4618      	mov	r0, r3
 80061de:	f000 fcb5 	bl	8006b4c <ai_network_destroy>
        network = AI_HANDLE_NULL;
 80061e2:	4b07      	ldr	r3, [pc, #28]	; (8006200 <aiInit+0xa8>)
 80061e4:	2200      	movs	r2, #0
 80061e6:	601a      	str	r2, [r3, #0]
	    return -2;
 80061e8:	f06f 0301 	mvn.w	r3, #1
 80061ec:	e000      	b.n	80061f0 <aiInit+0x98>
    }

    return 0;
 80061ee:	2300      	movs	r3, #0
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3738      	adds	r7, #56	; 0x38
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	40040440 	.word	0x40040440
 80061fc:	00040440 	.word	0x00040440
 8006200:	2000074c 	.word	0x2000074c

08006204 <aiRun>:

/*
 * Run function to execute an inference.
 */
int aiRun(const void *in_data, void *out_data)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b084      	sub	sp, #16
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
    ai_i32 nbatch;
    ai_error err;

    /* Parameters checking */
    if (!in_data || !out_data || !network)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d006      	beq.n	8006222 <aiRun+0x1e>
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d003      	beq.n	8006222 <aiRun+0x1e>
 800621a:	4b17      	ldr	r3, [pc, #92]	; (8006278 <aiRun+0x74>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d102      	bne.n	8006228 <aiRun+0x24>
        return -1;
 8006222:	f04f 33ff 	mov.w	r3, #4294967295
 8006226:	e022      	b.n	800626e <aiRun+0x6a>

    /* Initialize input/output buffer handlers */
    ai_input[0].n_batches = 1;
 8006228:	4b14      	ldr	r3, [pc, #80]	; (800627c <aiRun+0x78>)
 800622a:	2201      	movs	r2, #1
 800622c:	809a      	strh	r2, [r3, #4]
    ai_input[0].data = AI_HANDLE_PTR(in_data);
 800622e:	4a13      	ldr	r2, [pc, #76]	; (800627c <aiRun+0x78>)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6113      	str	r3, [r2, #16]
    ai_output[0].n_batches = 1;
 8006234:	4b12      	ldr	r3, [pc, #72]	; (8006280 <aiRun+0x7c>)
 8006236:	2201      	movs	r2, #1
 8006238:	809a      	strh	r2, [r3, #4]
    ai_output[0].data = AI_HANDLE_PTR(out_data);
 800623a:	4a11      	ldr	r2, [pc, #68]	; (8006280 <aiRun+0x7c>)
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	6113      	str	r3, [r2, #16]

    /* 2 - Perform the inference */
    nbatch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 8006240:	4b0d      	ldr	r3, [pc, #52]	; (8006278 <aiRun+0x74>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a0e      	ldr	r2, [pc, #56]	; (8006280 <aiRun+0x7c>)
 8006246:	490d      	ldr	r1, [pc, #52]	; (800627c <aiRun+0x78>)
 8006248:	4618      	mov	r0, r3
 800624a:	f000 fcbe 	bl	8006bca <ai_network_run>
 800624e:	60f8      	str	r0, [r7, #12]
    if (nbatch != 1) {
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2b01      	cmp	r3, #1
 8006254:	d00a      	beq.n	800626c <aiRun+0x68>
        err = ai_network_get_error(network);
 8006256:	4b08      	ldr	r3, [pc, #32]	; (8006278 <aiRun+0x74>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4618      	mov	r0, r3
 800625c:	f000 fc54 	bl	8006b08 <ai_network_get_error>
 8006260:	4603      	mov	r3, r0
 8006262:	60bb      	str	r3, [r7, #8]
        // ...
        return err.code;
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800626a:	e000      	b.n	800626e <aiRun+0x6a>
    }

    return 0;
 800626c:	2300      	movs	r3, #0
}
 800626e:	4618      	mov	r0, r3
 8006270:	3710      	adds	r7, #16
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop
 8006278:	2000074c 	.word	0x2000074c
 800627c:	20000008 	.word	0x20000008
 8006280:	2000001c 	.word	0x2000001c

08006284 <MX_X_CUBE_AI_Init>:

/*************************************************************************
  *
  */
void MX_X_CUBE_AI_Init(void)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	af00      	add	r7, sp, #0
    /* Activation/working buffer is allocated as a static memory chunk
     * (bss section) */
    AI_ALIGNED(4)
    static ai_u8 activations[AI_NETWORK_DATA_ACTIVATIONS_SIZE];

    aiInit(activations);
 8006288:	4802      	ldr	r0, [pc, #8]	; (8006294 <MX_X_CUBE_AI_Init+0x10>)
 800628a:	f7ff ff65 	bl	8006158 <aiInit>
    /* USER CODE END 0 */
}
 800628e:	bf00      	nop
 8006290:	bd80      	pop	{r7, pc}
 8006292:	bf00      	nop
 8006294:	20000750 	.word	0x20000750

08006298 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 8006298:	b5b0      	push	{r4, r5, r7, lr}
 800629a:	b08a      	sub	sp, #40	; 0x28
 800629c:	af02      	add	r7, sp, #8
    /* USER CODE BEGIN 1 */
    char buffer[32] = {0};
 800629e:	463b      	mov	r3, r7
 80062a0:	2220      	movs	r2, #32
 80062a2:	2100      	movs	r1, #0
 80062a4:	4618      	mov	r0, r3
 80062a6:	f000 fe3f 	bl	8006f28 <memset>
    AI_ALIGNED(4)
    static ai_i8 in_data[AI_NETWORK_IN_1_SIZE_BYTES];
    AI_ALIGNED(4)
    static ai_i8 out_data[AI_NETWORK_OUT_1_SIZE_BYTES];

    sprintf(buffer, "######################################\n");
 80062aa:	463b      	mov	r3, r7
 80062ac:	4acb      	ldr	r2, [pc, #812]	; (80065dc <MX_X_CUBE_AI_Process+0x344>)
 80062ae:	461c      	mov	r4, r3
 80062b0:	4615      	mov	r5, r2
 80062b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80062b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80062b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062ba:	e895 0003 	ldmia.w	r5, {r0, r1}
 80062be:	e884 0003 	stmia.w	r4, {r0, r1}
    HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 1000);
 80062c2:	463b      	mov	r3, r7
 80062c4:	4618      	mov	r0, r3
 80062c6:	f7fd fc60 	bl	8003b8a <strlen>
 80062ca:	4603      	mov	r3, r0
 80062cc:	b29a      	uxth	r2, r3
 80062ce:	4639      	mov	r1, r7
 80062d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80062d4:	48c2      	ldr	r0, [pc, #776]	; (80065e0 <MX_X_CUBE_AI_Process+0x348>)
 80062d6:	f7ff fc52 	bl	8005b7e <HAL_UART_Transmit>
    sprintf(buffer, "### Neural Network based NAND Gate ###\n");
 80062da:	463b      	mov	r3, r7
 80062dc:	4ac1      	ldr	r2, [pc, #772]	; (80065e4 <MX_X_CUBE_AI_Process+0x34c>)
 80062de:	461c      	mov	r4, r3
 80062e0:	4615      	mov	r5, r2
 80062e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80062e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80062e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062ea:	e895 0003 	ldmia.w	r5, {r0, r1}
 80062ee:	e884 0003 	stmia.w	r4, {r0, r1}
    HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 1000);
 80062f2:	463b      	mov	r3, r7
 80062f4:	4618      	mov	r0, r3
 80062f6:	f7fd fc48 	bl	8003b8a <strlen>
 80062fa:	4603      	mov	r3, r0
 80062fc:	b29a      	uxth	r2, r3
 80062fe:	4639      	mov	r1, r7
 8006300:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006304:	48b6      	ldr	r0, [pc, #728]	; (80065e0 <MX_X_CUBE_AI_Process+0x348>)
 8006306:	f7ff fc3a 	bl	8005b7e <HAL_UART_Transmit>
    sprintf(buffer, "######################################\n");
 800630a:	463b      	mov	r3, r7
 800630c:	4ab3      	ldr	r2, [pc, #716]	; (80065dc <MX_X_CUBE_AI_Process+0x344>)
 800630e:	461c      	mov	r4, r3
 8006310:	4615      	mov	r5, r2
 8006312:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006314:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006316:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006318:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800631a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800631e:	e884 0003 	stmia.w	r4, {r0, r1}
    HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 1000);
 8006322:	463b      	mov	r3, r7
 8006324:	4618      	mov	r0, r3
 8006326:	f7fd fc30 	bl	8003b8a <strlen>
 800632a:	4603      	mov	r3, r0
 800632c:	b29a      	uxth	r2, r3
 800632e:	4639      	mov	r1, r7
 8006330:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006334:	48aa      	ldr	r0, [pc, #680]	; (80065e0 <MX_X_CUBE_AI_Process+0x348>)
 8006336:	f7ff fc22 	bl	8005b7e <HAL_UART_Transmit>

    ((ai_float *)in_data)[0] = (ai_float) 0.0f;
 800633a:	4bab      	ldr	r3, [pc, #684]	; (80065e8 <MX_X_CUBE_AI_Process+0x350>)
 800633c:	f04f 0200 	mov.w	r2, #0
 8006340:	601a      	str	r2, [r3, #0]
    ((ai_float *)in_data)[1] = (ai_float) 0.0f;
 8006342:	4baa      	ldr	r3, [pc, #680]	; (80065ec <MX_X_CUBE_AI_Process+0x354>)
 8006344:	f04f 0200 	mov.w	r2, #0
 8006348:	601a      	str	r2, [r3, #0]
    aiRun(in_data, out_data);
 800634a:	49a9      	ldr	r1, [pc, #676]	; (80065f0 <MX_X_CUBE_AI_Process+0x358>)
 800634c:	48a6      	ldr	r0, [pc, #664]	; (80065e8 <MX_X_CUBE_AI_Process+0x350>)
 800634e:	f7ff ff59 	bl	8006204 <aiRun>
    sprintf(buffer, "Input = %d,%d\n", (int)round(((ai_float *)in_data)[0]), (int)round(((ai_float *)in_data)[1]));
 8006352:	4ba5      	ldr	r3, [pc, #660]	; (80065e8 <MX_X_CUBE_AI_Process+0x350>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4618      	mov	r0, r3
 8006358:	f7fd fdd6 	bl	8003f08 <__aeabi_f2d>
 800635c:	4603      	mov	r3, r0
 800635e:	460c      	mov	r4, r1
 8006360:	ec44 3b10 	vmov	d0, r3, r4
 8006364:	f002 fe1a 	bl	8008f9c <round>
 8006368:	ec54 3b10 	vmov	r3, r4, d0
 800636c:	4618      	mov	r0, r3
 800636e:	4621      	mov	r1, r4
 8006370:	f7fe f8d2 	bl	8004518 <__aeabi_d2iz>
 8006374:	4604      	mov	r4, r0
 8006376:	4b9d      	ldr	r3, [pc, #628]	; (80065ec <MX_X_CUBE_AI_Process+0x354>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4618      	mov	r0, r3
 800637c:	f7fd fdc4 	bl	8003f08 <__aeabi_f2d>
 8006380:	4602      	mov	r2, r0
 8006382:	460b      	mov	r3, r1
 8006384:	ec43 2b10 	vmov	d0, r2, r3
 8006388:	f002 fe08 	bl	8008f9c <round>
 800638c:	ec53 2b10 	vmov	r2, r3, d0
 8006390:	4610      	mov	r0, r2
 8006392:	4619      	mov	r1, r3
 8006394:	f7fe f8c0 	bl	8004518 <__aeabi_d2iz>
 8006398:	4603      	mov	r3, r0
 800639a:	4638      	mov	r0, r7
 800639c:	4622      	mov	r2, r4
 800639e:	4995      	ldr	r1, [pc, #596]	; (80065f4 <MX_X_CUBE_AI_Process+0x35c>)
 80063a0:	f001 fa26 	bl	80077f0 <siprintf>
    HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 1000);
 80063a4:	463b      	mov	r3, r7
 80063a6:	4618      	mov	r0, r3
 80063a8:	f7fd fbef 	bl	8003b8a <strlen>
 80063ac:	4603      	mov	r3, r0
 80063ae:	b29a      	uxth	r2, r3
 80063b0:	4639      	mov	r1, r7
 80063b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80063b6:	488a      	ldr	r0, [pc, #552]	; (80065e0 <MX_X_CUBE_AI_Process+0x348>)
 80063b8:	f7ff fbe1 	bl	8005b7e <HAL_UART_Transmit>
    sprintf(buffer, "Output = %.6f/%d (original/rounded)\n", ((ai_float *)out_data)[0], (int)round(((ai_float *)out_data)[0]));
 80063bc:	4b8c      	ldr	r3, [pc, #560]	; (80065f0 <MX_X_CUBE_AI_Process+0x358>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4618      	mov	r0, r3
 80063c2:	f7fd fda1 	bl	8003f08 <__aeabi_f2d>
 80063c6:	4604      	mov	r4, r0
 80063c8:	460d      	mov	r5, r1
 80063ca:	4b89      	ldr	r3, [pc, #548]	; (80065f0 <MX_X_CUBE_AI_Process+0x358>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4618      	mov	r0, r3
 80063d0:	f7fd fd9a 	bl	8003f08 <__aeabi_f2d>
 80063d4:	4602      	mov	r2, r0
 80063d6:	460b      	mov	r3, r1
 80063d8:	ec43 2b10 	vmov	d0, r2, r3
 80063dc:	f002 fdde 	bl	8008f9c <round>
 80063e0:	ec53 2b10 	vmov	r2, r3, d0
 80063e4:	4610      	mov	r0, r2
 80063e6:	4619      	mov	r1, r3
 80063e8:	f7fe f896 	bl	8004518 <__aeabi_d2iz>
 80063ec:	4603      	mov	r3, r0
 80063ee:	4638      	mov	r0, r7
 80063f0:	9300      	str	r3, [sp, #0]
 80063f2:	4622      	mov	r2, r4
 80063f4:	462b      	mov	r3, r5
 80063f6:	4980      	ldr	r1, [pc, #512]	; (80065f8 <MX_X_CUBE_AI_Process+0x360>)
 80063f8:	f001 f9fa 	bl	80077f0 <siprintf>
    HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 1000);
 80063fc:	463b      	mov	r3, r7
 80063fe:	4618      	mov	r0, r3
 8006400:	f7fd fbc3 	bl	8003b8a <strlen>
 8006404:	4603      	mov	r3, r0
 8006406:	b29a      	uxth	r2, r3
 8006408:	4639      	mov	r1, r7
 800640a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800640e:	4874      	ldr	r0, [pc, #464]	; (80065e0 <MX_X_CUBE_AI_Process+0x348>)
 8006410:	f7ff fbb5 	bl	8005b7e <HAL_UART_Transmit>

    ((ai_float *)in_data)[0] = (ai_float) 0.0f;
 8006414:	4b74      	ldr	r3, [pc, #464]	; (80065e8 <MX_X_CUBE_AI_Process+0x350>)
 8006416:	f04f 0200 	mov.w	r2, #0
 800641a:	601a      	str	r2, [r3, #0]
    ((ai_float *)in_data)[1] = (ai_float) 1.0f;
 800641c:	4b73      	ldr	r3, [pc, #460]	; (80065ec <MX_X_CUBE_AI_Process+0x354>)
 800641e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006422:	601a      	str	r2, [r3, #0]
    aiRun(in_data, out_data);
 8006424:	4972      	ldr	r1, [pc, #456]	; (80065f0 <MX_X_CUBE_AI_Process+0x358>)
 8006426:	4870      	ldr	r0, [pc, #448]	; (80065e8 <MX_X_CUBE_AI_Process+0x350>)
 8006428:	f7ff feec 	bl	8006204 <aiRun>
    sprintf(buffer, "Input = %d,%d\n", (int)round(((ai_float *)in_data)[0]), (int)round(((ai_float *)in_data)[1]));
 800642c:	4b6e      	ldr	r3, [pc, #440]	; (80065e8 <MX_X_CUBE_AI_Process+0x350>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4618      	mov	r0, r3
 8006432:	f7fd fd69 	bl	8003f08 <__aeabi_f2d>
 8006436:	4603      	mov	r3, r0
 8006438:	460c      	mov	r4, r1
 800643a:	ec44 3b10 	vmov	d0, r3, r4
 800643e:	f002 fdad 	bl	8008f9c <round>
 8006442:	ec54 3b10 	vmov	r3, r4, d0
 8006446:	4618      	mov	r0, r3
 8006448:	4621      	mov	r1, r4
 800644a:	f7fe f865 	bl	8004518 <__aeabi_d2iz>
 800644e:	4604      	mov	r4, r0
 8006450:	4b66      	ldr	r3, [pc, #408]	; (80065ec <MX_X_CUBE_AI_Process+0x354>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4618      	mov	r0, r3
 8006456:	f7fd fd57 	bl	8003f08 <__aeabi_f2d>
 800645a:	4602      	mov	r2, r0
 800645c:	460b      	mov	r3, r1
 800645e:	ec43 2b10 	vmov	d0, r2, r3
 8006462:	f002 fd9b 	bl	8008f9c <round>
 8006466:	ec53 2b10 	vmov	r2, r3, d0
 800646a:	4610      	mov	r0, r2
 800646c:	4619      	mov	r1, r3
 800646e:	f7fe f853 	bl	8004518 <__aeabi_d2iz>
 8006472:	4603      	mov	r3, r0
 8006474:	4638      	mov	r0, r7
 8006476:	4622      	mov	r2, r4
 8006478:	495e      	ldr	r1, [pc, #376]	; (80065f4 <MX_X_CUBE_AI_Process+0x35c>)
 800647a:	f001 f9b9 	bl	80077f0 <siprintf>
    HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 1000);
 800647e:	463b      	mov	r3, r7
 8006480:	4618      	mov	r0, r3
 8006482:	f7fd fb82 	bl	8003b8a <strlen>
 8006486:	4603      	mov	r3, r0
 8006488:	b29a      	uxth	r2, r3
 800648a:	4639      	mov	r1, r7
 800648c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006490:	4853      	ldr	r0, [pc, #332]	; (80065e0 <MX_X_CUBE_AI_Process+0x348>)
 8006492:	f7ff fb74 	bl	8005b7e <HAL_UART_Transmit>
    sprintf(buffer, "Output = %.6f/%d (original/rounded)\n", ((ai_float *)out_data)[0], (int)round(((ai_float *)out_data)[0]));
 8006496:	4b56      	ldr	r3, [pc, #344]	; (80065f0 <MX_X_CUBE_AI_Process+0x358>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4618      	mov	r0, r3
 800649c:	f7fd fd34 	bl	8003f08 <__aeabi_f2d>
 80064a0:	4604      	mov	r4, r0
 80064a2:	460d      	mov	r5, r1
 80064a4:	4b52      	ldr	r3, [pc, #328]	; (80065f0 <MX_X_CUBE_AI_Process+0x358>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4618      	mov	r0, r3
 80064aa:	f7fd fd2d 	bl	8003f08 <__aeabi_f2d>
 80064ae:	4602      	mov	r2, r0
 80064b0:	460b      	mov	r3, r1
 80064b2:	ec43 2b10 	vmov	d0, r2, r3
 80064b6:	f002 fd71 	bl	8008f9c <round>
 80064ba:	ec53 2b10 	vmov	r2, r3, d0
 80064be:	4610      	mov	r0, r2
 80064c0:	4619      	mov	r1, r3
 80064c2:	f7fe f829 	bl	8004518 <__aeabi_d2iz>
 80064c6:	4603      	mov	r3, r0
 80064c8:	4638      	mov	r0, r7
 80064ca:	9300      	str	r3, [sp, #0]
 80064cc:	4622      	mov	r2, r4
 80064ce:	462b      	mov	r3, r5
 80064d0:	4949      	ldr	r1, [pc, #292]	; (80065f8 <MX_X_CUBE_AI_Process+0x360>)
 80064d2:	f001 f98d 	bl	80077f0 <siprintf>
    HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 1000);
 80064d6:	463b      	mov	r3, r7
 80064d8:	4618      	mov	r0, r3
 80064da:	f7fd fb56 	bl	8003b8a <strlen>
 80064de:	4603      	mov	r3, r0
 80064e0:	b29a      	uxth	r2, r3
 80064e2:	4639      	mov	r1, r7
 80064e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80064e8:	483d      	ldr	r0, [pc, #244]	; (80065e0 <MX_X_CUBE_AI_Process+0x348>)
 80064ea:	f7ff fb48 	bl	8005b7e <HAL_UART_Transmit>

    ((ai_float *)in_data)[0] = (ai_float) 1.0f;
 80064ee:	4b3e      	ldr	r3, [pc, #248]	; (80065e8 <MX_X_CUBE_AI_Process+0x350>)
 80064f0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80064f4:	601a      	str	r2, [r3, #0]
    ((ai_float *)in_data)[1] = (ai_float) 0.0f;
 80064f6:	4b3d      	ldr	r3, [pc, #244]	; (80065ec <MX_X_CUBE_AI_Process+0x354>)
 80064f8:	f04f 0200 	mov.w	r2, #0
 80064fc:	601a      	str	r2, [r3, #0]
    aiRun(in_data, out_data);
 80064fe:	493c      	ldr	r1, [pc, #240]	; (80065f0 <MX_X_CUBE_AI_Process+0x358>)
 8006500:	4839      	ldr	r0, [pc, #228]	; (80065e8 <MX_X_CUBE_AI_Process+0x350>)
 8006502:	f7ff fe7f 	bl	8006204 <aiRun>
    sprintf(buffer, "Input = %d,%d\n", (int)round(((ai_float *)in_data)[0]), (int)round(((ai_float *)in_data)[1]));
 8006506:	4b38      	ldr	r3, [pc, #224]	; (80065e8 <MX_X_CUBE_AI_Process+0x350>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4618      	mov	r0, r3
 800650c:	f7fd fcfc 	bl	8003f08 <__aeabi_f2d>
 8006510:	4603      	mov	r3, r0
 8006512:	460c      	mov	r4, r1
 8006514:	ec44 3b10 	vmov	d0, r3, r4
 8006518:	f002 fd40 	bl	8008f9c <round>
 800651c:	ec54 3b10 	vmov	r3, r4, d0
 8006520:	4618      	mov	r0, r3
 8006522:	4621      	mov	r1, r4
 8006524:	f7fd fff8 	bl	8004518 <__aeabi_d2iz>
 8006528:	4604      	mov	r4, r0
 800652a:	4b30      	ldr	r3, [pc, #192]	; (80065ec <MX_X_CUBE_AI_Process+0x354>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4618      	mov	r0, r3
 8006530:	f7fd fcea 	bl	8003f08 <__aeabi_f2d>
 8006534:	4602      	mov	r2, r0
 8006536:	460b      	mov	r3, r1
 8006538:	ec43 2b10 	vmov	d0, r2, r3
 800653c:	f002 fd2e 	bl	8008f9c <round>
 8006540:	ec53 2b10 	vmov	r2, r3, d0
 8006544:	4610      	mov	r0, r2
 8006546:	4619      	mov	r1, r3
 8006548:	f7fd ffe6 	bl	8004518 <__aeabi_d2iz>
 800654c:	4603      	mov	r3, r0
 800654e:	4638      	mov	r0, r7
 8006550:	4622      	mov	r2, r4
 8006552:	4928      	ldr	r1, [pc, #160]	; (80065f4 <MX_X_CUBE_AI_Process+0x35c>)
 8006554:	f001 f94c 	bl	80077f0 <siprintf>
    HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 1000);
 8006558:	463b      	mov	r3, r7
 800655a:	4618      	mov	r0, r3
 800655c:	f7fd fb15 	bl	8003b8a <strlen>
 8006560:	4603      	mov	r3, r0
 8006562:	b29a      	uxth	r2, r3
 8006564:	4639      	mov	r1, r7
 8006566:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800656a:	481d      	ldr	r0, [pc, #116]	; (80065e0 <MX_X_CUBE_AI_Process+0x348>)
 800656c:	f7ff fb07 	bl	8005b7e <HAL_UART_Transmit>
    sprintf(buffer, "Output = %.6f/%d (original/rounded)\n", ((ai_float *)out_data)[0], (int)round(((ai_float *)out_data)[0]));
 8006570:	4b1f      	ldr	r3, [pc, #124]	; (80065f0 <MX_X_CUBE_AI_Process+0x358>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4618      	mov	r0, r3
 8006576:	f7fd fcc7 	bl	8003f08 <__aeabi_f2d>
 800657a:	4604      	mov	r4, r0
 800657c:	460d      	mov	r5, r1
 800657e:	4b1c      	ldr	r3, [pc, #112]	; (80065f0 <MX_X_CUBE_AI_Process+0x358>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4618      	mov	r0, r3
 8006584:	f7fd fcc0 	bl	8003f08 <__aeabi_f2d>
 8006588:	4602      	mov	r2, r0
 800658a:	460b      	mov	r3, r1
 800658c:	ec43 2b10 	vmov	d0, r2, r3
 8006590:	f002 fd04 	bl	8008f9c <round>
 8006594:	ec53 2b10 	vmov	r2, r3, d0
 8006598:	4610      	mov	r0, r2
 800659a:	4619      	mov	r1, r3
 800659c:	f7fd ffbc 	bl	8004518 <__aeabi_d2iz>
 80065a0:	4603      	mov	r3, r0
 80065a2:	4638      	mov	r0, r7
 80065a4:	9300      	str	r3, [sp, #0]
 80065a6:	4622      	mov	r2, r4
 80065a8:	462b      	mov	r3, r5
 80065aa:	4913      	ldr	r1, [pc, #76]	; (80065f8 <MX_X_CUBE_AI_Process+0x360>)
 80065ac:	f001 f920 	bl	80077f0 <siprintf>
    HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 1000);
 80065b0:	463b      	mov	r3, r7
 80065b2:	4618      	mov	r0, r3
 80065b4:	f7fd fae9 	bl	8003b8a <strlen>
 80065b8:	4603      	mov	r3, r0
 80065ba:	b29a      	uxth	r2, r3
 80065bc:	4639      	mov	r1, r7
 80065be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80065c2:	4807      	ldr	r0, [pc, #28]	; (80065e0 <MX_X_CUBE_AI_Process+0x348>)
 80065c4:	f7ff fadb 	bl	8005b7e <HAL_UART_Transmit>

    ((ai_float *)in_data)[0] = (ai_float) 1.0f;
 80065c8:	4b07      	ldr	r3, [pc, #28]	; (80065e8 <MX_X_CUBE_AI_Process+0x350>)
 80065ca:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80065ce:	601a      	str	r2, [r3, #0]
    ((ai_float *)in_data)[1] = (ai_float) 1.0f;
 80065d0:	4b06      	ldr	r3, [pc, #24]	; (80065ec <MX_X_CUBE_AI_Process+0x354>)
 80065d2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80065d6:	601a      	str	r2, [r3, #0]
 80065d8:	e010      	b.n	80065fc <MX_X_CUBE_AI_Process+0x364>
 80065da:	bf00      	nop
 80065dc:	0800a2d0 	.word	0x0800a2d0
 80065e0:	200007f8 	.word	0x200007f8
 80065e4:	0800a2f8 	.word	0x0800a2f8
 80065e8:	20000768 	.word	0x20000768
 80065ec:	2000076c 	.word	0x2000076c
 80065f0:	20000770 	.word	0x20000770
 80065f4:	0800a320 	.word	0x0800a320
 80065f8:	0800a330 	.word	0x0800a330
    aiRun(in_data, out_data);
 80065fc:	4942      	ldr	r1, [pc, #264]	; (8006708 <MX_X_CUBE_AI_Process+0x470>)
 80065fe:	4843      	ldr	r0, [pc, #268]	; (800670c <MX_X_CUBE_AI_Process+0x474>)
 8006600:	f7ff fe00 	bl	8006204 <aiRun>
    sprintf(buffer, "Input = %d,%d\n", (int)round(((ai_float *)in_data)[0]), (int)round(((ai_float *)in_data)[1]));
 8006604:	4b41      	ldr	r3, [pc, #260]	; (800670c <MX_X_CUBE_AI_Process+0x474>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4618      	mov	r0, r3
 800660a:	f7fd fc7d 	bl	8003f08 <__aeabi_f2d>
 800660e:	4603      	mov	r3, r0
 8006610:	460c      	mov	r4, r1
 8006612:	ec44 3b10 	vmov	d0, r3, r4
 8006616:	f002 fcc1 	bl	8008f9c <round>
 800661a:	ec54 3b10 	vmov	r3, r4, d0
 800661e:	4618      	mov	r0, r3
 8006620:	4621      	mov	r1, r4
 8006622:	f7fd ff79 	bl	8004518 <__aeabi_d2iz>
 8006626:	4604      	mov	r4, r0
 8006628:	4b39      	ldr	r3, [pc, #228]	; (8006710 <MX_X_CUBE_AI_Process+0x478>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4618      	mov	r0, r3
 800662e:	f7fd fc6b 	bl	8003f08 <__aeabi_f2d>
 8006632:	4602      	mov	r2, r0
 8006634:	460b      	mov	r3, r1
 8006636:	ec43 2b10 	vmov	d0, r2, r3
 800663a:	f002 fcaf 	bl	8008f9c <round>
 800663e:	ec53 2b10 	vmov	r2, r3, d0
 8006642:	4610      	mov	r0, r2
 8006644:	4619      	mov	r1, r3
 8006646:	f7fd ff67 	bl	8004518 <__aeabi_d2iz>
 800664a:	4603      	mov	r3, r0
 800664c:	4638      	mov	r0, r7
 800664e:	4622      	mov	r2, r4
 8006650:	4930      	ldr	r1, [pc, #192]	; (8006714 <MX_X_CUBE_AI_Process+0x47c>)
 8006652:	f001 f8cd 	bl	80077f0 <siprintf>
    HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 1000);
 8006656:	463b      	mov	r3, r7
 8006658:	4618      	mov	r0, r3
 800665a:	f7fd fa96 	bl	8003b8a <strlen>
 800665e:	4603      	mov	r3, r0
 8006660:	b29a      	uxth	r2, r3
 8006662:	4639      	mov	r1, r7
 8006664:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006668:	482b      	ldr	r0, [pc, #172]	; (8006718 <MX_X_CUBE_AI_Process+0x480>)
 800666a:	f7ff fa88 	bl	8005b7e <HAL_UART_Transmit>
    sprintf(buffer, "Output = %.6f/%d (original/rounded)\n", ((ai_float *)out_data)[0], (int)round(((ai_float *)out_data)[0]));
 800666e:	4b26      	ldr	r3, [pc, #152]	; (8006708 <MX_X_CUBE_AI_Process+0x470>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4618      	mov	r0, r3
 8006674:	f7fd fc48 	bl	8003f08 <__aeabi_f2d>
 8006678:	4604      	mov	r4, r0
 800667a:	460d      	mov	r5, r1
 800667c:	4b22      	ldr	r3, [pc, #136]	; (8006708 <MX_X_CUBE_AI_Process+0x470>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4618      	mov	r0, r3
 8006682:	f7fd fc41 	bl	8003f08 <__aeabi_f2d>
 8006686:	4602      	mov	r2, r0
 8006688:	460b      	mov	r3, r1
 800668a:	ec43 2b10 	vmov	d0, r2, r3
 800668e:	f002 fc85 	bl	8008f9c <round>
 8006692:	ec53 2b10 	vmov	r2, r3, d0
 8006696:	4610      	mov	r0, r2
 8006698:	4619      	mov	r1, r3
 800669a:	f7fd ff3d 	bl	8004518 <__aeabi_d2iz>
 800669e:	4603      	mov	r3, r0
 80066a0:	4638      	mov	r0, r7
 80066a2:	9300      	str	r3, [sp, #0]
 80066a4:	4622      	mov	r2, r4
 80066a6:	462b      	mov	r3, r5
 80066a8:	491c      	ldr	r1, [pc, #112]	; (800671c <MX_X_CUBE_AI_Process+0x484>)
 80066aa:	f001 f8a1 	bl	80077f0 <siprintf>
    HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 1000);
 80066ae:	463b      	mov	r3, r7
 80066b0:	4618      	mov	r0, r3
 80066b2:	f7fd fa6a 	bl	8003b8a <strlen>
 80066b6:	4603      	mov	r3, r0
 80066b8:	b29a      	uxth	r2, r3
 80066ba:	4639      	mov	r1, r7
 80066bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80066c0:	4815      	ldr	r0, [pc, #84]	; (8006718 <MX_X_CUBE_AI_Process+0x480>)
 80066c2:	f7ff fa5c 	bl	8005b7e <HAL_UART_Transmit>

    sprintf(buffer, "######################################\n");
 80066c6:	463b      	mov	r3, r7
 80066c8:	4a15      	ldr	r2, [pc, #84]	; (8006720 <MX_X_CUBE_AI_Process+0x488>)
 80066ca:	461c      	mov	r4, r3
 80066cc:	4615      	mov	r5, r2
 80066ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80066d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80066d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066d6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80066da:	e884 0003 	stmia.w	r4, {r0, r1}
    HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 1000);
 80066de:	463b      	mov	r3, r7
 80066e0:	4618      	mov	r0, r3
 80066e2:	f7fd fa52 	bl	8003b8a <strlen>
 80066e6:	4603      	mov	r3, r0
 80066e8:	b29a      	uxth	r2, r3
 80066ea:	4639      	mov	r1, r7
 80066ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80066f0:	4809      	ldr	r0, [pc, #36]	; (8006718 <MX_X_CUBE_AI_Process+0x480>)
 80066f2:	f7ff fa44 	bl	8005b7e <HAL_UART_Transmit>

    HAL_Delay(5000);
 80066f6:	f241 3088 	movw	r0, #5000	; 0x1388
 80066fa:	f7fe fa11 	bl	8004b20 <HAL_Delay>
    /* USER CODE END 1 */
}
 80066fe:	bf00      	nop
 8006700:	3720      	adds	r7, #32
 8006702:	46bd      	mov	sp, r7
 8006704:	bdb0      	pop	{r4, r5, r7, pc}
 8006706:	bf00      	nop
 8006708:	20000770 	.word	0x20000770
 800670c:	20000768 	.word	0x20000768
 8006710:	2000076c 	.word	0x2000076c
 8006714:	0800a320 	.word	0x0800a320
 8006718:	200007f8 	.word	0x200007f8
 800671c:	0800a330 	.word	0x0800a330
 8006720:	0800a2d0 	.word	0x0800a2d0

08006724 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006728:	f7fe f988 	bl	8004a3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800672c:	f000 f80c 	bl	8006748 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006730:	f000 f8b6 	bl	80068a0 <MX_GPIO_Init>
  MX_CRC_Init();
 8006734:	f000 f876 	bl	8006824 <MX_CRC_Init>
  MX_USART2_UART_Init();
 8006738:	f000 f888 	bl	800684c <MX_USART2_UART_Init>
  MX_X_CUBE_AI_Init();
 800673c:	f7ff fda2 	bl	8006284 <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_X_CUBE_AI_Process();
 8006740:	f7ff fdaa 	bl	8006298 <MX_X_CUBE_AI_Process>
 8006744:	e7fc      	b.n	8006740 <main+0x1c>
	...

08006748 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b094      	sub	sp, #80	; 0x50
 800674c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800674e:	f107 031c 	add.w	r3, r7, #28
 8006752:	2234      	movs	r2, #52	; 0x34
 8006754:	2100      	movs	r1, #0
 8006756:	4618      	mov	r0, r3
 8006758:	f000 fbe6 	bl	8006f28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800675c:	f107 0308 	add.w	r3, r7, #8
 8006760:	2200      	movs	r2, #0
 8006762:	601a      	str	r2, [r3, #0]
 8006764:	605a      	str	r2, [r3, #4]
 8006766:	609a      	str	r2, [r3, #8]
 8006768:	60da      	str	r2, [r3, #12]
 800676a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800676c:	2300      	movs	r3, #0
 800676e:	607b      	str	r3, [r7, #4]
 8006770:	4b2a      	ldr	r3, [pc, #168]	; (800681c <SystemClock_Config+0xd4>)
 8006772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006774:	4a29      	ldr	r2, [pc, #164]	; (800681c <SystemClock_Config+0xd4>)
 8006776:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800677a:	6413      	str	r3, [r2, #64]	; 0x40
 800677c:	4b27      	ldr	r3, [pc, #156]	; (800681c <SystemClock_Config+0xd4>)
 800677e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006780:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006784:	607b      	str	r3, [r7, #4]
 8006786:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8006788:	2300      	movs	r3, #0
 800678a:	603b      	str	r3, [r7, #0]
 800678c:	4b24      	ldr	r3, [pc, #144]	; (8006820 <SystemClock_Config+0xd8>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8006794:	4a22      	ldr	r2, [pc, #136]	; (8006820 <SystemClock_Config+0xd8>)
 8006796:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800679a:	6013      	str	r3, [r2, #0]
 800679c:	4b20      	ldr	r3, [pc, #128]	; (8006820 <SystemClock_Config+0xd8>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80067a4:	603b      	str	r3, [r7, #0]
 80067a6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80067a8:	2302      	movs	r3, #2
 80067aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80067ac:	2301      	movs	r3, #1
 80067ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80067b0:	2310      	movs	r3, #16
 80067b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80067b4:	2302      	movs	r3, #2
 80067b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80067b8:	2300      	movs	r3, #0
 80067ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80067bc:	2310      	movs	r3, #16
 80067be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80067c0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80067c4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80067c6:	2304      	movs	r3, #4
 80067c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80067ca:	2302      	movs	r3, #2
 80067cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80067ce:	2302      	movs	r3, #2
 80067d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80067d2:	f107 031c 	add.w	r3, r7, #28
 80067d6:	4618      	mov	r0, r3
 80067d8:	f7fe ff2a 	bl	8005630 <HAL_RCC_OscConfig>
 80067dc:	4603      	mov	r3, r0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d001      	beq.n	80067e6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80067e2:	f000 f8cd 	bl	8006980 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80067e6:	230f      	movs	r3, #15
 80067e8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80067ea:	2302      	movs	r3, #2
 80067ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80067ee:	2300      	movs	r3, #0
 80067f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80067f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80067f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80067f8:	2300      	movs	r3, #0
 80067fa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80067fc:	f107 0308 	add.w	r3, r7, #8
 8006800:	2102      	movs	r1, #2
 8006802:	4618      	mov	r0, r3
 8006804:	f7fe fc5e 	bl	80050c4 <HAL_RCC_ClockConfig>
 8006808:	4603      	mov	r3, r0
 800680a:	2b00      	cmp	r3, #0
 800680c:	d001      	beq.n	8006812 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800680e:	f000 f8b7 	bl	8006980 <Error_Handler>
  }
}
 8006812:	bf00      	nop
 8006814:	3750      	adds	r7, #80	; 0x50
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
 800681a:	bf00      	nop
 800681c:	40023800 	.word	0x40023800
 8006820:	40007000 	.word	0x40007000

08006824 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8006828:	4b06      	ldr	r3, [pc, #24]	; (8006844 <MX_CRC_Init+0x20>)
 800682a:	4a07      	ldr	r2, [pc, #28]	; (8006848 <MX_CRC_Init+0x24>)
 800682c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800682e:	4805      	ldr	r0, [pc, #20]	; (8006844 <MX_CRC_Init+0x20>)
 8006830:	f7fe fa7d 	bl	8004d2e <HAL_CRC_Init>
 8006834:	4603      	mov	r3, r0
 8006836:	2b00      	cmp	r3, #0
 8006838:	d001      	beq.n	800683e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800683a:	f000 f8a1 	bl	8006980 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800683e:	bf00      	nop
 8006840:	bd80      	pop	{r7, pc}
 8006842:	bf00      	nop
 8006844:	200007f0 	.word	0x200007f0
 8006848:	40023000 	.word	0x40023000

0800684c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006850:	4b11      	ldr	r3, [pc, #68]	; (8006898 <MX_USART2_UART_Init+0x4c>)
 8006852:	4a12      	ldr	r2, [pc, #72]	; (800689c <MX_USART2_UART_Init+0x50>)
 8006854:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006856:	4b10      	ldr	r3, [pc, #64]	; (8006898 <MX_USART2_UART_Init+0x4c>)
 8006858:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800685c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800685e:	4b0e      	ldr	r3, [pc, #56]	; (8006898 <MX_USART2_UART_Init+0x4c>)
 8006860:	2200      	movs	r2, #0
 8006862:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006864:	4b0c      	ldr	r3, [pc, #48]	; (8006898 <MX_USART2_UART_Init+0x4c>)
 8006866:	2200      	movs	r2, #0
 8006868:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800686a:	4b0b      	ldr	r3, [pc, #44]	; (8006898 <MX_USART2_UART_Init+0x4c>)
 800686c:	2200      	movs	r2, #0
 800686e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006870:	4b09      	ldr	r3, [pc, #36]	; (8006898 <MX_USART2_UART_Init+0x4c>)
 8006872:	220c      	movs	r2, #12
 8006874:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006876:	4b08      	ldr	r3, [pc, #32]	; (8006898 <MX_USART2_UART_Init+0x4c>)
 8006878:	2200      	movs	r2, #0
 800687a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800687c:	4b06      	ldr	r3, [pc, #24]	; (8006898 <MX_USART2_UART_Init+0x4c>)
 800687e:	2200      	movs	r2, #0
 8006880:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006882:	4805      	ldr	r0, [pc, #20]	; (8006898 <MX_USART2_UART_Init+0x4c>)
 8006884:	f7ff f92e 	bl	8005ae4 <HAL_UART_Init>
 8006888:	4603      	mov	r3, r0
 800688a:	2b00      	cmp	r3, #0
 800688c:	d001      	beq.n	8006892 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800688e:	f000 f877 	bl	8006980 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006892:	bf00      	nop
 8006894:	bd80      	pop	{r7, pc}
 8006896:	bf00      	nop
 8006898:	200007f8 	.word	0x200007f8
 800689c:	40004400 	.word	0x40004400

080068a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b08a      	sub	sp, #40	; 0x28
 80068a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068a6:	f107 0314 	add.w	r3, r7, #20
 80068aa:	2200      	movs	r2, #0
 80068ac:	601a      	str	r2, [r3, #0]
 80068ae:	605a      	str	r2, [r3, #4]
 80068b0:	609a      	str	r2, [r3, #8]
 80068b2:	60da      	str	r2, [r3, #12]
 80068b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80068b6:	2300      	movs	r3, #0
 80068b8:	613b      	str	r3, [r7, #16]
 80068ba:	4b2d      	ldr	r3, [pc, #180]	; (8006970 <MX_GPIO_Init+0xd0>)
 80068bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068be:	4a2c      	ldr	r2, [pc, #176]	; (8006970 <MX_GPIO_Init+0xd0>)
 80068c0:	f043 0304 	orr.w	r3, r3, #4
 80068c4:	6313      	str	r3, [r2, #48]	; 0x30
 80068c6:	4b2a      	ldr	r3, [pc, #168]	; (8006970 <MX_GPIO_Init+0xd0>)
 80068c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ca:	f003 0304 	and.w	r3, r3, #4
 80068ce:	613b      	str	r3, [r7, #16]
 80068d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80068d2:	2300      	movs	r3, #0
 80068d4:	60fb      	str	r3, [r7, #12]
 80068d6:	4b26      	ldr	r3, [pc, #152]	; (8006970 <MX_GPIO_Init+0xd0>)
 80068d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068da:	4a25      	ldr	r2, [pc, #148]	; (8006970 <MX_GPIO_Init+0xd0>)
 80068dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068e0:	6313      	str	r3, [r2, #48]	; 0x30
 80068e2:	4b23      	ldr	r3, [pc, #140]	; (8006970 <MX_GPIO_Init+0xd0>)
 80068e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068ea:	60fb      	str	r3, [r7, #12]
 80068ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80068ee:	2300      	movs	r3, #0
 80068f0:	60bb      	str	r3, [r7, #8]
 80068f2:	4b1f      	ldr	r3, [pc, #124]	; (8006970 <MX_GPIO_Init+0xd0>)
 80068f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068f6:	4a1e      	ldr	r2, [pc, #120]	; (8006970 <MX_GPIO_Init+0xd0>)
 80068f8:	f043 0301 	orr.w	r3, r3, #1
 80068fc:	6313      	str	r3, [r2, #48]	; 0x30
 80068fe:	4b1c      	ldr	r3, [pc, #112]	; (8006970 <MX_GPIO_Init+0xd0>)
 8006900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006902:	f003 0301 	and.w	r3, r3, #1
 8006906:	60bb      	str	r3, [r7, #8]
 8006908:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800690a:	2300      	movs	r3, #0
 800690c:	607b      	str	r3, [r7, #4]
 800690e:	4b18      	ldr	r3, [pc, #96]	; (8006970 <MX_GPIO_Init+0xd0>)
 8006910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006912:	4a17      	ldr	r2, [pc, #92]	; (8006970 <MX_GPIO_Init+0xd0>)
 8006914:	f043 0302 	orr.w	r3, r3, #2
 8006918:	6313      	str	r3, [r2, #48]	; 0x30
 800691a:	4b15      	ldr	r3, [pc, #84]	; (8006970 <MX_GPIO_Init+0xd0>)
 800691c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800691e:	f003 0302 	and.w	r3, r3, #2
 8006922:	607b      	str	r3, [r7, #4]
 8006924:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8006926:	2200      	movs	r2, #0
 8006928:	2120      	movs	r1, #32
 800692a:	4812      	ldr	r0, [pc, #72]	; (8006974 <MX_GPIO_Init+0xd4>)
 800692c:	f7fe fbb0 	bl	8005090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8006930:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006934:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006936:	4b10      	ldr	r3, [pc, #64]	; (8006978 <MX_GPIO_Init+0xd8>)
 8006938:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800693a:	2300      	movs	r3, #0
 800693c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800693e:	f107 0314 	add.w	r3, r7, #20
 8006942:	4619      	mov	r1, r3
 8006944:	480d      	ldr	r0, [pc, #52]	; (800697c <MX_GPIO_Init+0xdc>)
 8006946:	f7fe fa11 	bl	8004d6c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800694a:	2320      	movs	r3, #32
 800694c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800694e:	2301      	movs	r3, #1
 8006950:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006952:	2300      	movs	r3, #0
 8006954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006956:	2300      	movs	r3, #0
 8006958:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800695a:	f107 0314 	add.w	r3, r7, #20
 800695e:	4619      	mov	r1, r3
 8006960:	4804      	ldr	r0, [pc, #16]	; (8006974 <MX_GPIO_Init+0xd4>)
 8006962:	f7fe fa03 	bl	8004d6c <HAL_GPIO_Init>

}
 8006966:	bf00      	nop
 8006968:	3728      	adds	r7, #40	; 0x28
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
 800696e:	bf00      	nop
 8006970:	40023800 	.word	0x40023800
 8006974:	40020000 	.word	0x40020000
 8006978:	10210000 	.word	0x10210000
 800697c:	40020800 	.word	0x40020800

08006980 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006980:	b480      	push	{r7}
 8006982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006984:	bf00      	nop
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr
	...

08006990 <network_configure_activations>:


AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 8006990:	b480      	push	{r7}
 8006992:	b085      	sub	sp, #20
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	691b      	ldr	r3, [r3, #16]
 800699e:	3303      	adds	r3, #3
 80069a0:	f023 0303 	bic.w	r3, r3, #3
 80069a4:	60fb      	str	r3, [r7, #12]
  AI_ASSERT( activations )

  {
    /* Updating activations (byte) offsets */
    input_0_output_array.data = AI_PTR(NULL);
 80069a6:	4b1a      	ldr	r3, [pc, #104]	; (8006a10 <network_configure_activations+0x80>)
 80069a8:	2200      	movs	r2, #0
 80069aa:	609a      	str	r2, [r3, #8]
    input_0_output_array.data_start = AI_PTR(NULL);
 80069ac:	4b18      	ldr	r3, [pc, #96]	; (8006a10 <network_configure_activations+0x80>)
 80069ae:	2200      	movs	r2, #0
 80069b0:	60da      	str	r2, [r3, #12]
    dense_1_output_array.data = AI_PTR(activations + 0);
 80069b2:	4a18      	ldr	r2, [pc, #96]	; (8006a14 <network_configure_activations+0x84>)
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(activations + 0);
 80069b8:	4a16      	ldr	r2, [pc, #88]	; (8006a14 <network_configure_activations+0x84>)
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	60d3      	str	r3, [r2, #12]
    dense_1_nl_output_array.data = AI_PTR(activations + 0);
 80069be:	4a16      	ldr	r2, [pc, #88]	; (8006a18 <network_configure_activations+0x88>)
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	6093      	str	r3, [r2, #8]
    dense_1_nl_output_array.data_start = AI_PTR(activations + 0);
 80069c4:	4a14      	ldr	r2, [pc, #80]	; (8006a18 <network_configure_activations+0x88>)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	60d3      	str	r3, [r2, #12]
    dense_2_output_array.data = AI_PTR(activations + 12);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	330c      	adds	r3, #12
 80069ce:	4a13      	ldr	r2, [pc, #76]	; (8006a1c <network_configure_activations+0x8c>)
 80069d0:	6093      	str	r3, [r2, #8]
    dense_2_output_array.data_start = AI_PTR(activations + 12);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	330c      	adds	r3, #12
 80069d6:	4a11      	ldr	r2, [pc, #68]	; (8006a1c <network_configure_activations+0x8c>)
 80069d8:	60d3      	str	r3, [r2, #12]
    dense_2_nl_output_array.data = AI_PTR(activations + 12);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	330c      	adds	r3, #12
 80069de:	4a10      	ldr	r2, [pc, #64]	; (8006a20 <network_configure_activations+0x90>)
 80069e0:	6093      	str	r3, [r2, #8]
    dense_2_nl_output_array.data_start = AI_PTR(activations + 12);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	330c      	adds	r3, #12
 80069e6:	4a0e      	ldr	r2, [pc, #56]	; (8006a20 <network_configure_activations+0x90>)
 80069e8:	60d3      	str	r3, [r2, #12]
    dense_3_output_array.data = AI_PTR(activations + 0);
 80069ea:	4a0e      	ldr	r2, [pc, #56]	; (8006a24 <network_configure_activations+0x94>)
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	6093      	str	r3, [r2, #8]
    dense_3_output_array.data_start = AI_PTR(activations + 0);
 80069f0:	4a0c      	ldr	r2, [pc, #48]	; (8006a24 <network_configure_activations+0x94>)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	60d3      	str	r3, [r2, #12]
    dense_3_nl_output_array.data = AI_PTR(NULL);
 80069f6:	4b0c      	ldr	r3, [pc, #48]	; (8006a28 <network_configure_activations+0x98>)
 80069f8:	2200      	movs	r2, #0
 80069fa:	609a      	str	r2, [r3, #8]
    dense_3_nl_output_array.data_start = AI_PTR(NULL);
 80069fc:	4b0a      	ldr	r3, [pc, #40]	; (8006a28 <network_configure_activations+0x98>)
 80069fe:	2200      	movs	r2, #0
 8006a00:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 8006a02:	2301      	movs	r3, #1
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3714      	adds	r7, #20
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr
 8006a10:	200000e0 	.word	0x200000e0
 8006a14:	200000f0 	.word	0x200000f0
 8006a18:	20000100 	.word	0x20000100
 8006a1c:	20000110 	.word	0x20000110
 8006a20:	20000120 	.word	0x20000120
 8006a24:	20000130 	.word	0x20000130
 8006a28:	20000140 	.word	0x20000140

08006a2c <network_configure_weights>:


AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b085      	sub	sp, #20
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	691b      	ldr	r3, [r3, #16]
 8006a3a:	60fb      	str	r3, [r7, #12]
  AI_ASSERT( weights )

  {
    /* Updating weights (byte) offsets */
    dense_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8006a3c:	4b2c      	ldr	r3, [pc, #176]	; (8006af0 <network_configure_weights+0xc4>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a44:	4a2a      	ldr	r2, [pc, #168]	; (8006af0 <network_configure_weights+0xc4>)
 8006a46:	6013      	str	r3, [r2, #0]
    dense_3_bias_array.data = AI_PTR(weights + 96);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	3360      	adds	r3, #96	; 0x60
 8006a4c:	4a28      	ldr	r2, [pc, #160]	; (8006af0 <network_configure_weights+0xc4>)
 8006a4e:	6093      	str	r3, [r2, #8]
    dense_3_bias_array.data_start = AI_PTR(weights + 96);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	3360      	adds	r3, #96	; 0x60
 8006a54:	4a26      	ldr	r2, [pc, #152]	; (8006af0 <network_configure_weights+0xc4>)
 8006a56:	60d3      	str	r3, [r2, #12]
  dense_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8006a58:	4b26      	ldr	r3, [pc, #152]	; (8006af4 <network_configure_weights+0xc8>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a60:	4a24      	ldr	r2, [pc, #144]	; (8006af4 <network_configure_weights+0xc8>)
 8006a62:	6013      	str	r3, [r2, #0]
    dense_3_weights_array.data = AI_PTR(weights + 84);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	3354      	adds	r3, #84	; 0x54
 8006a68:	4a22      	ldr	r2, [pc, #136]	; (8006af4 <network_configure_weights+0xc8>)
 8006a6a:	6093      	str	r3, [r2, #8]
    dense_3_weights_array.data_start = AI_PTR(weights + 84);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	3354      	adds	r3, #84	; 0x54
 8006a70:	4a20      	ldr	r2, [pc, #128]	; (8006af4 <network_configure_weights+0xc8>)
 8006a72:	60d3      	str	r3, [r2, #12]
  dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8006a74:	4b20      	ldr	r3, [pc, #128]	; (8006af8 <network_configure_weights+0xcc>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a7c:	4a1e      	ldr	r2, [pc, #120]	; (8006af8 <network_configure_weights+0xcc>)
 8006a7e:	6013      	str	r3, [r2, #0]
    dense_2_bias_array.data = AI_PTR(weights + 72);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	3348      	adds	r3, #72	; 0x48
 8006a84:	4a1c      	ldr	r2, [pc, #112]	; (8006af8 <network_configure_weights+0xcc>)
 8006a86:	6093      	str	r3, [r2, #8]
    dense_2_bias_array.data_start = AI_PTR(weights + 72);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	3348      	adds	r3, #72	; 0x48
 8006a8c:	4a1a      	ldr	r2, [pc, #104]	; (8006af8 <network_configure_weights+0xcc>)
 8006a8e:	60d3      	str	r3, [r2, #12]
  dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8006a90:	4b1a      	ldr	r3, [pc, #104]	; (8006afc <network_configure_weights+0xd0>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a98:	4a18      	ldr	r2, [pc, #96]	; (8006afc <network_configure_weights+0xd0>)
 8006a9a:	6013      	str	r3, [r2, #0]
    dense_2_weights_array.data = AI_PTR(weights + 36);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	3324      	adds	r3, #36	; 0x24
 8006aa0:	4a16      	ldr	r2, [pc, #88]	; (8006afc <network_configure_weights+0xd0>)
 8006aa2:	6093      	str	r3, [r2, #8]
    dense_2_weights_array.data_start = AI_PTR(weights + 36);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	3324      	adds	r3, #36	; 0x24
 8006aa8:	4a14      	ldr	r2, [pc, #80]	; (8006afc <network_configure_weights+0xd0>)
 8006aaa:	60d3      	str	r3, [r2, #12]
  dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8006aac:	4b14      	ldr	r3, [pc, #80]	; (8006b00 <network_configure_weights+0xd4>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ab4:	4a12      	ldr	r2, [pc, #72]	; (8006b00 <network_configure_weights+0xd4>)
 8006ab6:	6013      	str	r3, [r2, #0]
    dense_1_bias_array.data = AI_PTR(weights + 24);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	3318      	adds	r3, #24
 8006abc:	4a10      	ldr	r2, [pc, #64]	; (8006b00 <network_configure_weights+0xd4>)
 8006abe:	6093      	str	r3, [r2, #8]
    dense_1_bias_array.data_start = AI_PTR(weights + 24);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	3318      	adds	r3, #24
 8006ac4:	4a0e      	ldr	r2, [pc, #56]	; (8006b00 <network_configure_weights+0xd4>)
 8006ac6:	60d3      	str	r3, [r2, #12]
  dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8006ac8:	4b0e      	ldr	r3, [pc, #56]	; (8006b04 <network_configure_weights+0xd8>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ad0:	4a0c      	ldr	r2, [pc, #48]	; (8006b04 <network_configure_weights+0xd8>)
 8006ad2:	6013      	str	r3, [r2, #0]
    dense_1_weights_array.data = AI_PTR(weights + 0);
 8006ad4:	4a0b      	ldr	r2, [pc, #44]	; (8006b04 <network_configure_weights+0xd8>)
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	6093      	str	r3, [r2, #8]
    dense_1_weights_array.data_start = AI_PTR(weights + 0);
 8006ada:	4a0a      	ldr	r2, [pc, #40]	; (8006b04 <network_configure_weights+0xd8>)
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	60d3      	str	r3, [r2, #12]
  
  }

  return true;
 8006ae0:	2301      	movs	r3, #1
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3714      	adds	r7, #20
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr
 8006aee:	bf00      	nop
 8006af0:	20000080 	.word	0x20000080
 8006af4:	20000090 	.word	0x20000090
 8006af8:	200000a0 	.word	0x200000a0
 8006afc:	200000b0 	.word	0x200000b0
 8006b00:	200000c0 	.word	0x200000c0
 8006b04:	200000d0 	.word	0x200000d0

08006b08 <ai_network_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b082      	sub	sp, #8
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f7f9 fdc5 	bl	80006a0 <ai_platform_network_get_error>
 8006b16:	4603      	mov	r3, r0
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3708      	adds	r7, #8
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af02      	add	r7, sp, #8
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	9301      	str	r3, [sp, #4]
 8006b2e:	2303      	movs	r3, #3
 8006b30:	9300      	str	r3, [sp, #0]
 8006b32:	2301      	movs	r3, #1
 8006b34:	4a04      	ldr	r2, [pc, #16]	; (8006b48 <ai_network_create+0x28>)
 8006b36:	6839      	ldr	r1, [r7, #0]
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f7f9 fe97 	bl	800086c <ai_platform_network_create>
 8006b3e:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3708      	adds	r7, #8
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}
 8006b48:	20000030 	.word	0x20000030

08006b4c <ai_network_destroy>:

AI_API_ENTRY
ai_handle ai_network_destroy(ai_handle network)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b082      	sub	sp, #8
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  return ai_platform_network_destroy(network);
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f7f9 fec5 	bl	80008e4 <ai_platform_network_destroy>
 8006b5a:	4603      	mov	r3, r0
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3708      	adds	r7, #8
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <ai_network_init>:

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b084      	sub	sp, #16
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8006b6e:	6839      	ldr	r1, [r7, #0]
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f7f9 fed6 	bl	8000922 <ai_platform_network_init>
 8006b76:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d101      	bne.n	8006b82 <ai_network_init+0x1e>
 8006b7e:	2300      	movs	r3, #0
 8006b80:	e01f      	b.n	8006bc2 <ai_network_init+0x5e>

  ai_bool ok = true;
 8006b82:	2301      	movs	r3, #1
 8006b84:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, &params->params);
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	4619      	mov	r1, r3
 8006b8a:	68f8      	ldr	r0, [r7, #12]
 8006b8c:	f7ff ff4e 	bl	8006a2c <network_configure_weights>
 8006b90:	4603      	mov	r3, r0
 8006b92:	461a      	mov	r2, r3
 8006b94:	7afb      	ldrb	r3, [r7, #11]
 8006b96:	4013      	ands	r3, r2
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	bf14      	ite	ne
 8006b9c:	2301      	movne	r3, #1
 8006b9e:	2300      	moveq	r3, #0
 8006ba0:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, &params->activations);
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	3314      	adds	r3, #20
 8006ba6:	4619      	mov	r1, r3
 8006ba8:	68f8      	ldr	r0, [r7, #12]
 8006baa:	f7ff fef1 	bl	8006990 <network_configure_activations>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	7afb      	ldrb	r3, [r7, #11]
 8006bb4:	4013      	ands	r3, r2
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	bf14      	ite	ne
 8006bba:	2301      	movne	r3, #1
 8006bbc:	2300      	moveq	r3, #0
 8006bbe:	72fb      	strb	r3, [r7, #11]

  return ok;
 8006bc0:	7afb      	ldrb	r3, [r7, #11]
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3710      	adds	r7, #16
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}

08006bca <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8006bca:	b580      	push	{r7, lr}
 8006bcc:	b084      	sub	sp, #16
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	60f8      	str	r0, [r7, #12]
 8006bd2:	60b9      	str	r1, [r7, #8]
 8006bd4:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	68b9      	ldr	r1, [r7, #8]
 8006bda:	68f8      	ldr	r0, [r7, #12]
 8006bdc:	f7f9 fef7 	bl	80009ce <ai_platform_network_process>
 8006be0:	4603      	mov	r3, r0
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3710      	adds	r7, #16
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
	...

08006bec <ai_network_data_weights_get>:
#include "network_data.h"

ai_handle ai_network_data_weights_get(void)
{
 8006bec:	b480      	push	{r7}
 8006bee:	af00      	add	r7, sp, #0
    0x94, 0xbf, 0xb5, 0xa7, 0x45, 0x3f, 0xe5, 0x93, 0xf0, 0xbe,
    0x2d, 0x26, 0x19, 0x3e, 0x64, 0x32, 0x2a, 0x40, 0x30, 0x95,
    0x0f, 0xc0, 0xf5, 0x99, 0xb3, 0x3f, 0xaa, 0x6d, 0x19, 0x3f
  };

  return AI_HANDLE_PTR(s_network_weights);
 8006bf0:	4b02      	ldr	r3, [pc, #8]	; (8006bfc <ai_network_data_weights_get+0x10>)
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr
 8006bfc:	0800a428 	.word	0x0800a428

08006c00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b082      	sub	sp, #8
 8006c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006c06:	2300      	movs	r3, #0
 8006c08:	607b      	str	r3, [r7, #4]
 8006c0a:	4b10      	ldr	r3, [pc, #64]	; (8006c4c <HAL_MspInit+0x4c>)
 8006c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c0e:	4a0f      	ldr	r2, [pc, #60]	; (8006c4c <HAL_MspInit+0x4c>)
 8006c10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006c14:	6453      	str	r3, [r2, #68]	; 0x44
 8006c16:	4b0d      	ldr	r3, [pc, #52]	; (8006c4c <HAL_MspInit+0x4c>)
 8006c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c1e:	607b      	str	r3, [r7, #4]
 8006c20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006c22:	2300      	movs	r3, #0
 8006c24:	603b      	str	r3, [r7, #0]
 8006c26:	4b09      	ldr	r3, [pc, #36]	; (8006c4c <HAL_MspInit+0x4c>)
 8006c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c2a:	4a08      	ldr	r2, [pc, #32]	; (8006c4c <HAL_MspInit+0x4c>)
 8006c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c30:	6413      	str	r3, [r2, #64]	; 0x40
 8006c32:	4b06      	ldr	r3, [pc, #24]	; (8006c4c <HAL_MspInit+0x4c>)
 8006c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c3a:	603b      	str	r3, [r7, #0]
 8006c3c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8006c3e:	2007      	movs	r0, #7
 8006c40:	f7fe f842 	bl	8004cc8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006c44:	bf00      	nop
 8006c46:	3708      	adds	r7, #8
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}
 8006c4c:	40023800 	.word	0x40023800

08006c50 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b085      	sub	sp, #20
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a0b      	ldr	r2, [pc, #44]	; (8006c8c <HAL_CRC_MspInit+0x3c>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d10d      	bne.n	8006c7e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8006c62:	2300      	movs	r3, #0
 8006c64:	60fb      	str	r3, [r7, #12]
 8006c66:	4b0a      	ldr	r3, [pc, #40]	; (8006c90 <HAL_CRC_MspInit+0x40>)
 8006c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c6a:	4a09      	ldr	r2, [pc, #36]	; (8006c90 <HAL_CRC_MspInit+0x40>)
 8006c6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006c70:	6313      	str	r3, [r2, #48]	; 0x30
 8006c72:	4b07      	ldr	r3, [pc, #28]	; (8006c90 <HAL_CRC_MspInit+0x40>)
 8006c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c7a:	60fb      	str	r3, [r7, #12]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8006c7e:	bf00      	nop
 8006c80:	3714      	adds	r7, #20
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr
 8006c8a:	bf00      	nop
 8006c8c:	40023000 	.word	0x40023000
 8006c90:	40023800 	.word	0x40023800

08006c94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b08a      	sub	sp, #40	; 0x28
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c9c:	f107 0314 	add.w	r3, r7, #20
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	601a      	str	r2, [r3, #0]
 8006ca4:	605a      	str	r2, [r3, #4]
 8006ca6:	609a      	str	r2, [r3, #8]
 8006ca8:	60da      	str	r2, [r3, #12]
 8006caa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a19      	ldr	r2, [pc, #100]	; (8006d18 <HAL_UART_MspInit+0x84>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d12b      	bne.n	8006d0e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	613b      	str	r3, [r7, #16]
 8006cba:	4b18      	ldr	r3, [pc, #96]	; (8006d1c <HAL_UART_MspInit+0x88>)
 8006cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cbe:	4a17      	ldr	r2, [pc, #92]	; (8006d1c <HAL_UART_MspInit+0x88>)
 8006cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8006cc6:	4b15      	ldr	r3, [pc, #84]	; (8006d1c <HAL_UART_MspInit+0x88>)
 8006cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cce:	613b      	str	r3, [r7, #16]
 8006cd0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	60fb      	str	r3, [r7, #12]
 8006cd6:	4b11      	ldr	r3, [pc, #68]	; (8006d1c <HAL_UART_MspInit+0x88>)
 8006cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cda:	4a10      	ldr	r2, [pc, #64]	; (8006d1c <HAL_UART_MspInit+0x88>)
 8006cdc:	f043 0301 	orr.w	r3, r3, #1
 8006ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8006ce2:	4b0e      	ldr	r3, [pc, #56]	; (8006d1c <HAL_UART_MspInit+0x88>)
 8006ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ce6:	f003 0301 	and.w	r3, r3, #1
 8006cea:	60fb      	str	r3, [r7, #12]
 8006cec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8006cee:	230c      	movs	r3, #12
 8006cf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006cf2:	2302      	movs	r3, #2
 8006cf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006cfa:	2303      	movs	r3, #3
 8006cfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006cfe:	2307      	movs	r3, #7
 8006d00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d02:	f107 0314 	add.w	r3, r7, #20
 8006d06:	4619      	mov	r1, r3
 8006d08:	4805      	ldr	r0, [pc, #20]	; (8006d20 <HAL_UART_MspInit+0x8c>)
 8006d0a:	f7fe f82f 	bl	8004d6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8006d0e:	bf00      	nop
 8006d10:	3728      	adds	r7, #40	; 0x28
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}
 8006d16:	bf00      	nop
 8006d18:	40004400 	.word	0x40004400
 8006d1c:	40023800 	.word	0x40023800
 8006d20:	40020000 	.word	0x40020000

08006d24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006d24:	b480      	push	{r7}
 8006d26:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006d28:	bf00      	nop
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr

08006d32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006d32:	b480      	push	{r7}
 8006d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006d36:	e7fe      	b.n	8006d36 <HardFault_Handler+0x4>

08006d38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006d3c:	e7fe      	b.n	8006d3c <MemManage_Handler+0x4>

08006d3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006d3e:	b480      	push	{r7}
 8006d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006d42:	e7fe      	b.n	8006d42 <BusFault_Handler+0x4>

08006d44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006d44:	b480      	push	{r7}
 8006d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006d48:	e7fe      	b.n	8006d48 <UsageFault_Handler+0x4>

08006d4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006d4a:	b480      	push	{r7}
 8006d4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006d4e:	bf00      	nop
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr

08006d58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006d5c:	bf00      	nop
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr

08006d66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006d66:	b480      	push	{r7}
 8006d68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006d6a:	bf00      	nop
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr

08006d74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006d78:	f7fd feb2 	bl	8004ae0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006d7c:	bf00      	nop
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006d88:	4b11      	ldr	r3, [pc, #68]	; (8006dd0 <_sbrk+0x50>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d102      	bne.n	8006d96 <_sbrk+0x16>
		heap_end = &end;
 8006d90:	4b0f      	ldr	r3, [pc, #60]	; (8006dd0 <_sbrk+0x50>)
 8006d92:	4a10      	ldr	r2, [pc, #64]	; (8006dd4 <_sbrk+0x54>)
 8006d94:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8006d96:	4b0e      	ldr	r3, [pc, #56]	; (8006dd0 <_sbrk+0x50>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8006d9c:	4b0c      	ldr	r3, [pc, #48]	; (8006dd0 <_sbrk+0x50>)
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	4413      	add	r3, r2
 8006da4:	466a      	mov	r2, sp
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d907      	bls.n	8006dba <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8006daa:	f000 f879 	bl	8006ea0 <__errno>
 8006dae:	4602      	mov	r2, r0
 8006db0:	230c      	movs	r3, #12
 8006db2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8006db4:	f04f 33ff 	mov.w	r3, #4294967295
 8006db8:	e006      	b.n	8006dc8 <_sbrk+0x48>
	}

	heap_end += incr;
 8006dba:	4b05      	ldr	r3, [pc, #20]	; (8006dd0 <_sbrk+0x50>)
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	4413      	add	r3, r2
 8006dc2:	4a03      	ldr	r2, [pc, #12]	; (8006dd0 <_sbrk+0x50>)
 8006dc4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3710      	adds	r7, #16
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}
 8006dd0:	200007e0 	.word	0x200007e0
 8006dd4:	20000840 	.word	0x20000840

08006dd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006ddc:	4b16      	ldr	r3, [pc, #88]	; (8006e38 <SystemInit+0x60>)
 8006dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006de2:	4a15      	ldr	r2, [pc, #84]	; (8006e38 <SystemInit+0x60>)
 8006de4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006de8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8006dec:	4b13      	ldr	r3, [pc, #76]	; (8006e3c <SystemInit+0x64>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a12      	ldr	r2, [pc, #72]	; (8006e3c <SystemInit+0x64>)
 8006df2:	f043 0301 	orr.w	r3, r3, #1
 8006df6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006df8:	4b10      	ldr	r3, [pc, #64]	; (8006e3c <SystemInit+0x64>)
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8006dfe:	4b0f      	ldr	r3, [pc, #60]	; (8006e3c <SystemInit+0x64>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a0e      	ldr	r2, [pc, #56]	; (8006e3c <SystemInit+0x64>)
 8006e04:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8006e08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e0c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8006e0e:	4b0b      	ldr	r3, [pc, #44]	; (8006e3c <SystemInit+0x64>)
 8006e10:	4a0b      	ldr	r2, [pc, #44]	; (8006e40 <SystemInit+0x68>)
 8006e12:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8006e14:	4b09      	ldr	r3, [pc, #36]	; (8006e3c <SystemInit+0x64>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a08      	ldr	r2, [pc, #32]	; (8006e3c <SystemInit+0x64>)
 8006e1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e1e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8006e20:	4b06      	ldr	r3, [pc, #24]	; (8006e3c <SystemInit+0x64>)
 8006e22:	2200      	movs	r2, #0
 8006e24:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006e26:	4b04      	ldr	r3, [pc, #16]	; (8006e38 <SystemInit+0x60>)
 8006e28:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006e2c:	609a      	str	r2, [r3, #8]
#endif
}
 8006e2e:	bf00      	nop
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr
 8006e38:	e000ed00 	.word	0xe000ed00
 8006e3c:	40023800 	.word	0x40023800
 8006e40:	24003010 	.word	0x24003010

08006e44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006e44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006e7c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006e48:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006e4a:	e003      	b.n	8006e54 <LoopCopyDataInit>

08006e4c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006e4c:	4b0c      	ldr	r3, [pc, #48]	; (8006e80 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006e4e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006e50:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006e52:	3104      	adds	r1, #4

08006e54 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006e54:	480b      	ldr	r0, [pc, #44]	; (8006e84 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006e56:	4b0c      	ldr	r3, [pc, #48]	; (8006e88 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006e58:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006e5a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006e5c:	d3f6      	bcc.n	8006e4c <CopyDataInit>
  ldr  r2, =_sbss
 8006e5e:	4a0b      	ldr	r2, [pc, #44]	; (8006e8c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006e60:	e002      	b.n	8006e68 <LoopFillZerobss>

08006e62 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006e62:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006e64:	f842 3b04 	str.w	r3, [r2], #4

08006e68 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006e68:	4b09      	ldr	r3, [pc, #36]	; (8006e90 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006e6a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006e6c:	d3f9      	bcc.n	8006e62 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006e6e:	f7ff ffb3 	bl	8006dd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006e72:	f000 f81b 	bl	8006eac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006e76:	f7ff fc55 	bl	8006724 <main>
  bx  lr    
 8006e7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006e7c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8006e80:	0800a758 	.word	0x0800a758
  ldr  r0, =_sdata
 8006e84:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006e88:	20000730 	.word	0x20000730
  ldr  r2, =_sbss
 8006e8c:	20000730 	.word	0x20000730
  ldr  r3, = _ebss
 8006e90:	2000083c 	.word	0x2000083c

08006e94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006e94:	e7fe      	b.n	8006e94 <ADC_IRQHandler>

08006e96 <__aeabi_memclr>:
 8006e96:	2200      	movs	r2, #0
 8006e98:	f7fc be2a 	b.w	8003af0 <__aeabi_memset>

08006e9c <__aeabi_memcpy>:
 8006e9c:	f000 b839 	b.w	8006f12 <memcpy>

08006ea0 <__errno>:
 8006ea0:	4b01      	ldr	r3, [pc, #4]	; (8006ea8 <__errno+0x8>)
 8006ea2:	6818      	ldr	r0, [r3, #0]
 8006ea4:	4770      	bx	lr
 8006ea6:	bf00      	nop
 8006ea8:	2000055c 	.word	0x2000055c

08006eac <__libc_init_array>:
 8006eac:	b570      	push	{r4, r5, r6, lr}
 8006eae:	4e0d      	ldr	r6, [pc, #52]	; (8006ee4 <__libc_init_array+0x38>)
 8006eb0:	4c0d      	ldr	r4, [pc, #52]	; (8006ee8 <__libc_init_array+0x3c>)
 8006eb2:	1ba4      	subs	r4, r4, r6
 8006eb4:	10a4      	asrs	r4, r4, #2
 8006eb6:	2500      	movs	r5, #0
 8006eb8:	42a5      	cmp	r5, r4
 8006eba:	d109      	bne.n	8006ed0 <__libc_init_array+0x24>
 8006ebc:	4e0b      	ldr	r6, [pc, #44]	; (8006eec <__libc_init_array+0x40>)
 8006ebe:	4c0c      	ldr	r4, [pc, #48]	; (8006ef0 <__libc_init_array+0x44>)
 8006ec0:	f003 f9f8 	bl	800a2b4 <_init>
 8006ec4:	1ba4      	subs	r4, r4, r6
 8006ec6:	10a4      	asrs	r4, r4, #2
 8006ec8:	2500      	movs	r5, #0
 8006eca:	42a5      	cmp	r5, r4
 8006ecc:	d105      	bne.n	8006eda <__libc_init_array+0x2e>
 8006ece:	bd70      	pop	{r4, r5, r6, pc}
 8006ed0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006ed4:	4798      	blx	r3
 8006ed6:	3501      	adds	r5, #1
 8006ed8:	e7ee      	b.n	8006eb8 <__libc_init_array+0xc>
 8006eda:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006ede:	4798      	blx	r3
 8006ee0:	3501      	adds	r5, #1
 8006ee2:	e7f2      	b.n	8006eca <__libc_init_array+0x1e>
 8006ee4:	0800a750 	.word	0x0800a750
 8006ee8:	0800a750 	.word	0x0800a750
 8006eec:	0800a750 	.word	0x0800a750
 8006ef0:	0800a754 	.word	0x0800a754

08006ef4 <memcmp>:
 8006ef4:	b530      	push	{r4, r5, lr}
 8006ef6:	2400      	movs	r4, #0
 8006ef8:	42a2      	cmp	r2, r4
 8006efa:	d101      	bne.n	8006f00 <memcmp+0xc>
 8006efc:	2000      	movs	r0, #0
 8006efe:	e007      	b.n	8006f10 <memcmp+0x1c>
 8006f00:	5d03      	ldrb	r3, [r0, r4]
 8006f02:	3401      	adds	r4, #1
 8006f04:	190d      	adds	r5, r1, r4
 8006f06:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8006f0a:	42ab      	cmp	r3, r5
 8006f0c:	d0f4      	beq.n	8006ef8 <memcmp+0x4>
 8006f0e:	1b58      	subs	r0, r3, r5
 8006f10:	bd30      	pop	{r4, r5, pc}

08006f12 <memcpy>:
 8006f12:	b510      	push	{r4, lr}
 8006f14:	1e43      	subs	r3, r0, #1
 8006f16:	440a      	add	r2, r1
 8006f18:	4291      	cmp	r1, r2
 8006f1a:	d100      	bne.n	8006f1e <memcpy+0xc>
 8006f1c:	bd10      	pop	{r4, pc}
 8006f1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f26:	e7f7      	b.n	8006f18 <memcpy+0x6>

08006f28 <memset>:
 8006f28:	4402      	add	r2, r0
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d100      	bne.n	8006f32 <memset+0xa>
 8006f30:	4770      	bx	lr
 8006f32:	f803 1b01 	strb.w	r1, [r3], #1
 8006f36:	e7f9      	b.n	8006f2c <memset+0x4>

08006f38 <__cvt>:
 8006f38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f3c:	ec55 4b10 	vmov	r4, r5, d0
 8006f40:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8006f42:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006f46:	2d00      	cmp	r5, #0
 8006f48:	460e      	mov	r6, r1
 8006f4a:	4691      	mov	r9, r2
 8006f4c:	4619      	mov	r1, r3
 8006f4e:	bfb8      	it	lt
 8006f50:	4622      	movlt	r2, r4
 8006f52:	462b      	mov	r3, r5
 8006f54:	f027 0720 	bic.w	r7, r7, #32
 8006f58:	bfbb      	ittet	lt
 8006f5a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006f5e:	461d      	movlt	r5, r3
 8006f60:	2300      	movge	r3, #0
 8006f62:	232d      	movlt	r3, #45	; 0x2d
 8006f64:	bfb8      	it	lt
 8006f66:	4614      	movlt	r4, r2
 8006f68:	2f46      	cmp	r7, #70	; 0x46
 8006f6a:	700b      	strb	r3, [r1, #0]
 8006f6c:	d004      	beq.n	8006f78 <__cvt+0x40>
 8006f6e:	2f45      	cmp	r7, #69	; 0x45
 8006f70:	d100      	bne.n	8006f74 <__cvt+0x3c>
 8006f72:	3601      	adds	r6, #1
 8006f74:	2102      	movs	r1, #2
 8006f76:	e000      	b.n	8006f7a <__cvt+0x42>
 8006f78:	2103      	movs	r1, #3
 8006f7a:	ab03      	add	r3, sp, #12
 8006f7c:	9301      	str	r3, [sp, #4]
 8006f7e:	ab02      	add	r3, sp, #8
 8006f80:	9300      	str	r3, [sp, #0]
 8006f82:	4632      	mov	r2, r6
 8006f84:	4653      	mov	r3, sl
 8006f86:	ec45 4b10 	vmov	d0, r4, r5
 8006f8a:	f000 fcdd 	bl	8007948 <_dtoa_r>
 8006f8e:	2f47      	cmp	r7, #71	; 0x47
 8006f90:	4680      	mov	r8, r0
 8006f92:	d102      	bne.n	8006f9a <__cvt+0x62>
 8006f94:	f019 0f01 	tst.w	r9, #1
 8006f98:	d026      	beq.n	8006fe8 <__cvt+0xb0>
 8006f9a:	2f46      	cmp	r7, #70	; 0x46
 8006f9c:	eb08 0906 	add.w	r9, r8, r6
 8006fa0:	d111      	bne.n	8006fc6 <__cvt+0x8e>
 8006fa2:	f898 3000 	ldrb.w	r3, [r8]
 8006fa6:	2b30      	cmp	r3, #48	; 0x30
 8006fa8:	d10a      	bne.n	8006fc0 <__cvt+0x88>
 8006faa:	2200      	movs	r2, #0
 8006fac:	2300      	movs	r3, #0
 8006fae:	4620      	mov	r0, r4
 8006fb0:	4629      	mov	r1, r5
 8006fb2:	f7fd fa69 	bl	8004488 <__aeabi_dcmpeq>
 8006fb6:	b918      	cbnz	r0, 8006fc0 <__cvt+0x88>
 8006fb8:	f1c6 0601 	rsb	r6, r6, #1
 8006fbc:	f8ca 6000 	str.w	r6, [sl]
 8006fc0:	f8da 3000 	ldr.w	r3, [sl]
 8006fc4:	4499      	add	r9, r3
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	2300      	movs	r3, #0
 8006fca:	4620      	mov	r0, r4
 8006fcc:	4629      	mov	r1, r5
 8006fce:	f7fd fa5b 	bl	8004488 <__aeabi_dcmpeq>
 8006fd2:	b938      	cbnz	r0, 8006fe4 <__cvt+0xac>
 8006fd4:	2230      	movs	r2, #48	; 0x30
 8006fd6:	9b03      	ldr	r3, [sp, #12]
 8006fd8:	454b      	cmp	r3, r9
 8006fda:	d205      	bcs.n	8006fe8 <__cvt+0xb0>
 8006fdc:	1c59      	adds	r1, r3, #1
 8006fde:	9103      	str	r1, [sp, #12]
 8006fe0:	701a      	strb	r2, [r3, #0]
 8006fe2:	e7f8      	b.n	8006fd6 <__cvt+0x9e>
 8006fe4:	f8cd 900c 	str.w	r9, [sp, #12]
 8006fe8:	9b03      	ldr	r3, [sp, #12]
 8006fea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006fec:	eba3 0308 	sub.w	r3, r3, r8
 8006ff0:	4640      	mov	r0, r8
 8006ff2:	6013      	str	r3, [r2, #0]
 8006ff4:	b004      	add	sp, #16
 8006ff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006ffa <__exponent>:
 8006ffa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ffc:	2900      	cmp	r1, #0
 8006ffe:	4604      	mov	r4, r0
 8007000:	bfba      	itte	lt
 8007002:	4249      	neglt	r1, r1
 8007004:	232d      	movlt	r3, #45	; 0x2d
 8007006:	232b      	movge	r3, #43	; 0x2b
 8007008:	2909      	cmp	r1, #9
 800700a:	f804 2b02 	strb.w	r2, [r4], #2
 800700e:	7043      	strb	r3, [r0, #1]
 8007010:	dd20      	ble.n	8007054 <__exponent+0x5a>
 8007012:	f10d 0307 	add.w	r3, sp, #7
 8007016:	461f      	mov	r7, r3
 8007018:	260a      	movs	r6, #10
 800701a:	fb91 f5f6 	sdiv	r5, r1, r6
 800701e:	fb06 1115 	mls	r1, r6, r5, r1
 8007022:	3130      	adds	r1, #48	; 0x30
 8007024:	2d09      	cmp	r5, #9
 8007026:	f803 1c01 	strb.w	r1, [r3, #-1]
 800702a:	f103 32ff 	add.w	r2, r3, #4294967295
 800702e:	4629      	mov	r1, r5
 8007030:	dc09      	bgt.n	8007046 <__exponent+0x4c>
 8007032:	3130      	adds	r1, #48	; 0x30
 8007034:	3b02      	subs	r3, #2
 8007036:	f802 1c01 	strb.w	r1, [r2, #-1]
 800703a:	42bb      	cmp	r3, r7
 800703c:	4622      	mov	r2, r4
 800703e:	d304      	bcc.n	800704a <__exponent+0x50>
 8007040:	1a10      	subs	r0, r2, r0
 8007042:	b003      	add	sp, #12
 8007044:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007046:	4613      	mov	r3, r2
 8007048:	e7e7      	b.n	800701a <__exponent+0x20>
 800704a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800704e:	f804 2b01 	strb.w	r2, [r4], #1
 8007052:	e7f2      	b.n	800703a <__exponent+0x40>
 8007054:	2330      	movs	r3, #48	; 0x30
 8007056:	4419      	add	r1, r3
 8007058:	7083      	strb	r3, [r0, #2]
 800705a:	1d02      	adds	r2, r0, #4
 800705c:	70c1      	strb	r1, [r0, #3]
 800705e:	e7ef      	b.n	8007040 <__exponent+0x46>

08007060 <_printf_float>:
 8007060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007064:	b08d      	sub	sp, #52	; 0x34
 8007066:	460c      	mov	r4, r1
 8007068:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800706c:	4616      	mov	r6, r2
 800706e:	461f      	mov	r7, r3
 8007070:	4605      	mov	r5, r0
 8007072:	f001 fa21 	bl	80084b8 <_localeconv_r>
 8007076:	6803      	ldr	r3, [r0, #0]
 8007078:	9304      	str	r3, [sp, #16]
 800707a:	4618      	mov	r0, r3
 800707c:	f7fc fd85 	bl	8003b8a <strlen>
 8007080:	2300      	movs	r3, #0
 8007082:	930a      	str	r3, [sp, #40]	; 0x28
 8007084:	f8d8 3000 	ldr.w	r3, [r8]
 8007088:	9005      	str	r0, [sp, #20]
 800708a:	3307      	adds	r3, #7
 800708c:	f023 0307 	bic.w	r3, r3, #7
 8007090:	f103 0208 	add.w	r2, r3, #8
 8007094:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007098:	f8d4 b000 	ldr.w	fp, [r4]
 800709c:	f8c8 2000 	str.w	r2, [r8]
 80070a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80070a8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80070ac:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80070b0:	9307      	str	r3, [sp, #28]
 80070b2:	f8cd 8018 	str.w	r8, [sp, #24]
 80070b6:	f04f 32ff 	mov.w	r2, #4294967295
 80070ba:	4ba7      	ldr	r3, [pc, #668]	; (8007358 <_printf_float+0x2f8>)
 80070bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80070c0:	f7fd fa14 	bl	80044ec <__aeabi_dcmpun>
 80070c4:	bb70      	cbnz	r0, 8007124 <_printf_float+0xc4>
 80070c6:	f04f 32ff 	mov.w	r2, #4294967295
 80070ca:	4ba3      	ldr	r3, [pc, #652]	; (8007358 <_printf_float+0x2f8>)
 80070cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80070d0:	f7fd f9ee 	bl	80044b0 <__aeabi_dcmple>
 80070d4:	bb30      	cbnz	r0, 8007124 <_printf_float+0xc4>
 80070d6:	2200      	movs	r2, #0
 80070d8:	2300      	movs	r3, #0
 80070da:	4640      	mov	r0, r8
 80070dc:	4649      	mov	r1, r9
 80070de:	f7fd f9dd 	bl	800449c <__aeabi_dcmplt>
 80070e2:	b110      	cbz	r0, 80070ea <_printf_float+0x8a>
 80070e4:	232d      	movs	r3, #45	; 0x2d
 80070e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070ea:	4a9c      	ldr	r2, [pc, #624]	; (800735c <_printf_float+0x2fc>)
 80070ec:	4b9c      	ldr	r3, [pc, #624]	; (8007360 <_printf_float+0x300>)
 80070ee:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80070f2:	bf8c      	ite	hi
 80070f4:	4690      	movhi	r8, r2
 80070f6:	4698      	movls	r8, r3
 80070f8:	2303      	movs	r3, #3
 80070fa:	f02b 0204 	bic.w	r2, fp, #4
 80070fe:	6123      	str	r3, [r4, #16]
 8007100:	6022      	str	r2, [r4, #0]
 8007102:	f04f 0900 	mov.w	r9, #0
 8007106:	9700      	str	r7, [sp, #0]
 8007108:	4633      	mov	r3, r6
 800710a:	aa0b      	add	r2, sp, #44	; 0x2c
 800710c:	4621      	mov	r1, r4
 800710e:	4628      	mov	r0, r5
 8007110:	f000 f9e6 	bl	80074e0 <_printf_common>
 8007114:	3001      	adds	r0, #1
 8007116:	f040 808d 	bne.w	8007234 <_printf_float+0x1d4>
 800711a:	f04f 30ff 	mov.w	r0, #4294967295
 800711e:	b00d      	add	sp, #52	; 0x34
 8007120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007124:	4642      	mov	r2, r8
 8007126:	464b      	mov	r3, r9
 8007128:	4640      	mov	r0, r8
 800712a:	4649      	mov	r1, r9
 800712c:	f7fd f9de 	bl	80044ec <__aeabi_dcmpun>
 8007130:	b110      	cbz	r0, 8007138 <_printf_float+0xd8>
 8007132:	4a8c      	ldr	r2, [pc, #560]	; (8007364 <_printf_float+0x304>)
 8007134:	4b8c      	ldr	r3, [pc, #560]	; (8007368 <_printf_float+0x308>)
 8007136:	e7da      	b.n	80070ee <_printf_float+0x8e>
 8007138:	6861      	ldr	r1, [r4, #4]
 800713a:	1c4b      	adds	r3, r1, #1
 800713c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8007140:	a80a      	add	r0, sp, #40	; 0x28
 8007142:	d13e      	bne.n	80071c2 <_printf_float+0x162>
 8007144:	2306      	movs	r3, #6
 8007146:	6063      	str	r3, [r4, #4]
 8007148:	2300      	movs	r3, #0
 800714a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800714e:	ab09      	add	r3, sp, #36	; 0x24
 8007150:	9300      	str	r3, [sp, #0]
 8007152:	ec49 8b10 	vmov	d0, r8, r9
 8007156:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800715a:	6022      	str	r2, [r4, #0]
 800715c:	f8cd a004 	str.w	sl, [sp, #4]
 8007160:	6861      	ldr	r1, [r4, #4]
 8007162:	4628      	mov	r0, r5
 8007164:	f7ff fee8 	bl	8006f38 <__cvt>
 8007168:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800716c:	2b47      	cmp	r3, #71	; 0x47
 800716e:	4680      	mov	r8, r0
 8007170:	d109      	bne.n	8007186 <_printf_float+0x126>
 8007172:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007174:	1cd8      	adds	r0, r3, #3
 8007176:	db02      	blt.n	800717e <_printf_float+0x11e>
 8007178:	6862      	ldr	r2, [r4, #4]
 800717a:	4293      	cmp	r3, r2
 800717c:	dd47      	ble.n	800720e <_printf_float+0x1ae>
 800717e:	f1aa 0a02 	sub.w	sl, sl, #2
 8007182:	fa5f fa8a 	uxtb.w	sl, sl
 8007186:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800718a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800718c:	d824      	bhi.n	80071d8 <_printf_float+0x178>
 800718e:	3901      	subs	r1, #1
 8007190:	4652      	mov	r2, sl
 8007192:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007196:	9109      	str	r1, [sp, #36]	; 0x24
 8007198:	f7ff ff2f 	bl	8006ffa <__exponent>
 800719c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800719e:	1813      	adds	r3, r2, r0
 80071a0:	2a01      	cmp	r2, #1
 80071a2:	4681      	mov	r9, r0
 80071a4:	6123      	str	r3, [r4, #16]
 80071a6:	dc02      	bgt.n	80071ae <_printf_float+0x14e>
 80071a8:	6822      	ldr	r2, [r4, #0]
 80071aa:	07d1      	lsls	r1, r2, #31
 80071ac:	d501      	bpl.n	80071b2 <_printf_float+0x152>
 80071ae:	3301      	adds	r3, #1
 80071b0:	6123      	str	r3, [r4, #16]
 80071b2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d0a5      	beq.n	8007106 <_printf_float+0xa6>
 80071ba:	232d      	movs	r3, #45	; 0x2d
 80071bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071c0:	e7a1      	b.n	8007106 <_printf_float+0xa6>
 80071c2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80071c6:	f000 8177 	beq.w	80074b8 <_printf_float+0x458>
 80071ca:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80071ce:	d1bb      	bne.n	8007148 <_printf_float+0xe8>
 80071d0:	2900      	cmp	r1, #0
 80071d2:	d1b9      	bne.n	8007148 <_printf_float+0xe8>
 80071d4:	2301      	movs	r3, #1
 80071d6:	e7b6      	b.n	8007146 <_printf_float+0xe6>
 80071d8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80071dc:	d119      	bne.n	8007212 <_printf_float+0x1b2>
 80071de:	2900      	cmp	r1, #0
 80071e0:	6863      	ldr	r3, [r4, #4]
 80071e2:	dd0c      	ble.n	80071fe <_printf_float+0x19e>
 80071e4:	6121      	str	r1, [r4, #16]
 80071e6:	b913      	cbnz	r3, 80071ee <_printf_float+0x18e>
 80071e8:	6822      	ldr	r2, [r4, #0]
 80071ea:	07d2      	lsls	r2, r2, #31
 80071ec:	d502      	bpl.n	80071f4 <_printf_float+0x194>
 80071ee:	3301      	adds	r3, #1
 80071f0:	440b      	add	r3, r1
 80071f2:	6123      	str	r3, [r4, #16]
 80071f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071f6:	65a3      	str	r3, [r4, #88]	; 0x58
 80071f8:	f04f 0900 	mov.w	r9, #0
 80071fc:	e7d9      	b.n	80071b2 <_printf_float+0x152>
 80071fe:	b913      	cbnz	r3, 8007206 <_printf_float+0x1a6>
 8007200:	6822      	ldr	r2, [r4, #0]
 8007202:	07d0      	lsls	r0, r2, #31
 8007204:	d501      	bpl.n	800720a <_printf_float+0x1aa>
 8007206:	3302      	adds	r3, #2
 8007208:	e7f3      	b.n	80071f2 <_printf_float+0x192>
 800720a:	2301      	movs	r3, #1
 800720c:	e7f1      	b.n	80071f2 <_printf_float+0x192>
 800720e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8007212:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007216:	4293      	cmp	r3, r2
 8007218:	db05      	blt.n	8007226 <_printf_float+0x1c6>
 800721a:	6822      	ldr	r2, [r4, #0]
 800721c:	6123      	str	r3, [r4, #16]
 800721e:	07d1      	lsls	r1, r2, #31
 8007220:	d5e8      	bpl.n	80071f4 <_printf_float+0x194>
 8007222:	3301      	adds	r3, #1
 8007224:	e7e5      	b.n	80071f2 <_printf_float+0x192>
 8007226:	2b00      	cmp	r3, #0
 8007228:	bfd4      	ite	le
 800722a:	f1c3 0302 	rsble	r3, r3, #2
 800722e:	2301      	movgt	r3, #1
 8007230:	4413      	add	r3, r2
 8007232:	e7de      	b.n	80071f2 <_printf_float+0x192>
 8007234:	6823      	ldr	r3, [r4, #0]
 8007236:	055a      	lsls	r2, r3, #21
 8007238:	d407      	bmi.n	800724a <_printf_float+0x1ea>
 800723a:	6923      	ldr	r3, [r4, #16]
 800723c:	4642      	mov	r2, r8
 800723e:	4631      	mov	r1, r6
 8007240:	4628      	mov	r0, r5
 8007242:	47b8      	blx	r7
 8007244:	3001      	adds	r0, #1
 8007246:	d12b      	bne.n	80072a0 <_printf_float+0x240>
 8007248:	e767      	b.n	800711a <_printf_float+0xba>
 800724a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800724e:	f240 80dc 	bls.w	800740a <_printf_float+0x3aa>
 8007252:	2200      	movs	r2, #0
 8007254:	2300      	movs	r3, #0
 8007256:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800725a:	f7fd f915 	bl	8004488 <__aeabi_dcmpeq>
 800725e:	2800      	cmp	r0, #0
 8007260:	d033      	beq.n	80072ca <_printf_float+0x26a>
 8007262:	2301      	movs	r3, #1
 8007264:	4a41      	ldr	r2, [pc, #260]	; (800736c <_printf_float+0x30c>)
 8007266:	4631      	mov	r1, r6
 8007268:	4628      	mov	r0, r5
 800726a:	47b8      	blx	r7
 800726c:	3001      	adds	r0, #1
 800726e:	f43f af54 	beq.w	800711a <_printf_float+0xba>
 8007272:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007276:	429a      	cmp	r2, r3
 8007278:	db02      	blt.n	8007280 <_printf_float+0x220>
 800727a:	6823      	ldr	r3, [r4, #0]
 800727c:	07d8      	lsls	r0, r3, #31
 800727e:	d50f      	bpl.n	80072a0 <_printf_float+0x240>
 8007280:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007284:	4631      	mov	r1, r6
 8007286:	4628      	mov	r0, r5
 8007288:	47b8      	blx	r7
 800728a:	3001      	adds	r0, #1
 800728c:	f43f af45 	beq.w	800711a <_printf_float+0xba>
 8007290:	f04f 0800 	mov.w	r8, #0
 8007294:	f104 091a 	add.w	r9, r4, #26
 8007298:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800729a:	3b01      	subs	r3, #1
 800729c:	4543      	cmp	r3, r8
 800729e:	dc09      	bgt.n	80072b4 <_printf_float+0x254>
 80072a0:	6823      	ldr	r3, [r4, #0]
 80072a2:	079b      	lsls	r3, r3, #30
 80072a4:	f100 8103 	bmi.w	80074ae <_printf_float+0x44e>
 80072a8:	68e0      	ldr	r0, [r4, #12]
 80072aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072ac:	4298      	cmp	r0, r3
 80072ae:	bfb8      	it	lt
 80072b0:	4618      	movlt	r0, r3
 80072b2:	e734      	b.n	800711e <_printf_float+0xbe>
 80072b4:	2301      	movs	r3, #1
 80072b6:	464a      	mov	r2, r9
 80072b8:	4631      	mov	r1, r6
 80072ba:	4628      	mov	r0, r5
 80072bc:	47b8      	blx	r7
 80072be:	3001      	adds	r0, #1
 80072c0:	f43f af2b 	beq.w	800711a <_printf_float+0xba>
 80072c4:	f108 0801 	add.w	r8, r8, #1
 80072c8:	e7e6      	b.n	8007298 <_printf_float+0x238>
 80072ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	dc2b      	bgt.n	8007328 <_printf_float+0x2c8>
 80072d0:	2301      	movs	r3, #1
 80072d2:	4a26      	ldr	r2, [pc, #152]	; (800736c <_printf_float+0x30c>)
 80072d4:	4631      	mov	r1, r6
 80072d6:	4628      	mov	r0, r5
 80072d8:	47b8      	blx	r7
 80072da:	3001      	adds	r0, #1
 80072dc:	f43f af1d 	beq.w	800711a <_printf_float+0xba>
 80072e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072e2:	b923      	cbnz	r3, 80072ee <_printf_float+0x28e>
 80072e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072e6:	b913      	cbnz	r3, 80072ee <_printf_float+0x28e>
 80072e8:	6823      	ldr	r3, [r4, #0]
 80072ea:	07d9      	lsls	r1, r3, #31
 80072ec:	d5d8      	bpl.n	80072a0 <_printf_float+0x240>
 80072ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80072f2:	4631      	mov	r1, r6
 80072f4:	4628      	mov	r0, r5
 80072f6:	47b8      	blx	r7
 80072f8:	3001      	adds	r0, #1
 80072fa:	f43f af0e 	beq.w	800711a <_printf_float+0xba>
 80072fe:	f04f 0900 	mov.w	r9, #0
 8007302:	f104 0a1a 	add.w	sl, r4, #26
 8007306:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007308:	425b      	negs	r3, r3
 800730a:	454b      	cmp	r3, r9
 800730c:	dc01      	bgt.n	8007312 <_printf_float+0x2b2>
 800730e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007310:	e794      	b.n	800723c <_printf_float+0x1dc>
 8007312:	2301      	movs	r3, #1
 8007314:	4652      	mov	r2, sl
 8007316:	4631      	mov	r1, r6
 8007318:	4628      	mov	r0, r5
 800731a:	47b8      	blx	r7
 800731c:	3001      	adds	r0, #1
 800731e:	f43f aefc 	beq.w	800711a <_printf_float+0xba>
 8007322:	f109 0901 	add.w	r9, r9, #1
 8007326:	e7ee      	b.n	8007306 <_printf_float+0x2a6>
 8007328:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800732a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800732c:	429a      	cmp	r2, r3
 800732e:	bfa8      	it	ge
 8007330:	461a      	movge	r2, r3
 8007332:	2a00      	cmp	r2, #0
 8007334:	4691      	mov	r9, r2
 8007336:	dd07      	ble.n	8007348 <_printf_float+0x2e8>
 8007338:	4613      	mov	r3, r2
 800733a:	4631      	mov	r1, r6
 800733c:	4642      	mov	r2, r8
 800733e:	4628      	mov	r0, r5
 8007340:	47b8      	blx	r7
 8007342:	3001      	adds	r0, #1
 8007344:	f43f aee9 	beq.w	800711a <_printf_float+0xba>
 8007348:	f104 031a 	add.w	r3, r4, #26
 800734c:	f04f 0b00 	mov.w	fp, #0
 8007350:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007354:	9306      	str	r3, [sp, #24]
 8007356:	e015      	b.n	8007384 <_printf_float+0x324>
 8007358:	7fefffff 	.word	0x7fefffff
 800735c:	0800a4a8 	.word	0x0800a4a8
 8007360:	0800a4a4 	.word	0x0800a4a4
 8007364:	0800a4b0 	.word	0x0800a4b0
 8007368:	0800a4ac 	.word	0x0800a4ac
 800736c:	0800a4b4 	.word	0x0800a4b4
 8007370:	2301      	movs	r3, #1
 8007372:	9a06      	ldr	r2, [sp, #24]
 8007374:	4631      	mov	r1, r6
 8007376:	4628      	mov	r0, r5
 8007378:	47b8      	blx	r7
 800737a:	3001      	adds	r0, #1
 800737c:	f43f aecd 	beq.w	800711a <_printf_float+0xba>
 8007380:	f10b 0b01 	add.w	fp, fp, #1
 8007384:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007388:	ebaa 0309 	sub.w	r3, sl, r9
 800738c:	455b      	cmp	r3, fp
 800738e:	dcef      	bgt.n	8007370 <_printf_float+0x310>
 8007390:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007394:	429a      	cmp	r2, r3
 8007396:	44d0      	add	r8, sl
 8007398:	db15      	blt.n	80073c6 <_printf_float+0x366>
 800739a:	6823      	ldr	r3, [r4, #0]
 800739c:	07da      	lsls	r2, r3, #31
 800739e:	d412      	bmi.n	80073c6 <_printf_float+0x366>
 80073a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80073a4:	eba3 020a 	sub.w	r2, r3, sl
 80073a8:	eba3 0a01 	sub.w	sl, r3, r1
 80073ac:	4592      	cmp	sl, r2
 80073ae:	bfa8      	it	ge
 80073b0:	4692      	movge	sl, r2
 80073b2:	f1ba 0f00 	cmp.w	sl, #0
 80073b6:	dc0e      	bgt.n	80073d6 <_printf_float+0x376>
 80073b8:	f04f 0800 	mov.w	r8, #0
 80073bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80073c0:	f104 091a 	add.w	r9, r4, #26
 80073c4:	e019      	b.n	80073fa <_printf_float+0x39a>
 80073c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073ca:	4631      	mov	r1, r6
 80073cc:	4628      	mov	r0, r5
 80073ce:	47b8      	blx	r7
 80073d0:	3001      	adds	r0, #1
 80073d2:	d1e5      	bne.n	80073a0 <_printf_float+0x340>
 80073d4:	e6a1      	b.n	800711a <_printf_float+0xba>
 80073d6:	4653      	mov	r3, sl
 80073d8:	4642      	mov	r2, r8
 80073da:	4631      	mov	r1, r6
 80073dc:	4628      	mov	r0, r5
 80073de:	47b8      	blx	r7
 80073e0:	3001      	adds	r0, #1
 80073e2:	d1e9      	bne.n	80073b8 <_printf_float+0x358>
 80073e4:	e699      	b.n	800711a <_printf_float+0xba>
 80073e6:	2301      	movs	r3, #1
 80073e8:	464a      	mov	r2, r9
 80073ea:	4631      	mov	r1, r6
 80073ec:	4628      	mov	r0, r5
 80073ee:	47b8      	blx	r7
 80073f0:	3001      	adds	r0, #1
 80073f2:	f43f ae92 	beq.w	800711a <_printf_float+0xba>
 80073f6:	f108 0801 	add.w	r8, r8, #1
 80073fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80073fe:	1a9b      	subs	r3, r3, r2
 8007400:	eba3 030a 	sub.w	r3, r3, sl
 8007404:	4543      	cmp	r3, r8
 8007406:	dcee      	bgt.n	80073e6 <_printf_float+0x386>
 8007408:	e74a      	b.n	80072a0 <_printf_float+0x240>
 800740a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800740c:	2a01      	cmp	r2, #1
 800740e:	dc01      	bgt.n	8007414 <_printf_float+0x3b4>
 8007410:	07db      	lsls	r3, r3, #31
 8007412:	d53a      	bpl.n	800748a <_printf_float+0x42a>
 8007414:	2301      	movs	r3, #1
 8007416:	4642      	mov	r2, r8
 8007418:	4631      	mov	r1, r6
 800741a:	4628      	mov	r0, r5
 800741c:	47b8      	blx	r7
 800741e:	3001      	adds	r0, #1
 8007420:	f43f ae7b 	beq.w	800711a <_printf_float+0xba>
 8007424:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007428:	4631      	mov	r1, r6
 800742a:	4628      	mov	r0, r5
 800742c:	47b8      	blx	r7
 800742e:	3001      	adds	r0, #1
 8007430:	f108 0801 	add.w	r8, r8, #1
 8007434:	f43f ae71 	beq.w	800711a <_printf_float+0xba>
 8007438:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800743a:	2200      	movs	r2, #0
 800743c:	f103 3aff 	add.w	sl, r3, #4294967295
 8007440:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007444:	2300      	movs	r3, #0
 8007446:	f7fd f81f 	bl	8004488 <__aeabi_dcmpeq>
 800744a:	b9c8      	cbnz	r0, 8007480 <_printf_float+0x420>
 800744c:	4653      	mov	r3, sl
 800744e:	4642      	mov	r2, r8
 8007450:	4631      	mov	r1, r6
 8007452:	4628      	mov	r0, r5
 8007454:	47b8      	blx	r7
 8007456:	3001      	adds	r0, #1
 8007458:	d10e      	bne.n	8007478 <_printf_float+0x418>
 800745a:	e65e      	b.n	800711a <_printf_float+0xba>
 800745c:	2301      	movs	r3, #1
 800745e:	4652      	mov	r2, sl
 8007460:	4631      	mov	r1, r6
 8007462:	4628      	mov	r0, r5
 8007464:	47b8      	blx	r7
 8007466:	3001      	adds	r0, #1
 8007468:	f43f ae57 	beq.w	800711a <_printf_float+0xba>
 800746c:	f108 0801 	add.w	r8, r8, #1
 8007470:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007472:	3b01      	subs	r3, #1
 8007474:	4543      	cmp	r3, r8
 8007476:	dcf1      	bgt.n	800745c <_printf_float+0x3fc>
 8007478:	464b      	mov	r3, r9
 800747a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800747e:	e6de      	b.n	800723e <_printf_float+0x1de>
 8007480:	f04f 0800 	mov.w	r8, #0
 8007484:	f104 0a1a 	add.w	sl, r4, #26
 8007488:	e7f2      	b.n	8007470 <_printf_float+0x410>
 800748a:	2301      	movs	r3, #1
 800748c:	e7df      	b.n	800744e <_printf_float+0x3ee>
 800748e:	2301      	movs	r3, #1
 8007490:	464a      	mov	r2, r9
 8007492:	4631      	mov	r1, r6
 8007494:	4628      	mov	r0, r5
 8007496:	47b8      	blx	r7
 8007498:	3001      	adds	r0, #1
 800749a:	f43f ae3e 	beq.w	800711a <_printf_float+0xba>
 800749e:	f108 0801 	add.w	r8, r8, #1
 80074a2:	68e3      	ldr	r3, [r4, #12]
 80074a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80074a6:	1a9b      	subs	r3, r3, r2
 80074a8:	4543      	cmp	r3, r8
 80074aa:	dcf0      	bgt.n	800748e <_printf_float+0x42e>
 80074ac:	e6fc      	b.n	80072a8 <_printf_float+0x248>
 80074ae:	f04f 0800 	mov.w	r8, #0
 80074b2:	f104 0919 	add.w	r9, r4, #25
 80074b6:	e7f4      	b.n	80074a2 <_printf_float+0x442>
 80074b8:	2900      	cmp	r1, #0
 80074ba:	f43f ae8b 	beq.w	80071d4 <_printf_float+0x174>
 80074be:	2300      	movs	r3, #0
 80074c0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80074c4:	ab09      	add	r3, sp, #36	; 0x24
 80074c6:	9300      	str	r3, [sp, #0]
 80074c8:	ec49 8b10 	vmov	d0, r8, r9
 80074cc:	6022      	str	r2, [r4, #0]
 80074ce:	f8cd a004 	str.w	sl, [sp, #4]
 80074d2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80074d6:	4628      	mov	r0, r5
 80074d8:	f7ff fd2e 	bl	8006f38 <__cvt>
 80074dc:	4680      	mov	r8, r0
 80074de:	e648      	b.n	8007172 <_printf_float+0x112>

080074e0 <_printf_common>:
 80074e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074e4:	4691      	mov	r9, r2
 80074e6:	461f      	mov	r7, r3
 80074e8:	688a      	ldr	r2, [r1, #8]
 80074ea:	690b      	ldr	r3, [r1, #16]
 80074ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80074f0:	4293      	cmp	r3, r2
 80074f2:	bfb8      	it	lt
 80074f4:	4613      	movlt	r3, r2
 80074f6:	f8c9 3000 	str.w	r3, [r9]
 80074fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80074fe:	4606      	mov	r6, r0
 8007500:	460c      	mov	r4, r1
 8007502:	b112      	cbz	r2, 800750a <_printf_common+0x2a>
 8007504:	3301      	adds	r3, #1
 8007506:	f8c9 3000 	str.w	r3, [r9]
 800750a:	6823      	ldr	r3, [r4, #0]
 800750c:	0699      	lsls	r1, r3, #26
 800750e:	bf42      	ittt	mi
 8007510:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007514:	3302      	addmi	r3, #2
 8007516:	f8c9 3000 	strmi.w	r3, [r9]
 800751a:	6825      	ldr	r5, [r4, #0]
 800751c:	f015 0506 	ands.w	r5, r5, #6
 8007520:	d107      	bne.n	8007532 <_printf_common+0x52>
 8007522:	f104 0a19 	add.w	sl, r4, #25
 8007526:	68e3      	ldr	r3, [r4, #12]
 8007528:	f8d9 2000 	ldr.w	r2, [r9]
 800752c:	1a9b      	subs	r3, r3, r2
 800752e:	42ab      	cmp	r3, r5
 8007530:	dc28      	bgt.n	8007584 <_printf_common+0xa4>
 8007532:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007536:	6822      	ldr	r2, [r4, #0]
 8007538:	3300      	adds	r3, #0
 800753a:	bf18      	it	ne
 800753c:	2301      	movne	r3, #1
 800753e:	0692      	lsls	r2, r2, #26
 8007540:	d42d      	bmi.n	800759e <_printf_common+0xbe>
 8007542:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007546:	4639      	mov	r1, r7
 8007548:	4630      	mov	r0, r6
 800754a:	47c0      	blx	r8
 800754c:	3001      	adds	r0, #1
 800754e:	d020      	beq.n	8007592 <_printf_common+0xb2>
 8007550:	6823      	ldr	r3, [r4, #0]
 8007552:	68e5      	ldr	r5, [r4, #12]
 8007554:	f8d9 2000 	ldr.w	r2, [r9]
 8007558:	f003 0306 	and.w	r3, r3, #6
 800755c:	2b04      	cmp	r3, #4
 800755e:	bf08      	it	eq
 8007560:	1aad      	subeq	r5, r5, r2
 8007562:	68a3      	ldr	r3, [r4, #8]
 8007564:	6922      	ldr	r2, [r4, #16]
 8007566:	bf0c      	ite	eq
 8007568:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800756c:	2500      	movne	r5, #0
 800756e:	4293      	cmp	r3, r2
 8007570:	bfc4      	itt	gt
 8007572:	1a9b      	subgt	r3, r3, r2
 8007574:	18ed      	addgt	r5, r5, r3
 8007576:	f04f 0900 	mov.w	r9, #0
 800757a:	341a      	adds	r4, #26
 800757c:	454d      	cmp	r5, r9
 800757e:	d11a      	bne.n	80075b6 <_printf_common+0xd6>
 8007580:	2000      	movs	r0, #0
 8007582:	e008      	b.n	8007596 <_printf_common+0xb6>
 8007584:	2301      	movs	r3, #1
 8007586:	4652      	mov	r2, sl
 8007588:	4639      	mov	r1, r7
 800758a:	4630      	mov	r0, r6
 800758c:	47c0      	blx	r8
 800758e:	3001      	adds	r0, #1
 8007590:	d103      	bne.n	800759a <_printf_common+0xba>
 8007592:	f04f 30ff 	mov.w	r0, #4294967295
 8007596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800759a:	3501      	adds	r5, #1
 800759c:	e7c3      	b.n	8007526 <_printf_common+0x46>
 800759e:	18e1      	adds	r1, r4, r3
 80075a0:	1c5a      	adds	r2, r3, #1
 80075a2:	2030      	movs	r0, #48	; 0x30
 80075a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80075a8:	4422      	add	r2, r4
 80075aa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80075ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80075b2:	3302      	adds	r3, #2
 80075b4:	e7c5      	b.n	8007542 <_printf_common+0x62>
 80075b6:	2301      	movs	r3, #1
 80075b8:	4622      	mov	r2, r4
 80075ba:	4639      	mov	r1, r7
 80075bc:	4630      	mov	r0, r6
 80075be:	47c0      	blx	r8
 80075c0:	3001      	adds	r0, #1
 80075c2:	d0e6      	beq.n	8007592 <_printf_common+0xb2>
 80075c4:	f109 0901 	add.w	r9, r9, #1
 80075c8:	e7d8      	b.n	800757c <_printf_common+0x9c>
	...

080075cc <_printf_i>:
 80075cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80075d0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80075d4:	460c      	mov	r4, r1
 80075d6:	7e09      	ldrb	r1, [r1, #24]
 80075d8:	b085      	sub	sp, #20
 80075da:	296e      	cmp	r1, #110	; 0x6e
 80075dc:	4617      	mov	r7, r2
 80075de:	4606      	mov	r6, r0
 80075e0:	4698      	mov	r8, r3
 80075e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80075e4:	f000 80b3 	beq.w	800774e <_printf_i+0x182>
 80075e8:	d822      	bhi.n	8007630 <_printf_i+0x64>
 80075ea:	2963      	cmp	r1, #99	; 0x63
 80075ec:	d036      	beq.n	800765c <_printf_i+0x90>
 80075ee:	d80a      	bhi.n	8007606 <_printf_i+0x3a>
 80075f0:	2900      	cmp	r1, #0
 80075f2:	f000 80b9 	beq.w	8007768 <_printf_i+0x19c>
 80075f6:	2958      	cmp	r1, #88	; 0x58
 80075f8:	f000 8083 	beq.w	8007702 <_printf_i+0x136>
 80075fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007600:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007604:	e032      	b.n	800766c <_printf_i+0xa0>
 8007606:	2964      	cmp	r1, #100	; 0x64
 8007608:	d001      	beq.n	800760e <_printf_i+0x42>
 800760a:	2969      	cmp	r1, #105	; 0x69
 800760c:	d1f6      	bne.n	80075fc <_printf_i+0x30>
 800760e:	6820      	ldr	r0, [r4, #0]
 8007610:	6813      	ldr	r3, [r2, #0]
 8007612:	0605      	lsls	r5, r0, #24
 8007614:	f103 0104 	add.w	r1, r3, #4
 8007618:	d52a      	bpl.n	8007670 <_printf_i+0xa4>
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	6011      	str	r1, [r2, #0]
 800761e:	2b00      	cmp	r3, #0
 8007620:	da03      	bge.n	800762a <_printf_i+0x5e>
 8007622:	222d      	movs	r2, #45	; 0x2d
 8007624:	425b      	negs	r3, r3
 8007626:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800762a:	486f      	ldr	r0, [pc, #444]	; (80077e8 <_printf_i+0x21c>)
 800762c:	220a      	movs	r2, #10
 800762e:	e039      	b.n	80076a4 <_printf_i+0xd8>
 8007630:	2973      	cmp	r1, #115	; 0x73
 8007632:	f000 809d 	beq.w	8007770 <_printf_i+0x1a4>
 8007636:	d808      	bhi.n	800764a <_printf_i+0x7e>
 8007638:	296f      	cmp	r1, #111	; 0x6f
 800763a:	d020      	beq.n	800767e <_printf_i+0xb2>
 800763c:	2970      	cmp	r1, #112	; 0x70
 800763e:	d1dd      	bne.n	80075fc <_printf_i+0x30>
 8007640:	6823      	ldr	r3, [r4, #0]
 8007642:	f043 0320 	orr.w	r3, r3, #32
 8007646:	6023      	str	r3, [r4, #0]
 8007648:	e003      	b.n	8007652 <_printf_i+0x86>
 800764a:	2975      	cmp	r1, #117	; 0x75
 800764c:	d017      	beq.n	800767e <_printf_i+0xb2>
 800764e:	2978      	cmp	r1, #120	; 0x78
 8007650:	d1d4      	bne.n	80075fc <_printf_i+0x30>
 8007652:	2378      	movs	r3, #120	; 0x78
 8007654:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007658:	4864      	ldr	r0, [pc, #400]	; (80077ec <_printf_i+0x220>)
 800765a:	e055      	b.n	8007708 <_printf_i+0x13c>
 800765c:	6813      	ldr	r3, [r2, #0]
 800765e:	1d19      	adds	r1, r3, #4
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	6011      	str	r1, [r2, #0]
 8007664:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007668:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800766c:	2301      	movs	r3, #1
 800766e:	e08c      	b.n	800778a <_printf_i+0x1be>
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	6011      	str	r1, [r2, #0]
 8007674:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007678:	bf18      	it	ne
 800767a:	b21b      	sxthne	r3, r3
 800767c:	e7cf      	b.n	800761e <_printf_i+0x52>
 800767e:	6813      	ldr	r3, [r2, #0]
 8007680:	6825      	ldr	r5, [r4, #0]
 8007682:	1d18      	adds	r0, r3, #4
 8007684:	6010      	str	r0, [r2, #0]
 8007686:	0628      	lsls	r0, r5, #24
 8007688:	d501      	bpl.n	800768e <_printf_i+0xc2>
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	e002      	b.n	8007694 <_printf_i+0xc8>
 800768e:	0668      	lsls	r0, r5, #25
 8007690:	d5fb      	bpl.n	800768a <_printf_i+0xbe>
 8007692:	881b      	ldrh	r3, [r3, #0]
 8007694:	4854      	ldr	r0, [pc, #336]	; (80077e8 <_printf_i+0x21c>)
 8007696:	296f      	cmp	r1, #111	; 0x6f
 8007698:	bf14      	ite	ne
 800769a:	220a      	movne	r2, #10
 800769c:	2208      	moveq	r2, #8
 800769e:	2100      	movs	r1, #0
 80076a0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80076a4:	6865      	ldr	r5, [r4, #4]
 80076a6:	60a5      	str	r5, [r4, #8]
 80076a8:	2d00      	cmp	r5, #0
 80076aa:	f2c0 8095 	blt.w	80077d8 <_printf_i+0x20c>
 80076ae:	6821      	ldr	r1, [r4, #0]
 80076b0:	f021 0104 	bic.w	r1, r1, #4
 80076b4:	6021      	str	r1, [r4, #0]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d13d      	bne.n	8007736 <_printf_i+0x16a>
 80076ba:	2d00      	cmp	r5, #0
 80076bc:	f040 808e 	bne.w	80077dc <_printf_i+0x210>
 80076c0:	4665      	mov	r5, ip
 80076c2:	2a08      	cmp	r2, #8
 80076c4:	d10b      	bne.n	80076de <_printf_i+0x112>
 80076c6:	6823      	ldr	r3, [r4, #0]
 80076c8:	07db      	lsls	r3, r3, #31
 80076ca:	d508      	bpl.n	80076de <_printf_i+0x112>
 80076cc:	6923      	ldr	r3, [r4, #16]
 80076ce:	6862      	ldr	r2, [r4, #4]
 80076d0:	429a      	cmp	r2, r3
 80076d2:	bfde      	ittt	le
 80076d4:	2330      	movle	r3, #48	; 0x30
 80076d6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80076da:	f105 35ff 	addle.w	r5, r5, #4294967295
 80076de:	ebac 0305 	sub.w	r3, ip, r5
 80076e2:	6123      	str	r3, [r4, #16]
 80076e4:	f8cd 8000 	str.w	r8, [sp]
 80076e8:	463b      	mov	r3, r7
 80076ea:	aa03      	add	r2, sp, #12
 80076ec:	4621      	mov	r1, r4
 80076ee:	4630      	mov	r0, r6
 80076f0:	f7ff fef6 	bl	80074e0 <_printf_common>
 80076f4:	3001      	adds	r0, #1
 80076f6:	d14d      	bne.n	8007794 <_printf_i+0x1c8>
 80076f8:	f04f 30ff 	mov.w	r0, #4294967295
 80076fc:	b005      	add	sp, #20
 80076fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007702:	4839      	ldr	r0, [pc, #228]	; (80077e8 <_printf_i+0x21c>)
 8007704:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007708:	6813      	ldr	r3, [r2, #0]
 800770a:	6821      	ldr	r1, [r4, #0]
 800770c:	1d1d      	adds	r5, r3, #4
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	6015      	str	r5, [r2, #0]
 8007712:	060a      	lsls	r2, r1, #24
 8007714:	d50b      	bpl.n	800772e <_printf_i+0x162>
 8007716:	07ca      	lsls	r2, r1, #31
 8007718:	bf44      	itt	mi
 800771a:	f041 0120 	orrmi.w	r1, r1, #32
 800771e:	6021      	strmi	r1, [r4, #0]
 8007720:	b91b      	cbnz	r3, 800772a <_printf_i+0x15e>
 8007722:	6822      	ldr	r2, [r4, #0]
 8007724:	f022 0220 	bic.w	r2, r2, #32
 8007728:	6022      	str	r2, [r4, #0]
 800772a:	2210      	movs	r2, #16
 800772c:	e7b7      	b.n	800769e <_printf_i+0xd2>
 800772e:	064d      	lsls	r5, r1, #25
 8007730:	bf48      	it	mi
 8007732:	b29b      	uxthmi	r3, r3
 8007734:	e7ef      	b.n	8007716 <_printf_i+0x14a>
 8007736:	4665      	mov	r5, ip
 8007738:	fbb3 f1f2 	udiv	r1, r3, r2
 800773c:	fb02 3311 	mls	r3, r2, r1, r3
 8007740:	5cc3      	ldrb	r3, [r0, r3]
 8007742:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007746:	460b      	mov	r3, r1
 8007748:	2900      	cmp	r1, #0
 800774a:	d1f5      	bne.n	8007738 <_printf_i+0x16c>
 800774c:	e7b9      	b.n	80076c2 <_printf_i+0xf6>
 800774e:	6813      	ldr	r3, [r2, #0]
 8007750:	6825      	ldr	r5, [r4, #0]
 8007752:	6961      	ldr	r1, [r4, #20]
 8007754:	1d18      	adds	r0, r3, #4
 8007756:	6010      	str	r0, [r2, #0]
 8007758:	0628      	lsls	r0, r5, #24
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	d501      	bpl.n	8007762 <_printf_i+0x196>
 800775e:	6019      	str	r1, [r3, #0]
 8007760:	e002      	b.n	8007768 <_printf_i+0x19c>
 8007762:	066a      	lsls	r2, r5, #25
 8007764:	d5fb      	bpl.n	800775e <_printf_i+0x192>
 8007766:	8019      	strh	r1, [r3, #0]
 8007768:	2300      	movs	r3, #0
 800776a:	6123      	str	r3, [r4, #16]
 800776c:	4665      	mov	r5, ip
 800776e:	e7b9      	b.n	80076e4 <_printf_i+0x118>
 8007770:	6813      	ldr	r3, [r2, #0]
 8007772:	1d19      	adds	r1, r3, #4
 8007774:	6011      	str	r1, [r2, #0]
 8007776:	681d      	ldr	r5, [r3, #0]
 8007778:	6862      	ldr	r2, [r4, #4]
 800777a:	2100      	movs	r1, #0
 800777c:	4628      	mov	r0, r5
 800777e:	f7fc fa0f 	bl	8003ba0 <memchr>
 8007782:	b108      	cbz	r0, 8007788 <_printf_i+0x1bc>
 8007784:	1b40      	subs	r0, r0, r5
 8007786:	6060      	str	r0, [r4, #4]
 8007788:	6863      	ldr	r3, [r4, #4]
 800778a:	6123      	str	r3, [r4, #16]
 800778c:	2300      	movs	r3, #0
 800778e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007792:	e7a7      	b.n	80076e4 <_printf_i+0x118>
 8007794:	6923      	ldr	r3, [r4, #16]
 8007796:	462a      	mov	r2, r5
 8007798:	4639      	mov	r1, r7
 800779a:	4630      	mov	r0, r6
 800779c:	47c0      	blx	r8
 800779e:	3001      	adds	r0, #1
 80077a0:	d0aa      	beq.n	80076f8 <_printf_i+0x12c>
 80077a2:	6823      	ldr	r3, [r4, #0]
 80077a4:	079b      	lsls	r3, r3, #30
 80077a6:	d413      	bmi.n	80077d0 <_printf_i+0x204>
 80077a8:	68e0      	ldr	r0, [r4, #12]
 80077aa:	9b03      	ldr	r3, [sp, #12]
 80077ac:	4298      	cmp	r0, r3
 80077ae:	bfb8      	it	lt
 80077b0:	4618      	movlt	r0, r3
 80077b2:	e7a3      	b.n	80076fc <_printf_i+0x130>
 80077b4:	2301      	movs	r3, #1
 80077b6:	464a      	mov	r2, r9
 80077b8:	4639      	mov	r1, r7
 80077ba:	4630      	mov	r0, r6
 80077bc:	47c0      	blx	r8
 80077be:	3001      	adds	r0, #1
 80077c0:	d09a      	beq.n	80076f8 <_printf_i+0x12c>
 80077c2:	3501      	adds	r5, #1
 80077c4:	68e3      	ldr	r3, [r4, #12]
 80077c6:	9a03      	ldr	r2, [sp, #12]
 80077c8:	1a9b      	subs	r3, r3, r2
 80077ca:	42ab      	cmp	r3, r5
 80077cc:	dcf2      	bgt.n	80077b4 <_printf_i+0x1e8>
 80077ce:	e7eb      	b.n	80077a8 <_printf_i+0x1dc>
 80077d0:	2500      	movs	r5, #0
 80077d2:	f104 0919 	add.w	r9, r4, #25
 80077d6:	e7f5      	b.n	80077c4 <_printf_i+0x1f8>
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d1ac      	bne.n	8007736 <_printf_i+0x16a>
 80077dc:	7803      	ldrb	r3, [r0, #0]
 80077de:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80077e2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077e6:	e76c      	b.n	80076c2 <_printf_i+0xf6>
 80077e8:	0800a4b6 	.word	0x0800a4b6
 80077ec:	0800a4c7 	.word	0x0800a4c7

080077f0 <siprintf>:
 80077f0:	b40e      	push	{r1, r2, r3}
 80077f2:	b500      	push	{lr}
 80077f4:	b09c      	sub	sp, #112	; 0x70
 80077f6:	ab1d      	add	r3, sp, #116	; 0x74
 80077f8:	9002      	str	r0, [sp, #8]
 80077fa:	9006      	str	r0, [sp, #24]
 80077fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007800:	4809      	ldr	r0, [pc, #36]	; (8007828 <siprintf+0x38>)
 8007802:	9107      	str	r1, [sp, #28]
 8007804:	9104      	str	r1, [sp, #16]
 8007806:	4909      	ldr	r1, [pc, #36]	; (800782c <siprintf+0x3c>)
 8007808:	f853 2b04 	ldr.w	r2, [r3], #4
 800780c:	9105      	str	r1, [sp, #20]
 800780e:	6800      	ldr	r0, [r0, #0]
 8007810:	9301      	str	r3, [sp, #4]
 8007812:	a902      	add	r1, sp, #8
 8007814:	f001 fa52 	bl	8008cbc <_svfiprintf_r>
 8007818:	9b02      	ldr	r3, [sp, #8]
 800781a:	2200      	movs	r2, #0
 800781c:	701a      	strb	r2, [r3, #0]
 800781e:	b01c      	add	sp, #112	; 0x70
 8007820:	f85d eb04 	ldr.w	lr, [sp], #4
 8007824:	b003      	add	sp, #12
 8007826:	4770      	bx	lr
 8007828:	2000055c 	.word	0x2000055c
 800782c:	ffff0208 	.word	0xffff0208

08007830 <quorem>:
 8007830:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007834:	6903      	ldr	r3, [r0, #16]
 8007836:	690c      	ldr	r4, [r1, #16]
 8007838:	42a3      	cmp	r3, r4
 800783a:	4680      	mov	r8, r0
 800783c:	f2c0 8082 	blt.w	8007944 <quorem+0x114>
 8007840:	3c01      	subs	r4, #1
 8007842:	f101 0714 	add.w	r7, r1, #20
 8007846:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800784a:	f100 0614 	add.w	r6, r0, #20
 800784e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007852:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007856:	eb06 030c 	add.w	r3, r6, ip
 800785a:	3501      	adds	r5, #1
 800785c:	eb07 090c 	add.w	r9, r7, ip
 8007860:	9301      	str	r3, [sp, #4]
 8007862:	fbb0 f5f5 	udiv	r5, r0, r5
 8007866:	b395      	cbz	r5, 80078ce <quorem+0x9e>
 8007868:	f04f 0a00 	mov.w	sl, #0
 800786c:	4638      	mov	r0, r7
 800786e:	46b6      	mov	lr, r6
 8007870:	46d3      	mov	fp, sl
 8007872:	f850 2b04 	ldr.w	r2, [r0], #4
 8007876:	b293      	uxth	r3, r2
 8007878:	fb05 a303 	mla	r3, r5, r3, sl
 800787c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007880:	b29b      	uxth	r3, r3
 8007882:	ebab 0303 	sub.w	r3, fp, r3
 8007886:	0c12      	lsrs	r2, r2, #16
 8007888:	f8de b000 	ldr.w	fp, [lr]
 800788c:	fb05 a202 	mla	r2, r5, r2, sl
 8007890:	fa13 f38b 	uxtah	r3, r3, fp
 8007894:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007898:	fa1f fb82 	uxth.w	fp, r2
 800789c:	f8de 2000 	ldr.w	r2, [lr]
 80078a0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80078a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80078ae:	4581      	cmp	r9, r0
 80078b0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80078b4:	f84e 3b04 	str.w	r3, [lr], #4
 80078b8:	d2db      	bcs.n	8007872 <quorem+0x42>
 80078ba:	f856 300c 	ldr.w	r3, [r6, ip]
 80078be:	b933      	cbnz	r3, 80078ce <quorem+0x9e>
 80078c0:	9b01      	ldr	r3, [sp, #4]
 80078c2:	3b04      	subs	r3, #4
 80078c4:	429e      	cmp	r6, r3
 80078c6:	461a      	mov	r2, r3
 80078c8:	d330      	bcc.n	800792c <quorem+0xfc>
 80078ca:	f8c8 4010 	str.w	r4, [r8, #16]
 80078ce:	4640      	mov	r0, r8
 80078d0:	f001 f81e 	bl	8008910 <__mcmp>
 80078d4:	2800      	cmp	r0, #0
 80078d6:	db25      	blt.n	8007924 <quorem+0xf4>
 80078d8:	3501      	adds	r5, #1
 80078da:	4630      	mov	r0, r6
 80078dc:	f04f 0c00 	mov.w	ip, #0
 80078e0:	f857 2b04 	ldr.w	r2, [r7], #4
 80078e4:	f8d0 e000 	ldr.w	lr, [r0]
 80078e8:	b293      	uxth	r3, r2
 80078ea:	ebac 0303 	sub.w	r3, ip, r3
 80078ee:	0c12      	lsrs	r2, r2, #16
 80078f0:	fa13 f38e 	uxtah	r3, r3, lr
 80078f4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80078f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007902:	45b9      	cmp	r9, r7
 8007904:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007908:	f840 3b04 	str.w	r3, [r0], #4
 800790c:	d2e8      	bcs.n	80078e0 <quorem+0xb0>
 800790e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007912:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007916:	b92a      	cbnz	r2, 8007924 <quorem+0xf4>
 8007918:	3b04      	subs	r3, #4
 800791a:	429e      	cmp	r6, r3
 800791c:	461a      	mov	r2, r3
 800791e:	d30b      	bcc.n	8007938 <quorem+0x108>
 8007920:	f8c8 4010 	str.w	r4, [r8, #16]
 8007924:	4628      	mov	r0, r5
 8007926:	b003      	add	sp, #12
 8007928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800792c:	6812      	ldr	r2, [r2, #0]
 800792e:	3b04      	subs	r3, #4
 8007930:	2a00      	cmp	r2, #0
 8007932:	d1ca      	bne.n	80078ca <quorem+0x9a>
 8007934:	3c01      	subs	r4, #1
 8007936:	e7c5      	b.n	80078c4 <quorem+0x94>
 8007938:	6812      	ldr	r2, [r2, #0]
 800793a:	3b04      	subs	r3, #4
 800793c:	2a00      	cmp	r2, #0
 800793e:	d1ef      	bne.n	8007920 <quorem+0xf0>
 8007940:	3c01      	subs	r4, #1
 8007942:	e7ea      	b.n	800791a <quorem+0xea>
 8007944:	2000      	movs	r0, #0
 8007946:	e7ee      	b.n	8007926 <quorem+0xf6>

08007948 <_dtoa_r>:
 8007948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800794c:	ec57 6b10 	vmov	r6, r7, d0
 8007950:	b097      	sub	sp, #92	; 0x5c
 8007952:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007954:	9106      	str	r1, [sp, #24]
 8007956:	4604      	mov	r4, r0
 8007958:	920b      	str	r2, [sp, #44]	; 0x2c
 800795a:	9312      	str	r3, [sp, #72]	; 0x48
 800795c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007960:	e9cd 6700 	strd	r6, r7, [sp]
 8007964:	b93d      	cbnz	r5, 8007976 <_dtoa_r+0x2e>
 8007966:	2010      	movs	r0, #16
 8007968:	f000 fdb4 	bl	80084d4 <malloc>
 800796c:	6260      	str	r0, [r4, #36]	; 0x24
 800796e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007972:	6005      	str	r5, [r0, #0]
 8007974:	60c5      	str	r5, [r0, #12]
 8007976:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007978:	6819      	ldr	r1, [r3, #0]
 800797a:	b151      	cbz	r1, 8007992 <_dtoa_r+0x4a>
 800797c:	685a      	ldr	r2, [r3, #4]
 800797e:	604a      	str	r2, [r1, #4]
 8007980:	2301      	movs	r3, #1
 8007982:	4093      	lsls	r3, r2
 8007984:	608b      	str	r3, [r1, #8]
 8007986:	4620      	mov	r0, r4
 8007988:	f000 fde0 	bl	800854c <_Bfree>
 800798c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800798e:	2200      	movs	r2, #0
 8007990:	601a      	str	r2, [r3, #0]
 8007992:	1e3b      	subs	r3, r7, #0
 8007994:	bfbb      	ittet	lt
 8007996:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800799a:	9301      	strlt	r3, [sp, #4]
 800799c:	2300      	movge	r3, #0
 800799e:	2201      	movlt	r2, #1
 80079a0:	bfac      	ite	ge
 80079a2:	f8c8 3000 	strge.w	r3, [r8]
 80079a6:	f8c8 2000 	strlt.w	r2, [r8]
 80079aa:	4baf      	ldr	r3, [pc, #700]	; (8007c68 <_dtoa_r+0x320>)
 80079ac:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80079b0:	ea33 0308 	bics.w	r3, r3, r8
 80079b4:	d114      	bne.n	80079e0 <_dtoa_r+0x98>
 80079b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80079b8:	f242 730f 	movw	r3, #9999	; 0x270f
 80079bc:	6013      	str	r3, [r2, #0]
 80079be:	9b00      	ldr	r3, [sp, #0]
 80079c0:	b923      	cbnz	r3, 80079cc <_dtoa_r+0x84>
 80079c2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80079c6:	2800      	cmp	r0, #0
 80079c8:	f000 8542 	beq.w	8008450 <_dtoa_r+0xb08>
 80079cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80079ce:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8007c7c <_dtoa_r+0x334>
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	f000 8544 	beq.w	8008460 <_dtoa_r+0xb18>
 80079d8:	f10b 0303 	add.w	r3, fp, #3
 80079dc:	f000 bd3e 	b.w	800845c <_dtoa_r+0xb14>
 80079e0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80079e4:	2200      	movs	r2, #0
 80079e6:	2300      	movs	r3, #0
 80079e8:	4630      	mov	r0, r6
 80079ea:	4639      	mov	r1, r7
 80079ec:	f7fc fd4c 	bl	8004488 <__aeabi_dcmpeq>
 80079f0:	4681      	mov	r9, r0
 80079f2:	b168      	cbz	r0, 8007a10 <_dtoa_r+0xc8>
 80079f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80079f6:	2301      	movs	r3, #1
 80079f8:	6013      	str	r3, [r2, #0]
 80079fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	f000 8524 	beq.w	800844a <_dtoa_r+0xb02>
 8007a02:	4b9a      	ldr	r3, [pc, #616]	; (8007c6c <_dtoa_r+0x324>)
 8007a04:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007a06:	f103 3bff 	add.w	fp, r3, #4294967295
 8007a0a:	6013      	str	r3, [r2, #0]
 8007a0c:	f000 bd28 	b.w	8008460 <_dtoa_r+0xb18>
 8007a10:	aa14      	add	r2, sp, #80	; 0x50
 8007a12:	a915      	add	r1, sp, #84	; 0x54
 8007a14:	ec47 6b10 	vmov	d0, r6, r7
 8007a18:	4620      	mov	r0, r4
 8007a1a:	f000 fff0 	bl	80089fe <__d2b>
 8007a1e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007a22:	9004      	str	r0, [sp, #16]
 8007a24:	2d00      	cmp	r5, #0
 8007a26:	d07c      	beq.n	8007b22 <_dtoa_r+0x1da>
 8007a28:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007a2c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8007a30:	46b2      	mov	sl, r6
 8007a32:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8007a36:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007a3a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8007a3e:	2200      	movs	r2, #0
 8007a40:	4b8b      	ldr	r3, [pc, #556]	; (8007c70 <_dtoa_r+0x328>)
 8007a42:	4650      	mov	r0, sl
 8007a44:	4659      	mov	r1, fp
 8007a46:	f7fc f8ff 	bl	8003c48 <__aeabi_dsub>
 8007a4a:	a381      	add	r3, pc, #516	; (adr r3, 8007c50 <_dtoa_r+0x308>)
 8007a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a50:	f7fc fab2 	bl	8003fb8 <__aeabi_dmul>
 8007a54:	a380      	add	r3, pc, #512	; (adr r3, 8007c58 <_dtoa_r+0x310>)
 8007a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a5a:	f7fc f8f7 	bl	8003c4c <__adddf3>
 8007a5e:	4606      	mov	r6, r0
 8007a60:	4628      	mov	r0, r5
 8007a62:	460f      	mov	r7, r1
 8007a64:	f7fc fa3e 	bl	8003ee4 <__aeabi_i2d>
 8007a68:	a37d      	add	r3, pc, #500	; (adr r3, 8007c60 <_dtoa_r+0x318>)
 8007a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a6e:	f7fc faa3 	bl	8003fb8 <__aeabi_dmul>
 8007a72:	4602      	mov	r2, r0
 8007a74:	460b      	mov	r3, r1
 8007a76:	4630      	mov	r0, r6
 8007a78:	4639      	mov	r1, r7
 8007a7a:	f7fc f8e7 	bl	8003c4c <__adddf3>
 8007a7e:	4606      	mov	r6, r0
 8007a80:	460f      	mov	r7, r1
 8007a82:	f7fc fd49 	bl	8004518 <__aeabi_d2iz>
 8007a86:	2200      	movs	r2, #0
 8007a88:	4682      	mov	sl, r0
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	4630      	mov	r0, r6
 8007a8e:	4639      	mov	r1, r7
 8007a90:	f7fc fd04 	bl	800449c <__aeabi_dcmplt>
 8007a94:	b148      	cbz	r0, 8007aaa <_dtoa_r+0x162>
 8007a96:	4650      	mov	r0, sl
 8007a98:	f7fc fa24 	bl	8003ee4 <__aeabi_i2d>
 8007a9c:	4632      	mov	r2, r6
 8007a9e:	463b      	mov	r3, r7
 8007aa0:	f7fc fcf2 	bl	8004488 <__aeabi_dcmpeq>
 8007aa4:	b908      	cbnz	r0, 8007aaa <_dtoa_r+0x162>
 8007aa6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007aaa:	f1ba 0f16 	cmp.w	sl, #22
 8007aae:	d859      	bhi.n	8007b64 <_dtoa_r+0x21c>
 8007ab0:	4970      	ldr	r1, [pc, #448]	; (8007c74 <_dtoa_r+0x32c>)
 8007ab2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007ab6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007aba:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007abe:	f7fc fd0b 	bl	80044d8 <__aeabi_dcmpgt>
 8007ac2:	2800      	cmp	r0, #0
 8007ac4:	d050      	beq.n	8007b68 <_dtoa_r+0x220>
 8007ac6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007aca:	2300      	movs	r3, #0
 8007acc:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ace:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007ad0:	1b5d      	subs	r5, r3, r5
 8007ad2:	f1b5 0801 	subs.w	r8, r5, #1
 8007ad6:	bf49      	itett	mi
 8007ad8:	f1c5 0301 	rsbmi	r3, r5, #1
 8007adc:	2300      	movpl	r3, #0
 8007ade:	9305      	strmi	r3, [sp, #20]
 8007ae0:	f04f 0800 	movmi.w	r8, #0
 8007ae4:	bf58      	it	pl
 8007ae6:	9305      	strpl	r3, [sp, #20]
 8007ae8:	f1ba 0f00 	cmp.w	sl, #0
 8007aec:	db3e      	blt.n	8007b6c <_dtoa_r+0x224>
 8007aee:	2300      	movs	r3, #0
 8007af0:	44d0      	add	r8, sl
 8007af2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007af6:	9307      	str	r3, [sp, #28]
 8007af8:	9b06      	ldr	r3, [sp, #24]
 8007afa:	2b09      	cmp	r3, #9
 8007afc:	f200 8090 	bhi.w	8007c20 <_dtoa_r+0x2d8>
 8007b00:	2b05      	cmp	r3, #5
 8007b02:	bfc4      	itt	gt
 8007b04:	3b04      	subgt	r3, #4
 8007b06:	9306      	strgt	r3, [sp, #24]
 8007b08:	9b06      	ldr	r3, [sp, #24]
 8007b0a:	f1a3 0302 	sub.w	r3, r3, #2
 8007b0e:	bfcc      	ite	gt
 8007b10:	2500      	movgt	r5, #0
 8007b12:	2501      	movle	r5, #1
 8007b14:	2b03      	cmp	r3, #3
 8007b16:	f200 808f 	bhi.w	8007c38 <_dtoa_r+0x2f0>
 8007b1a:	e8df f003 	tbb	[pc, r3]
 8007b1e:	7f7d      	.short	0x7f7d
 8007b20:	7131      	.short	0x7131
 8007b22:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8007b26:	441d      	add	r5, r3
 8007b28:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8007b2c:	2820      	cmp	r0, #32
 8007b2e:	dd13      	ble.n	8007b58 <_dtoa_r+0x210>
 8007b30:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8007b34:	9b00      	ldr	r3, [sp, #0]
 8007b36:	fa08 f800 	lsl.w	r8, r8, r0
 8007b3a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8007b3e:	fa23 f000 	lsr.w	r0, r3, r0
 8007b42:	ea48 0000 	orr.w	r0, r8, r0
 8007b46:	f7fc f9bd 	bl	8003ec4 <__aeabi_ui2d>
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	4682      	mov	sl, r0
 8007b4e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8007b52:	3d01      	subs	r5, #1
 8007b54:	9313      	str	r3, [sp, #76]	; 0x4c
 8007b56:	e772      	b.n	8007a3e <_dtoa_r+0xf6>
 8007b58:	9b00      	ldr	r3, [sp, #0]
 8007b5a:	f1c0 0020 	rsb	r0, r0, #32
 8007b5e:	fa03 f000 	lsl.w	r0, r3, r0
 8007b62:	e7f0      	b.n	8007b46 <_dtoa_r+0x1fe>
 8007b64:	2301      	movs	r3, #1
 8007b66:	e7b1      	b.n	8007acc <_dtoa_r+0x184>
 8007b68:	900f      	str	r0, [sp, #60]	; 0x3c
 8007b6a:	e7b0      	b.n	8007ace <_dtoa_r+0x186>
 8007b6c:	9b05      	ldr	r3, [sp, #20]
 8007b6e:	eba3 030a 	sub.w	r3, r3, sl
 8007b72:	9305      	str	r3, [sp, #20]
 8007b74:	f1ca 0300 	rsb	r3, sl, #0
 8007b78:	9307      	str	r3, [sp, #28]
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	930e      	str	r3, [sp, #56]	; 0x38
 8007b7e:	e7bb      	b.n	8007af8 <_dtoa_r+0x1b0>
 8007b80:	2301      	movs	r3, #1
 8007b82:	930a      	str	r3, [sp, #40]	; 0x28
 8007b84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	dd59      	ble.n	8007c3e <_dtoa_r+0x2f6>
 8007b8a:	9302      	str	r3, [sp, #8]
 8007b8c:	4699      	mov	r9, r3
 8007b8e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007b90:	2200      	movs	r2, #0
 8007b92:	6072      	str	r2, [r6, #4]
 8007b94:	2204      	movs	r2, #4
 8007b96:	f102 0014 	add.w	r0, r2, #20
 8007b9a:	4298      	cmp	r0, r3
 8007b9c:	6871      	ldr	r1, [r6, #4]
 8007b9e:	d953      	bls.n	8007c48 <_dtoa_r+0x300>
 8007ba0:	4620      	mov	r0, r4
 8007ba2:	f000 fc9f 	bl	80084e4 <_Balloc>
 8007ba6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ba8:	6030      	str	r0, [r6, #0]
 8007baa:	f1b9 0f0e 	cmp.w	r9, #14
 8007bae:	f8d3 b000 	ldr.w	fp, [r3]
 8007bb2:	f200 80e6 	bhi.w	8007d82 <_dtoa_r+0x43a>
 8007bb6:	2d00      	cmp	r5, #0
 8007bb8:	f000 80e3 	beq.w	8007d82 <_dtoa_r+0x43a>
 8007bbc:	ed9d 7b00 	vldr	d7, [sp]
 8007bc0:	f1ba 0f00 	cmp.w	sl, #0
 8007bc4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8007bc8:	dd74      	ble.n	8007cb4 <_dtoa_r+0x36c>
 8007bca:	4a2a      	ldr	r2, [pc, #168]	; (8007c74 <_dtoa_r+0x32c>)
 8007bcc:	f00a 030f 	and.w	r3, sl, #15
 8007bd0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007bd4:	ed93 7b00 	vldr	d7, [r3]
 8007bd8:	ea4f 162a 	mov.w	r6, sl, asr #4
 8007bdc:	06f0      	lsls	r0, r6, #27
 8007bde:	ed8d 7b08 	vstr	d7, [sp, #32]
 8007be2:	d565      	bpl.n	8007cb0 <_dtoa_r+0x368>
 8007be4:	4b24      	ldr	r3, [pc, #144]	; (8007c78 <_dtoa_r+0x330>)
 8007be6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007bea:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007bee:	f7fc fb0d 	bl	800420c <__aeabi_ddiv>
 8007bf2:	e9cd 0100 	strd	r0, r1, [sp]
 8007bf6:	f006 060f 	and.w	r6, r6, #15
 8007bfa:	2503      	movs	r5, #3
 8007bfc:	4f1e      	ldr	r7, [pc, #120]	; (8007c78 <_dtoa_r+0x330>)
 8007bfe:	e04c      	b.n	8007c9a <_dtoa_r+0x352>
 8007c00:	2301      	movs	r3, #1
 8007c02:	930a      	str	r3, [sp, #40]	; 0x28
 8007c04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c06:	4453      	add	r3, sl
 8007c08:	f103 0901 	add.w	r9, r3, #1
 8007c0c:	9302      	str	r3, [sp, #8]
 8007c0e:	464b      	mov	r3, r9
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	bfb8      	it	lt
 8007c14:	2301      	movlt	r3, #1
 8007c16:	e7ba      	b.n	8007b8e <_dtoa_r+0x246>
 8007c18:	2300      	movs	r3, #0
 8007c1a:	e7b2      	b.n	8007b82 <_dtoa_r+0x23a>
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	e7f0      	b.n	8007c02 <_dtoa_r+0x2ba>
 8007c20:	2501      	movs	r5, #1
 8007c22:	2300      	movs	r3, #0
 8007c24:	9306      	str	r3, [sp, #24]
 8007c26:	950a      	str	r5, [sp, #40]	; 0x28
 8007c28:	f04f 33ff 	mov.w	r3, #4294967295
 8007c2c:	9302      	str	r3, [sp, #8]
 8007c2e:	4699      	mov	r9, r3
 8007c30:	2200      	movs	r2, #0
 8007c32:	2312      	movs	r3, #18
 8007c34:	920b      	str	r2, [sp, #44]	; 0x2c
 8007c36:	e7aa      	b.n	8007b8e <_dtoa_r+0x246>
 8007c38:	2301      	movs	r3, #1
 8007c3a:	930a      	str	r3, [sp, #40]	; 0x28
 8007c3c:	e7f4      	b.n	8007c28 <_dtoa_r+0x2e0>
 8007c3e:	2301      	movs	r3, #1
 8007c40:	9302      	str	r3, [sp, #8]
 8007c42:	4699      	mov	r9, r3
 8007c44:	461a      	mov	r2, r3
 8007c46:	e7f5      	b.n	8007c34 <_dtoa_r+0x2ec>
 8007c48:	3101      	adds	r1, #1
 8007c4a:	6071      	str	r1, [r6, #4]
 8007c4c:	0052      	lsls	r2, r2, #1
 8007c4e:	e7a2      	b.n	8007b96 <_dtoa_r+0x24e>
 8007c50:	636f4361 	.word	0x636f4361
 8007c54:	3fd287a7 	.word	0x3fd287a7
 8007c58:	8b60c8b3 	.word	0x8b60c8b3
 8007c5c:	3fc68a28 	.word	0x3fc68a28
 8007c60:	509f79fb 	.word	0x509f79fb
 8007c64:	3fd34413 	.word	0x3fd34413
 8007c68:	7ff00000 	.word	0x7ff00000
 8007c6c:	0800a4b5 	.word	0x0800a4b5
 8007c70:	3ff80000 	.word	0x3ff80000
 8007c74:	0800a510 	.word	0x0800a510
 8007c78:	0800a4e8 	.word	0x0800a4e8
 8007c7c:	0800a4e1 	.word	0x0800a4e1
 8007c80:	07f1      	lsls	r1, r6, #31
 8007c82:	d508      	bpl.n	8007c96 <_dtoa_r+0x34e>
 8007c84:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007c88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c8c:	f7fc f994 	bl	8003fb8 <__aeabi_dmul>
 8007c90:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007c94:	3501      	adds	r5, #1
 8007c96:	1076      	asrs	r6, r6, #1
 8007c98:	3708      	adds	r7, #8
 8007c9a:	2e00      	cmp	r6, #0
 8007c9c:	d1f0      	bne.n	8007c80 <_dtoa_r+0x338>
 8007c9e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007ca2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ca6:	f7fc fab1 	bl	800420c <__aeabi_ddiv>
 8007caa:	e9cd 0100 	strd	r0, r1, [sp]
 8007cae:	e01a      	b.n	8007ce6 <_dtoa_r+0x39e>
 8007cb0:	2502      	movs	r5, #2
 8007cb2:	e7a3      	b.n	8007bfc <_dtoa_r+0x2b4>
 8007cb4:	f000 80a0 	beq.w	8007df8 <_dtoa_r+0x4b0>
 8007cb8:	f1ca 0600 	rsb	r6, sl, #0
 8007cbc:	4b9f      	ldr	r3, [pc, #636]	; (8007f3c <_dtoa_r+0x5f4>)
 8007cbe:	4fa0      	ldr	r7, [pc, #640]	; (8007f40 <_dtoa_r+0x5f8>)
 8007cc0:	f006 020f 	and.w	r2, r6, #15
 8007cc4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ccc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007cd0:	f7fc f972 	bl	8003fb8 <__aeabi_dmul>
 8007cd4:	e9cd 0100 	strd	r0, r1, [sp]
 8007cd8:	1136      	asrs	r6, r6, #4
 8007cda:	2300      	movs	r3, #0
 8007cdc:	2502      	movs	r5, #2
 8007cde:	2e00      	cmp	r6, #0
 8007ce0:	d17f      	bne.n	8007de2 <_dtoa_r+0x49a>
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d1e1      	bne.n	8007caa <_dtoa_r+0x362>
 8007ce6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	f000 8087 	beq.w	8007dfc <_dtoa_r+0x4b4>
 8007cee:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	4b93      	ldr	r3, [pc, #588]	; (8007f44 <_dtoa_r+0x5fc>)
 8007cf6:	4630      	mov	r0, r6
 8007cf8:	4639      	mov	r1, r7
 8007cfa:	f7fc fbcf 	bl	800449c <__aeabi_dcmplt>
 8007cfe:	2800      	cmp	r0, #0
 8007d00:	d07c      	beq.n	8007dfc <_dtoa_r+0x4b4>
 8007d02:	f1b9 0f00 	cmp.w	r9, #0
 8007d06:	d079      	beq.n	8007dfc <_dtoa_r+0x4b4>
 8007d08:	9b02      	ldr	r3, [sp, #8]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	dd35      	ble.n	8007d7a <_dtoa_r+0x432>
 8007d0e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007d12:	9308      	str	r3, [sp, #32]
 8007d14:	4639      	mov	r1, r7
 8007d16:	2200      	movs	r2, #0
 8007d18:	4b8b      	ldr	r3, [pc, #556]	; (8007f48 <_dtoa_r+0x600>)
 8007d1a:	4630      	mov	r0, r6
 8007d1c:	f7fc f94c 	bl	8003fb8 <__aeabi_dmul>
 8007d20:	e9cd 0100 	strd	r0, r1, [sp]
 8007d24:	9f02      	ldr	r7, [sp, #8]
 8007d26:	3501      	adds	r5, #1
 8007d28:	4628      	mov	r0, r5
 8007d2a:	f7fc f8db 	bl	8003ee4 <__aeabi_i2d>
 8007d2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d32:	f7fc f941 	bl	8003fb8 <__aeabi_dmul>
 8007d36:	2200      	movs	r2, #0
 8007d38:	4b84      	ldr	r3, [pc, #528]	; (8007f4c <_dtoa_r+0x604>)
 8007d3a:	f7fb ff87 	bl	8003c4c <__adddf3>
 8007d3e:	4605      	mov	r5, r0
 8007d40:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007d44:	2f00      	cmp	r7, #0
 8007d46:	d15d      	bne.n	8007e04 <_dtoa_r+0x4bc>
 8007d48:	2200      	movs	r2, #0
 8007d4a:	4b81      	ldr	r3, [pc, #516]	; (8007f50 <_dtoa_r+0x608>)
 8007d4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d50:	f7fb ff7a 	bl	8003c48 <__aeabi_dsub>
 8007d54:	462a      	mov	r2, r5
 8007d56:	4633      	mov	r3, r6
 8007d58:	e9cd 0100 	strd	r0, r1, [sp]
 8007d5c:	f7fc fbbc 	bl	80044d8 <__aeabi_dcmpgt>
 8007d60:	2800      	cmp	r0, #0
 8007d62:	f040 8288 	bne.w	8008276 <_dtoa_r+0x92e>
 8007d66:	462a      	mov	r2, r5
 8007d68:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007d6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d70:	f7fc fb94 	bl	800449c <__aeabi_dcmplt>
 8007d74:	2800      	cmp	r0, #0
 8007d76:	f040 827c 	bne.w	8008272 <_dtoa_r+0x92a>
 8007d7a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007d7e:	e9cd 2300 	strd	r2, r3, [sp]
 8007d82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	f2c0 8150 	blt.w	800802a <_dtoa_r+0x6e2>
 8007d8a:	f1ba 0f0e 	cmp.w	sl, #14
 8007d8e:	f300 814c 	bgt.w	800802a <_dtoa_r+0x6e2>
 8007d92:	4b6a      	ldr	r3, [pc, #424]	; (8007f3c <_dtoa_r+0x5f4>)
 8007d94:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007d98:	ed93 7b00 	vldr	d7, [r3]
 8007d9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007da4:	f280 80d8 	bge.w	8007f58 <_dtoa_r+0x610>
 8007da8:	f1b9 0f00 	cmp.w	r9, #0
 8007dac:	f300 80d4 	bgt.w	8007f58 <_dtoa_r+0x610>
 8007db0:	f040 825e 	bne.w	8008270 <_dtoa_r+0x928>
 8007db4:	2200      	movs	r2, #0
 8007db6:	4b66      	ldr	r3, [pc, #408]	; (8007f50 <_dtoa_r+0x608>)
 8007db8:	ec51 0b17 	vmov	r0, r1, d7
 8007dbc:	f7fc f8fc 	bl	8003fb8 <__aeabi_dmul>
 8007dc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007dc4:	f7fc fb7e 	bl	80044c4 <__aeabi_dcmpge>
 8007dc8:	464f      	mov	r7, r9
 8007dca:	464e      	mov	r6, r9
 8007dcc:	2800      	cmp	r0, #0
 8007dce:	f040 8234 	bne.w	800823a <_dtoa_r+0x8f2>
 8007dd2:	2331      	movs	r3, #49	; 0x31
 8007dd4:	f10b 0501 	add.w	r5, fp, #1
 8007dd8:	f88b 3000 	strb.w	r3, [fp]
 8007ddc:	f10a 0a01 	add.w	sl, sl, #1
 8007de0:	e22f      	b.n	8008242 <_dtoa_r+0x8fa>
 8007de2:	07f2      	lsls	r2, r6, #31
 8007de4:	d505      	bpl.n	8007df2 <_dtoa_r+0x4aa>
 8007de6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007dea:	f7fc f8e5 	bl	8003fb8 <__aeabi_dmul>
 8007dee:	3501      	adds	r5, #1
 8007df0:	2301      	movs	r3, #1
 8007df2:	1076      	asrs	r6, r6, #1
 8007df4:	3708      	adds	r7, #8
 8007df6:	e772      	b.n	8007cde <_dtoa_r+0x396>
 8007df8:	2502      	movs	r5, #2
 8007dfa:	e774      	b.n	8007ce6 <_dtoa_r+0x39e>
 8007dfc:	f8cd a020 	str.w	sl, [sp, #32]
 8007e00:	464f      	mov	r7, r9
 8007e02:	e791      	b.n	8007d28 <_dtoa_r+0x3e0>
 8007e04:	4b4d      	ldr	r3, [pc, #308]	; (8007f3c <_dtoa_r+0x5f4>)
 8007e06:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007e0a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007e0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d047      	beq.n	8007ea4 <_dtoa_r+0x55c>
 8007e14:	4602      	mov	r2, r0
 8007e16:	460b      	mov	r3, r1
 8007e18:	2000      	movs	r0, #0
 8007e1a:	494e      	ldr	r1, [pc, #312]	; (8007f54 <_dtoa_r+0x60c>)
 8007e1c:	f7fc f9f6 	bl	800420c <__aeabi_ddiv>
 8007e20:	462a      	mov	r2, r5
 8007e22:	4633      	mov	r3, r6
 8007e24:	f7fb ff10 	bl	8003c48 <__aeabi_dsub>
 8007e28:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007e2c:	465d      	mov	r5, fp
 8007e2e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e32:	f7fc fb71 	bl	8004518 <__aeabi_d2iz>
 8007e36:	4606      	mov	r6, r0
 8007e38:	f7fc f854 	bl	8003ee4 <__aeabi_i2d>
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	460b      	mov	r3, r1
 8007e40:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e44:	f7fb ff00 	bl	8003c48 <__aeabi_dsub>
 8007e48:	3630      	adds	r6, #48	; 0x30
 8007e4a:	f805 6b01 	strb.w	r6, [r5], #1
 8007e4e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007e52:	e9cd 0100 	strd	r0, r1, [sp]
 8007e56:	f7fc fb21 	bl	800449c <__aeabi_dcmplt>
 8007e5a:	2800      	cmp	r0, #0
 8007e5c:	d163      	bne.n	8007f26 <_dtoa_r+0x5de>
 8007e5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e62:	2000      	movs	r0, #0
 8007e64:	4937      	ldr	r1, [pc, #220]	; (8007f44 <_dtoa_r+0x5fc>)
 8007e66:	f7fb feef 	bl	8003c48 <__aeabi_dsub>
 8007e6a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007e6e:	f7fc fb15 	bl	800449c <__aeabi_dcmplt>
 8007e72:	2800      	cmp	r0, #0
 8007e74:	f040 80b7 	bne.w	8007fe6 <_dtoa_r+0x69e>
 8007e78:	eba5 030b 	sub.w	r3, r5, fp
 8007e7c:	429f      	cmp	r7, r3
 8007e7e:	f77f af7c 	ble.w	8007d7a <_dtoa_r+0x432>
 8007e82:	2200      	movs	r2, #0
 8007e84:	4b30      	ldr	r3, [pc, #192]	; (8007f48 <_dtoa_r+0x600>)
 8007e86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007e8a:	f7fc f895 	bl	8003fb8 <__aeabi_dmul>
 8007e8e:	2200      	movs	r2, #0
 8007e90:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007e94:	4b2c      	ldr	r3, [pc, #176]	; (8007f48 <_dtoa_r+0x600>)
 8007e96:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e9a:	f7fc f88d 	bl	8003fb8 <__aeabi_dmul>
 8007e9e:	e9cd 0100 	strd	r0, r1, [sp]
 8007ea2:	e7c4      	b.n	8007e2e <_dtoa_r+0x4e6>
 8007ea4:	462a      	mov	r2, r5
 8007ea6:	4633      	mov	r3, r6
 8007ea8:	f7fc f886 	bl	8003fb8 <__aeabi_dmul>
 8007eac:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007eb0:	eb0b 0507 	add.w	r5, fp, r7
 8007eb4:	465e      	mov	r6, fp
 8007eb6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007eba:	f7fc fb2d 	bl	8004518 <__aeabi_d2iz>
 8007ebe:	4607      	mov	r7, r0
 8007ec0:	f7fc f810 	bl	8003ee4 <__aeabi_i2d>
 8007ec4:	3730      	adds	r7, #48	; 0x30
 8007ec6:	4602      	mov	r2, r0
 8007ec8:	460b      	mov	r3, r1
 8007eca:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ece:	f7fb febb 	bl	8003c48 <__aeabi_dsub>
 8007ed2:	f806 7b01 	strb.w	r7, [r6], #1
 8007ed6:	42ae      	cmp	r6, r5
 8007ed8:	e9cd 0100 	strd	r0, r1, [sp]
 8007edc:	f04f 0200 	mov.w	r2, #0
 8007ee0:	d126      	bne.n	8007f30 <_dtoa_r+0x5e8>
 8007ee2:	4b1c      	ldr	r3, [pc, #112]	; (8007f54 <_dtoa_r+0x60c>)
 8007ee4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007ee8:	f7fb feb0 	bl	8003c4c <__adddf3>
 8007eec:	4602      	mov	r2, r0
 8007eee:	460b      	mov	r3, r1
 8007ef0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ef4:	f7fc faf0 	bl	80044d8 <__aeabi_dcmpgt>
 8007ef8:	2800      	cmp	r0, #0
 8007efa:	d174      	bne.n	8007fe6 <_dtoa_r+0x69e>
 8007efc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007f00:	2000      	movs	r0, #0
 8007f02:	4914      	ldr	r1, [pc, #80]	; (8007f54 <_dtoa_r+0x60c>)
 8007f04:	f7fb fea0 	bl	8003c48 <__aeabi_dsub>
 8007f08:	4602      	mov	r2, r0
 8007f0a:	460b      	mov	r3, r1
 8007f0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007f10:	f7fc fac4 	bl	800449c <__aeabi_dcmplt>
 8007f14:	2800      	cmp	r0, #0
 8007f16:	f43f af30 	beq.w	8007d7a <_dtoa_r+0x432>
 8007f1a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007f1e:	2b30      	cmp	r3, #48	; 0x30
 8007f20:	f105 32ff 	add.w	r2, r5, #4294967295
 8007f24:	d002      	beq.n	8007f2c <_dtoa_r+0x5e4>
 8007f26:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007f2a:	e04a      	b.n	8007fc2 <_dtoa_r+0x67a>
 8007f2c:	4615      	mov	r5, r2
 8007f2e:	e7f4      	b.n	8007f1a <_dtoa_r+0x5d2>
 8007f30:	4b05      	ldr	r3, [pc, #20]	; (8007f48 <_dtoa_r+0x600>)
 8007f32:	f7fc f841 	bl	8003fb8 <__aeabi_dmul>
 8007f36:	e9cd 0100 	strd	r0, r1, [sp]
 8007f3a:	e7bc      	b.n	8007eb6 <_dtoa_r+0x56e>
 8007f3c:	0800a510 	.word	0x0800a510
 8007f40:	0800a4e8 	.word	0x0800a4e8
 8007f44:	3ff00000 	.word	0x3ff00000
 8007f48:	40240000 	.word	0x40240000
 8007f4c:	401c0000 	.word	0x401c0000
 8007f50:	40140000 	.word	0x40140000
 8007f54:	3fe00000 	.word	0x3fe00000
 8007f58:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007f5c:	465d      	mov	r5, fp
 8007f5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f62:	4630      	mov	r0, r6
 8007f64:	4639      	mov	r1, r7
 8007f66:	f7fc f951 	bl	800420c <__aeabi_ddiv>
 8007f6a:	f7fc fad5 	bl	8004518 <__aeabi_d2iz>
 8007f6e:	4680      	mov	r8, r0
 8007f70:	f7fb ffb8 	bl	8003ee4 <__aeabi_i2d>
 8007f74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f78:	f7fc f81e 	bl	8003fb8 <__aeabi_dmul>
 8007f7c:	4602      	mov	r2, r0
 8007f7e:	460b      	mov	r3, r1
 8007f80:	4630      	mov	r0, r6
 8007f82:	4639      	mov	r1, r7
 8007f84:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8007f88:	f7fb fe5e 	bl	8003c48 <__aeabi_dsub>
 8007f8c:	f805 6b01 	strb.w	r6, [r5], #1
 8007f90:	eba5 060b 	sub.w	r6, r5, fp
 8007f94:	45b1      	cmp	r9, r6
 8007f96:	4602      	mov	r2, r0
 8007f98:	460b      	mov	r3, r1
 8007f9a:	d139      	bne.n	8008010 <_dtoa_r+0x6c8>
 8007f9c:	f7fb fe56 	bl	8003c4c <__adddf3>
 8007fa0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007fa4:	4606      	mov	r6, r0
 8007fa6:	460f      	mov	r7, r1
 8007fa8:	f7fc fa96 	bl	80044d8 <__aeabi_dcmpgt>
 8007fac:	b9c8      	cbnz	r0, 8007fe2 <_dtoa_r+0x69a>
 8007fae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007fb2:	4630      	mov	r0, r6
 8007fb4:	4639      	mov	r1, r7
 8007fb6:	f7fc fa67 	bl	8004488 <__aeabi_dcmpeq>
 8007fba:	b110      	cbz	r0, 8007fc2 <_dtoa_r+0x67a>
 8007fbc:	f018 0f01 	tst.w	r8, #1
 8007fc0:	d10f      	bne.n	8007fe2 <_dtoa_r+0x69a>
 8007fc2:	9904      	ldr	r1, [sp, #16]
 8007fc4:	4620      	mov	r0, r4
 8007fc6:	f000 fac1 	bl	800854c <_Bfree>
 8007fca:	2300      	movs	r3, #0
 8007fcc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007fce:	702b      	strb	r3, [r5, #0]
 8007fd0:	f10a 0301 	add.w	r3, sl, #1
 8007fd4:	6013      	str	r3, [r2, #0]
 8007fd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	f000 8241 	beq.w	8008460 <_dtoa_r+0xb18>
 8007fde:	601d      	str	r5, [r3, #0]
 8007fe0:	e23e      	b.n	8008460 <_dtoa_r+0xb18>
 8007fe2:	f8cd a020 	str.w	sl, [sp, #32]
 8007fe6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007fea:	2a39      	cmp	r2, #57	; 0x39
 8007fec:	f105 33ff 	add.w	r3, r5, #4294967295
 8007ff0:	d108      	bne.n	8008004 <_dtoa_r+0x6bc>
 8007ff2:	459b      	cmp	fp, r3
 8007ff4:	d10a      	bne.n	800800c <_dtoa_r+0x6c4>
 8007ff6:	9b08      	ldr	r3, [sp, #32]
 8007ff8:	3301      	adds	r3, #1
 8007ffa:	9308      	str	r3, [sp, #32]
 8007ffc:	2330      	movs	r3, #48	; 0x30
 8007ffe:	f88b 3000 	strb.w	r3, [fp]
 8008002:	465b      	mov	r3, fp
 8008004:	781a      	ldrb	r2, [r3, #0]
 8008006:	3201      	adds	r2, #1
 8008008:	701a      	strb	r2, [r3, #0]
 800800a:	e78c      	b.n	8007f26 <_dtoa_r+0x5de>
 800800c:	461d      	mov	r5, r3
 800800e:	e7ea      	b.n	8007fe6 <_dtoa_r+0x69e>
 8008010:	2200      	movs	r2, #0
 8008012:	4b9b      	ldr	r3, [pc, #620]	; (8008280 <_dtoa_r+0x938>)
 8008014:	f7fb ffd0 	bl	8003fb8 <__aeabi_dmul>
 8008018:	2200      	movs	r2, #0
 800801a:	2300      	movs	r3, #0
 800801c:	4606      	mov	r6, r0
 800801e:	460f      	mov	r7, r1
 8008020:	f7fc fa32 	bl	8004488 <__aeabi_dcmpeq>
 8008024:	2800      	cmp	r0, #0
 8008026:	d09a      	beq.n	8007f5e <_dtoa_r+0x616>
 8008028:	e7cb      	b.n	8007fc2 <_dtoa_r+0x67a>
 800802a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800802c:	2a00      	cmp	r2, #0
 800802e:	f000 808b 	beq.w	8008148 <_dtoa_r+0x800>
 8008032:	9a06      	ldr	r2, [sp, #24]
 8008034:	2a01      	cmp	r2, #1
 8008036:	dc6e      	bgt.n	8008116 <_dtoa_r+0x7ce>
 8008038:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800803a:	2a00      	cmp	r2, #0
 800803c:	d067      	beq.n	800810e <_dtoa_r+0x7c6>
 800803e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008042:	9f07      	ldr	r7, [sp, #28]
 8008044:	9d05      	ldr	r5, [sp, #20]
 8008046:	9a05      	ldr	r2, [sp, #20]
 8008048:	2101      	movs	r1, #1
 800804a:	441a      	add	r2, r3
 800804c:	4620      	mov	r0, r4
 800804e:	9205      	str	r2, [sp, #20]
 8008050:	4498      	add	r8, r3
 8008052:	f000 fb1b 	bl	800868c <__i2b>
 8008056:	4606      	mov	r6, r0
 8008058:	2d00      	cmp	r5, #0
 800805a:	dd0c      	ble.n	8008076 <_dtoa_r+0x72e>
 800805c:	f1b8 0f00 	cmp.w	r8, #0
 8008060:	dd09      	ble.n	8008076 <_dtoa_r+0x72e>
 8008062:	4545      	cmp	r5, r8
 8008064:	9a05      	ldr	r2, [sp, #20]
 8008066:	462b      	mov	r3, r5
 8008068:	bfa8      	it	ge
 800806a:	4643      	movge	r3, r8
 800806c:	1ad2      	subs	r2, r2, r3
 800806e:	9205      	str	r2, [sp, #20]
 8008070:	1aed      	subs	r5, r5, r3
 8008072:	eba8 0803 	sub.w	r8, r8, r3
 8008076:	9b07      	ldr	r3, [sp, #28]
 8008078:	b1eb      	cbz	r3, 80080b6 <_dtoa_r+0x76e>
 800807a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800807c:	2b00      	cmp	r3, #0
 800807e:	d067      	beq.n	8008150 <_dtoa_r+0x808>
 8008080:	b18f      	cbz	r7, 80080a6 <_dtoa_r+0x75e>
 8008082:	4631      	mov	r1, r6
 8008084:	463a      	mov	r2, r7
 8008086:	4620      	mov	r0, r4
 8008088:	f000 fba0 	bl	80087cc <__pow5mult>
 800808c:	9a04      	ldr	r2, [sp, #16]
 800808e:	4601      	mov	r1, r0
 8008090:	4606      	mov	r6, r0
 8008092:	4620      	mov	r0, r4
 8008094:	f000 fb03 	bl	800869e <__multiply>
 8008098:	9904      	ldr	r1, [sp, #16]
 800809a:	9008      	str	r0, [sp, #32]
 800809c:	4620      	mov	r0, r4
 800809e:	f000 fa55 	bl	800854c <_Bfree>
 80080a2:	9b08      	ldr	r3, [sp, #32]
 80080a4:	9304      	str	r3, [sp, #16]
 80080a6:	9b07      	ldr	r3, [sp, #28]
 80080a8:	1bda      	subs	r2, r3, r7
 80080aa:	d004      	beq.n	80080b6 <_dtoa_r+0x76e>
 80080ac:	9904      	ldr	r1, [sp, #16]
 80080ae:	4620      	mov	r0, r4
 80080b0:	f000 fb8c 	bl	80087cc <__pow5mult>
 80080b4:	9004      	str	r0, [sp, #16]
 80080b6:	2101      	movs	r1, #1
 80080b8:	4620      	mov	r0, r4
 80080ba:	f000 fae7 	bl	800868c <__i2b>
 80080be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80080c0:	4607      	mov	r7, r0
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	f000 81d0 	beq.w	8008468 <_dtoa_r+0xb20>
 80080c8:	461a      	mov	r2, r3
 80080ca:	4601      	mov	r1, r0
 80080cc:	4620      	mov	r0, r4
 80080ce:	f000 fb7d 	bl	80087cc <__pow5mult>
 80080d2:	9b06      	ldr	r3, [sp, #24]
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	4607      	mov	r7, r0
 80080d8:	dc40      	bgt.n	800815c <_dtoa_r+0x814>
 80080da:	9b00      	ldr	r3, [sp, #0]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d139      	bne.n	8008154 <_dtoa_r+0x80c>
 80080e0:	9b01      	ldr	r3, [sp, #4]
 80080e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d136      	bne.n	8008158 <_dtoa_r+0x810>
 80080ea:	9b01      	ldr	r3, [sp, #4]
 80080ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80080f0:	0d1b      	lsrs	r3, r3, #20
 80080f2:	051b      	lsls	r3, r3, #20
 80080f4:	b12b      	cbz	r3, 8008102 <_dtoa_r+0x7ba>
 80080f6:	9b05      	ldr	r3, [sp, #20]
 80080f8:	3301      	adds	r3, #1
 80080fa:	9305      	str	r3, [sp, #20]
 80080fc:	f108 0801 	add.w	r8, r8, #1
 8008100:	2301      	movs	r3, #1
 8008102:	9307      	str	r3, [sp, #28]
 8008104:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008106:	2b00      	cmp	r3, #0
 8008108:	d12a      	bne.n	8008160 <_dtoa_r+0x818>
 800810a:	2001      	movs	r0, #1
 800810c:	e030      	b.n	8008170 <_dtoa_r+0x828>
 800810e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008110:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008114:	e795      	b.n	8008042 <_dtoa_r+0x6fa>
 8008116:	9b07      	ldr	r3, [sp, #28]
 8008118:	f109 37ff 	add.w	r7, r9, #4294967295
 800811c:	42bb      	cmp	r3, r7
 800811e:	bfbf      	itttt	lt
 8008120:	9b07      	ldrlt	r3, [sp, #28]
 8008122:	9707      	strlt	r7, [sp, #28]
 8008124:	1afa      	sublt	r2, r7, r3
 8008126:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008128:	bfbb      	ittet	lt
 800812a:	189b      	addlt	r3, r3, r2
 800812c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800812e:	1bdf      	subge	r7, r3, r7
 8008130:	2700      	movlt	r7, #0
 8008132:	f1b9 0f00 	cmp.w	r9, #0
 8008136:	bfb5      	itete	lt
 8008138:	9b05      	ldrlt	r3, [sp, #20]
 800813a:	9d05      	ldrge	r5, [sp, #20]
 800813c:	eba3 0509 	sublt.w	r5, r3, r9
 8008140:	464b      	movge	r3, r9
 8008142:	bfb8      	it	lt
 8008144:	2300      	movlt	r3, #0
 8008146:	e77e      	b.n	8008046 <_dtoa_r+0x6fe>
 8008148:	9f07      	ldr	r7, [sp, #28]
 800814a:	9d05      	ldr	r5, [sp, #20]
 800814c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800814e:	e783      	b.n	8008058 <_dtoa_r+0x710>
 8008150:	9a07      	ldr	r2, [sp, #28]
 8008152:	e7ab      	b.n	80080ac <_dtoa_r+0x764>
 8008154:	2300      	movs	r3, #0
 8008156:	e7d4      	b.n	8008102 <_dtoa_r+0x7ba>
 8008158:	9b00      	ldr	r3, [sp, #0]
 800815a:	e7d2      	b.n	8008102 <_dtoa_r+0x7ba>
 800815c:	2300      	movs	r3, #0
 800815e:	9307      	str	r3, [sp, #28]
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8008166:	6918      	ldr	r0, [r3, #16]
 8008168:	f000 fa42 	bl	80085f0 <__hi0bits>
 800816c:	f1c0 0020 	rsb	r0, r0, #32
 8008170:	4440      	add	r0, r8
 8008172:	f010 001f 	ands.w	r0, r0, #31
 8008176:	d047      	beq.n	8008208 <_dtoa_r+0x8c0>
 8008178:	f1c0 0320 	rsb	r3, r0, #32
 800817c:	2b04      	cmp	r3, #4
 800817e:	dd3b      	ble.n	80081f8 <_dtoa_r+0x8b0>
 8008180:	9b05      	ldr	r3, [sp, #20]
 8008182:	f1c0 001c 	rsb	r0, r0, #28
 8008186:	4403      	add	r3, r0
 8008188:	9305      	str	r3, [sp, #20]
 800818a:	4405      	add	r5, r0
 800818c:	4480      	add	r8, r0
 800818e:	9b05      	ldr	r3, [sp, #20]
 8008190:	2b00      	cmp	r3, #0
 8008192:	dd05      	ble.n	80081a0 <_dtoa_r+0x858>
 8008194:	461a      	mov	r2, r3
 8008196:	9904      	ldr	r1, [sp, #16]
 8008198:	4620      	mov	r0, r4
 800819a:	f000 fb65 	bl	8008868 <__lshift>
 800819e:	9004      	str	r0, [sp, #16]
 80081a0:	f1b8 0f00 	cmp.w	r8, #0
 80081a4:	dd05      	ble.n	80081b2 <_dtoa_r+0x86a>
 80081a6:	4639      	mov	r1, r7
 80081a8:	4642      	mov	r2, r8
 80081aa:	4620      	mov	r0, r4
 80081ac:	f000 fb5c 	bl	8008868 <__lshift>
 80081b0:	4607      	mov	r7, r0
 80081b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80081b4:	b353      	cbz	r3, 800820c <_dtoa_r+0x8c4>
 80081b6:	4639      	mov	r1, r7
 80081b8:	9804      	ldr	r0, [sp, #16]
 80081ba:	f000 fba9 	bl	8008910 <__mcmp>
 80081be:	2800      	cmp	r0, #0
 80081c0:	da24      	bge.n	800820c <_dtoa_r+0x8c4>
 80081c2:	2300      	movs	r3, #0
 80081c4:	220a      	movs	r2, #10
 80081c6:	9904      	ldr	r1, [sp, #16]
 80081c8:	4620      	mov	r0, r4
 80081ca:	f000 f9d6 	bl	800857a <__multadd>
 80081ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081d0:	9004      	str	r0, [sp, #16]
 80081d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	f000 814d 	beq.w	8008476 <_dtoa_r+0xb2e>
 80081dc:	2300      	movs	r3, #0
 80081de:	4631      	mov	r1, r6
 80081e0:	220a      	movs	r2, #10
 80081e2:	4620      	mov	r0, r4
 80081e4:	f000 f9c9 	bl	800857a <__multadd>
 80081e8:	9b02      	ldr	r3, [sp, #8]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	4606      	mov	r6, r0
 80081ee:	dc4f      	bgt.n	8008290 <_dtoa_r+0x948>
 80081f0:	9b06      	ldr	r3, [sp, #24]
 80081f2:	2b02      	cmp	r3, #2
 80081f4:	dd4c      	ble.n	8008290 <_dtoa_r+0x948>
 80081f6:	e011      	b.n	800821c <_dtoa_r+0x8d4>
 80081f8:	d0c9      	beq.n	800818e <_dtoa_r+0x846>
 80081fa:	9a05      	ldr	r2, [sp, #20]
 80081fc:	331c      	adds	r3, #28
 80081fe:	441a      	add	r2, r3
 8008200:	9205      	str	r2, [sp, #20]
 8008202:	441d      	add	r5, r3
 8008204:	4498      	add	r8, r3
 8008206:	e7c2      	b.n	800818e <_dtoa_r+0x846>
 8008208:	4603      	mov	r3, r0
 800820a:	e7f6      	b.n	80081fa <_dtoa_r+0x8b2>
 800820c:	f1b9 0f00 	cmp.w	r9, #0
 8008210:	dc38      	bgt.n	8008284 <_dtoa_r+0x93c>
 8008212:	9b06      	ldr	r3, [sp, #24]
 8008214:	2b02      	cmp	r3, #2
 8008216:	dd35      	ble.n	8008284 <_dtoa_r+0x93c>
 8008218:	f8cd 9008 	str.w	r9, [sp, #8]
 800821c:	9b02      	ldr	r3, [sp, #8]
 800821e:	b963      	cbnz	r3, 800823a <_dtoa_r+0x8f2>
 8008220:	4639      	mov	r1, r7
 8008222:	2205      	movs	r2, #5
 8008224:	4620      	mov	r0, r4
 8008226:	f000 f9a8 	bl	800857a <__multadd>
 800822a:	4601      	mov	r1, r0
 800822c:	4607      	mov	r7, r0
 800822e:	9804      	ldr	r0, [sp, #16]
 8008230:	f000 fb6e 	bl	8008910 <__mcmp>
 8008234:	2800      	cmp	r0, #0
 8008236:	f73f adcc 	bgt.w	8007dd2 <_dtoa_r+0x48a>
 800823a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800823c:	465d      	mov	r5, fp
 800823e:	ea6f 0a03 	mvn.w	sl, r3
 8008242:	f04f 0900 	mov.w	r9, #0
 8008246:	4639      	mov	r1, r7
 8008248:	4620      	mov	r0, r4
 800824a:	f000 f97f 	bl	800854c <_Bfree>
 800824e:	2e00      	cmp	r6, #0
 8008250:	f43f aeb7 	beq.w	8007fc2 <_dtoa_r+0x67a>
 8008254:	f1b9 0f00 	cmp.w	r9, #0
 8008258:	d005      	beq.n	8008266 <_dtoa_r+0x91e>
 800825a:	45b1      	cmp	r9, r6
 800825c:	d003      	beq.n	8008266 <_dtoa_r+0x91e>
 800825e:	4649      	mov	r1, r9
 8008260:	4620      	mov	r0, r4
 8008262:	f000 f973 	bl	800854c <_Bfree>
 8008266:	4631      	mov	r1, r6
 8008268:	4620      	mov	r0, r4
 800826a:	f000 f96f 	bl	800854c <_Bfree>
 800826e:	e6a8      	b.n	8007fc2 <_dtoa_r+0x67a>
 8008270:	2700      	movs	r7, #0
 8008272:	463e      	mov	r6, r7
 8008274:	e7e1      	b.n	800823a <_dtoa_r+0x8f2>
 8008276:	f8dd a020 	ldr.w	sl, [sp, #32]
 800827a:	463e      	mov	r6, r7
 800827c:	e5a9      	b.n	8007dd2 <_dtoa_r+0x48a>
 800827e:	bf00      	nop
 8008280:	40240000 	.word	0x40240000
 8008284:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008286:	f8cd 9008 	str.w	r9, [sp, #8]
 800828a:	2b00      	cmp	r3, #0
 800828c:	f000 80fa 	beq.w	8008484 <_dtoa_r+0xb3c>
 8008290:	2d00      	cmp	r5, #0
 8008292:	dd05      	ble.n	80082a0 <_dtoa_r+0x958>
 8008294:	4631      	mov	r1, r6
 8008296:	462a      	mov	r2, r5
 8008298:	4620      	mov	r0, r4
 800829a:	f000 fae5 	bl	8008868 <__lshift>
 800829e:	4606      	mov	r6, r0
 80082a0:	9b07      	ldr	r3, [sp, #28]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d04c      	beq.n	8008340 <_dtoa_r+0x9f8>
 80082a6:	6871      	ldr	r1, [r6, #4]
 80082a8:	4620      	mov	r0, r4
 80082aa:	f000 f91b 	bl	80084e4 <_Balloc>
 80082ae:	6932      	ldr	r2, [r6, #16]
 80082b0:	3202      	adds	r2, #2
 80082b2:	4605      	mov	r5, r0
 80082b4:	0092      	lsls	r2, r2, #2
 80082b6:	f106 010c 	add.w	r1, r6, #12
 80082ba:	300c      	adds	r0, #12
 80082bc:	f7fe fe29 	bl	8006f12 <memcpy>
 80082c0:	2201      	movs	r2, #1
 80082c2:	4629      	mov	r1, r5
 80082c4:	4620      	mov	r0, r4
 80082c6:	f000 facf 	bl	8008868 <__lshift>
 80082ca:	9b00      	ldr	r3, [sp, #0]
 80082cc:	f8cd b014 	str.w	fp, [sp, #20]
 80082d0:	f003 0301 	and.w	r3, r3, #1
 80082d4:	46b1      	mov	r9, r6
 80082d6:	9307      	str	r3, [sp, #28]
 80082d8:	4606      	mov	r6, r0
 80082da:	4639      	mov	r1, r7
 80082dc:	9804      	ldr	r0, [sp, #16]
 80082de:	f7ff faa7 	bl	8007830 <quorem>
 80082e2:	4649      	mov	r1, r9
 80082e4:	4605      	mov	r5, r0
 80082e6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80082ea:	9804      	ldr	r0, [sp, #16]
 80082ec:	f000 fb10 	bl	8008910 <__mcmp>
 80082f0:	4632      	mov	r2, r6
 80082f2:	9000      	str	r0, [sp, #0]
 80082f4:	4639      	mov	r1, r7
 80082f6:	4620      	mov	r0, r4
 80082f8:	f000 fb24 	bl	8008944 <__mdiff>
 80082fc:	68c3      	ldr	r3, [r0, #12]
 80082fe:	4602      	mov	r2, r0
 8008300:	bb03      	cbnz	r3, 8008344 <_dtoa_r+0x9fc>
 8008302:	4601      	mov	r1, r0
 8008304:	9008      	str	r0, [sp, #32]
 8008306:	9804      	ldr	r0, [sp, #16]
 8008308:	f000 fb02 	bl	8008910 <__mcmp>
 800830c:	9a08      	ldr	r2, [sp, #32]
 800830e:	4603      	mov	r3, r0
 8008310:	4611      	mov	r1, r2
 8008312:	4620      	mov	r0, r4
 8008314:	9308      	str	r3, [sp, #32]
 8008316:	f000 f919 	bl	800854c <_Bfree>
 800831a:	9b08      	ldr	r3, [sp, #32]
 800831c:	b9a3      	cbnz	r3, 8008348 <_dtoa_r+0xa00>
 800831e:	9a06      	ldr	r2, [sp, #24]
 8008320:	b992      	cbnz	r2, 8008348 <_dtoa_r+0xa00>
 8008322:	9a07      	ldr	r2, [sp, #28]
 8008324:	b982      	cbnz	r2, 8008348 <_dtoa_r+0xa00>
 8008326:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800832a:	d029      	beq.n	8008380 <_dtoa_r+0xa38>
 800832c:	9b00      	ldr	r3, [sp, #0]
 800832e:	2b00      	cmp	r3, #0
 8008330:	dd01      	ble.n	8008336 <_dtoa_r+0x9ee>
 8008332:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8008336:	9b05      	ldr	r3, [sp, #20]
 8008338:	1c5d      	adds	r5, r3, #1
 800833a:	f883 8000 	strb.w	r8, [r3]
 800833e:	e782      	b.n	8008246 <_dtoa_r+0x8fe>
 8008340:	4630      	mov	r0, r6
 8008342:	e7c2      	b.n	80082ca <_dtoa_r+0x982>
 8008344:	2301      	movs	r3, #1
 8008346:	e7e3      	b.n	8008310 <_dtoa_r+0x9c8>
 8008348:	9a00      	ldr	r2, [sp, #0]
 800834a:	2a00      	cmp	r2, #0
 800834c:	db04      	blt.n	8008358 <_dtoa_r+0xa10>
 800834e:	d125      	bne.n	800839c <_dtoa_r+0xa54>
 8008350:	9a06      	ldr	r2, [sp, #24]
 8008352:	bb1a      	cbnz	r2, 800839c <_dtoa_r+0xa54>
 8008354:	9a07      	ldr	r2, [sp, #28]
 8008356:	bb0a      	cbnz	r2, 800839c <_dtoa_r+0xa54>
 8008358:	2b00      	cmp	r3, #0
 800835a:	ddec      	ble.n	8008336 <_dtoa_r+0x9ee>
 800835c:	2201      	movs	r2, #1
 800835e:	9904      	ldr	r1, [sp, #16]
 8008360:	4620      	mov	r0, r4
 8008362:	f000 fa81 	bl	8008868 <__lshift>
 8008366:	4639      	mov	r1, r7
 8008368:	9004      	str	r0, [sp, #16]
 800836a:	f000 fad1 	bl	8008910 <__mcmp>
 800836e:	2800      	cmp	r0, #0
 8008370:	dc03      	bgt.n	800837a <_dtoa_r+0xa32>
 8008372:	d1e0      	bne.n	8008336 <_dtoa_r+0x9ee>
 8008374:	f018 0f01 	tst.w	r8, #1
 8008378:	d0dd      	beq.n	8008336 <_dtoa_r+0x9ee>
 800837a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800837e:	d1d8      	bne.n	8008332 <_dtoa_r+0x9ea>
 8008380:	9b05      	ldr	r3, [sp, #20]
 8008382:	9a05      	ldr	r2, [sp, #20]
 8008384:	1c5d      	adds	r5, r3, #1
 8008386:	2339      	movs	r3, #57	; 0x39
 8008388:	7013      	strb	r3, [r2, #0]
 800838a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800838e:	2b39      	cmp	r3, #57	; 0x39
 8008390:	f105 32ff 	add.w	r2, r5, #4294967295
 8008394:	d04f      	beq.n	8008436 <_dtoa_r+0xaee>
 8008396:	3301      	adds	r3, #1
 8008398:	7013      	strb	r3, [r2, #0]
 800839a:	e754      	b.n	8008246 <_dtoa_r+0x8fe>
 800839c:	9a05      	ldr	r2, [sp, #20]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	f102 0501 	add.w	r5, r2, #1
 80083a4:	dd06      	ble.n	80083b4 <_dtoa_r+0xa6c>
 80083a6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80083aa:	d0e9      	beq.n	8008380 <_dtoa_r+0xa38>
 80083ac:	f108 0801 	add.w	r8, r8, #1
 80083b0:	9b05      	ldr	r3, [sp, #20]
 80083b2:	e7c2      	b.n	800833a <_dtoa_r+0x9f2>
 80083b4:	9a02      	ldr	r2, [sp, #8]
 80083b6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80083ba:	eba5 030b 	sub.w	r3, r5, fp
 80083be:	4293      	cmp	r3, r2
 80083c0:	d021      	beq.n	8008406 <_dtoa_r+0xabe>
 80083c2:	2300      	movs	r3, #0
 80083c4:	220a      	movs	r2, #10
 80083c6:	9904      	ldr	r1, [sp, #16]
 80083c8:	4620      	mov	r0, r4
 80083ca:	f000 f8d6 	bl	800857a <__multadd>
 80083ce:	45b1      	cmp	r9, r6
 80083d0:	9004      	str	r0, [sp, #16]
 80083d2:	f04f 0300 	mov.w	r3, #0
 80083d6:	f04f 020a 	mov.w	r2, #10
 80083da:	4649      	mov	r1, r9
 80083dc:	4620      	mov	r0, r4
 80083de:	d105      	bne.n	80083ec <_dtoa_r+0xaa4>
 80083e0:	f000 f8cb 	bl	800857a <__multadd>
 80083e4:	4681      	mov	r9, r0
 80083e6:	4606      	mov	r6, r0
 80083e8:	9505      	str	r5, [sp, #20]
 80083ea:	e776      	b.n	80082da <_dtoa_r+0x992>
 80083ec:	f000 f8c5 	bl	800857a <__multadd>
 80083f0:	4631      	mov	r1, r6
 80083f2:	4681      	mov	r9, r0
 80083f4:	2300      	movs	r3, #0
 80083f6:	220a      	movs	r2, #10
 80083f8:	4620      	mov	r0, r4
 80083fa:	f000 f8be 	bl	800857a <__multadd>
 80083fe:	4606      	mov	r6, r0
 8008400:	e7f2      	b.n	80083e8 <_dtoa_r+0xaa0>
 8008402:	f04f 0900 	mov.w	r9, #0
 8008406:	2201      	movs	r2, #1
 8008408:	9904      	ldr	r1, [sp, #16]
 800840a:	4620      	mov	r0, r4
 800840c:	f000 fa2c 	bl	8008868 <__lshift>
 8008410:	4639      	mov	r1, r7
 8008412:	9004      	str	r0, [sp, #16]
 8008414:	f000 fa7c 	bl	8008910 <__mcmp>
 8008418:	2800      	cmp	r0, #0
 800841a:	dcb6      	bgt.n	800838a <_dtoa_r+0xa42>
 800841c:	d102      	bne.n	8008424 <_dtoa_r+0xadc>
 800841e:	f018 0f01 	tst.w	r8, #1
 8008422:	d1b2      	bne.n	800838a <_dtoa_r+0xa42>
 8008424:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008428:	2b30      	cmp	r3, #48	; 0x30
 800842a:	f105 32ff 	add.w	r2, r5, #4294967295
 800842e:	f47f af0a 	bne.w	8008246 <_dtoa_r+0x8fe>
 8008432:	4615      	mov	r5, r2
 8008434:	e7f6      	b.n	8008424 <_dtoa_r+0xadc>
 8008436:	4593      	cmp	fp, r2
 8008438:	d105      	bne.n	8008446 <_dtoa_r+0xafe>
 800843a:	2331      	movs	r3, #49	; 0x31
 800843c:	f10a 0a01 	add.w	sl, sl, #1
 8008440:	f88b 3000 	strb.w	r3, [fp]
 8008444:	e6ff      	b.n	8008246 <_dtoa_r+0x8fe>
 8008446:	4615      	mov	r5, r2
 8008448:	e79f      	b.n	800838a <_dtoa_r+0xa42>
 800844a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80084b0 <_dtoa_r+0xb68>
 800844e:	e007      	b.n	8008460 <_dtoa_r+0xb18>
 8008450:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008452:	f8df b060 	ldr.w	fp, [pc, #96]	; 80084b4 <_dtoa_r+0xb6c>
 8008456:	b11b      	cbz	r3, 8008460 <_dtoa_r+0xb18>
 8008458:	f10b 0308 	add.w	r3, fp, #8
 800845c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800845e:	6013      	str	r3, [r2, #0]
 8008460:	4658      	mov	r0, fp
 8008462:	b017      	add	sp, #92	; 0x5c
 8008464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008468:	9b06      	ldr	r3, [sp, #24]
 800846a:	2b01      	cmp	r3, #1
 800846c:	f77f ae35 	ble.w	80080da <_dtoa_r+0x792>
 8008470:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008472:	9307      	str	r3, [sp, #28]
 8008474:	e649      	b.n	800810a <_dtoa_r+0x7c2>
 8008476:	9b02      	ldr	r3, [sp, #8]
 8008478:	2b00      	cmp	r3, #0
 800847a:	dc03      	bgt.n	8008484 <_dtoa_r+0xb3c>
 800847c:	9b06      	ldr	r3, [sp, #24]
 800847e:	2b02      	cmp	r3, #2
 8008480:	f73f aecc 	bgt.w	800821c <_dtoa_r+0x8d4>
 8008484:	465d      	mov	r5, fp
 8008486:	4639      	mov	r1, r7
 8008488:	9804      	ldr	r0, [sp, #16]
 800848a:	f7ff f9d1 	bl	8007830 <quorem>
 800848e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008492:	f805 8b01 	strb.w	r8, [r5], #1
 8008496:	9a02      	ldr	r2, [sp, #8]
 8008498:	eba5 030b 	sub.w	r3, r5, fp
 800849c:	429a      	cmp	r2, r3
 800849e:	ddb0      	ble.n	8008402 <_dtoa_r+0xaba>
 80084a0:	2300      	movs	r3, #0
 80084a2:	220a      	movs	r2, #10
 80084a4:	9904      	ldr	r1, [sp, #16]
 80084a6:	4620      	mov	r0, r4
 80084a8:	f000 f867 	bl	800857a <__multadd>
 80084ac:	9004      	str	r0, [sp, #16]
 80084ae:	e7ea      	b.n	8008486 <_dtoa_r+0xb3e>
 80084b0:	0800a4b4 	.word	0x0800a4b4
 80084b4:	0800a4d8 	.word	0x0800a4d8

080084b8 <_localeconv_r>:
 80084b8:	4b04      	ldr	r3, [pc, #16]	; (80084cc <_localeconv_r+0x14>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	6a18      	ldr	r0, [r3, #32]
 80084be:	4b04      	ldr	r3, [pc, #16]	; (80084d0 <_localeconv_r+0x18>)
 80084c0:	2800      	cmp	r0, #0
 80084c2:	bf08      	it	eq
 80084c4:	4618      	moveq	r0, r3
 80084c6:	30f0      	adds	r0, #240	; 0xf0
 80084c8:	4770      	bx	lr
 80084ca:	bf00      	nop
 80084cc:	2000055c 	.word	0x2000055c
 80084d0:	200005c0 	.word	0x200005c0

080084d4 <malloc>:
 80084d4:	4b02      	ldr	r3, [pc, #8]	; (80084e0 <malloc+0xc>)
 80084d6:	4601      	mov	r1, r0
 80084d8:	6818      	ldr	r0, [r3, #0]
 80084da:	f000 bb3b 	b.w	8008b54 <_malloc_r>
 80084de:	bf00      	nop
 80084e0:	2000055c 	.word	0x2000055c

080084e4 <_Balloc>:
 80084e4:	b570      	push	{r4, r5, r6, lr}
 80084e6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80084e8:	4604      	mov	r4, r0
 80084ea:	460e      	mov	r6, r1
 80084ec:	b93d      	cbnz	r5, 80084fe <_Balloc+0x1a>
 80084ee:	2010      	movs	r0, #16
 80084f0:	f7ff fff0 	bl	80084d4 <malloc>
 80084f4:	6260      	str	r0, [r4, #36]	; 0x24
 80084f6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80084fa:	6005      	str	r5, [r0, #0]
 80084fc:	60c5      	str	r5, [r0, #12]
 80084fe:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008500:	68eb      	ldr	r3, [r5, #12]
 8008502:	b183      	cbz	r3, 8008526 <_Balloc+0x42>
 8008504:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008506:	68db      	ldr	r3, [r3, #12]
 8008508:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800850c:	b9b8      	cbnz	r0, 800853e <_Balloc+0x5a>
 800850e:	2101      	movs	r1, #1
 8008510:	fa01 f506 	lsl.w	r5, r1, r6
 8008514:	1d6a      	adds	r2, r5, #5
 8008516:	0092      	lsls	r2, r2, #2
 8008518:	4620      	mov	r0, r4
 800851a:	f000 fabf 	bl	8008a9c <_calloc_r>
 800851e:	b160      	cbz	r0, 800853a <_Balloc+0x56>
 8008520:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008524:	e00e      	b.n	8008544 <_Balloc+0x60>
 8008526:	2221      	movs	r2, #33	; 0x21
 8008528:	2104      	movs	r1, #4
 800852a:	4620      	mov	r0, r4
 800852c:	f000 fab6 	bl	8008a9c <_calloc_r>
 8008530:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008532:	60e8      	str	r0, [r5, #12]
 8008534:	68db      	ldr	r3, [r3, #12]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d1e4      	bne.n	8008504 <_Balloc+0x20>
 800853a:	2000      	movs	r0, #0
 800853c:	bd70      	pop	{r4, r5, r6, pc}
 800853e:	6802      	ldr	r2, [r0, #0]
 8008540:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008544:	2300      	movs	r3, #0
 8008546:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800854a:	e7f7      	b.n	800853c <_Balloc+0x58>

0800854c <_Bfree>:
 800854c:	b570      	push	{r4, r5, r6, lr}
 800854e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008550:	4606      	mov	r6, r0
 8008552:	460d      	mov	r5, r1
 8008554:	b93c      	cbnz	r4, 8008566 <_Bfree+0x1a>
 8008556:	2010      	movs	r0, #16
 8008558:	f7ff ffbc 	bl	80084d4 <malloc>
 800855c:	6270      	str	r0, [r6, #36]	; 0x24
 800855e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008562:	6004      	str	r4, [r0, #0]
 8008564:	60c4      	str	r4, [r0, #12]
 8008566:	b13d      	cbz	r5, 8008578 <_Bfree+0x2c>
 8008568:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800856a:	686a      	ldr	r2, [r5, #4]
 800856c:	68db      	ldr	r3, [r3, #12]
 800856e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008572:	6029      	str	r1, [r5, #0]
 8008574:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008578:	bd70      	pop	{r4, r5, r6, pc}

0800857a <__multadd>:
 800857a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800857e:	690d      	ldr	r5, [r1, #16]
 8008580:	461f      	mov	r7, r3
 8008582:	4606      	mov	r6, r0
 8008584:	460c      	mov	r4, r1
 8008586:	f101 0c14 	add.w	ip, r1, #20
 800858a:	2300      	movs	r3, #0
 800858c:	f8dc 0000 	ldr.w	r0, [ip]
 8008590:	b281      	uxth	r1, r0
 8008592:	fb02 7101 	mla	r1, r2, r1, r7
 8008596:	0c0f      	lsrs	r7, r1, #16
 8008598:	0c00      	lsrs	r0, r0, #16
 800859a:	fb02 7000 	mla	r0, r2, r0, r7
 800859e:	b289      	uxth	r1, r1
 80085a0:	3301      	adds	r3, #1
 80085a2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80085a6:	429d      	cmp	r5, r3
 80085a8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80085ac:	f84c 1b04 	str.w	r1, [ip], #4
 80085b0:	dcec      	bgt.n	800858c <__multadd+0x12>
 80085b2:	b1d7      	cbz	r7, 80085ea <__multadd+0x70>
 80085b4:	68a3      	ldr	r3, [r4, #8]
 80085b6:	42ab      	cmp	r3, r5
 80085b8:	dc12      	bgt.n	80085e0 <__multadd+0x66>
 80085ba:	6861      	ldr	r1, [r4, #4]
 80085bc:	4630      	mov	r0, r6
 80085be:	3101      	adds	r1, #1
 80085c0:	f7ff ff90 	bl	80084e4 <_Balloc>
 80085c4:	6922      	ldr	r2, [r4, #16]
 80085c6:	3202      	adds	r2, #2
 80085c8:	f104 010c 	add.w	r1, r4, #12
 80085cc:	4680      	mov	r8, r0
 80085ce:	0092      	lsls	r2, r2, #2
 80085d0:	300c      	adds	r0, #12
 80085d2:	f7fe fc9e 	bl	8006f12 <memcpy>
 80085d6:	4621      	mov	r1, r4
 80085d8:	4630      	mov	r0, r6
 80085da:	f7ff ffb7 	bl	800854c <_Bfree>
 80085de:	4644      	mov	r4, r8
 80085e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80085e4:	3501      	adds	r5, #1
 80085e6:	615f      	str	r7, [r3, #20]
 80085e8:	6125      	str	r5, [r4, #16]
 80085ea:	4620      	mov	r0, r4
 80085ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080085f0 <__hi0bits>:
 80085f0:	0c02      	lsrs	r2, r0, #16
 80085f2:	0412      	lsls	r2, r2, #16
 80085f4:	4603      	mov	r3, r0
 80085f6:	b9b2      	cbnz	r2, 8008626 <__hi0bits+0x36>
 80085f8:	0403      	lsls	r3, r0, #16
 80085fa:	2010      	movs	r0, #16
 80085fc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008600:	bf04      	itt	eq
 8008602:	021b      	lsleq	r3, r3, #8
 8008604:	3008      	addeq	r0, #8
 8008606:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800860a:	bf04      	itt	eq
 800860c:	011b      	lsleq	r3, r3, #4
 800860e:	3004      	addeq	r0, #4
 8008610:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008614:	bf04      	itt	eq
 8008616:	009b      	lsleq	r3, r3, #2
 8008618:	3002      	addeq	r0, #2
 800861a:	2b00      	cmp	r3, #0
 800861c:	db06      	blt.n	800862c <__hi0bits+0x3c>
 800861e:	005b      	lsls	r3, r3, #1
 8008620:	d503      	bpl.n	800862a <__hi0bits+0x3a>
 8008622:	3001      	adds	r0, #1
 8008624:	4770      	bx	lr
 8008626:	2000      	movs	r0, #0
 8008628:	e7e8      	b.n	80085fc <__hi0bits+0xc>
 800862a:	2020      	movs	r0, #32
 800862c:	4770      	bx	lr

0800862e <__lo0bits>:
 800862e:	6803      	ldr	r3, [r0, #0]
 8008630:	f013 0207 	ands.w	r2, r3, #7
 8008634:	4601      	mov	r1, r0
 8008636:	d00b      	beq.n	8008650 <__lo0bits+0x22>
 8008638:	07da      	lsls	r2, r3, #31
 800863a:	d423      	bmi.n	8008684 <__lo0bits+0x56>
 800863c:	0798      	lsls	r0, r3, #30
 800863e:	bf49      	itett	mi
 8008640:	085b      	lsrmi	r3, r3, #1
 8008642:	089b      	lsrpl	r3, r3, #2
 8008644:	2001      	movmi	r0, #1
 8008646:	600b      	strmi	r3, [r1, #0]
 8008648:	bf5c      	itt	pl
 800864a:	600b      	strpl	r3, [r1, #0]
 800864c:	2002      	movpl	r0, #2
 800864e:	4770      	bx	lr
 8008650:	b298      	uxth	r0, r3
 8008652:	b9a8      	cbnz	r0, 8008680 <__lo0bits+0x52>
 8008654:	0c1b      	lsrs	r3, r3, #16
 8008656:	2010      	movs	r0, #16
 8008658:	f013 0fff 	tst.w	r3, #255	; 0xff
 800865c:	bf04      	itt	eq
 800865e:	0a1b      	lsreq	r3, r3, #8
 8008660:	3008      	addeq	r0, #8
 8008662:	071a      	lsls	r2, r3, #28
 8008664:	bf04      	itt	eq
 8008666:	091b      	lsreq	r3, r3, #4
 8008668:	3004      	addeq	r0, #4
 800866a:	079a      	lsls	r2, r3, #30
 800866c:	bf04      	itt	eq
 800866e:	089b      	lsreq	r3, r3, #2
 8008670:	3002      	addeq	r0, #2
 8008672:	07da      	lsls	r2, r3, #31
 8008674:	d402      	bmi.n	800867c <__lo0bits+0x4e>
 8008676:	085b      	lsrs	r3, r3, #1
 8008678:	d006      	beq.n	8008688 <__lo0bits+0x5a>
 800867a:	3001      	adds	r0, #1
 800867c:	600b      	str	r3, [r1, #0]
 800867e:	4770      	bx	lr
 8008680:	4610      	mov	r0, r2
 8008682:	e7e9      	b.n	8008658 <__lo0bits+0x2a>
 8008684:	2000      	movs	r0, #0
 8008686:	4770      	bx	lr
 8008688:	2020      	movs	r0, #32
 800868a:	4770      	bx	lr

0800868c <__i2b>:
 800868c:	b510      	push	{r4, lr}
 800868e:	460c      	mov	r4, r1
 8008690:	2101      	movs	r1, #1
 8008692:	f7ff ff27 	bl	80084e4 <_Balloc>
 8008696:	2201      	movs	r2, #1
 8008698:	6144      	str	r4, [r0, #20]
 800869a:	6102      	str	r2, [r0, #16]
 800869c:	bd10      	pop	{r4, pc}

0800869e <__multiply>:
 800869e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086a2:	4614      	mov	r4, r2
 80086a4:	690a      	ldr	r2, [r1, #16]
 80086a6:	6923      	ldr	r3, [r4, #16]
 80086a8:	429a      	cmp	r2, r3
 80086aa:	bfb8      	it	lt
 80086ac:	460b      	movlt	r3, r1
 80086ae:	4688      	mov	r8, r1
 80086b0:	bfbc      	itt	lt
 80086b2:	46a0      	movlt	r8, r4
 80086b4:	461c      	movlt	r4, r3
 80086b6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80086ba:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80086be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80086c2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80086c6:	eb07 0609 	add.w	r6, r7, r9
 80086ca:	42b3      	cmp	r3, r6
 80086cc:	bfb8      	it	lt
 80086ce:	3101      	addlt	r1, #1
 80086d0:	f7ff ff08 	bl	80084e4 <_Balloc>
 80086d4:	f100 0514 	add.w	r5, r0, #20
 80086d8:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80086dc:	462b      	mov	r3, r5
 80086de:	2200      	movs	r2, #0
 80086e0:	4573      	cmp	r3, lr
 80086e2:	d316      	bcc.n	8008712 <__multiply+0x74>
 80086e4:	f104 0214 	add.w	r2, r4, #20
 80086e8:	f108 0114 	add.w	r1, r8, #20
 80086ec:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80086f0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80086f4:	9300      	str	r3, [sp, #0]
 80086f6:	9b00      	ldr	r3, [sp, #0]
 80086f8:	9201      	str	r2, [sp, #4]
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d80c      	bhi.n	8008718 <__multiply+0x7a>
 80086fe:	2e00      	cmp	r6, #0
 8008700:	dd03      	ble.n	800870a <__multiply+0x6c>
 8008702:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008706:	2b00      	cmp	r3, #0
 8008708:	d05d      	beq.n	80087c6 <__multiply+0x128>
 800870a:	6106      	str	r6, [r0, #16]
 800870c:	b003      	add	sp, #12
 800870e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008712:	f843 2b04 	str.w	r2, [r3], #4
 8008716:	e7e3      	b.n	80086e0 <__multiply+0x42>
 8008718:	f8b2 b000 	ldrh.w	fp, [r2]
 800871c:	f1bb 0f00 	cmp.w	fp, #0
 8008720:	d023      	beq.n	800876a <__multiply+0xcc>
 8008722:	4689      	mov	r9, r1
 8008724:	46ac      	mov	ip, r5
 8008726:	f04f 0800 	mov.w	r8, #0
 800872a:	f859 4b04 	ldr.w	r4, [r9], #4
 800872e:	f8dc a000 	ldr.w	sl, [ip]
 8008732:	b2a3      	uxth	r3, r4
 8008734:	fa1f fa8a 	uxth.w	sl, sl
 8008738:	fb0b a303 	mla	r3, fp, r3, sl
 800873c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008740:	f8dc 4000 	ldr.w	r4, [ip]
 8008744:	4443      	add	r3, r8
 8008746:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800874a:	fb0b 840a 	mla	r4, fp, sl, r8
 800874e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008752:	46e2      	mov	sl, ip
 8008754:	b29b      	uxth	r3, r3
 8008756:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800875a:	454f      	cmp	r7, r9
 800875c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008760:	f84a 3b04 	str.w	r3, [sl], #4
 8008764:	d82b      	bhi.n	80087be <__multiply+0x120>
 8008766:	f8cc 8004 	str.w	r8, [ip, #4]
 800876a:	9b01      	ldr	r3, [sp, #4]
 800876c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8008770:	3204      	adds	r2, #4
 8008772:	f1ba 0f00 	cmp.w	sl, #0
 8008776:	d020      	beq.n	80087ba <__multiply+0x11c>
 8008778:	682b      	ldr	r3, [r5, #0]
 800877a:	4689      	mov	r9, r1
 800877c:	46a8      	mov	r8, r5
 800877e:	f04f 0b00 	mov.w	fp, #0
 8008782:	f8b9 c000 	ldrh.w	ip, [r9]
 8008786:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800878a:	fb0a 440c 	mla	r4, sl, ip, r4
 800878e:	445c      	add	r4, fp
 8008790:	46c4      	mov	ip, r8
 8008792:	b29b      	uxth	r3, r3
 8008794:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008798:	f84c 3b04 	str.w	r3, [ip], #4
 800879c:	f859 3b04 	ldr.w	r3, [r9], #4
 80087a0:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80087a4:	0c1b      	lsrs	r3, r3, #16
 80087a6:	fb0a b303 	mla	r3, sl, r3, fp
 80087aa:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80087ae:	454f      	cmp	r7, r9
 80087b0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80087b4:	d805      	bhi.n	80087c2 <__multiply+0x124>
 80087b6:	f8c8 3004 	str.w	r3, [r8, #4]
 80087ba:	3504      	adds	r5, #4
 80087bc:	e79b      	b.n	80086f6 <__multiply+0x58>
 80087be:	46d4      	mov	ip, sl
 80087c0:	e7b3      	b.n	800872a <__multiply+0x8c>
 80087c2:	46e0      	mov	r8, ip
 80087c4:	e7dd      	b.n	8008782 <__multiply+0xe4>
 80087c6:	3e01      	subs	r6, #1
 80087c8:	e799      	b.n	80086fe <__multiply+0x60>
	...

080087cc <__pow5mult>:
 80087cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087d0:	4615      	mov	r5, r2
 80087d2:	f012 0203 	ands.w	r2, r2, #3
 80087d6:	4606      	mov	r6, r0
 80087d8:	460f      	mov	r7, r1
 80087da:	d007      	beq.n	80087ec <__pow5mult+0x20>
 80087dc:	3a01      	subs	r2, #1
 80087de:	4c21      	ldr	r4, [pc, #132]	; (8008864 <__pow5mult+0x98>)
 80087e0:	2300      	movs	r3, #0
 80087e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80087e6:	f7ff fec8 	bl	800857a <__multadd>
 80087ea:	4607      	mov	r7, r0
 80087ec:	10ad      	asrs	r5, r5, #2
 80087ee:	d035      	beq.n	800885c <__pow5mult+0x90>
 80087f0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80087f2:	b93c      	cbnz	r4, 8008804 <__pow5mult+0x38>
 80087f4:	2010      	movs	r0, #16
 80087f6:	f7ff fe6d 	bl	80084d4 <malloc>
 80087fa:	6270      	str	r0, [r6, #36]	; 0x24
 80087fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008800:	6004      	str	r4, [r0, #0]
 8008802:	60c4      	str	r4, [r0, #12]
 8008804:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008808:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800880c:	b94c      	cbnz	r4, 8008822 <__pow5mult+0x56>
 800880e:	f240 2171 	movw	r1, #625	; 0x271
 8008812:	4630      	mov	r0, r6
 8008814:	f7ff ff3a 	bl	800868c <__i2b>
 8008818:	2300      	movs	r3, #0
 800881a:	f8c8 0008 	str.w	r0, [r8, #8]
 800881e:	4604      	mov	r4, r0
 8008820:	6003      	str	r3, [r0, #0]
 8008822:	f04f 0800 	mov.w	r8, #0
 8008826:	07eb      	lsls	r3, r5, #31
 8008828:	d50a      	bpl.n	8008840 <__pow5mult+0x74>
 800882a:	4639      	mov	r1, r7
 800882c:	4622      	mov	r2, r4
 800882e:	4630      	mov	r0, r6
 8008830:	f7ff ff35 	bl	800869e <__multiply>
 8008834:	4639      	mov	r1, r7
 8008836:	4681      	mov	r9, r0
 8008838:	4630      	mov	r0, r6
 800883a:	f7ff fe87 	bl	800854c <_Bfree>
 800883e:	464f      	mov	r7, r9
 8008840:	106d      	asrs	r5, r5, #1
 8008842:	d00b      	beq.n	800885c <__pow5mult+0x90>
 8008844:	6820      	ldr	r0, [r4, #0]
 8008846:	b938      	cbnz	r0, 8008858 <__pow5mult+0x8c>
 8008848:	4622      	mov	r2, r4
 800884a:	4621      	mov	r1, r4
 800884c:	4630      	mov	r0, r6
 800884e:	f7ff ff26 	bl	800869e <__multiply>
 8008852:	6020      	str	r0, [r4, #0]
 8008854:	f8c0 8000 	str.w	r8, [r0]
 8008858:	4604      	mov	r4, r0
 800885a:	e7e4      	b.n	8008826 <__pow5mult+0x5a>
 800885c:	4638      	mov	r0, r7
 800885e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008862:	bf00      	nop
 8008864:	0800a5d8 	.word	0x0800a5d8

08008868 <__lshift>:
 8008868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800886c:	460c      	mov	r4, r1
 800886e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008872:	6923      	ldr	r3, [r4, #16]
 8008874:	6849      	ldr	r1, [r1, #4]
 8008876:	eb0a 0903 	add.w	r9, sl, r3
 800887a:	68a3      	ldr	r3, [r4, #8]
 800887c:	4607      	mov	r7, r0
 800887e:	4616      	mov	r6, r2
 8008880:	f109 0501 	add.w	r5, r9, #1
 8008884:	42ab      	cmp	r3, r5
 8008886:	db32      	blt.n	80088ee <__lshift+0x86>
 8008888:	4638      	mov	r0, r7
 800888a:	f7ff fe2b 	bl	80084e4 <_Balloc>
 800888e:	2300      	movs	r3, #0
 8008890:	4680      	mov	r8, r0
 8008892:	f100 0114 	add.w	r1, r0, #20
 8008896:	461a      	mov	r2, r3
 8008898:	4553      	cmp	r3, sl
 800889a:	db2b      	blt.n	80088f4 <__lshift+0x8c>
 800889c:	6920      	ldr	r0, [r4, #16]
 800889e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80088a2:	f104 0314 	add.w	r3, r4, #20
 80088a6:	f016 021f 	ands.w	r2, r6, #31
 80088aa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80088ae:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80088b2:	d025      	beq.n	8008900 <__lshift+0x98>
 80088b4:	f1c2 0e20 	rsb	lr, r2, #32
 80088b8:	2000      	movs	r0, #0
 80088ba:	681e      	ldr	r6, [r3, #0]
 80088bc:	468a      	mov	sl, r1
 80088be:	4096      	lsls	r6, r2
 80088c0:	4330      	orrs	r0, r6
 80088c2:	f84a 0b04 	str.w	r0, [sl], #4
 80088c6:	f853 0b04 	ldr.w	r0, [r3], #4
 80088ca:	459c      	cmp	ip, r3
 80088cc:	fa20 f00e 	lsr.w	r0, r0, lr
 80088d0:	d814      	bhi.n	80088fc <__lshift+0x94>
 80088d2:	6048      	str	r0, [r1, #4]
 80088d4:	b108      	cbz	r0, 80088da <__lshift+0x72>
 80088d6:	f109 0502 	add.w	r5, r9, #2
 80088da:	3d01      	subs	r5, #1
 80088dc:	4638      	mov	r0, r7
 80088de:	f8c8 5010 	str.w	r5, [r8, #16]
 80088e2:	4621      	mov	r1, r4
 80088e4:	f7ff fe32 	bl	800854c <_Bfree>
 80088e8:	4640      	mov	r0, r8
 80088ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088ee:	3101      	adds	r1, #1
 80088f0:	005b      	lsls	r3, r3, #1
 80088f2:	e7c7      	b.n	8008884 <__lshift+0x1c>
 80088f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80088f8:	3301      	adds	r3, #1
 80088fa:	e7cd      	b.n	8008898 <__lshift+0x30>
 80088fc:	4651      	mov	r1, sl
 80088fe:	e7dc      	b.n	80088ba <__lshift+0x52>
 8008900:	3904      	subs	r1, #4
 8008902:	f853 2b04 	ldr.w	r2, [r3], #4
 8008906:	f841 2f04 	str.w	r2, [r1, #4]!
 800890a:	459c      	cmp	ip, r3
 800890c:	d8f9      	bhi.n	8008902 <__lshift+0x9a>
 800890e:	e7e4      	b.n	80088da <__lshift+0x72>

08008910 <__mcmp>:
 8008910:	6903      	ldr	r3, [r0, #16]
 8008912:	690a      	ldr	r2, [r1, #16]
 8008914:	1a9b      	subs	r3, r3, r2
 8008916:	b530      	push	{r4, r5, lr}
 8008918:	d10c      	bne.n	8008934 <__mcmp+0x24>
 800891a:	0092      	lsls	r2, r2, #2
 800891c:	3014      	adds	r0, #20
 800891e:	3114      	adds	r1, #20
 8008920:	1884      	adds	r4, r0, r2
 8008922:	4411      	add	r1, r2
 8008924:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008928:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800892c:	4295      	cmp	r5, r2
 800892e:	d003      	beq.n	8008938 <__mcmp+0x28>
 8008930:	d305      	bcc.n	800893e <__mcmp+0x2e>
 8008932:	2301      	movs	r3, #1
 8008934:	4618      	mov	r0, r3
 8008936:	bd30      	pop	{r4, r5, pc}
 8008938:	42a0      	cmp	r0, r4
 800893a:	d3f3      	bcc.n	8008924 <__mcmp+0x14>
 800893c:	e7fa      	b.n	8008934 <__mcmp+0x24>
 800893e:	f04f 33ff 	mov.w	r3, #4294967295
 8008942:	e7f7      	b.n	8008934 <__mcmp+0x24>

08008944 <__mdiff>:
 8008944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008948:	460d      	mov	r5, r1
 800894a:	4607      	mov	r7, r0
 800894c:	4611      	mov	r1, r2
 800894e:	4628      	mov	r0, r5
 8008950:	4614      	mov	r4, r2
 8008952:	f7ff ffdd 	bl	8008910 <__mcmp>
 8008956:	1e06      	subs	r6, r0, #0
 8008958:	d108      	bne.n	800896c <__mdiff+0x28>
 800895a:	4631      	mov	r1, r6
 800895c:	4638      	mov	r0, r7
 800895e:	f7ff fdc1 	bl	80084e4 <_Balloc>
 8008962:	2301      	movs	r3, #1
 8008964:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800896c:	bfa4      	itt	ge
 800896e:	4623      	movge	r3, r4
 8008970:	462c      	movge	r4, r5
 8008972:	4638      	mov	r0, r7
 8008974:	6861      	ldr	r1, [r4, #4]
 8008976:	bfa6      	itte	ge
 8008978:	461d      	movge	r5, r3
 800897a:	2600      	movge	r6, #0
 800897c:	2601      	movlt	r6, #1
 800897e:	f7ff fdb1 	bl	80084e4 <_Balloc>
 8008982:	692b      	ldr	r3, [r5, #16]
 8008984:	60c6      	str	r6, [r0, #12]
 8008986:	6926      	ldr	r6, [r4, #16]
 8008988:	f105 0914 	add.w	r9, r5, #20
 800898c:	f104 0214 	add.w	r2, r4, #20
 8008990:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008994:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008998:	f100 0514 	add.w	r5, r0, #20
 800899c:	f04f 0e00 	mov.w	lr, #0
 80089a0:	f852 ab04 	ldr.w	sl, [r2], #4
 80089a4:	f859 4b04 	ldr.w	r4, [r9], #4
 80089a8:	fa1e f18a 	uxtah	r1, lr, sl
 80089ac:	b2a3      	uxth	r3, r4
 80089ae:	1ac9      	subs	r1, r1, r3
 80089b0:	0c23      	lsrs	r3, r4, #16
 80089b2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80089b6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80089ba:	b289      	uxth	r1, r1
 80089bc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80089c0:	45c8      	cmp	r8, r9
 80089c2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80089c6:	4694      	mov	ip, r2
 80089c8:	f845 3b04 	str.w	r3, [r5], #4
 80089cc:	d8e8      	bhi.n	80089a0 <__mdiff+0x5c>
 80089ce:	45bc      	cmp	ip, r7
 80089d0:	d304      	bcc.n	80089dc <__mdiff+0x98>
 80089d2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80089d6:	b183      	cbz	r3, 80089fa <__mdiff+0xb6>
 80089d8:	6106      	str	r6, [r0, #16]
 80089da:	e7c5      	b.n	8008968 <__mdiff+0x24>
 80089dc:	f85c 1b04 	ldr.w	r1, [ip], #4
 80089e0:	fa1e f381 	uxtah	r3, lr, r1
 80089e4:	141a      	asrs	r2, r3, #16
 80089e6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80089ea:	b29b      	uxth	r3, r3
 80089ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80089f0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80089f4:	f845 3b04 	str.w	r3, [r5], #4
 80089f8:	e7e9      	b.n	80089ce <__mdiff+0x8a>
 80089fa:	3e01      	subs	r6, #1
 80089fc:	e7e9      	b.n	80089d2 <__mdiff+0x8e>

080089fe <__d2b>:
 80089fe:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008a02:	460e      	mov	r6, r1
 8008a04:	2101      	movs	r1, #1
 8008a06:	ec59 8b10 	vmov	r8, r9, d0
 8008a0a:	4615      	mov	r5, r2
 8008a0c:	f7ff fd6a 	bl	80084e4 <_Balloc>
 8008a10:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008a14:	4607      	mov	r7, r0
 8008a16:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008a1a:	bb34      	cbnz	r4, 8008a6a <__d2b+0x6c>
 8008a1c:	9301      	str	r3, [sp, #4]
 8008a1e:	f1b8 0300 	subs.w	r3, r8, #0
 8008a22:	d027      	beq.n	8008a74 <__d2b+0x76>
 8008a24:	a802      	add	r0, sp, #8
 8008a26:	f840 3d08 	str.w	r3, [r0, #-8]!
 8008a2a:	f7ff fe00 	bl	800862e <__lo0bits>
 8008a2e:	9900      	ldr	r1, [sp, #0]
 8008a30:	b1f0      	cbz	r0, 8008a70 <__d2b+0x72>
 8008a32:	9a01      	ldr	r2, [sp, #4]
 8008a34:	f1c0 0320 	rsb	r3, r0, #32
 8008a38:	fa02 f303 	lsl.w	r3, r2, r3
 8008a3c:	430b      	orrs	r3, r1
 8008a3e:	40c2      	lsrs	r2, r0
 8008a40:	617b      	str	r3, [r7, #20]
 8008a42:	9201      	str	r2, [sp, #4]
 8008a44:	9b01      	ldr	r3, [sp, #4]
 8008a46:	61bb      	str	r3, [r7, #24]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	bf14      	ite	ne
 8008a4c:	2102      	movne	r1, #2
 8008a4e:	2101      	moveq	r1, #1
 8008a50:	6139      	str	r1, [r7, #16]
 8008a52:	b1c4      	cbz	r4, 8008a86 <__d2b+0x88>
 8008a54:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008a58:	4404      	add	r4, r0
 8008a5a:	6034      	str	r4, [r6, #0]
 8008a5c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008a60:	6028      	str	r0, [r5, #0]
 8008a62:	4638      	mov	r0, r7
 8008a64:	b003      	add	sp, #12
 8008a66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008a6e:	e7d5      	b.n	8008a1c <__d2b+0x1e>
 8008a70:	6179      	str	r1, [r7, #20]
 8008a72:	e7e7      	b.n	8008a44 <__d2b+0x46>
 8008a74:	a801      	add	r0, sp, #4
 8008a76:	f7ff fdda 	bl	800862e <__lo0bits>
 8008a7a:	9b01      	ldr	r3, [sp, #4]
 8008a7c:	617b      	str	r3, [r7, #20]
 8008a7e:	2101      	movs	r1, #1
 8008a80:	6139      	str	r1, [r7, #16]
 8008a82:	3020      	adds	r0, #32
 8008a84:	e7e5      	b.n	8008a52 <__d2b+0x54>
 8008a86:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008a8a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008a8e:	6030      	str	r0, [r6, #0]
 8008a90:	6918      	ldr	r0, [r3, #16]
 8008a92:	f7ff fdad 	bl	80085f0 <__hi0bits>
 8008a96:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008a9a:	e7e1      	b.n	8008a60 <__d2b+0x62>

08008a9c <_calloc_r>:
 8008a9c:	b538      	push	{r3, r4, r5, lr}
 8008a9e:	fb02 f401 	mul.w	r4, r2, r1
 8008aa2:	4621      	mov	r1, r4
 8008aa4:	f000 f856 	bl	8008b54 <_malloc_r>
 8008aa8:	4605      	mov	r5, r0
 8008aaa:	b118      	cbz	r0, 8008ab4 <_calloc_r+0x18>
 8008aac:	4622      	mov	r2, r4
 8008aae:	2100      	movs	r1, #0
 8008ab0:	f7fe fa3a 	bl	8006f28 <memset>
 8008ab4:	4628      	mov	r0, r5
 8008ab6:	bd38      	pop	{r3, r4, r5, pc}

08008ab8 <_free_r>:
 8008ab8:	b538      	push	{r3, r4, r5, lr}
 8008aba:	4605      	mov	r5, r0
 8008abc:	2900      	cmp	r1, #0
 8008abe:	d045      	beq.n	8008b4c <_free_r+0x94>
 8008ac0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ac4:	1f0c      	subs	r4, r1, #4
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	bfb8      	it	lt
 8008aca:	18e4      	addlt	r4, r4, r3
 8008acc:	f000 fa29 	bl	8008f22 <__malloc_lock>
 8008ad0:	4a1f      	ldr	r2, [pc, #124]	; (8008b50 <_free_r+0x98>)
 8008ad2:	6813      	ldr	r3, [r2, #0]
 8008ad4:	4610      	mov	r0, r2
 8008ad6:	b933      	cbnz	r3, 8008ae6 <_free_r+0x2e>
 8008ad8:	6063      	str	r3, [r4, #4]
 8008ada:	6014      	str	r4, [r2, #0]
 8008adc:	4628      	mov	r0, r5
 8008ade:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ae2:	f000 ba1f 	b.w	8008f24 <__malloc_unlock>
 8008ae6:	42a3      	cmp	r3, r4
 8008ae8:	d90c      	bls.n	8008b04 <_free_r+0x4c>
 8008aea:	6821      	ldr	r1, [r4, #0]
 8008aec:	1862      	adds	r2, r4, r1
 8008aee:	4293      	cmp	r3, r2
 8008af0:	bf04      	itt	eq
 8008af2:	681a      	ldreq	r2, [r3, #0]
 8008af4:	685b      	ldreq	r3, [r3, #4]
 8008af6:	6063      	str	r3, [r4, #4]
 8008af8:	bf04      	itt	eq
 8008afa:	1852      	addeq	r2, r2, r1
 8008afc:	6022      	streq	r2, [r4, #0]
 8008afe:	6004      	str	r4, [r0, #0]
 8008b00:	e7ec      	b.n	8008adc <_free_r+0x24>
 8008b02:	4613      	mov	r3, r2
 8008b04:	685a      	ldr	r2, [r3, #4]
 8008b06:	b10a      	cbz	r2, 8008b0c <_free_r+0x54>
 8008b08:	42a2      	cmp	r2, r4
 8008b0a:	d9fa      	bls.n	8008b02 <_free_r+0x4a>
 8008b0c:	6819      	ldr	r1, [r3, #0]
 8008b0e:	1858      	adds	r0, r3, r1
 8008b10:	42a0      	cmp	r0, r4
 8008b12:	d10b      	bne.n	8008b2c <_free_r+0x74>
 8008b14:	6820      	ldr	r0, [r4, #0]
 8008b16:	4401      	add	r1, r0
 8008b18:	1858      	adds	r0, r3, r1
 8008b1a:	4282      	cmp	r2, r0
 8008b1c:	6019      	str	r1, [r3, #0]
 8008b1e:	d1dd      	bne.n	8008adc <_free_r+0x24>
 8008b20:	6810      	ldr	r0, [r2, #0]
 8008b22:	6852      	ldr	r2, [r2, #4]
 8008b24:	605a      	str	r2, [r3, #4]
 8008b26:	4401      	add	r1, r0
 8008b28:	6019      	str	r1, [r3, #0]
 8008b2a:	e7d7      	b.n	8008adc <_free_r+0x24>
 8008b2c:	d902      	bls.n	8008b34 <_free_r+0x7c>
 8008b2e:	230c      	movs	r3, #12
 8008b30:	602b      	str	r3, [r5, #0]
 8008b32:	e7d3      	b.n	8008adc <_free_r+0x24>
 8008b34:	6820      	ldr	r0, [r4, #0]
 8008b36:	1821      	adds	r1, r4, r0
 8008b38:	428a      	cmp	r2, r1
 8008b3a:	bf04      	itt	eq
 8008b3c:	6811      	ldreq	r1, [r2, #0]
 8008b3e:	6852      	ldreq	r2, [r2, #4]
 8008b40:	6062      	str	r2, [r4, #4]
 8008b42:	bf04      	itt	eq
 8008b44:	1809      	addeq	r1, r1, r0
 8008b46:	6021      	streq	r1, [r4, #0]
 8008b48:	605c      	str	r4, [r3, #4]
 8008b4a:	e7c7      	b.n	8008adc <_free_r+0x24>
 8008b4c:	bd38      	pop	{r3, r4, r5, pc}
 8008b4e:	bf00      	nop
 8008b50:	200007e4 	.word	0x200007e4

08008b54 <_malloc_r>:
 8008b54:	b570      	push	{r4, r5, r6, lr}
 8008b56:	1ccd      	adds	r5, r1, #3
 8008b58:	f025 0503 	bic.w	r5, r5, #3
 8008b5c:	3508      	adds	r5, #8
 8008b5e:	2d0c      	cmp	r5, #12
 8008b60:	bf38      	it	cc
 8008b62:	250c      	movcc	r5, #12
 8008b64:	2d00      	cmp	r5, #0
 8008b66:	4606      	mov	r6, r0
 8008b68:	db01      	blt.n	8008b6e <_malloc_r+0x1a>
 8008b6a:	42a9      	cmp	r1, r5
 8008b6c:	d903      	bls.n	8008b76 <_malloc_r+0x22>
 8008b6e:	230c      	movs	r3, #12
 8008b70:	6033      	str	r3, [r6, #0]
 8008b72:	2000      	movs	r0, #0
 8008b74:	bd70      	pop	{r4, r5, r6, pc}
 8008b76:	f000 f9d4 	bl	8008f22 <__malloc_lock>
 8008b7a:	4a21      	ldr	r2, [pc, #132]	; (8008c00 <_malloc_r+0xac>)
 8008b7c:	6814      	ldr	r4, [r2, #0]
 8008b7e:	4621      	mov	r1, r4
 8008b80:	b991      	cbnz	r1, 8008ba8 <_malloc_r+0x54>
 8008b82:	4c20      	ldr	r4, [pc, #128]	; (8008c04 <_malloc_r+0xb0>)
 8008b84:	6823      	ldr	r3, [r4, #0]
 8008b86:	b91b      	cbnz	r3, 8008b90 <_malloc_r+0x3c>
 8008b88:	4630      	mov	r0, r6
 8008b8a:	f000 f98f 	bl	8008eac <_sbrk_r>
 8008b8e:	6020      	str	r0, [r4, #0]
 8008b90:	4629      	mov	r1, r5
 8008b92:	4630      	mov	r0, r6
 8008b94:	f000 f98a 	bl	8008eac <_sbrk_r>
 8008b98:	1c43      	adds	r3, r0, #1
 8008b9a:	d124      	bne.n	8008be6 <_malloc_r+0x92>
 8008b9c:	230c      	movs	r3, #12
 8008b9e:	6033      	str	r3, [r6, #0]
 8008ba0:	4630      	mov	r0, r6
 8008ba2:	f000 f9bf 	bl	8008f24 <__malloc_unlock>
 8008ba6:	e7e4      	b.n	8008b72 <_malloc_r+0x1e>
 8008ba8:	680b      	ldr	r3, [r1, #0]
 8008baa:	1b5b      	subs	r3, r3, r5
 8008bac:	d418      	bmi.n	8008be0 <_malloc_r+0x8c>
 8008bae:	2b0b      	cmp	r3, #11
 8008bb0:	d90f      	bls.n	8008bd2 <_malloc_r+0x7e>
 8008bb2:	600b      	str	r3, [r1, #0]
 8008bb4:	50cd      	str	r5, [r1, r3]
 8008bb6:	18cc      	adds	r4, r1, r3
 8008bb8:	4630      	mov	r0, r6
 8008bba:	f000 f9b3 	bl	8008f24 <__malloc_unlock>
 8008bbe:	f104 000b 	add.w	r0, r4, #11
 8008bc2:	1d23      	adds	r3, r4, #4
 8008bc4:	f020 0007 	bic.w	r0, r0, #7
 8008bc8:	1ac3      	subs	r3, r0, r3
 8008bca:	d0d3      	beq.n	8008b74 <_malloc_r+0x20>
 8008bcc:	425a      	negs	r2, r3
 8008bce:	50e2      	str	r2, [r4, r3]
 8008bd0:	e7d0      	b.n	8008b74 <_malloc_r+0x20>
 8008bd2:	428c      	cmp	r4, r1
 8008bd4:	684b      	ldr	r3, [r1, #4]
 8008bd6:	bf16      	itet	ne
 8008bd8:	6063      	strne	r3, [r4, #4]
 8008bda:	6013      	streq	r3, [r2, #0]
 8008bdc:	460c      	movne	r4, r1
 8008bde:	e7eb      	b.n	8008bb8 <_malloc_r+0x64>
 8008be0:	460c      	mov	r4, r1
 8008be2:	6849      	ldr	r1, [r1, #4]
 8008be4:	e7cc      	b.n	8008b80 <_malloc_r+0x2c>
 8008be6:	1cc4      	adds	r4, r0, #3
 8008be8:	f024 0403 	bic.w	r4, r4, #3
 8008bec:	42a0      	cmp	r0, r4
 8008bee:	d005      	beq.n	8008bfc <_malloc_r+0xa8>
 8008bf0:	1a21      	subs	r1, r4, r0
 8008bf2:	4630      	mov	r0, r6
 8008bf4:	f000 f95a 	bl	8008eac <_sbrk_r>
 8008bf8:	3001      	adds	r0, #1
 8008bfa:	d0cf      	beq.n	8008b9c <_malloc_r+0x48>
 8008bfc:	6025      	str	r5, [r4, #0]
 8008bfe:	e7db      	b.n	8008bb8 <_malloc_r+0x64>
 8008c00:	200007e4 	.word	0x200007e4
 8008c04:	200007e8 	.word	0x200007e8

08008c08 <__ssputs_r>:
 8008c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c0c:	688e      	ldr	r6, [r1, #8]
 8008c0e:	429e      	cmp	r6, r3
 8008c10:	4682      	mov	sl, r0
 8008c12:	460c      	mov	r4, r1
 8008c14:	4690      	mov	r8, r2
 8008c16:	4699      	mov	r9, r3
 8008c18:	d837      	bhi.n	8008c8a <__ssputs_r+0x82>
 8008c1a:	898a      	ldrh	r2, [r1, #12]
 8008c1c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008c20:	d031      	beq.n	8008c86 <__ssputs_r+0x7e>
 8008c22:	6825      	ldr	r5, [r4, #0]
 8008c24:	6909      	ldr	r1, [r1, #16]
 8008c26:	1a6f      	subs	r7, r5, r1
 8008c28:	6965      	ldr	r5, [r4, #20]
 8008c2a:	2302      	movs	r3, #2
 8008c2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c30:	fb95 f5f3 	sdiv	r5, r5, r3
 8008c34:	f109 0301 	add.w	r3, r9, #1
 8008c38:	443b      	add	r3, r7
 8008c3a:	429d      	cmp	r5, r3
 8008c3c:	bf38      	it	cc
 8008c3e:	461d      	movcc	r5, r3
 8008c40:	0553      	lsls	r3, r2, #21
 8008c42:	d530      	bpl.n	8008ca6 <__ssputs_r+0x9e>
 8008c44:	4629      	mov	r1, r5
 8008c46:	f7ff ff85 	bl	8008b54 <_malloc_r>
 8008c4a:	4606      	mov	r6, r0
 8008c4c:	b950      	cbnz	r0, 8008c64 <__ssputs_r+0x5c>
 8008c4e:	230c      	movs	r3, #12
 8008c50:	f8ca 3000 	str.w	r3, [sl]
 8008c54:	89a3      	ldrh	r3, [r4, #12]
 8008c56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c5a:	81a3      	strh	r3, [r4, #12]
 8008c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c64:	463a      	mov	r2, r7
 8008c66:	6921      	ldr	r1, [r4, #16]
 8008c68:	f7fe f953 	bl	8006f12 <memcpy>
 8008c6c:	89a3      	ldrh	r3, [r4, #12]
 8008c6e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008c72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c76:	81a3      	strh	r3, [r4, #12]
 8008c78:	6126      	str	r6, [r4, #16]
 8008c7a:	6165      	str	r5, [r4, #20]
 8008c7c:	443e      	add	r6, r7
 8008c7e:	1bed      	subs	r5, r5, r7
 8008c80:	6026      	str	r6, [r4, #0]
 8008c82:	60a5      	str	r5, [r4, #8]
 8008c84:	464e      	mov	r6, r9
 8008c86:	454e      	cmp	r6, r9
 8008c88:	d900      	bls.n	8008c8c <__ssputs_r+0x84>
 8008c8a:	464e      	mov	r6, r9
 8008c8c:	4632      	mov	r2, r6
 8008c8e:	4641      	mov	r1, r8
 8008c90:	6820      	ldr	r0, [r4, #0]
 8008c92:	f000 f92d 	bl	8008ef0 <memmove>
 8008c96:	68a3      	ldr	r3, [r4, #8]
 8008c98:	1b9b      	subs	r3, r3, r6
 8008c9a:	60a3      	str	r3, [r4, #8]
 8008c9c:	6823      	ldr	r3, [r4, #0]
 8008c9e:	441e      	add	r6, r3
 8008ca0:	6026      	str	r6, [r4, #0]
 8008ca2:	2000      	movs	r0, #0
 8008ca4:	e7dc      	b.n	8008c60 <__ssputs_r+0x58>
 8008ca6:	462a      	mov	r2, r5
 8008ca8:	f000 f93d 	bl	8008f26 <_realloc_r>
 8008cac:	4606      	mov	r6, r0
 8008cae:	2800      	cmp	r0, #0
 8008cb0:	d1e2      	bne.n	8008c78 <__ssputs_r+0x70>
 8008cb2:	6921      	ldr	r1, [r4, #16]
 8008cb4:	4650      	mov	r0, sl
 8008cb6:	f7ff feff 	bl	8008ab8 <_free_r>
 8008cba:	e7c8      	b.n	8008c4e <__ssputs_r+0x46>

08008cbc <_svfiprintf_r>:
 8008cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cc0:	461d      	mov	r5, r3
 8008cc2:	898b      	ldrh	r3, [r1, #12]
 8008cc4:	061f      	lsls	r7, r3, #24
 8008cc6:	b09d      	sub	sp, #116	; 0x74
 8008cc8:	4680      	mov	r8, r0
 8008cca:	460c      	mov	r4, r1
 8008ccc:	4616      	mov	r6, r2
 8008cce:	d50f      	bpl.n	8008cf0 <_svfiprintf_r+0x34>
 8008cd0:	690b      	ldr	r3, [r1, #16]
 8008cd2:	b96b      	cbnz	r3, 8008cf0 <_svfiprintf_r+0x34>
 8008cd4:	2140      	movs	r1, #64	; 0x40
 8008cd6:	f7ff ff3d 	bl	8008b54 <_malloc_r>
 8008cda:	6020      	str	r0, [r4, #0]
 8008cdc:	6120      	str	r0, [r4, #16]
 8008cde:	b928      	cbnz	r0, 8008cec <_svfiprintf_r+0x30>
 8008ce0:	230c      	movs	r3, #12
 8008ce2:	f8c8 3000 	str.w	r3, [r8]
 8008ce6:	f04f 30ff 	mov.w	r0, #4294967295
 8008cea:	e0c8      	b.n	8008e7e <_svfiprintf_r+0x1c2>
 8008cec:	2340      	movs	r3, #64	; 0x40
 8008cee:	6163      	str	r3, [r4, #20]
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	9309      	str	r3, [sp, #36]	; 0x24
 8008cf4:	2320      	movs	r3, #32
 8008cf6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008cfa:	2330      	movs	r3, #48	; 0x30
 8008cfc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d00:	9503      	str	r5, [sp, #12]
 8008d02:	f04f 0b01 	mov.w	fp, #1
 8008d06:	4637      	mov	r7, r6
 8008d08:	463d      	mov	r5, r7
 8008d0a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008d0e:	b10b      	cbz	r3, 8008d14 <_svfiprintf_r+0x58>
 8008d10:	2b25      	cmp	r3, #37	; 0x25
 8008d12:	d13e      	bne.n	8008d92 <_svfiprintf_r+0xd6>
 8008d14:	ebb7 0a06 	subs.w	sl, r7, r6
 8008d18:	d00b      	beq.n	8008d32 <_svfiprintf_r+0x76>
 8008d1a:	4653      	mov	r3, sl
 8008d1c:	4632      	mov	r2, r6
 8008d1e:	4621      	mov	r1, r4
 8008d20:	4640      	mov	r0, r8
 8008d22:	f7ff ff71 	bl	8008c08 <__ssputs_r>
 8008d26:	3001      	adds	r0, #1
 8008d28:	f000 80a4 	beq.w	8008e74 <_svfiprintf_r+0x1b8>
 8008d2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d2e:	4453      	add	r3, sl
 8008d30:	9309      	str	r3, [sp, #36]	; 0x24
 8008d32:	783b      	ldrb	r3, [r7, #0]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	f000 809d 	beq.w	8008e74 <_svfiprintf_r+0x1b8>
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8008d40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d44:	9304      	str	r3, [sp, #16]
 8008d46:	9307      	str	r3, [sp, #28]
 8008d48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d4c:	931a      	str	r3, [sp, #104]	; 0x68
 8008d4e:	462f      	mov	r7, r5
 8008d50:	2205      	movs	r2, #5
 8008d52:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008d56:	4850      	ldr	r0, [pc, #320]	; (8008e98 <_svfiprintf_r+0x1dc>)
 8008d58:	f7fa ff22 	bl	8003ba0 <memchr>
 8008d5c:	9b04      	ldr	r3, [sp, #16]
 8008d5e:	b9d0      	cbnz	r0, 8008d96 <_svfiprintf_r+0xda>
 8008d60:	06d9      	lsls	r1, r3, #27
 8008d62:	bf44      	itt	mi
 8008d64:	2220      	movmi	r2, #32
 8008d66:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008d6a:	071a      	lsls	r2, r3, #28
 8008d6c:	bf44      	itt	mi
 8008d6e:	222b      	movmi	r2, #43	; 0x2b
 8008d70:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008d74:	782a      	ldrb	r2, [r5, #0]
 8008d76:	2a2a      	cmp	r2, #42	; 0x2a
 8008d78:	d015      	beq.n	8008da6 <_svfiprintf_r+0xea>
 8008d7a:	9a07      	ldr	r2, [sp, #28]
 8008d7c:	462f      	mov	r7, r5
 8008d7e:	2000      	movs	r0, #0
 8008d80:	250a      	movs	r5, #10
 8008d82:	4639      	mov	r1, r7
 8008d84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d88:	3b30      	subs	r3, #48	; 0x30
 8008d8a:	2b09      	cmp	r3, #9
 8008d8c:	d94d      	bls.n	8008e2a <_svfiprintf_r+0x16e>
 8008d8e:	b1b8      	cbz	r0, 8008dc0 <_svfiprintf_r+0x104>
 8008d90:	e00f      	b.n	8008db2 <_svfiprintf_r+0xf6>
 8008d92:	462f      	mov	r7, r5
 8008d94:	e7b8      	b.n	8008d08 <_svfiprintf_r+0x4c>
 8008d96:	4a40      	ldr	r2, [pc, #256]	; (8008e98 <_svfiprintf_r+0x1dc>)
 8008d98:	1a80      	subs	r0, r0, r2
 8008d9a:	fa0b f000 	lsl.w	r0, fp, r0
 8008d9e:	4318      	orrs	r0, r3
 8008da0:	9004      	str	r0, [sp, #16]
 8008da2:	463d      	mov	r5, r7
 8008da4:	e7d3      	b.n	8008d4e <_svfiprintf_r+0x92>
 8008da6:	9a03      	ldr	r2, [sp, #12]
 8008da8:	1d11      	adds	r1, r2, #4
 8008daa:	6812      	ldr	r2, [r2, #0]
 8008dac:	9103      	str	r1, [sp, #12]
 8008dae:	2a00      	cmp	r2, #0
 8008db0:	db01      	blt.n	8008db6 <_svfiprintf_r+0xfa>
 8008db2:	9207      	str	r2, [sp, #28]
 8008db4:	e004      	b.n	8008dc0 <_svfiprintf_r+0x104>
 8008db6:	4252      	negs	r2, r2
 8008db8:	f043 0302 	orr.w	r3, r3, #2
 8008dbc:	9207      	str	r2, [sp, #28]
 8008dbe:	9304      	str	r3, [sp, #16]
 8008dc0:	783b      	ldrb	r3, [r7, #0]
 8008dc2:	2b2e      	cmp	r3, #46	; 0x2e
 8008dc4:	d10c      	bne.n	8008de0 <_svfiprintf_r+0x124>
 8008dc6:	787b      	ldrb	r3, [r7, #1]
 8008dc8:	2b2a      	cmp	r3, #42	; 0x2a
 8008dca:	d133      	bne.n	8008e34 <_svfiprintf_r+0x178>
 8008dcc:	9b03      	ldr	r3, [sp, #12]
 8008dce:	1d1a      	adds	r2, r3, #4
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	9203      	str	r2, [sp, #12]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	bfb8      	it	lt
 8008dd8:	f04f 33ff 	movlt.w	r3, #4294967295
 8008ddc:	3702      	adds	r7, #2
 8008dde:	9305      	str	r3, [sp, #20]
 8008de0:	4d2e      	ldr	r5, [pc, #184]	; (8008e9c <_svfiprintf_r+0x1e0>)
 8008de2:	7839      	ldrb	r1, [r7, #0]
 8008de4:	2203      	movs	r2, #3
 8008de6:	4628      	mov	r0, r5
 8008de8:	f7fa feda 	bl	8003ba0 <memchr>
 8008dec:	b138      	cbz	r0, 8008dfe <_svfiprintf_r+0x142>
 8008dee:	2340      	movs	r3, #64	; 0x40
 8008df0:	1b40      	subs	r0, r0, r5
 8008df2:	fa03 f000 	lsl.w	r0, r3, r0
 8008df6:	9b04      	ldr	r3, [sp, #16]
 8008df8:	4303      	orrs	r3, r0
 8008dfa:	3701      	adds	r7, #1
 8008dfc:	9304      	str	r3, [sp, #16]
 8008dfe:	7839      	ldrb	r1, [r7, #0]
 8008e00:	4827      	ldr	r0, [pc, #156]	; (8008ea0 <_svfiprintf_r+0x1e4>)
 8008e02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e06:	2206      	movs	r2, #6
 8008e08:	1c7e      	adds	r6, r7, #1
 8008e0a:	f7fa fec9 	bl	8003ba0 <memchr>
 8008e0e:	2800      	cmp	r0, #0
 8008e10:	d038      	beq.n	8008e84 <_svfiprintf_r+0x1c8>
 8008e12:	4b24      	ldr	r3, [pc, #144]	; (8008ea4 <_svfiprintf_r+0x1e8>)
 8008e14:	bb13      	cbnz	r3, 8008e5c <_svfiprintf_r+0x1a0>
 8008e16:	9b03      	ldr	r3, [sp, #12]
 8008e18:	3307      	adds	r3, #7
 8008e1a:	f023 0307 	bic.w	r3, r3, #7
 8008e1e:	3308      	adds	r3, #8
 8008e20:	9303      	str	r3, [sp, #12]
 8008e22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e24:	444b      	add	r3, r9
 8008e26:	9309      	str	r3, [sp, #36]	; 0x24
 8008e28:	e76d      	b.n	8008d06 <_svfiprintf_r+0x4a>
 8008e2a:	fb05 3202 	mla	r2, r5, r2, r3
 8008e2e:	2001      	movs	r0, #1
 8008e30:	460f      	mov	r7, r1
 8008e32:	e7a6      	b.n	8008d82 <_svfiprintf_r+0xc6>
 8008e34:	2300      	movs	r3, #0
 8008e36:	3701      	adds	r7, #1
 8008e38:	9305      	str	r3, [sp, #20]
 8008e3a:	4619      	mov	r1, r3
 8008e3c:	250a      	movs	r5, #10
 8008e3e:	4638      	mov	r0, r7
 8008e40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e44:	3a30      	subs	r2, #48	; 0x30
 8008e46:	2a09      	cmp	r2, #9
 8008e48:	d903      	bls.n	8008e52 <_svfiprintf_r+0x196>
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d0c8      	beq.n	8008de0 <_svfiprintf_r+0x124>
 8008e4e:	9105      	str	r1, [sp, #20]
 8008e50:	e7c6      	b.n	8008de0 <_svfiprintf_r+0x124>
 8008e52:	fb05 2101 	mla	r1, r5, r1, r2
 8008e56:	2301      	movs	r3, #1
 8008e58:	4607      	mov	r7, r0
 8008e5a:	e7f0      	b.n	8008e3e <_svfiprintf_r+0x182>
 8008e5c:	ab03      	add	r3, sp, #12
 8008e5e:	9300      	str	r3, [sp, #0]
 8008e60:	4622      	mov	r2, r4
 8008e62:	4b11      	ldr	r3, [pc, #68]	; (8008ea8 <_svfiprintf_r+0x1ec>)
 8008e64:	a904      	add	r1, sp, #16
 8008e66:	4640      	mov	r0, r8
 8008e68:	f7fe f8fa 	bl	8007060 <_printf_float>
 8008e6c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008e70:	4681      	mov	r9, r0
 8008e72:	d1d6      	bne.n	8008e22 <_svfiprintf_r+0x166>
 8008e74:	89a3      	ldrh	r3, [r4, #12]
 8008e76:	065b      	lsls	r3, r3, #25
 8008e78:	f53f af35 	bmi.w	8008ce6 <_svfiprintf_r+0x2a>
 8008e7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e7e:	b01d      	add	sp, #116	; 0x74
 8008e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e84:	ab03      	add	r3, sp, #12
 8008e86:	9300      	str	r3, [sp, #0]
 8008e88:	4622      	mov	r2, r4
 8008e8a:	4b07      	ldr	r3, [pc, #28]	; (8008ea8 <_svfiprintf_r+0x1ec>)
 8008e8c:	a904      	add	r1, sp, #16
 8008e8e:	4640      	mov	r0, r8
 8008e90:	f7fe fb9c 	bl	80075cc <_printf_i>
 8008e94:	e7ea      	b.n	8008e6c <_svfiprintf_r+0x1b0>
 8008e96:	bf00      	nop
 8008e98:	0800a5e4 	.word	0x0800a5e4
 8008e9c:	0800a5ea 	.word	0x0800a5ea
 8008ea0:	0800a5ee 	.word	0x0800a5ee
 8008ea4:	08007061 	.word	0x08007061
 8008ea8:	08008c09 	.word	0x08008c09

08008eac <_sbrk_r>:
 8008eac:	b538      	push	{r3, r4, r5, lr}
 8008eae:	4c06      	ldr	r4, [pc, #24]	; (8008ec8 <_sbrk_r+0x1c>)
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	4605      	mov	r5, r0
 8008eb4:	4608      	mov	r0, r1
 8008eb6:	6023      	str	r3, [r4, #0]
 8008eb8:	f7fd ff62 	bl	8006d80 <_sbrk>
 8008ebc:	1c43      	adds	r3, r0, #1
 8008ebe:	d102      	bne.n	8008ec6 <_sbrk_r+0x1a>
 8008ec0:	6823      	ldr	r3, [r4, #0]
 8008ec2:	b103      	cbz	r3, 8008ec6 <_sbrk_r+0x1a>
 8008ec4:	602b      	str	r3, [r5, #0]
 8008ec6:	bd38      	pop	{r3, r4, r5, pc}
 8008ec8:	20000838 	.word	0x20000838

08008ecc <__ascii_mbtowc>:
 8008ecc:	b082      	sub	sp, #8
 8008ece:	b901      	cbnz	r1, 8008ed2 <__ascii_mbtowc+0x6>
 8008ed0:	a901      	add	r1, sp, #4
 8008ed2:	b142      	cbz	r2, 8008ee6 <__ascii_mbtowc+0x1a>
 8008ed4:	b14b      	cbz	r3, 8008eea <__ascii_mbtowc+0x1e>
 8008ed6:	7813      	ldrb	r3, [r2, #0]
 8008ed8:	600b      	str	r3, [r1, #0]
 8008eda:	7812      	ldrb	r2, [r2, #0]
 8008edc:	1c10      	adds	r0, r2, #0
 8008ede:	bf18      	it	ne
 8008ee0:	2001      	movne	r0, #1
 8008ee2:	b002      	add	sp, #8
 8008ee4:	4770      	bx	lr
 8008ee6:	4610      	mov	r0, r2
 8008ee8:	e7fb      	b.n	8008ee2 <__ascii_mbtowc+0x16>
 8008eea:	f06f 0001 	mvn.w	r0, #1
 8008eee:	e7f8      	b.n	8008ee2 <__ascii_mbtowc+0x16>

08008ef0 <memmove>:
 8008ef0:	4288      	cmp	r0, r1
 8008ef2:	b510      	push	{r4, lr}
 8008ef4:	eb01 0302 	add.w	r3, r1, r2
 8008ef8:	d807      	bhi.n	8008f0a <memmove+0x1a>
 8008efa:	1e42      	subs	r2, r0, #1
 8008efc:	4299      	cmp	r1, r3
 8008efe:	d00a      	beq.n	8008f16 <memmove+0x26>
 8008f00:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f04:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008f08:	e7f8      	b.n	8008efc <memmove+0xc>
 8008f0a:	4283      	cmp	r3, r0
 8008f0c:	d9f5      	bls.n	8008efa <memmove+0xa>
 8008f0e:	1881      	adds	r1, r0, r2
 8008f10:	1ad2      	subs	r2, r2, r3
 8008f12:	42d3      	cmn	r3, r2
 8008f14:	d100      	bne.n	8008f18 <memmove+0x28>
 8008f16:	bd10      	pop	{r4, pc}
 8008f18:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f1c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008f20:	e7f7      	b.n	8008f12 <memmove+0x22>

08008f22 <__malloc_lock>:
 8008f22:	4770      	bx	lr

08008f24 <__malloc_unlock>:
 8008f24:	4770      	bx	lr

08008f26 <_realloc_r>:
 8008f26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f28:	4607      	mov	r7, r0
 8008f2a:	4614      	mov	r4, r2
 8008f2c:	460e      	mov	r6, r1
 8008f2e:	b921      	cbnz	r1, 8008f3a <_realloc_r+0x14>
 8008f30:	4611      	mov	r1, r2
 8008f32:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008f36:	f7ff be0d 	b.w	8008b54 <_malloc_r>
 8008f3a:	b922      	cbnz	r2, 8008f46 <_realloc_r+0x20>
 8008f3c:	f7ff fdbc 	bl	8008ab8 <_free_r>
 8008f40:	4625      	mov	r5, r4
 8008f42:	4628      	mov	r0, r5
 8008f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f46:	f000 f821 	bl	8008f8c <_malloc_usable_size_r>
 8008f4a:	42a0      	cmp	r0, r4
 8008f4c:	d20f      	bcs.n	8008f6e <_realloc_r+0x48>
 8008f4e:	4621      	mov	r1, r4
 8008f50:	4638      	mov	r0, r7
 8008f52:	f7ff fdff 	bl	8008b54 <_malloc_r>
 8008f56:	4605      	mov	r5, r0
 8008f58:	2800      	cmp	r0, #0
 8008f5a:	d0f2      	beq.n	8008f42 <_realloc_r+0x1c>
 8008f5c:	4631      	mov	r1, r6
 8008f5e:	4622      	mov	r2, r4
 8008f60:	f7fd ffd7 	bl	8006f12 <memcpy>
 8008f64:	4631      	mov	r1, r6
 8008f66:	4638      	mov	r0, r7
 8008f68:	f7ff fda6 	bl	8008ab8 <_free_r>
 8008f6c:	e7e9      	b.n	8008f42 <_realloc_r+0x1c>
 8008f6e:	4635      	mov	r5, r6
 8008f70:	e7e7      	b.n	8008f42 <_realloc_r+0x1c>

08008f72 <__ascii_wctomb>:
 8008f72:	b149      	cbz	r1, 8008f88 <__ascii_wctomb+0x16>
 8008f74:	2aff      	cmp	r2, #255	; 0xff
 8008f76:	bf85      	ittet	hi
 8008f78:	238a      	movhi	r3, #138	; 0x8a
 8008f7a:	6003      	strhi	r3, [r0, #0]
 8008f7c:	700a      	strbls	r2, [r1, #0]
 8008f7e:	f04f 30ff 	movhi.w	r0, #4294967295
 8008f82:	bf98      	it	ls
 8008f84:	2001      	movls	r0, #1
 8008f86:	4770      	bx	lr
 8008f88:	4608      	mov	r0, r1
 8008f8a:	4770      	bx	lr

08008f8c <_malloc_usable_size_r>:
 8008f8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f90:	1f18      	subs	r0, r3, #4
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	bfbc      	itt	lt
 8008f96:	580b      	ldrlt	r3, [r1, r0]
 8008f98:	18c0      	addlt	r0, r0, r3
 8008f9a:	4770      	bx	lr

08008f9c <round>:
 8008f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f9e:	ec57 6b10 	vmov	r6, r7, d0
 8008fa2:	f3c7 500a 	ubfx	r0, r7, #20, #11
 8008fa6:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8008faa:	2c13      	cmp	r4, #19
 8008fac:	463b      	mov	r3, r7
 8008fae:	463d      	mov	r5, r7
 8008fb0:	dc17      	bgt.n	8008fe2 <round+0x46>
 8008fb2:	2c00      	cmp	r4, #0
 8008fb4:	da09      	bge.n	8008fca <round+0x2e>
 8008fb6:	3401      	adds	r4, #1
 8008fb8:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8008fbc:	d103      	bne.n	8008fc6 <round+0x2a>
 8008fbe:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008fc2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008fc6:	2100      	movs	r1, #0
 8008fc8:	e02c      	b.n	8009024 <round+0x88>
 8008fca:	4a18      	ldr	r2, [pc, #96]	; (800902c <round+0x90>)
 8008fcc:	4122      	asrs	r2, r4
 8008fce:	4217      	tst	r7, r2
 8008fd0:	d100      	bne.n	8008fd4 <round+0x38>
 8008fd2:	b19e      	cbz	r6, 8008ffc <round+0x60>
 8008fd4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008fd8:	4123      	asrs	r3, r4
 8008fda:	442b      	add	r3, r5
 8008fdc:	ea23 0302 	bic.w	r3, r3, r2
 8008fe0:	e7f1      	b.n	8008fc6 <round+0x2a>
 8008fe2:	2c33      	cmp	r4, #51	; 0x33
 8008fe4:	dd0d      	ble.n	8009002 <round+0x66>
 8008fe6:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8008fea:	d107      	bne.n	8008ffc <round+0x60>
 8008fec:	4630      	mov	r0, r6
 8008fee:	4639      	mov	r1, r7
 8008ff0:	ee10 2a10 	vmov	r2, s0
 8008ff4:	f7fa fe2a 	bl	8003c4c <__adddf3>
 8008ff8:	4606      	mov	r6, r0
 8008ffa:	460f      	mov	r7, r1
 8008ffc:	ec47 6b10 	vmov	d0, r6, r7
 8009000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009002:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 8009006:	f04f 30ff 	mov.w	r0, #4294967295
 800900a:	40d0      	lsrs	r0, r2
 800900c:	4206      	tst	r6, r0
 800900e:	d0f5      	beq.n	8008ffc <round+0x60>
 8009010:	2201      	movs	r2, #1
 8009012:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8009016:	fa02 f404 	lsl.w	r4, r2, r4
 800901a:	1931      	adds	r1, r6, r4
 800901c:	bf28      	it	cs
 800901e:	189b      	addcs	r3, r3, r2
 8009020:	ea21 0100 	bic.w	r1, r1, r0
 8009024:	461f      	mov	r7, r3
 8009026:	460e      	mov	r6, r1
 8009028:	e7e8      	b.n	8008ffc <round+0x60>
 800902a:	bf00      	nop
 800902c:	000fffff 	.word	0x000fffff

08009030 <tanhf>:
 8009030:	b510      	push	{r4, lr}
 8009032:	ee10 4a10 	vmov	r4, s0
 8009036:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800903a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800903e:	ed2d 8b02 	vpush	{d8}
 8009042:	eef0 7a40 	vmov.f32	s15, s0
 8009046:	db0c      	blt.n	8009062 <tanhf+0x32>
 8009048:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800904c:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8009050:	2c00      	cmp	r4, #0
 8009052:	bfac      	ite	ge
 8009054:	ee30 0a07 	vaddge.f32	s0, s0, s14
 8009058:	ee30 0a47 	vsublt.f32	s0, s0, s14
 800905c:	ecbd 8b02 	vpop	{d8}
 8009060:	bd10      	pop	{r4, pc}
 8009062:	4a1b      	ldr	r2, [pc, #108]	; (80090d0 <tanhf+0xa0>)
 8009064:	4293      	cmp	r3, r2
 8009066:	dc30      	bgt.n	80090ca <tanhf+0x9a>
 8009068:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 800906c:	da06      	bge.n	800907c <tanhf+0x4c>
 800906e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009072:	ee37 0a80 	vadd.f32	s0, s15, s0
 8009076:	ee20 0a27 	vmul.f32	s0, s0, s15
 800907a:	e7ef      	b.n	800905c <tanhf+0x2c>
 800907c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8009080:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
 8009084:	db12      	blt.n	80090ac <tanhf+0x7c>
 8009086:	f001 f837 	bl	800a0f8 <fabsf>
 800908a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800908e:	f000 ff07 	bl	8009ea0 <expm1f>
 8009092:	ee30 0a08 	vadd.f32	s0, s0, s16
 8009096:	eec8 7a00 	vdiv.f32	s15, s16, s0
 800909a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800909e:	ee30 0a67 	vsub.f32	s0, s0, s15
 80090a2:	2c00      	cmp	r4, #0
 80090a4:	bfb8      	it	lt
 80090a6:	eeb1 0a40 	vneglt.f32	s0, s0
 80090aa:	e7d7      	b.n	800905c <tanhf+0x2c>
 80090ac:	f001 f824 	bl	800a0f8 <fabsf>
 80090b0:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 80090b4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80090b8:	f000 fef2 	bl	8009ea0 <expm1f>
 80090bc:	ee70 7a08 	vadd.f32	s15, s0, s16
 80090c0:	eeb1 7a40 	vneg.f32	s14, s0
 80090c4:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80090c8:	e7eb      	b.n	80090a2 <tanhf+0x72>
 80090ca:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80090ce:	e7e8      	b.n	80090a2 <tanhf+0x72>
 80090d0:	41afffff 	.word	0x41afffff

080090d4 <expf>:
 80090d4:	b530      	push	{r4, r5, lr}
 80090d6:	ed2d 8b02 	vpush	{d8}
 80090da:	4d35      	ldr	r5, [pc, #212]	; (80091b0 <expf+0xdc>)
 80090dc:	b08b      	sub	sp, #44	; 0x2c
 80090de:	eeb0 8a40 	vmov.f32	s16, s0
 80090e2:	f000 fa4b 	bl	800957c <__ieee754_expf>
 80090e6:	f995 3000 	ldrsb.w	r3, [r5]
 80090ea:	3301      	adds	r3, #1
 80090ec:	ee10 4a10 	vmov	r4, s0
 80090f0:	d030      	beq.n	8009154 <expf+0x80>
 80090f2:	eeb0 0a48 	vmov.f32	s0, s16
 80090f6:	f001 f806 	bl	800a106 <finitef>
 80090fa:	b358      	cbz	r0, 8009154 <expf+0x80>
 80090fc:	eddf 7a2d 	vldr	s15, [pc, #180]	; 80091b4 <expf+0xe0>
 8009100:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8009104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009108:	dd35      	ble.n	8009176 <expf+0xa2>
 800910a:	2303      	movs	r3, #3
 800910c:	9300      	str	r3, [sp, #0]
 800910e:	4b2a      	ldr	r3, [pc, #168]	; (80091b8 <expf+0xe4>)
 8009110:	9301      	str	r3, [sp, #4]
 8009112:	ee18 0a10 	vmov	r0, s16
 8009116:	2300      	movs	r3, #0
 8009118:	9308      	str	r3, [sp, #32]
 800911a:	f7fa fef5 	bl	8003f08 <__aeabi_f2d>
 800911e:	f995 3000 	ldrsb.w	r3, [r5]
 8009122:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009126:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800912a:	b9cb      	cbnz	r3, 8009160 <expf+0x8c>
 800912c:	4b23      	ldr	r3, [pc, #140]	; (80091bc <expf+0xe8>)
 800912e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8009132:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009136:	4668      	mov	r0, sp
 8009138:	f000 fea5 	bl	8009e86 <matherr>
 800913c:	b1b0      	cbz	r0, 800916c <expf+0x98>
 800913e:	9b08      	ldr	r3, [sp, #32]
 8009140:	b11b      	cbz	r3, 800914a <expf+0x76>
 8009142:	f7fd fead 	bl	8006ea0 <__errno>
 8009146:	9b08      	ldr	r3, [sp, #32]
 8009148:	6003      	str	r3, [r0, #0]
 800914a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800914e:	f7fb fa0b 	bl	8004568 <__aeabi_d2f>
 8009152:	4604      	mov	r4, r0
 8009154:	ee00 4a10 	vmov	s0, r4
 8009158:	b00b      	add	sp, #44	; 0x2c
 800915a:	ecbd 8b02 	vpop	{d8}
 800915e:	bd30      	pop	{r4, r5, pc}
 8009160:	4917      	ldr	r1, [pc, #92]	; (80091c0 <expf+0xec>)
 8009162:	2000      	movs	r0, #0
 8009164:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009168:	2b02      	cmp	r3, #2
 800916a:	d1e4      	bne.n	8009136 <expf+0x62>
 800916c:	f7fd fe98 	bl	8006ea0 <__errno>
 8009170:	2322      	movs	r3, #34	; 0x22
 8009172:	6003      	str	r3, [r0, #0]
 8009174:	e7e3      	b.n	800913e <expf+0x6a>
 8009176:	eddf 7a13 	vldr	s15, [pc, #76]	; 80091c4 <expf+0xf0>
 800917a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800917e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009182:	d5e7      	bpl.n	8009154 <expf+0x80>
 8009184:	2304      	movs	r3, #4
 8009186:	9300      	str	r3, [sp, #0]
 8009188:	4b0b      	ldr	r3, [pc, #44]	; (80091b8 <expf+0xe4>)
 800918a:	9301      	str	r3, [sp, #4]
 800918c:	ee18 0a10 	vmov	r0, s16
 8009190:	2300      	movs	r3, #0
 8009192:	9308      	str	r3, [sp, #32]
 8009194:	f7fa feb8 	bl	8003f08 <__aeabi_f2d>
 8009198:	2300      	movs	r3, #0
 800919a:	2200      	movs	r2, #0
 800919c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80091a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80091a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80091a8:	f995 3000 	ldrsb.w	r3, [r5]
 80091ac:	e7dc      	b.n	8009168 <expf+0x94>
 80091ae:	bf00      	nop
 80091b0:	2000072c 	.word	0x2000072c
 80091b4:	42b17180 	.word	0x42b17180
 80091b8:	0800a700 	.word	0x0800a700
 80091bc:	47efffff 	.word	0x47efffff
 80091c0:	7ff00000 	.word	0x7ff00000
 80091c4:	c2cff1b5 	.word	0xc2cff1b5

080091c8 <logf>:
 80091c8:	b510      	push	{r4, lr}
 80091ca:	ed2d 8b02 	vpush	{d8}
 80091ce:	b08a      	sub	sp, #40	; 0x28
 80091d0:	eeb0 8a40 	vmov.f32	s16, s0
 80091d4:	f000 faa6 	bl	8009724 <__ieee754_logf>
 80091d8:	4b31      	ldr	r3, [pc, #196]	; (80092a0 <logf+0xd8>)
 80091da:	f993 4000 	ldrsb.w	r4, [r3]
 80091de:	1c63      	adds	r3, r4, #1
 80091e0:	d059      	beq.n	8009296 <logf+0xce>
 80091e2:	eeb4 8a48 	vcmp.f32	s16, s16
 80091e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091ea:	d654      	bvs.n	8009296 <logf+0xce>
 80091ec:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80091f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091f4:	dc4f      	bgt.n	8009296 <logf+0xce>
 80091f6:	4b2b      	ldr	r3, [pc, #172]	; (80092a4 <logf+0xdc>)
 80091f8:	9301      	str	r3, [sp, #4]
 80091fa:	ee18 0a10 	vmov	r0, s16
 80091fe:	2300      	movs	r3, #0
 8009200:	9308      	str	r3, [sp, #32]
 8009202:	f7fa fe81 	bl	8003f08 <__aeabi_f2d>
 8009206:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800920a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800920e:	b994      	cbnz	r4, 8009236 <logf+0x6e>
 8009210:	4b25      	ldr	r3, [pc, #148]	; (80092a8 <logf+0xe0>)
 8009212:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8009216:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800921a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800921e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009222:	d025      	beq.n	8009270 <logf+0xa8>
 8009224:	2301      	movs	r3, #1
 8009226:	2c02      	cmp	r4, #2
 8009228:	9300      	str	r3, [sp, #0]
 800922a:	d116      	bne.n	800925a <logf+0x92>
 800922c:	f7fd fe38 	bl	8006ea0 <__errno>
 8009230:	2321      	movs	r3, #33	; 0x21
 8009232:	6003      	str	r3, [r0, #0]
 8009234:	e016      	b.n	8009264 <logf+0x9c>
 8009236:	4b1d      	ldr	r3, [pc, #116]	; (80092ac <logf+0xe4>)
 8009238:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800923c:	2200      	movs	r2, #0
 800923e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009242:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009246:	d1ed      	bne.n	8009224 <logf+0x5c>
 8009248:	2302      	movs	r3, #2
 800924a:	429c      	cmp	r4, r3
 800924c:	9300      	str	r3, [sp, #0]
 800924e:	d111      	bne.n	8009274 <logf+0xac>
 8009250:	f7fd fe26 	bl	8006ea0 <__errno>
 8009254:	2322      	movs	r3, #34	; 0x22
 8009256:	6003      	str	r3, [r0, #0]
 8009258:	e011      	b.n	800927e <logf+0xb6>
 800925a:	4668      	mov	r0, sp
 800925c:	f000 fe13 	bl	8009e86 <matherr>
 8009260:	2800      	cmp	r0, #0
 8009262:	d0e3      	beq.n	800922c <logf+0x64>
 8009264:	4812      	ldr	r0, [pc, #72]	; (80092b0 <logf+0xe8>)
 8009266:	f000 fe13 	bl	8009e90 <nan>
 800926a:	ed8d 0b06 	vstr	d0, [sp, #24]
 800926e:	e006      	b.n	800927e <logf+0xb6>
 8009270:	2302      	movs	r3, #2
 8009272:	9300      	str	r3, [sp, #0]
 8009274:	4668      	mov	r0, sp
 8009276:	f000 fe06 	bl	8009e86 <matherr>
 800927a:	2800      	cmp	r0, #0
 800927c:	d0e8      	beq.n	8009250 <logf+0x88>
 800927e:	9b08      	ldr	r3, [sp, #32]
 8009280:	b11b      	cbz	r3, 800928a <logf+0xc2>
 8009282:	f7fd fe0d 	bl	8006ea0 <__errno>
 8009286:	9b08      	ldr	r3, [sp, #32]
 8009288:	6003      	str	r3, [r0, #0]
 800928a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800928e:	f7fb f96b 	bl	8004568 <__aeabi_d2f>
 8009292:	ee00 0a10 	vmov	s0, r0
 8009296:	b00a      	add	sp, #40	; 0x28
 8009298:	ecbd 8b02 	vpop	{d8}
 800929c:	bd10      	pop	{r4, pc}
 800929e:	bf00      	nop
 80092a0:	2000072c 	.word	0x2000072c
 80092a4:	0800a705 	.word	0x0800a705
 80092a8:	c7efffff 	.word	0xc7efffff
 80092ac:	fff00000 	.word	0xfff00000
 80092b0:	0800a5e9 	.word	0x0800a5e9

080092b4 <powf>:
 80092b4:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 80092b8:	ed2d 8b04 	vpush	{d8-d9}
 80092bc:	4ca7      	ldr	r4, [pc, #668]	; (800955c <powf+0x2a8>)
 80092be:	b08a      	sub	sp, #40	; 0x28
 80092c0:	eef0 8a40 	vmov.f32	s17, s0
 80092c4:	eeb0 8a60 	vmov.f32	s16, s1
 80092c8:	f000 fb1a 	bl	8009900 <__ieee754_powf>
 80092cc:	f994 5000 	ldrsb.w	r5, [r4]
 80092d0:	1c6b      	adds	r3, r5, #1
 80092d2:	eeb0 9a40 	vmov.f32	s18, s0
 80092d6:	4626      	mov	r6, r4
 80092d8:	d05f      	beq.n	800939a <powf+0xe6>
 80092da:	eeb4 8a48 	vcmp.f32	s16, s16
 80092de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092e2:	d65a      	bvs.n	800939a <powf+0xe6>
 80092e4:	eef4 8a68 	vcmp.f32	s17, s17
 80092e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092ec:	d721      	bvc.n	8009332 <powf+0x7e>
 80092ee:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80092f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092f6:	d150      	bne.n	800939a <powf+0xe6>
 80092f8:	2301      	movs	r3, #1
 80092fa:	9300      	str	r3, [sp, #0]
 80092fc:	4b98      	ldr	r3, [pc, #608]	; (8009560 <powf+0x2ac>)
 80092fe:	9301      	str	r3, [sp, #4]
 8009300:	ee18 0a90 	vmov	r0, s17
 8009304:	2300      	movs	r3, #0
 8009306:	9308      	str	r3, [sp, #32]
 8009308:	f7fa fdfe 	bl	8003f08 <__aeabi_f2d>
 800930c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009310:	ee18 0a10 	vmov	r0, s16
 8009314:	f7fa fdf8 	bl	8003f08 <__aeabi_f2d>
 8009318:	4b92      	ldr	r3, [pc, #584]	; (8009564 <powf+0x2b0>)
 800931a:	2200      	movs	r2, #0
 800931c:	2d02      	cmp	r5, #2
 800931e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009322:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009326:	d032      	beq.n	800938e <powf+0xda>
 8009328:	4668      	mov	r0, sp
 800932a:	f000 fdac 	bl	8009e86 <matherr>
 800932e:	bb40      	cbnz	r0, 8009382 <powf+0xce>
 8009330:	e065      	b.n	80093fe <powf+0x14a>
 8009332:	eddf 9a8d 	vldr	s19, [pc, #564]	; 8009568 <powf+0x2b4>
 8009336:	eef4 8a69 	vcmp.f32	s17, s19
 800933a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800933e:	d163      	bne.n	8009408 <powf+0x154>
 8009340:	eeb4 8a69 	vcmp.f32	s16, s19
 8009344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009348:	d12e      	bne.n	80093a8 <powf+0xf4>
 800934a:	2301      	movs	r3, #1
 800934c:	9300      	str	r3, [sp, #0]
 800934e:	4b84      	ldr	r3, [pc, #528]	; (8009560 <powf+0x2ac>)
 8009350:	9301      	str	r3, [sp, #4]
 8009352:	ee18 0a90 	vmov	r0, s17
 8009356:	2300      	movs	r3, #0
 8009358:	9308      	str	r3, [sp, #32]
 800935a:	f7fa fdd5 	bl	8003f08 <__aeabi_f2d>
 800935e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009362:	ee18 0a10 	vmov	r0, s16
 8009366:	f7fa fdcf 	bl	8003f08 <__aeabi_f2d>
 800936a:	2200      	movs	r2, #0
 800936c:	2300      	movs	r3, #0
 800936e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009372:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009376:	2d00      	cmp	r5, #0
 8009378:	d0d6      	beq.n	8009328 <powf+0x74>
 800937a:	4b7a      	ldr	r3, [pc, #488]	; (8009564 <powf+0x2b0>)
 800937c:	2200      	movs	r2, #0
 800937e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009382:	9b08      	ldr	r3, [sp, #32]
 8009384:	b11b      	cbz	r3, 800938e <powf+0xda>
 8009386:	f7fd fd8b 	bl	8006ea0 <__errno>
 800938a:	9b08      	ldr	r3, [sp, #32]
 800938c:	6003      	str	r3, [r0, #0]
 800938e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009392:	f7fb f8e9 	bl	8004568 <__aeabi_d2f>
 8009396:	ee09 0a10 	vmov	s18, r0
 800939a:	eeb0 0a49 	vmov.f32	s0, s18
 800939e:	b00a      	add	sp, #40	; 0x28
 80093a0:	ecbd 8b04 	vpop	{d8-d9}
 80093a4:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80093a8:	eeb0 0a48 	vmov.f32	s0, s16
 80093ac:	f000 feab 	bl	800a106 <finitef>
 80093b0:	2800      	cmp	r0, #0
 80093b2:	d0f2      	beq.n	800939a <powf+0xe6>
 80093b4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80093b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093bc:	d5ed      	bpl.n	800939a <powf+0xe6>
 80093be:	2301      	movs	r3, #1
 80093c0:	9300      	str	r3, [sp, #0]
 80093c2:	4b67      	ldr	r3, [pc, #412]	; (8009560 <powf+0x2ac>)
 80093c4:	9301      	str	r3, [sp, #4]
 80093c6:	ee18 0a90 	vmov	r0, s17
 80093ca:	2300      	movs	r3, #0
 80093cc:	9308      	str	r3, [sp, #32]
 80093ce:	f7fa fd9b 	bl	8003f08 <__aeabi_f2d>
 80093d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093d6:	ee18 0a10 	vmov	r0, s16
 80093da:	f7fa fd95 	bl	8003f08 <__aeabi_f2d>
 80093de:	f994 3000 	ldrsb.w	r3, [r4]
 80093e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80093e6:	b923      	cbnz	r3, 80093f2 <powf+0x13e>
 80093e8:	2200      	movs	r2, #0
 80093ea:	2300      	movs	r3, #0
 80093ec:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80093f0:	e79a      	b.n	8009328 <powf+0x74>
 80093f2:	495e      	ldr	r1, [pc, #376]	; (800956c <powf+0x2b8>)
 80093f4:	2000      	movs	r0, #0
 80093f6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80093fa:	2b02      	cmp	r3, #2
 80093fc:	d194      	bne.n	8009328 <powf+0x74>
 80093fe:	f7fd fd4f 	bl	8006ea0 <__errno>
 8009402:	2321      	movs	r3, #33	; 0x21
 8009404:	6003      	str	r3, [r0, #0]
 8009406:	e7bc      	b.n	8009382 <powf+0xce>
 8009408:	f000 fe7d 	bl	800a106 <finitef>
 800940c:	4605      	mov	r5, r0
 800940e:	2800      	cmp	r0, #0
 8009410:	d173      	bne.n	80094fa <powf+0x246>
 8009412:	eeb0 0a68 	vmov.f32	s0, s17
 8009416:	f000 fe76 	bl	800a106 <finitef>
 800941a:	2800      	cmp	r0, #0
 800941c:	d06d      	beq.n	80094fa <powf+0x246>
 800941e:	eeb0 0a48 	vmov.f32	s0, s16
 8009422:	f000 fe70 	bl	800a106 <finitef>
 8009426:	2800      	cmp	r0, #0
 8009428:	d067      	beq.n	80094fa <powf+0x246>
 800942a:	ee18 0a90 	vmov	r0, s17
 800942e:	f7fa fd6b 	bl	8003f08 <__aeabi_f2d>
 8009432:	4680      	mov	r8, r0
 8009434:	ee18 0a10 	vmov	r0, s16
 8009438:	4689      	mov	r9, r1
 800943a:	f7fa fd65 	bl	8003f08 <__aeabi_f2d>
 800943e:	eeb4 9a49 	vcmp.f32	s18, s18
 8009442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009446:	f994 4000 	ldrsb.w	r4, [r4]
 800944a:	4b45      	ldr	r3, [pc, #276]	; (8009560 <powf+0x2ac>)
 800944c:	d713      	bvc.n	8009476 <powf+0x1c2>
 800944e:	2201      	movs	r2, #1
 8009450:	e9cd 2300 	strd	r2, r3, [sp]
 8009454:	9508      	str	r5, [sp, #32]
 8009456:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800945a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800945e:	2c00      	cmp	r4, #0
 8009460:	d0c2      	beq.n	80093e8 <powf+0x134>
 8009462:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 8009466:	ee17 0a90 	vmov	r0, s15
 800946a:	f7fa fd4d 	bl	8003f08 <__aeabi_f2d>
 800946e:	2c02      	cmp	r4, #2
 8009470:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009474:	e7c2      	b.n	80093fc <powf+0x148>
 8009476:	2203      	movs	r2, #3
 8009478:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800947c:	e9cd 2300 	strd	r2, r3, [sp]
 8009480:	9508      	str	r5, [sp, #32]
 8009482:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8009486:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800948a:	ee28 8a27 	vmul.f32	s16, s16, s15
 800948e:	b9fc      	cbnz	r4, 80094d0 <powf+0x21c>
 8009490:	4b37      	ldr	r3, [pc, #220]	; (8009570 <powf+0x2bc>)
 8009492:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8009496:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800949a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800949e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80094a2:	d553      	bpl.n	800954c <powf+0x298>
 80094a4:	eeb0 0a48 	vmov.f32	s0, s16
 80094a8:	f000 fe3e 	bl	800a128 <rintf>
 80094ac:	eeb4 0a48 	vcmp.f32	s0, s16
 80094b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094b4:	d004      	beq.n	80094c0 <powf+0x20c>
 80094b6:	4b2f      	ldr	r3, [pc, #188]	; (8009574 <powf+0x2c0>)
 80094b8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80094bc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80094c0:	f996 3000 	ldrsb.w	r3, [r6]
 80094c4:	2b02      	cmp	r3, #2
 80094c6:	d141      	bne.n	800954c <powf+0x298>
 80094c8:	f7fd fcea 	bl	8006ea0 <__errno>
 80094cc:	2322      	movs	r3, #34	; 0x22
 80094ce:	e799      	b.n	8009404 <powf+0x150>
 80094d0:	4b29      	ldr	r3, [pc, #164]	; (8009578 <powf+0x2c4>)
 80094d2:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 80094d6:	2200      	movs	r2, #0
 80094d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094dc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80094e0:	d5ee      	bpl.n	80094c0 <powf+0x20c>
 80094e2:	eeb0 0a48 	vmov.f32	s0, s16
 80094e6:	f000 fe1f 	bl	800a128 <rintf>
 80094ea:	eeb4 0a48 	vcmp.f32	s0, s16
 80094ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094f2:	d0e5      	beq.n	80094c0 <powf+0x20c>
 80094f4:	2200      	movs	r2, #0
 80094f6:	4b1d      	ldr	r3, [pc, #116]	; (800956c <powf+0x2b8>)
 80094f8:	e7e0      	b.n	80094bc <powf+0x208>
 80094fa:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80094fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009502:	f47f af4a 	bne.w	800939a <powf+0xe6>
 8009506:	eeb0 0a68 	vmov.f32	s0, s17
 800950a:	f000 fdfc 	bl	800a106 <finitef>
 800950e:	2800      	cmp	r0, #0
 8009510:	f43f af43 	beq.w	800939a <powf+0xe6>
 8009514:	eeb0 0a48 	vmov.f32	s0, s16
 8009518:	f000 fdf5 	bl	800a106 <finitef>
 800951c:	2800      	cmp	r0, #0
 800951e:	f43f af3c 	beq.w	800939a <powf+0xe6>
 8009522:	2304      	movs	r3, #4
 8009524:	9300      	str	r3, [sp, #0]
 8009526:	4b0e      	ldr	r3, [pc, #56]	; (8009560 <powf+0x2ac>)
 8009528:	9301      	str	r3, [sp, #4]
 800952a:	ee18 0a90 	vmov	r0, s17
 800952e:	2300      	movs	r3, #0
 8009530:	9308      	str	r3, [sp, #32]
 8009532:	f7fa fce9 	bl	8003f08 <__aeabi_f2d>
 8009536:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800953a:	ee18 0a10 	vmov	r0, s16
 800953e:	f7fa fce3 	bl	8003f08 <__aeabi_f2d>
 8009542:	2200      	movs	r2, #0
 8009544:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009548:	2300      	movs	r3, #0
 800954a:	e7b7      	b.n	80094bc <powf+0x208>
 800954c:	4668      	mov	r0, sp
 800954e:	f000 fc9a 	bl	8009e86 <matherr>
 8009552:	2800      	cmp	r0, #0
 8009554:	f47f af15 	bne.w	8009382 <powf+0xce>
 8009558:	e7b6      	b.n	80094c8 <powf+0x214>
 800955a:	bf00      	nop
 800955c:	2000072c 	.word	0x2000072c
 8009560:	0800a70a 	.word	0x0800a70a
 8009564:	3ff00000 	.word	0x3ff00000
 8009568:	00000000 	.word	0x00000000
 800956c:	fff00000 	.word	0xfff00000
 8009570:	47efffff 	.word	0x47efffff
 8009574:	c7efffff 	.word	0xc7efffff
 8009578:	7ff00000 	.word	0x7ff00000

0800957c <__ieee754_expf>:
 800957c:	ee10 2a10 	vmov	r2, s0
 8009580:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8009584:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8009588:	d902      	bls.n	8009590 <__ieee754_expf+0x14>
 800958a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800958e:	4770      	bx	lr
 8009590:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 8009594:	d106      	bne.n	80095a4 <__ieee754_expf+0x28>
 8009596:	eddf 7a51 	vldr	s15, [pc, #324]	; 80096dc <__ieee754_expf+0x160>
 800959a:	2b00      	cmp	r3, #0
 800959c:	bf18      	it	ne
 800959e:	eeb0 0a67 	vmovne.f32	s0, s15
 80095a2:	4770      	bx	lr
 80095a4:	484e      	ldr	r0, [pc, #312]	; (80096e0 <__ieee754_expf+0x164>)
 80095a6:	4282      	cmp	r2, r0
 80095a8:	dd04      	ble.n	80095b4 <__ieee754_expf+0x38>
 80095aa:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 80096e4 <__ieee754_expf+0x168>
 80095ae:	ee20 0a00 	vmul.f32	s0, s0, s0
 80095b2:	4770      	bx	lr
 80095b4:	2a00      	cmp	r2, #0
 80095b6:	da03      	bge.n	80095c0 <__ieee754_expf+0x44>
 80095b8:	4a4b      	ldr	r2, [pc, #300]	; (80096e8 <__ieee754_expf+0x16c>)
 80095ba:	4291      	cmp	r1, r2
 80095bc:	f200 808a 	bhi.w	80096d4 <__ieee754_expf+0x158>
 80095c0:	4a4a      	ldr	r2, [pc, #296]	; (80096ec <__ieee754_expf+0x170>)
 80095c2:	4291      	cmp	r1, r2
 80095c4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80095c8:	d954      	bls.n	8009674 <__ieee754_expf+0xf8>
 80095ca:	4a49      	ldr	r2, [pc, #292]	; (80096f0 <__ieee754_expf+0x174>)
 80095cc:	4291      	cmp	r1, r2
 80095ce:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80095d2:	d836      	bhi.n	8009642 <__ieee754_expf+0xc6>
 80095d4:	4947      	ldr	r1, [pc, #284]	; (80096f4 <__ieee754_expf+0x178>)
 80095d6:	4411      	add	r1, r2
 80095d8:	ed91 7a00 	vldr	s14, [r1]
 80095dc:	4946      	ldr	r1, [pc, #280]	; (80096f8 <__ieee754_expf+0x17c>)
 80095de:	440a      	add	r2, r1
 80095e0:	edd2 7a00 	vldr	s15, [r2]
 80095e4:	ee30 7a47 	vsub.f32	s14, s0, s14
 80095e8:	f1c3 0201 	rsb	r2, r3, #1
 80095ec:	1ad2      	subs	r2, r2, r3
 80095ee:	ee37 0a67 	vsub.f32	s0, s14, s15
 80095f2:	ee60 6a00 	vmul.f32	s13, s0, s0
 80095f6:	eddf 5a41 	vldr	s11, [pc, #260]	; 80096fc <__ieee754_expf+0x180>
 80095fa:	ed9f 5a41 	vldr	s10, [pc, #260]	; 8009700 <__ieee754_expf+0x184>
 80095fe:	eea6 5aa5 	vfma.f32	s10, s13, s11
 8009602:	eddf 5a40 	vldr	s11, [pc, #256]	; 8009704 <__ieee754_expf+0x188>
 8009606:	eee5 5a26 	vfma.f32	s11, s10, s13
 800960a:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 8009708 <__ieee754_expf+0x18c>
 800960e:	eea5 5aa6 	vfma.f32	s10, s11, s13
 8009612:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800970c <__ieee754_expf+0x190>
 8009616:	eee5 5a26 	vfma.f32	s11, s10, s13
 800961a:	eeb0 5a40 	vmov.f32	s10, s0
 800961e:	eea5 5ae6 	vfms.f32	s10, s11, s13
 8009622:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8009626:	eef0 6a45 	vmov.f32	s13, s10
 800962a:	ee20 5a05 	vmul.f32	s10, s0, s10
 800962e:	bb92      	cbnz	r2, 8009696 <__ieee754_expf+0x11a>
 8009630:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8009634:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8009638:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800963c:	ee36 0a40 	vsub.f32	s0, s12, s0
 8009640:	4770      	bx	lr
 8009642:	4b33      	ldr	r3, [pc, #204]	; (8009710 <__ieee754_expf+0x194>)
 8009644:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8009714 <__ieee754_expf+0x198>
 8009648:	4413      	add	r3, r2
 800964a:	edd3 7a00 	vldr	s15, [r3]
 800964e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8009652:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8009718 <__ieee754_expf+0x19c>
 8009656:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800965a:	ee17 2a90 	vmov	r2, s15
 800965e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009662:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8009666:	eeb0 7a40 	vmov.f32	s14, s0
 800966a:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800971c <__ieee754_expf+0x1a0>
 800966e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8009672:	e7bc      	b.n	80095ee <__ieee754_expf+0x72>
 8009674:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 8009678:	d20b      	bcs.n	8009692 <__ieee754_expf+0x116>
 800967a:	eddf 6a1a 	vldr	s13, [pc, #104]	; 80096e4 <__ieee754_expf+0x168>
 800967e:	ee70 6a26 	vadd.f32	s13, s0, s13
 8009682:	eef4 6ac6 	vcmpe.f32	s13, s12
 8009686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800968a:	dd02      	ble.n	8009692 <__ieee754_expf+0x116>
 800968c:	ee30 0a06 	vadd.f32	s0, s0, s12
 8009690:	4770      	bx	lr
 8009692:	2200      	movs	r2, #0
 8009694:	e7ad      	b.n	80095f2 <__ieee754_expf+0x76>
 8009696:	ee75 6ae6 	vsub.f32	s13, s11, s13
 800969a:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800969e:	ee85 0a26 	vdiv.f32	s0, s10, s13
 80096a2:	bfb8      	it	lt
 80096a4:	3264      	addlt	r2, #100	; 0x64
 80096a6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80096aa:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80096ae:	ee76 7a40 	vsub.f32	s15, s12, s0
 80096b2:	ee17 3a90 	vmov	r3, s15
 80096b6:	bfab      	itete	ge
 80096b8:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 80096bc:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 80096c0:	ee00 3a10 	vmovge	s0, r3
 80096c4:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 8009720 <__ieee754_expf+0x1a4>
 80096c8:	bfbc      	itt	lt
 80096ca:	ee00 3a10 	vmovlt	s0, r3
 80096ce:	ee20 0a27 	vmullt.f32	s0, s0, s15
 80096d2:	4770      	bx	lr
 80096d4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80096dc <__ieee754_expf+0x160>
 80096d8:	4770      	bx	lr
 80096da:	bf00      	nop
 80096dc:	00000000 	.word	0x00000000
 80096e0:	42b17217 	.word	0x42b17217
 80096e4:	7149f2ca 	.word	0x7149f2ca
 80096e8:	42cff1b5 	.word	0x42cff1b5
 80096ec:	3eb17218 	.word	0x3eb17218
 80096f0:	3f851591 	.word	0x3f851591
 80096f4:	0800a718 	.word	0x0800a718
 80096f8:	0800a720 	.word	0x0800a720
 80096fc:	3331bb4c 	.word	0x3331bb4c
 8009700:	b5ddea0e 	.word	0xb5ddea0e
 8009704:	388ab355 	.word	0x388ab355
 8009708:	bb360b61 	.word	0xbb360b61
 800970c:	3e2aaaab 	.word	0x3e2aaaab
 8009710:	0800a710 	.word	0x0800a710
 8009714:	3fb8aa3b 	.word	0x3fb8aa3b
 8009718:	3f317180 	.word	0x3f317180
 800971c:	3717f7d1 	.word	0x3717f7d1
 8009720:	0d800000 	.word	0x0d800000

08009724 <__ieee754_logf>:
 8009724:	ee10 3a10 	vmov	r3, s0
 8009728:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800972c:	d106      	bne.n	800973c <__ieee754_logf+0x18>
 800972e:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80098c4 <__ieee754_logf+0x1a0>
 8009732:	eddf 7a65 	vldr	s15, [pc, #404]	; 80098c8 <__ieee754_logf+0x1a4>
 8009736:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800973a:	4770      	bx	lr
 800973c:	2b00      	cmp	r3, #0
 800973e:	da02      	bge.n	8009746 <__ieee754_logf+0x22>
 8009740:	ee30 7a40 	vsub.f32	s14, s0, s0
 8009744:	e7f5      	b.n	8009732 <__ieee754_logf+0xe>
 8009746:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800974a:	db02      	blt.n	8009752 <__ieee754_logf+0x2e>
 800974c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009750:	4770      	bx	lr
 8009752:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009756:	bfbf      	itttt	lt
 8009758:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 80098cc <__ieee754_logf+0x1a8>
 800975c:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8009760:	f06f 0118 	mvnlt.w	r1, #24
 8009764:	ee17 3a90 	vmovlt	r3, s15
 8009768:	ea4f 52e3 	mov.w	r2, r3, asr #23
 800976c:	bfa8      	it	ge
 800976e:	2100      	movge	r1, #0
 8009770:	3a7f      	subs	r2, #127	; 0x7f
 8009772:	440a      	add	r2, r1
 8009774:	4956      	ldr	r1, [pc, #344]	; (80098d0 <__ieee754_logf+0x1ac>)
 8009776:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800977a:	4419      	add	r1, r3
 800977c:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 8009780:	eb02 52d1 	add.w	r2, r2, r1, lsr #23
 8009784:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 8009788:	4319      	orrs	r1, r3
 800978a:	ee07 1a90 	vmov	s15, r1
 800978e:	f103 010f 	add.w	r1, r3, #15
 8009792:	f3c1 0116 	ubfx	r1, r1, #0, #23
 8009796:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800979a:	290f      	cmp	r1, #15
 800979c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80097a0:	dc31      	bgt.n	8009806 <__ieee754_logf+0xe2>
 80097a2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80097a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097aa:	d10f      	bne.n	80097cc <__ieee754_logf+0xa8>
 80097ac:	2a00      	cmp	r2, #0
 80097ae:	f000 8085 	beq.w	80098bc <__ieee754_logf+0x198>
 80097b2:	ee07 2a90 	vmov	s15, r2
 80097b6:	ed9f 0a47 	vldr	s0, [pc, #284]	; 80098d4 <__ieee754_logf+0x1b0>
 80097ba:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80098d8 <__ieee754_logf+0x1b4>
 80097be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80097c2:	ee27 0a80 	vmul.f32	s0, s15, s0
 80097c6:	eea7 0a87 	vfma.f32	s0, s15, s14
 80097ca:	4770      	bx	lr
 80097cc:	eddf 7a43 	vldr	s15, [pc, #268]	; 80098dc <__ieee754_logf+0x1b8>
 80097d0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80097d4:	eea0 7a67 	vfms.f32	s14, s0, s15
 80097d8:	ee60 7a00 	vmul.f32	s15, s0, s0
 80097dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80097e0:	b912      	cbnz	r2, 80097e8 <__ieee754_logf+0xc4>
 80097e2:	ee30 0a47 	vsub.f32	s0, s0, s14
 80097e6:	4770      	bx	lr
 80097e8:	ee07 2a90 	vmov	s15, r2
 80097ec:	eddf 6a39 	vldr	s13, [pc, #228]	; 80098d4 <__ieee754_logf+0x1b0>
 80097f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80097f4:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80097f8:	ee37 0a40 	vsub.f32	s0, s14, s0
 80097fc:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80098d8 <__ieee754_logf+0x1b4>
 8009800:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8009804:	4770      	bx	lr
 8009806:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800980a:	ee70 7a27 	vadd.f32	s15, s0, s15
 800980e:	eddf 5a34 	vldr	s11, [pc, #208]	; 80098e0 <__ieee754_logf+0x1bc>
 8009812:	eddf 4a34 	vldr	s9, [pc, #208]	; 80098e4 <__ieee754_logf+0x1c0>
 8009816:	4934      	ldr	r1, [pc, #208]	; (80098e8 <__ieee754_logf+0x1c4>)
 8009818:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800981c:	4419      	add	r1, r3
 800981e:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 8009822:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8009826:	430b      	orrs	r3, r1
 8009828:	2b00      	cmp	r3, #0
 800982a:	ee07 2a90 	vmov	s15, r2
 800982e:	ee26 5a06 	vmul.f32	s10, s12, s12
 8009832:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009836:	ee25 7a05 	vmul.f32	s14, s10, s10
 800983a:	eddf 7a2c 	vldr	s15, [pc, #176]	; 80098ec <__ieee754_logf+0x1c8>
 800983e:	eee7 7a25 	vfma.f32	s15, s14, s11
 8009842:	eddf 5a2b 	vldr	s11, [pc, #172]	; 80098f0 <__ieee754_logf+0x1cc>
 8009846:	eee7 5a87 	vfma.f32	s11, s15, s14
 800984a:	eddf 7a2a 	vldr	s15, [pc, #168]	; 80098f4 <__ieee754_logf+0x1d0>
 800984e:	eee7 7a24 	vfma.f32	s15, s14, s9
 8009852:	eddf 4a29 	vldr	s9, [pc, #164]	; 80098f8 <__ieee754_logf+0x1d4>
 8009856:	eee7 4a87 	vfma.f32	s9, s15, s14
 800985a:	eddf 7a28 	vldr	s15, [pc, #160]	; 80098fc <__ieee754_logf+0x1d8>
 800985e:	eee4 7a87 	vfma.f32	s15, s9, s14
 8009862:	ee67 7a85 	vmul.f32	s15, s15, s10
 8009866:	eee5 7a87 	vfma.f32	s15, s11, s14
 800986a:	dd1c      	ble.n	80098a6 <__ieee754_logf+0x182>
 800986c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8009870:	ee20 7a07 	vmul.f32	s14, s0, s14
 8009874:	ee27 7a00 	vmul.f32	s14, s14, s0
 8009878:	ee77 7a87 	vadd.f32	s15, s15, s14
 800987c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8009880:	b922      	cbnz	r2, 800988c <__ieee754_logf+0x168>
 8009882:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009886:	ee30 0a67 	vsub.f32	s0, s0, s15
 800988a:	4770      	bx	lr
 800988c:	ed9f 6a11 	vldr	s12, [pc, #68]	; 80098d4 <__ieee754_logf+0x1b0>
 8009890:	eee6 7a86 	vfma.f32	s15, s13, s12
 8009894:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009898:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800989c:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80098d8 <__ieee754_logf+0x1b4>
 80098a0:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 80098a4:	4770      	bx	lr
 80098a6:	ee70 7a67 	vsub.f32	s15, s0, s15
 80098aa:	ee67 7a86 	vmul.f32	s15, s15, s12
 80098ae:	2a00      	cmp	r2, #0
 80098b0:	d0e9      	beq.n	8009886 <__ieee754_logf+0x162>
 80098b2:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80098d4 <__ieee754_logf+0x1b0>
 80098b6:	eee6 7ac7 	vfms.f32	s15, s13, s14
 80098ba:	e7ed      	b.n	8009898 <__ieee754_logf+0x174>
 80098bc:	ed9f 0a02 	vldr	s0, [pc, #8]	; 80098c8 <__ieee754_logf+0x1a4>
 80098c0:	4770      	bx	lr
 80098c2:	bf00      	nop
 80098c4:	cc000000 	.word	0xcc000000
 80098c8:	00000000 	.word	0x00000000
 80098cc:	4c000000 	.word	0x4c000000
 80098d0:	004afb20 	.word	0x004afb20
 80098d4:	3717f7d1 	.word	0x3717f7d1
 80098d8:	3f317180 	.word	0x3f317180
 80098dc:	3eaaaaab 	.word	0x3eaaaaab
 80098e0:	3e1cd04f 	.word	0x3e1cd04f
 80098e4:	3e178897 	.word	0x3e178897
 80098e8:	ffcf5c30 	.word	0xffcf5c30
 80098ec:	3e638e29 	.word	0x3e638e29
 80098f0:	3ecccccd 	.word	0x3ecccccd
 80098f4:	3e3a3325 	.word	0x3e3a3325
 80098f8:	3e924925 	.word	0x3e924925
 80098fc:	3f2aaaab 	.word	0x3f2aaaab

08009900 <__ieee754_powf>:
 8009900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009904:	ee10 5a90 	vmov	r5, s1
 8009908:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 800990c:	ed2d 8b02 	vpush	{d8}
 8009910:	eeb0 8a40 	vmov.f32	s16, s0
 8009914:	eef0 8a60 	vmov.f32	s17, s1
 8009918:	f000 8293 	beq.w	8009e42 <__ieee754_powf+0x542>
 800991c:	ee10 8a10 	vmov	r8, s0
 8009920:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8009924:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8009928:	dc06      	bgt.n	8009938 <__ieee754_powf+0x38>
 800992a:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800992e:	dd0a      	ble.n	8009946 <__ieee754_powf+0x46>
 8009930:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8009934:	f000 8285 	beq.w	8009e42 <__ieee754_powf+0x542>
 8009938:	ecbd 8b02 	vpop	{d8}
 800993c:	48d9      	ldr	r0, [pc, #868]	; (8009ca4 <__ieee754_powf+0x3a4>)
 800993e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009942:	f000 bbeb 	b.w	800a11c <nanf>
 8009946:	f1b8 0f00 	cmp.w	r8, #0
 800994a:	da1d      	bge.n	8009988 <__ieee754_powf+0x88>
 800994c:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8009950:	da2c      	bge.n	80099ac <__ieee754_powf+0xac>
 8009952:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8009956:	db30      	blt.n	80099ba <__ieee754_powf+0xba>
 8009958:	15fb      	asrs	r3, r7, #23
 800995a:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800995e:	fa47 f603 	asr.w	r6, r7, r3
 8009962:	fa06 f303 	lsl.w	r3, r6, r3
 8009966:	42bb      	cmp	r3, r7
 8009968:	d127      	bne.n	80099ba <__ieee754_powf+0xba>
 800996a:	f006 0601 	and.w	r6, r6, #1
 800996e:	f1c6 0602 	rsb	r6, r6, #2
 8009972:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8009976:	d122      	bne.n	80099be <__ieee754_powf+0xbe>
 8009978:	2d00      	cmp	r5, #0
 800997a:	f280 8268 	bge.w	8009e4e <__ieee754_powf+0x54e>
 800997e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8009982:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8009986:	e00d      	b.n	80099a4 <__ieee754_powf+0xa4>
 8009988:	2600      	movs	r6, #0
 800998a:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800998e:	d1f0      	bne.n	8009972 <__ieee754_powf+0x72>
 8009990:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8009994:	f000 8255 	beq.w	8009e42 <__ieee754_powf+0x542>
 8009998:	dd0a      	ble.n	80099b0 <__ieee754_powf+0xb0>
 800999a:	2d00      	cmp	r5, #0
 800999c:	f280 8254 	bge.w	8009e48 <__ieee754_powf+0x548>
 80099a0:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8009ca8 <__ieee754_powf+0x3a8>
 80099a4:	ecbd 8b02 	vpop	{d8}
 80099a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099ac:	2602      	movs	r6, #2
 80099ae:	e7ec      	b.n	800998a <__ieee754_powf+0x8a>
 80099b0:	2d00      	cmp	r5, #0
 80099b2:	daf5      	bge.n	80099a0 <__ieee754_powf+0xa0>
 80099b4:	eeb1 0a68 	vneg.f32	s0, s17
 80099b8:	e7f4      	b.n	80099a4 <__ieee754_powf+0xa4>
 80099ba:	2600      	movs	r6, #0
 80099bc:	e7d9      	b.n	8009972 <__ieee754_powf+0x72>
 80099be:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 80099c2:	d102      	bne.n	80099ca <__ieee754_powf+0xca>
 80099c4:	ee28 0a08 	vmul.f32	s0, s16, s16
 80099c8:	e7ec      	b.n	80099a4 <__ieee754_powf+0xa4>
 80099ca:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 80099ce:	eeb0 0a48 	vmov.f32	s0, s16
 80099d2:	d108      	bne.n	80099e6 <__ieee754_powf+0xe6>
 80099d4:	f1b8 0f00 	cmp.w	r8, #0
 80099d8:	db05      	blt.n	80099e6 <__ieee754_powf+0xe6>
 80099da:	ecbd 8b02 	vpop	{d8}
 80099de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099e2:	f000 ba4d 	b.w	8009e80 <__ieee754_sqrtf>
 80099e6:	f000 fb87 	bl	800a0f8 <fabsf>
 80099ea:	b124      	cbz	r4, 80099f6 <__ieee754_powf+0xf6>
 80099ec:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 80099f0:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80099f4:	d117      	bne.n	8009a26 <__ieee754_powf+0x126>
 80099f6:	2d00      	cmp	r5, #0
 80099f8:	bfbc      	itt	lt
 80099fa:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 80099fe:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8009a02:	f1b8 0f00 	cmp.w	r8, #0
 8009a06:	dacd      	bge.n	80099a4 <__ieee754_powf+0xa4>
 8009a08:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8009a0c:	ea54 0306 	orrs.w	r3, r4, r6
 8009a10:	d104      	bne.n	8009a1c <__ieee754_powf+0x11c>
 8009a12:	ee70 7a40 	vsub.f32	s15, s0, s0
 8009a16:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8009a1a:	e7c3      	b.n	80099a4 <__ieee754_powf+0xa4>
 8009a1c:	2e01      	cmp	r6, #1
 8009a1e:	d1c1      	bne.n	80099a4 <__ieee754_powf+0xa4>
 8009a20:	eeb1 0a40 	vneg.f32	s0, s0
 8009a24:	e7be      	b.n	80099a4 <__ieee754_powf+0xa4>
 8009a26:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8009a2a:	3801      	subs	r0, #1
 8009a2c:	ea56 0300 	orrs.w	r3, r6, r0
 8009a30:	d104      	bne.n	8009a3c <__ieee754_powf+0x13c>
 8009a32:	ee38 8a48 	vsub.f32	s16, s16, s16
 8009a36:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8009a3a:	e7b3      	b.n	80099a4 <__ieee754_powf+0xa4>
 8009a3c:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8009a40:	dd6d      	ble.n	8009b1e <__ieee754_powf+0x21e>
 8009a42:	4b9a      	ldr	r3, [pc, #616]	; (8009cac <__ieee754_powf+0x3ac>)
 8009a44:	429c      	cmp	r4, r3
 8009a46:	dc06      	bgt.n	8009a56 <__ieee754_powf+0x156>
 8009a48:	2d00      	cmp	r5, #0
 8009a4a:	daa9      	bge.n	80099a0 <__ieee754_powf+0xa0>
 8009a4c:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8009cb0 <__ieee754_powf+0x3b0>
 8009a50:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009a54:	e7a6      	b.n	80099a4 <__ieee754_powf+0xa4>
 8009a56:	4b97      	ldr	r3, [pc, #604]	; (8009cb4 <__ieee754_powf+0x3b4>)
 8009a58:	429c      	cmp	r4, r3
 8009a5a:	dd02      	ble.n	8009a62 <__ieee754_powf+0x162>
 8009a5c:	2d00      	cmp	r5, #0
 8009a5e:	dcf5      	bgt.n	8009a4c <__ieee754_powf+0x14c>
 8009a60:	e79e      	b.n	80099a0 <__ieee754_powf+0xa0>
 8009a62:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8009a66:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009a6a:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8009cb8 <__ieee754_powf+0x3b8>
 8009a6e:	eef1 6a40 	vneg.f32	s13, s0
 8009a72:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8009a76:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009a7a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8009a7e:	eee7 7a40 	vfms.f32	s15, s14, s0
 8009a82:	ee60 0a00 	vmul.f32	s1, s0, s0
 8009a86:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8009cbc <__ieee754_powf+0x3bc>
 8009a8a:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8009a8e:	eddf 7a8c 	vldr	s15, [pc, #560]	; 8009cc0 <__ieee754_powf+0x3c0>
 8009a92:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 8009a96:	eee0 7a07 	vfma.f32	s15, s0, s14
 8009a9a:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8009cc4 <__ieee754_powf+0x3c4>
 8009a9e:	eeb0 6a67 	vmov.f32	s12, s15
 8009aa2:	eea0 6a07 	vfma.f32	s12, s0, s14
 8009aa6:	ee16 3a10 	vmov	r3, s12
 8009aaa:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8009aae:	f023 030f 	bic.w	r3, r3, #15
 8009ab2:	ee00 3a90 	vmov	s1, r3
 8009ab6:	eee6 0a87 	vfma.f32	s1, s13, s14
 8009aba:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8009abe:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8009ac2:	f025 050f 	bic.w	r5, r5, #15
 8009ac6:	ee07 5a10 	vmov	s14, r5
 8009aca:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8009ace:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8009ad2:	ee07 3a90 	vmov	s15, r3
 8009ad6:	eee7 0a27 	vfma.f32	s1, s14, s15
 8009ada:	3e01      	subs	r6, #1
 8009adc:	ea56 0200 	orrs.w	r2, r6, r0
 8009ae0:	ee07 5a10 	vmov	s14, r5
 8009ae4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009ae8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8009aec:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8009af0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8009af4:	ee17 4a10 	vmov	r4, s14
 8009af8:	bf08      	it	eq
 8009afa:	eeb0 8a40 	vmoveq.f32	s16, s0
 8009afe:	2c00      	cmp	r4, #0
 8009b00:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8009b04:	f340 8184 	ble.w	8009e10 <__ieee754_powf+0x510>
 8009b08:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8009b0c:	f340 80fc 	ble.w	8009d08 <__ieee754_powf+0x408>
 8009b10:	eddf 7a67 	vldr	s15, [pc, #412]	; 8009cb0 <__ieee754_powf+0x3b0>
 8009b14:	ee28 0a27 	vmul.f32	s0, s16, s15
 8009b18:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009b1c:	e742      	b.n	80099a4 <__ieee754_powf+0xa4>
 8009b1e:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 8009b22:	bfbf      	itttt	lt
 8009b24:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 8009cc8 <__ieee754_powf+0x3c8>
 8009b28:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8009b2c:	f06f 0217 	mvnlt.w	r2, #23
 8009b30:	ee17 4a90 	vmovlt	r4, s15
 8009b34:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8009b38:	bfa8      	it	ge
 8009b3a:	2200      	movge	r2, #0
 8009b3c:	3b7f      	subs	r3, #127	; 0x7f
 8009b3e:	4413      	add	r3, r2
 8009b40:	4a62      	ldr	r2, [pc, #392]	; (8009ccc <__ieee754_powf+0x3cc>)
 8009b42:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8009b46:	4294      	cmp	r4, r2
 8009b48:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8009b4c:	dd06      	ble.n	8009b5c <__ieee754_powf+0x25c>
 8009b4e:	4a60      	ldr	r2, [pc, #384]	; (8009cd0 <__ieee754_powf+0x3d0>)
 8009b50:	4294      	cmp	r4, r2
 8009b52:	f340 80a5 	ble.w	8009ca0 <__ieee754_powf+0x3a0>
 8009b56:	3301      	adds	r3, #1
 8009b58:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8009b5c:	2400      	movs	r4, #0
 8009b5e:	4a5d      	ldr	r2, [pc, #372]	; (8009cd4 <__ieee754_powf+0x3d4>)
 8009b60:	00a7      	lsls	r7, r4, #2
 8009b62:	443a      	add	r2, r7
 8009b64:	ee07 1a90 	vmov	s15, r1
 8009b68:	ed92 7a00 	vldr	s14, [r2]
 8009b6c:	4a5a      	ldr	r2, [pc, #360]	; (8009cd8 <__ieee754_powf+0x3d8>)
 8009b6e:	ee37 6a27 	vadd.f32	s12, s14, s15
 8009b72:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8009b76:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8009b7a:	1049      	asrs	r1, r1, #1
 8009b7c:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8009b80:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8009b84:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8009b88:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8009b8c:	ee06 1a10 	vmov	s12, r1
 8009b90:	ee65 4aa6 	vmul.f32	s9, s11, s13
 8009b94:	ee14 ca90 	vmov	ip, s9
 8009b98:	ea02 0c0c 	and.w	ip, r2, ip
 8009b9c:	ee05 ca10 	vmov	s10, ip
 8009ba0:	eeb1 4a45 	vneg.f32	s8, s10
 8009ba4:	eee4 5a06 	vfma.f32	s11, s8, s12
 8009ba8:	ee36 6a47 	vsub.f32	s12, s12, s14
 8009bac:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8009cdc <__ieee754_powf+0x3dc>
 8009bb0:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8009bb4:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8009bb8:	eee4 5a06 	vfma.f32	s11, s8, s12
 8009bbc:	ee67 3aa7 	vmul.f32	s7, s15, s15
 8009bc0:	ee25 6aa6 	vmul.f32	s12, s11, s13
 8009bc4:	eddf 5a46 	vldr	s11, [pc, #280]	; 8009ce0 <__ieee754_powf+0x3e0>
 8009bc8:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8009bcc:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009ce4 <__ieee754_powf+0x3e4>
 8009bd0:	eee7 5a27 	vfma.f32	s11, s14, s15
 8009bd4:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8009cb8 <__ieee754_powf+0x3b8>
 8009bd8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8009bdc:	eddf 5a42 	vldr	s11, [pc, #264]	; 8009ce8 <__ieee754_powf+0x3e8>
 8009be0:	eee7 5a27 	vfma.f32	s11, s14, s15
 8009be4:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8009cec <__ieee754_powf+0x3ec>
 8009be8:	ee75 6a24 	vadd.f32	s13, s10, s9
 8009bec:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8009bf0:	ee66 6a86 	vmul.f32	s13, s13, s12
 8009bf4:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 8009bf8:	eef0 7a65 	vmov.f32	s15, s11
 8009bfc:	eee3 6a87 	vfma.f32	s13, s7, s14
 8009c00:	eee5 7a05 	vfma.f32	s15, s10, s10
 8009c04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c08:	ee17 1a90 	vmov	r1, s15
 8009c0c:	4011      	ands	r1, r2
 8009c0e:	ee07 1a90 	vmov	s15, r1
 8009c12:	ee37 7ae5 	vsub.f32	s14, s15, s11
 8009c16:	eddf 5a36 	vldr	s11, [pc, #216]	; 8009cf0 <__ieee754_powf+0x3f0>
 8009c1a:	eea4 7a05 	vfma.f32	s14, s8, s10
 8009c1e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8009c22:	ee27 7a24 	vmul.f32	s14, s14, s9
 8009c26:	eea7 7a86 	vfma.f32	s14, s15, s12
 8009c2a:	eeb0 6a47 	vmov.f32	s12, s14
 8009c2e:	eea5 6a27 	vfma.f32	s12, s10, s15
 8009c32:	ee16 1a10 	vmov	r1, s12
 8009c36:	4011      	ands	r1, r2
 8009c38:	ee06 1a90 	vmov	s13, r1
 8009c3c:	eee4 6a27 	vfma.f32	s13, s8, s15
 8009c40:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8009cf4 <__ieee754_powf+0x3f4>
 8009c44:	ee37 7a66 	vsub.f32	s14, s14, s13
 8009c48:	ee06 1a10 	vmov	s12, r1
 8009c4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009c50:	eddf 7a29 	vldr	s15, [pc, #164]	; 8009cf8 <__ieee754_powf+0x3f8>
 8009c54:	4929      	ldr	r1, [pc, #164]	; (8009cfc <__ieee754_powf+0x3fc>)
 8009c56:	eea6 7a27 	vfma.f32	s14, s12, s15
 8009c5a:	4439      	add	r1, r7
 8009c5c:	edd1 7a00 	vldr	s15, [r1]
 8009c60:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009c64:	ee07 3a90 	vmov	s15, r3
 8009c68:	eef0 0a47 	vmov.f32	s1, s14
 8009c6c:	4b24      	ldr	r3, [pc, #144]	; (8009d00 <__ieee754_powf+0x400>)
 8009c6e:	eee6 0a25 	vfma.f32	s1, s12, s11
 8009c72:	443b      	add	r3, r7
 8009c74:	ed93 5a00 	vldr	s10, [r3]
 8009c78:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009c7c:	ee70 0a85 	vadd.f32	s1, s1, s10
 8009c80:	ee70 7aa6 	vadd.f32	s15, s1, s13
 8009c84:	ee17 3a90 	vmov	r3, s15
 8009c88:	4013      	ands	r3, r2
 8009c8a:	ee07 3a90 	vmov	s15, r3
 8009c8e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009c92:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8009c96:	eee6 7a65 	vfms.f32	s15, s12, s11
 8009c9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009c9e:	e70e      	b.n	8009abe <__ieee754_powf+0x1be>
 8009ca0:	2401      	movs	r4, #1
 8009ca2:	e75c      	b.n	8009b5e <__ieee754_powf+0x25e>
 8009ca4:	0800a5e9 	.word	0x0800a5e9
 8009ca8:	00000000 	.word	0x00000000
 8009cac:	3f7ffff7 	.word	0x3f7ffff7
 8009cb0:	7149f2ca 	.word	0x7149f2ca
 8009cb4:	3f800007 	.word	0x3f800007
 8009cb8:	3eaaaaab 	.word	0x3eaaaaab
 8009cbc:	36eca570 	.word	0x36eca570
 8009cc0:	3fb8aa3b 	.word	0x3fb8aa3b
 8009cc4:	3fb8aa00 	.word	0x3fb8aa00
 8009cc8:	4b800000 	.word	0x4b800000
 8009ccc:	001cc471 	.word	0x001cc471
 8009cd0:	005db3d6 	.word	0x005db3d6
 8009cd4:	0800a728 	.word	0x0800a728
 8009cd8:	fffff000 	.word	0xfffff000
 8009cdc:	3e6c3255 	.word	0x3e6c3255
 8009ce0:	3e53f142 	.word	0x3e53f142
 8009ce4:	3e8ba305 	.word	0x3e8ba305
 8009ce8:	3edb6db7 	.word	0x3edb6db7
 8009cec:	3f19999a 	.word	0x3f19999a
 8009cf0:	3f763800 	.word	0x3f763800
 8009cf4:	3f76384f 	.word	0x3f76384f
 8009cf8:	369dc3a0 	.word	0x369dc3a0
 8009cfc:	0800a738 	.word	0x0800a738
 8009d00:	0800a730 	.word	0x0800a730
 8009d04:	3338aa3c 	.word	0x3338aa3c
 8009d08:	f040 8092 	bne.w	8009e30 <__ieee754_powf+0x530>
 8009d0c:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8009d04 <__ieee754_powf+0x404>
 8009d10:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009d14:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8009d18:	eef4 6ac7 	vcmpe.f32	s13, s14
 8009d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d20:	f73f aef6 	bgt.w	8009b10 <__ieee754_powf+0x210>
 8009d24:	15db      	asrs	r3, r3, #23
 8009d26:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8009d2a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009d2e:	4103      	asrs	r3, r0
 8009d30:	4423      	add	r3, r4
 8009d32:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009d36:	4947      	ldr	r1, [pc, #284]	; (8009e54 <__ieee754_powf+0x554>)
 8009d38:	3a7f      	subs	r2, #127	; 0x7f
 8009d3a:	4111      	asrs	r1, r2
 8009d3c:	ea23 0101 	bic.w	r1, r3, r1
 8009d40:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8009d44:	ee07 1a10 	vmov	s14, r1
 8009d48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8009d4c:	f1c2 0217 	rsb	r2, r2, #23
 8009d50:	4110      	asrs	r0, r2
 8009d52:	2c00      	cmp	r4, #0
 8009d54:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009d58:	bfb8      	it	lt
 8009d5a:	4240      	neglt	r0, r0
 8009d5c:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8009d60:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009e58 <__ieee754_powf+0x558>
 8009d64:	ee17 3a10 	vmov	r3, s14
 8009d68:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8009d6c:	f023 030f 	bic.w	r3, r3, #15
 8009d70:	ee07 3a10 	vmov	s14, r3
 8009d74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009d78:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8009d7c:	eddf 7a37 	vldr	s15, [pc, #220]	; 8009e5c <__ieee754_powf+0x55c>
 8009d80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d84:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8009d88:	eddf 6a35 	vldr	s13, [pc, #212]	; 8009e60 <__ieee754_powf+0x560>
 8009d8c:	eeb0 0a67 	vmov.f32	s0, s15
 8009d90:	eea7 0a26 	vfma.f32	s0, s14, s13
 8009d94:	eeb0 6a40 	vmov.f32	s12, s0
 8009d98:	eea7 6a66 	vfms.f32	s12, s14, s13
 8009d9c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8009da0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8009da4:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8009e64 <__ieee754_powf+0x564>
 8009da8:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8009e68 <__ieee754_powf+0x568>
 8009dac:	eea7 6a26 	vfma.f32	s12, s14, s13
 8009db0:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8009e6c <__ieee754_powf+0x56c>
 8009db4:	eee6 6a07 	vfma.f32	s13, s12, s14
 8009db8:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8009e70 <__ieee754_powf+0x570>
 8009dbc:	eea6 6a87 	vfma.f32	s12, s13, s14
 8009dc0:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8009e74 <__ieee754_powf+0x574>
 8009dc4:	eee6 6a07 	vfma.f32	s13, s12, s14
 8009dc8:	eeb0 6a40 	vmov.f32	s12, s0
 8009dcc:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8009dd0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8009dd4:	eeb0 7a46 	vmov.f32	s14, s12
 8009dd8:	ee77 6a66 	vsub.f32	s13, s14, s13
 8009ddc:	ee20 6a06 	vmul.f32	s12, s0, s12
 8009de0:	eee0 7a27 	vfma.f32	s15, s0, s15
 8009de4:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8009de8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009dec:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8009df0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8009df4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8009df8:	ee10 3a10 	vmov	r3, s0
 8009dfc:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8009e00:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009e04:	da1a      	bge.n	8009e3c <__ieee754_powf+0x53c>
 8009e06:	f000 f9e9 	bl	800a1dc <scalbnf>
 8009e0a:	ee20 0a08 	vmul.f32	s0, s0, s16
 8009e0e:	e5c9      	b.n	80099a4 <__ieee754_powf+0xa4>
 8009e10:	4a19      	ldr	r2, [pc, #100]	; (8009e78 <__ieee754_powf+0x578>)
 8009e12:	4293      	cmp	r3, r2
 8009e14:	dd02      	ble.n	8009e1c <__ieee754_powf+0x51c>
 8009e16:	eddf 7a19 	vldr	s15, [pc, #100]	; 8009e7c <__ieee754_powf+0x57c>
 8009e1a:	e67b      	b.n	8009b14 <__ieee754_powf+0x214>
 8009e1c:	d108      	bne.n	8009e30 <__ieee754_powf+0x530>
 8009e1e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009e22:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8009e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e2a:	f6ff af7b 	blt.w	8009d24 <__ieee754_powf+0x424>
 8009e2e:	e7f2      	b.n	8009e16 <__ieee754_powf+0x516>
 8009e30:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8009e34:	f73f af76 	bgt.w	8009d24 <__ieee754_powf+0x424>
 8009e38:	2000      	movs	r0, #0
 8009e3a:	e78f      	b.n	8009d5c <__ieee754_powf+0x45c>
 8009e3c:	ee00 3a10 	vmov	s0, r3
 8009e40:	e7e3      	b.n	8009e0a <__ieee754_powf+0x50a>
 8009e42:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009e46:	e5ad      	b.n	80099a4 <__ieee754_powf+0xa4>
 8009e48:	eeb0 0a68 	vmov.f32	s0, s17
 8009e4c:	e5aa      	b.n	80099a4 <__ieee754_powf+0xa4>
 8009e4e:	eeb0 0a48 	vmov.f32	s0, s16
 8009e52:	e5a7      	b.n	80099a4 <__ieee754_powf+0xa4>
 8009e54:	007fffff 	.word	0x007fffff
 8009e58:	3f317218 	.word	0x3f317218
 8009e5c:	35bfbe8c 	.word	0x35bfbe8c
 8009e60:	3f317200 	.word	0x3f317200
 8009e64:	3331bb4c 	.word	0x3331bb4c
 8009e68:	b5ddea0e 	.word	0xb5ddea0e
 8009e6c:	388ab355 	.word	0x388ab355
 8009e70:	bb360b61 	.word	0xbb360b61
 8009e74:	3e2aaaab 	.word	0x3e2aaaab
 8009e78:	43160000 	.word	0x43160000
 8009e7c:	0da24260 	.word	0x0da24260

08009e80 <__ieee754_sqrtf>:
 8009e80:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8009e84:	4770      	bx	lr

08009e86 <matherr>:
 8009e86:	2000      	movs	r0, #0
 8009e88:	4770      	bx	lr
 8009e8a:	0000      	movs	r0, r0
 8009e8c:	0000      	movs	r0, r0
	...

08009e90 <nan>:
 8009e90:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009e98 <nan+0x8>
 8009e94:	4770      	bx	lr
 8009e96:	bf00      	nop
 8009e98:	00000000 	.word	0x00000000
 8009e9c:	7ff80000 	.word	0x7ff80000

08009ea0 <expm1f>:
 8009ea0:	ee10 2a10 	vmov	r2, s0
 8009ea4:	4985      	ldr	r1, [pc, #532]	; (800a0bc <expm1f+0x21c>)
 8009ea6:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8009eaa:	428b      	cmp	r3, r1
 8009eac:	d924      	bls.n	8009ef8 <expm1f+0x58>
 8009eae:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009eb2:	d902      	bls.n	8009eba <expm1f+0x1a>
 8009eb4:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009eb8:	4770      	bx	lr
 8009eba:	d106      	bne.n	8009eca <expm1f+0x2a>
 8009ebc:	2a00      	cmp	r2, #0
 8009ebe:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8009ec2:	bfb8      	it	lt
 8009ec4:	eeb0 0a67 	vmovlt.f32	s0, s15
 8009ec8:	4770      	bx	lr
 8009eca:	2a00      	cmp	r2, #0
 8009ecc:	db08      	blt.n	8009ee0 <expm1f+0x40>
 8009ece:	4a7c      	ldr	r2, [pc, #496]	; (800a0c0 <expm1f+0x220>)
 8009ed0:	4293      	cmp	r3, r2
 8009ed2:	f240 80eb 	bls.w	800a0ac <expm1f+0x20c>
 8009ed6:	ed9f 0a7b 	vldr	s0, [pc, #492]	; 800a0c4 <expm1f+0x224>
 8009eda:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009ede:	4770      	bx	lr
 8009ee0:	eddf 7a79 	vldr	s15, [pc, #484]	; 800a0c8 <expm1f+0x228>
 8009ee4:	ee70 7a27 	vadd.f32	s15, s0, s15
 8009ee8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ef0:	d554      	bpl.n	8009f9c <expm1f+0xfc>
 8009ef2:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8009ef6:	4770      	bx	lr
 8009ef8:	4974      	ldr	r1, [pc, #464]	; (800a0cc <expm1f+0x22c>)
 8009efa:	428b      	cmp	r3, r1
 8009efc:	d96d      	bls.n	8009fda <expm1f+0x13a>
 8009efe:	4974      	ldr	r1, [pc, #464]	; (800a0d0 <expm1f+0x230>)
 8009f00:	428b      	cmp	r3, r1
 8009f02:	d84b      	bhi.n	8009f9c <expm1f+0xfc>
 8009f04:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800a0d4 <expm1f+0x234>
 8009f08:	2a00      	cmp	r2, #0
 8009f0a:	bfa7      	ittee	ge
 8009f0c:	ee30 7a47 	vsubge.f32	s14, s0, s14
 8009f10:	eddf 7a71 	vldrge	s15, [pc, #452]	; 800a0d8 <expm1f+0x238>
 8009f14:	eddf 7a71 	vldrlt	s15, [pc, #452]	; 800a0dc <expm1f+0x23c>
 8009f18:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 8009f1c:	bfac      	ite	ge
 8009f1e:	2301      	movge	r3, #1
 8009f20:	f04f 33ff 	movlt.w	r3, #4294967295
 8009f24:	ee37 0a67 	vsub.f32	s0, s14, s15
 8009f28:	ee37 7a40 	vsub.f32	s14, s14, s0
 8009f2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009f30:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8009f34:	ee20 5a25 	vmul.f32	s10, s0, s11
 8009f38:	eddf 6a69 	vldr	s13, [pc, #420]	; 800a0e0 <expm1f+0x240>
 8009f3c:	ed9f 6a69 	vldr	s12, [pc, #420]	; 800a0e4 <expm1f+0x244>
 8009f40:	ee20 7a05 	vmul.f32	s14, s0, s10
 8009f44:	eea7 6a26 	vfma.f32	s12, s14, s13
 8009f48:	eddf 6a67 	vldr	s13, [pc, #412]	; 800a0e8 <expm1f+0x248>
 8009f4c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8009f50:	ed9f 6a66 	vldr	s12, [pc, #408]	; 800a0ec <expm1f+0x24c>
 8009f54:	eea6 6a87 	vfma.f32	s12, s13, s14
 8009f58:	eddf 6a65 	vldr	s13, [pc, #404]	; 800a0f0 <expm1f+0x250>
 8009f5c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8009f60:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009f64:	eef0 4a46 	vmov.f32	s9, s12
 8009f68:	eee6 4a87 	vfma.f32	s9, s13, s14
 8009f6c:	eef0 6a64 	vmov.f32	s13, s9
 8009f70:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 8009f74:	eee5 4a66 	vfms.f32	s9, s10, s13
 8009f78:	ee36 5ae4 	vsub.f32	s10, s13, s9
 8009f7c:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8009f80:	eee0 6a64 	vfms.f32	s13, s0, s9
 8009f84:	eef0 4a66 	vmov.f32	s9, s13
 8009f88:	eec5 6a24 	vdiv.f32	s13, s10, s9
 8009f8c:	ee66 6a87 	vmul.f32	s13, s13, s14
 8009f90:	bb8b      	cbnz	r3, 8009ff6 <expm1f+0x156>
 8009f92:	eef0 7a47 	vmov.f32	s15, s14
 8009f96:	eed0 7a26 	vfnms.f32	s15, s0, s13
 8009f9a:	e027      	b.n	8009fec <expm1f+0x14c>
 8009f9c:	eddf 7a55 	vldr	s15, [pc, #340]	; 800a0f4 <expm1f+0x254>
 8009fa0:	2a00      	cmp	r2, #0
 8009fa2:	ee20 7a27 	vmul.f32	s14, s0, s15
 8009fa6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8009faa:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8009fae:	bfa8      	it	ge
 8009fb0:	eef0 7a66 	vmovge.f32	s15, s13
 8009fb4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009fb8:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800a0d4 <expm1f+0x234>
 8009fbc:	eddf 6a46 	vldr	s13, [pc, #280]	; 800a0d8 <expm1f+0x238>
 8009fc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009fc4:	ee17 3a90 	vmov	r3, s15
 8009fc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009fcc:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8009fd0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009fd4:	eeb0 7a40 	vmov.f32	s14, s0
 8009fd8:	e7a4      	b.n	8009f24 <expm1f+0x84>
 8009fda:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 8009fde:	d208      	bcs.n	8009ff2 <expm1f+0x152>
 8009fe0:	eddf 7a38 	vldr	s15, [pc, #224]	; 800a0c4 <expm1f+0x224>
 8009fe4:	ee70 7a27 	vadd.f32	s15, s0, s15
 8009fe8:	ee77 7ae7 	vsub.f32	s15, s15, s15
 8009fec:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009ff0:	4770      	bx	lr
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	e79c      	b.n	8009f30 <expm1f+0x90>
 8009ff6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8009ffa:	1c5a      	adds	r2, r3, #1
 8009ffc:	eed6 7a80 	vfnms.f32	s15, s13, s0
 800a000:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a004:	d106      	bne.n	800a014 <expm1f+0x174>
 800a006:	ee70 7a67 	vsub.f32	s15, s0, s15
 800a00a:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 800a00e:	eea7 0aa5 	vfma.f32	s0, s15, s11
 800a012:	4770      	bx	lr
 800a014:	2b01      	cmp	r3, #1
 800a016:	d118      	bne.n	800a04a <expm1f+0x1aa>
 800a018:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 800a01c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800a020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a024:	bf41      	itttt	mi
 800a026:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 800a02a:	ee37 0ac0 	vsubmi.f32	s0, s15, s0
 800a02e:	eef8 7a00 	vmovmi.f32	s15, #128	; 0xc0000000 -2.0
 800a032:	ee20 0a27 	vmulmi.f32	s0, s0, s15
 800a036:	bf5f      	itttt	pl
 800a038:	ee30 0a67 	vsubpl.f32	s0, s0, s15
 800a03c:	eef0 7a00 	vmovpl.f32	s15, #0	; 0x40000000  2.0
 800a040:	eea0 6a27 	vfmapl.f32	s12, s0, s15
 800a044:	eeb0 0a46 	vmovpl.f32	s0, s12
 800a048:	4770      	bx	lr
 800a04a:	1c5a      	adds	r2, r3, #1
 800a04c:	2a39      	cmp	r2, #57	; 0x39
 800a04e:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 800a052:	d90b      	bls.n	800a06c <expm1f+0x1cc>
 800a054:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800a058:	ee36 0a40 	vsub.f32	s0, s12, s0
 800a05c:	ee10 3a10 	vmov	r3, s0
 800a060:	440b      	add	r3, r1
 800a062:	ee00 3a10 	vmov	s0, r3
 800a066:	ee30 0a46 	vsub.f32	s0, s0, s12
 800a06a:	4770      	bx	lr
 800a06c:	2b16      	cmp	r3, #22
 800a06e:	dc11      	bgt.n	800a094 <expm1f+0x1f4>
 800a070:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a074:	fa42 f303 	asr.w	r3, r2, r3
 800a078:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 800a07c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800a080:	ee07 3a90 	vmov	s15, r3
 800a084:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800a088:	ee10 3a10 	vmov	r3, s0
 800a08c:	440b      	add	r3, r1
 800a08e:	ee00 3a10 	vmov	s0, r3
 800a092:	4770      	bx	lr
 800a094:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800a098:	05db      	lsls	r3, r3, #23
 800a09a:	ee07 3a10 	vmov	s14, r3
 800a09e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a0a2:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a0a6:	ee30 0a06 	vadd.f32	s0, s0, s12
 800a0aa:	e7ed      	b.n	800a088 <expm1f+0x1e8>
 800a0ac:	eddf 7a11 	vldr	s15, [pc, #68]	; 800a0f4 <expm1f+0x254>
 800a0b0:	ee20 7a27 	vmul.f32	s14, s0, s15
 800a0b4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a0b8:	e77c      	b.n	8009fb4 <expm1f+0x114>
 800a0ba:	bf00      	nop
 800a0bc:	4195b843 	.word	0x4195b843
 800a0c0:	42b17217 	.word	0x42b17217
 800a0c4:	7149f2ca 	.word	0x7149f2ca
 800a0c8:	0da24260 	.word	0x0da24260
 800a0cc:	3eb17218 	.word	0x3eb17218
 800a0d0:	3f851591 	.word	0x3f851591
 800a0d4:	3f317180 	.word	0x3f317180
 800a0d8:	3717f7d1 	.word	0x3717f7d1
 800a0dc:	b717f7d1 	.word	0xb717f7d1
 800a0e0:	b457edbb 	.word	0xb457edbb
 800a0e4:	36867e54 	.word	0x36867e54
 800a0e8:	b8a670cd 	.word	0xb8a670cd
 800a0ec:	3ad00d01 	.word	0x3ad00d01
 800a0f0:	bd088889 	.word	0xbd088889
 800a0f4:	3fb8aa3b 	.word	0x3fb8aa3b

0800a0f8 <fabsf>:
 800a0f8:	ee10 3a10 	vmov	r3, s0
 800a0fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a100:	ee00 3a10 	vmov	s0, r3
 800a104:	4770      	bx	lr

0800a106 <finitef>:
 800a106:	ee10 3a10 	vmov	r3, s0
 800a10a:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800a10e:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800a112:	bfac      	ite	ge
 800a114:	2000      	movge	r0, #0
 800a116:	2001      	movlt	r0, #1
 800a118:	4770      	bx	lr
	...

0800a11c <nanf>:
 800a11c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a124 <nanf+0x8>
 800a120:	4770      	bx	lr
 800a122:	bf00      	nop
 800a124:	7fc00000 	.word	0x7fc00000

0800a128 <rintf>:
 800a128:	b513      	push	{r0, r1, r4, lr}
 800a12a:	ee10 1a10 	vmov	r1, s0
 800a12e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a132:	0ddc      	lsrs	r4, r3, #23
 800a134:	3c7f      	subs	r4, #127	; 0x7f
 800a136:	2c16      	cmp	r4, #22
 800a138:	dc46      	bgt.n	800a1c8 <rintf+0xa0>
 800a13a:	b32b      	cbz	r3, 800a188 <rintf+0x60>
 800a13c:	2c00      	cmp	r4, #0
 800a13e:	ee10 2a10 	vmov	r2, s0
 800a142:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 800a146:	da21      	bge.n	800a18c <rintf+0x64>
 800a148:	f3c1 0316 	ubfx	r3, r1, #0, #23
 800a14c:	425b      	negs	r3, r3
 800a14e:	4a21      	ldr	r2, [pc, #132]	; (800a1d4 <rintf+0xac>)
 800a150:	0a5b      	lsrs	r3, r3, #9
 800a152:	0d09      	lsrs	r1, r1, #20
 800a154:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a158:	0509      	lsls	r1, r1, #20
 800a15a:	430b      	orrs	r3, r1
 800a15c:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800a160:	ee07 3a90 	vmov	s15, r3
 800a164:	edd2 6a00 	vldr	s13, [r2]
 800a168:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800a16c:	ed8d 7a01 	vstr	s14, [sp, #4]
 800a170:	eddd 7a01 	vldr	s15, [sp, #4]
 800a174:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a178:	ee17 3a90 	vmov	r3, s15
 800a17c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a180:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 800a184:	ee00 3a10 	vmov	s0, r3
 800a188:	b002      	add	sp, #8
 800a18a:	bd10      	pop	{r4, pc}
 800a18c:	4b12      	ldr	r3, [pc, #72]	; (800a1d8 <rintf+0xb0>)
 800a18e:	4123      	asrs	r3, r4
 800a190:	4219      	tst	r1, r3
 800a192:	d0f9      	beq.n	800a188 <rintf+0x60>
 800a194:	085b      	lsrs	r3, r3, #1
 800a196:	4219      	tst	r1, r3
 800a198:	d006      	beq.n	800a1a8 <rintf+0x80>
 800a19a:	ea21 0203 	bic.w	r2, r1, r3
 800a19e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a1a2:	fa43 f404 	asr.w	r4, r3, r4
 800a1a6:	4322      	orrs	r2, r4
 800a1a8:	4b0a      	ldr	r3, [pc, #40]	; (800a1d4 <rintf+0xac>)
 800a1aa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a1ae:	ed90 7a00 	vldr	s14, [r0]
 800a1b2:	ee07 2a90 	vmov	s15, r2
 800a1b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a1ba:	edcd 7a01 	vstr	s15, [sp, #4]
 800a1be:	ed9d 0a01 	vldr	s0, [sp, #4]
 800a1c2:	ee30 0a47 	vsub.f32	s0, s0, s14
 800a1c6:	e7df      	b.n	800a188 <rintf+0x60>
 800a1c8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a1cc:	d3dc      	bcc.n	800a188 <rintf+0x60>
 800a1ce:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a1d2:	e7d9      	b.n	800a188 <rintf+0x60>
 800a1d4:	0800a740 	.word	0x0800a740
 800a1d8:	007fffff 	.word	0x007fffff

0800a1dc <scalbnf>:
 800a1dc:	b508      	push	{r3, lr}
 800a1de:	ee10 2a10 	vmov	r2, s0
 800a1e2:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800a1e6:	ed2d 8b02 	vpush	{d8}
 800a1ea:	eef0 0a40 	vmov.f32	s1, s0
 800a1ee:	d004      	beq.n	800a1fa <scalbnf+0x1e>
 800a1f0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a1f4:	d306      	bcc.n	800a204 <scalbnf+0x28>
 800a1f6:	ee70 0a00 	vadd.f32	s1, s0, s0
 800a1fa:	ecbd 8b02 	vpop	{d8}
 800a1fe:	eeb0 0a60 	vmov.f32	s0, s1
 800a202:	bd08      	pop	{r3, pc}
 800a204:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a208:	d21c      	bcs.n	800a244 <scalbnf+0x68>
 800a20a:	4b1f      	ldr	r3, [pc, #124]	; (800a288 <scalbnf+0xac>)
 800a20c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800a28c <scalbnf+0xb0>
 800a210:	4298      	cmp	r0, r3
 800a212:	ee60 0a27 	vmul.f32	s1, s0, s15
 800a216:	db10      	blt.n	800a23a <scalbnf+0x5e>
 800a218:	ee10 2a90 	vmov	r2, s1
 800a21c:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800a220:	3b19      	subs	r3, #25
 800a222:	4403      	add	r3, r0
 800a224:	2bfe      	cmp	r3, #254	; 0xfe
 800a226:	dd0f      	ble.n	800a248 <scalbnf+0x6c>
 800a228:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800a290 <scalbnf+0xb4>
 800a22c:	eeb0 0a48 	vmov.f32	s0, s16
 800a230:	f000 f834 	bl	800a29c <copysignf>
 800a234:	ee60 0a08 	vmul.f32	s1, s0, s16
 800a238:	e7df      	b.n	800a1fa <scalbnf+0x1e>
 800a23a:	eddf 7a16 	vldr	s15, [pc, #88]	; 800a294 <scalbnf+0xb8>
 800a23e:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800a242:	e7da      	b.n	800a1fa <scalbnf+0x1e>
 800a244:	0ddb      	lsrs	r3, r3, #23
 800a246:	e7ec      	b.n	800a222 <scalbnf+0x46>
 800a248:	2b00      	cmp	r3, #0
 800a24a:	dd06      	ble.n	800a25a <scalbnf+0x7e>
 800a24c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800a250:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800a254:	ee00 3a90 	vmov	s1, r3
 800a258:	e7cf      	b.n	800a1fa <scalbnf+0x1e>
 800a25a:	f113 0f16 	cmn.w	r3, #22
 800a25e:	da06      	bge.n	800a26e <scalbnf+0x92>
 800a260:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a264:	4298      	cmp	r0, r3
 800a266:	dcdf      	bgt.n	800a228 <scalbnf+0x4c>
 800a268:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800a294 <scalbnf+0xb8>
 800a26c:	e7de      	b.n	800a22c <scalbnf+0x50>
 800a26e:	3319      	adds	r3, #25
 800a270:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800a274:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800a278:	eddf 7a07 	vldr	s15, [pc, #28]	; 800a298 <scalbnf+0xbc>
 800a27c:	ee07 3a10 	vmov	s14, r3
 800a280:	ee67 0a27 	vmul.f32	s1, s14, s15
 800a284:	e7b9      	b.n	800a1fa <scalbnf+0x1e>
 800a286:	bf00      	nop
 800a288:	ffff3cb0 	.word	0xffff3cb0
 800a28c:	4c000000 	.word	0x4c000000
 800a290:	7149f2ca 	.word	0x7149f2ca
 800a294:	0da24260 	.word	0x0da24260
 800a298:	33000000 	.word	0x33000000

0800a29c <copysignf>:
 800a29c:	ee10 3a10 	vmov	r3, s0
 800a2a0:	ee10 2a90 	vmov	r2, s1
 800a2a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a2a8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800a2ac:	4313      	orrs	r3, r2
 800a2ae:	ee00 3a10 	vmov	s0, r3
 800a2b2:	4770      	bx	lr

0800a2b4 <_init>:
 800a2b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2b6:	bf00      	nop
 800a2b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2ba:	bc08      	pop	{r3}
 800a2bc:	469e      	mov	lr, r3
 800a2be:	4770      	bx	lr

0800a2c0 <_fini>:
 800a2c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2c2:	bf00      	nop
 800a2c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2c6:	bc08      	pop	{r3}
 800a2c8:	469e      	mov	lr, r3
 800a2ca:	4770      	bx	lr
